-- phpMyAdmin SQL Dump
-- version 5.1.3
-- https://www.phpmyadmin.net/
--
-- 主机： 127.0.0.1
-- 生成日期： 2022-10-27 20:53:21
-- 服务器版本： 10.6.7-MariaDB-log
-- PHP 版本： 7.4.27

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- 数据库： `jikexingkong`
--

-- --------------------------------------------------------

--
-- 表的结构 `wp_ap_activity`
--

CREATE TABLE `wp_ap_activity` (
  `activity_id` bigint(20) UNSIGNED NOT NULL,
  `activity_action` varchar(45) NOT NULL,
  `activity_q_id` bigint(20) UNSIGNED NOT NULL,
  `activity_a_id` bigint(20) UNSIGNED DEFAULT NULL,
  `activity_c_id` bigint(20) UNSIGNED DEFAULT NULL,
  `activity_user_id` bigint(20) UNSIGNED NOT NULL,
  `activity_date` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- 转存表中的数据 `wp_ap_activity`
--

INSERT INTO `wp_ap_activity` (`activity_id`, `activity_action`, `activity_q_id`, `activity_a_id`, `activity_c_id`, `activity_user_id`, `activity_date`) VALUES
(1, 'new_q', 107, 0, 0, 1, '2021-10-30 18:34:01'),
(2, 'new_a', 107, 108, 0, 2, '2021-10-31 17:45:55'),
(3, 'selected', 107, 108, 0, 1, '2022-08-17 09:39:45'),
(4, 'unselected', 107, 108, 0, 1, '2022-08-17 09:39:49');

-- --------------------------------------------------------

--
-- 表的结构 `wp_ap_notifications`
--

CREATE TABLE `wp_ap_notifications` (
  `noti_id` bigint(20) NOT NULL,
  `noti_user_id` bigint(20) NOT NULL,
  `noti_actor` bigint(20) NOT NULL,
  `noti_parent` bigint(20) NOT NULL,
  `noti_ref_id` bigint(20) NOT NULL,
  `noti_ref_type` varchar(100) NOT NULL,
  `noti_verb` varchar(100) NOT NULL,
  `noti_date` timestamp NULL DEFAULT NULL,
  `noti_seen` tinyint(1) NOT NULL DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- 转存表中的数据 `wp_ap_notifications`
--

INSERT INTO `wp_ap_notifications` (`noti_id`, `noti_user_id`, `noti_actor`, `noti_parent`, `noti_ref_id`, `noti_ref_type`, `noti_verb`, `noti_date`, `noti_seen`) VALUES
(1, 1, 0, 0, 1, 'reputation', 'new_points', '2021-10-31 02:34:01', 0),
(2, 2, 0, 0, 3, 'reputation', 'new_points', '2021-11-01 01:45:55', 0),
(3, 1, 2, 107, 108, 'answer', 'new_answer', '2021-11-01 01:45:55', 0),
(4, 3, 0, 0, 4, 'reputation', 'new_points', '2021-11-01 05:22:00', 0);

-- --------------------------------------------------------

--
-- 表的结构 `wp_ap_qameta`
--

CREATE TABLE `wp_ap_qameta` (
  `post_id` bigint(20) NOT NULL,
  `selected_id` bigint(20) DEFAULT NULL,
  `comments` bigint(20) DEFAULT 0,
  `answers` bigint(20) DEFAULT 0,
  `ptype` varchar(100) DEFAULT NULL,
  `featured` tinyint(1) DEFAULT 0,
  `selected` tinyint(1) DEFAULT 0,
  `votes_up` bigint(20) DEFAULT 0,
  `votes_down` bigint(20) DEFAULT 0,
  `subscribers` text DEFAULT NULL,
  `views` bigint(20) DEFAULT 0,
  `closed` tinyint(1) DEFAULT 0,
  `flags` bigint(20) DEFAULT 0,
  `terms` longtext DEFAULT NULL,
  `attach` longtext DEFAULT NULL,
  `activities` longtext DEFAULT NULL,
  `fields` longtext DEFAULT NULL,
  `roles` varchar(100) DEFAULT NULL,
  `last_updated` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- 转存表中的数据 `wp_ap_qameta`
--

INSERT INTO `wp_ap_qameta` (`post_id`, `selected_id`, `comments`, `answers`, `ptype`, `featured`, `selected`, `votes_up`, `votes_down`, `subscribers`, `views`, `closed`, `flags`, `terms`, `attach`, `activities`, `fields`, `roles`, `last_updated`) VALUES
(107, 0, 0, 1, 'question', 0, 0, 0, 0, '1', 1728, 0, 0, '33', NULL, NULL, NULL, '1', '2022-08-17 17:39:49'),
(108, NULL, 0, 0, 'answer', 0, 0, 0, 0, '0', 0, 0, 0, NULL, NULL, 'a:3:{s:4:\"type\";s:10:\"new_answer\";s:7:\"user_id\";s:1:\"2\";s:4:\"date\";s:19:\"2021-11-01 09:45:55\";}', NULL, '2', '2022-08-17 17:39:49'),
(191, NULL, 0, 0, 'question', 0, 0, 0, 0, '0', 0, 0, 0, NULL, NULL, NULL, NULL, '1', NULL),
(200, NULL, 0, 0, 'question', 0, 0, 0, 0, '0', 0, 0, 0, NULL, NULL, NULL, NULL, '1', NULL),
(201, NULL, 0, 0, 'question', 0, 0, 0, 0, '0', 0, 0, 0, NULL, NULL, NULL, NULL, '1', NULL);

-- --------------------------------------------------------

--
-- 表的结构 `wp_ap_reputations`
--

CREATE TABLE `wp_ap_reputations` (
  `rep_id` bigint(20) NOT NULL,
  `rep_user_id` bigint(20) DEFAULT NULL,
  `rep_event` varchar(100) DEFAULT NULL,
  `rep_ref_id` bigint(20) DEFAULT NULL,
  `rep_date` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- 转存表中的数据 `wp_ap_reputations`
--

INSERT INTO `wp_ap_reputations` (`rep_id`, `rep_user_id`, `rep_event`, `rep_ref_id`, `rep_date`) VALUES
(1, 1, 'ask', 107, '2021-10-30 18:34:01'),
(2, 2, 'register', 2, '2021-10-30 21:06:59'),
(3, 2, 'answer', 108, '2021-10-31 17:45:55'),
(4, 3, 'register', 3, '2021-10-31 21:22:00'),
(5, 4, 'register', 4, '2021-11-23 06:35:02'),
(6, 5, 'register', 5, '2021-11-25 02:51:10'),
(7, 6, 'register', 6, '2021-12-22 23:47:50'),
(8, 7, 'register', 7, '2021-12-24 18:57:31'),
(9, 8, 'register', 8, '2022-01-17 05:56:57'),
(10, 9, 'register', 9, '2022-01-22 05:55:00'),
(11, 10, 'register', 10, '2022-01-23 01:25:30'),
(12, 11, 'register', 11, '2022-01-28 20:00:54'),
(13, 12, 'register', 12, '2022-02-10 03:42:39'),
(14, 13, 'register', 13, '2022-02-13 07:13:44'),
(15, 14, 'register', 14, '2022-02-14 21:24:00'),
(16, 15, 'register', 15, '2022-03-18 00:45:08'),
(17, 16, 'register', 16, '2022-03-26 07:33:37'),
(18, 17, 'register', 17, '2022-03-30 07:59:17'),
(19, 18, 'register', 18, '2022-03-30 08:14:04'),
(20, 19, 'register', 19, '2022-04-30 00:29:20'),
(21, 20, 'register', 20, '2022-05-07 03:52:07'),
(22, 21, 'register', 21, '2022-05-08 00:46:11'),
(23, 22, 'register', 22, '2022-05-23 23:38:28'),
(24, 23, 'register', 23, '2022-06-18 12:24:26'),
(26, 24, 'register', 24, '2022-07-01 06:20:41'),
(27, 25, 'register', 25, '2022-07-04 09:52:36'),
(28, 26, 'register', 26, '2022-07-13 06:57:38'),
(29, 27, 'register', 27, '2022-08-07 00:40:45'),
(33, 28, 'register', 28, '2022-09-02 00:00:21'),
(34, 29, 'register', 29, '2022-09-20 19:06:26'),
(35, 30, 'register', 30, '2022-09-28 19:12:54');

-- --------------------------------------------------------

--
-- 表的结构 `wp_ap_reputation_events`
--

CREATE TABLE `wp_ap_reputation_events` (
  `rep_events_id` bigint(20) UNSIGNED NOT NULL,
  `slug` varchar(100) NOT NULL,
  `icon` varchar(100) NOT NULL,
  `label` varchar(100) NOT NULL,
  `description` varchar(200) NOT NULL,
  `activity` varchar(200) NOT NULL,
  `parent` varchar(100) NOT NULL DEFAULT '',
  `points` int(5) NOT NULL DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- 转存表中的数据 `wp_ap_reputation_events`
--

INSERT INTO `wp_ap_reputation_events` (`rep_events_id`, `slug`, `icon`, `label`, `description`, `activity`, `parent`, `points`) VALUES
(1, 'register', '', '注册', '创建用户帐户时奖励的积分', '注册的', 'question', 10),
(2, 'ask', '', '提问', '当用户提问时获得的积分', '问了一个问题', 'question', 2),
(3, 'answer', '', '回答', '用户回答问题时获得的积分', '回答答案', 'answer', 5),
(4, 'comment', '', '评论', '用户对问题或答案发表评论时获得的积分', '评论了一个帖子', 'comment', 2),
(5, 'select_answer', '', '选择答案', '用户选择问题的答案时获得的积分', '选择一个最佳答案', 'question', 2),
(6, 'best_answer', '', '选择为最佳答案', '当用户的答案被选为最佳时获得的积分', '答案被选为最佳', 'answer', 10),
(7, 'received_vote_up', '', '得到赞成投票', '用户收到赞誉时获得的积分', '获得赞成票', '', 10),
(8, 'received_vote_down', '', '收到否决票', '用户收到不赞成票时获得的积分', '得到反对投票', '', -2),
(9, 'given_vote_up', '', '投票赞成', '用户给出赞成票时获得的分数', '投票赞成', '', 0),
(10, 'given_vote_down', '', '否决投票', '用户给出否决票时获得的分数', '否决投票', '', 0);

-- --------------------------------------------------------

--
-- 表的结构 `wp_ap_subscribers`
--

CREATE TABLE `wp_ap_subscribers` (
  `subs_id` bigint(20) UNSIGNED NOT NULL,
  `subs_user_id` bigint(20) UNSIGNED NOT NULL,
  `subs_ref_id` bigint(20) UNSIGNED NOT NULL,
  `subs_event` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- 转存表中的数据 `wp_ap_subscribers`
--

INSERT INTO `wp_ap_subscribers` (`subs_id`, `subs_user_id`, `subs_ref_id`, `subs_event`) VALUES
(1, 1, 107, 'question'),
(2, 2, 107, 'answer_108');

-- --------------------------------------------------------

--
-- 表的结构 `wp_ap_views`
--

CREATE TABLE `wp_ap_views` (
  `view_id` bigint(20) NOT NULL,
  `view_user_id` bigint(20) DEFAULT NULL,
  `view_type` varchar(100) DEFAULT NULL,
  `view_ref_id` bigint(20) DEFAULT NULL,
  `view_ip` varchar(39) DEFAULT NULL,
  `view_date` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 表的结构 `wp_ap_votes`
--

CREATE TABLE `wp_ap_votes` (
  `vote_id` bigint(20) NOT NULL,
  `vote_post_id` bigint(20) NOT NULL,
  `vote_user_id` bigint(20) NOT NULL,
  `vote_rec_user` bigint(20) NOT NULL,
  `vote_type` varchar(100) DEFAULT NULL,
  `vote_value` varchar(100) DEFAULT NULL,
  `vote_date` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 表的结构 `wp_commentmeta`
--

CREATE TABLE `wp_commentmeta` (
  `meta_id` bigint(20) UNSIGNED NOT NULL,
  `comment_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_520_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

-- --------------------------------------------------------

--
-- 表的结构 `wp_comments`
--

CREATE TABLE `wp_comments` (
  `comment_ID` bigint(20) UNSIGNED NOT NULL,
  `comment_post_ID` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `comment_author` tinytext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `comment_author_email` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT 0,
  `comment_approved` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_type` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'comment',
  `comment_parent` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `user_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- 转存表中的数据 `wp_comments`
--

INSERT INTO `wp_comments` (`comment_ID`, `comment_post_ID`, `comment_author`, `comment_author_email`, `comment_author_url`, `comment_author_IP`, `comment_date`, `comment_date_gmt`, `comment_content`, `comment_karma`, `comment_approved`, `comment_agent`, `comment_type`, `comment_parent`, `user_id`) VALUES
(2, 100, 'pincman', 'support@jikexingkong.com', 'https://jikexingkong.com', '118.166.13.206', '2021-11-13 22:16:50', '2021-11-13 14:16:50', 'testsdssdsd', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36', 'comment', 0, 1),
(3, 103, 'pincman', 'support@jikexingkong.com', 'https://jikexingkong.com', '124.91.243.141', '2021-11-13 22:17:11', '2021-11-13 14:17:11', 'sdfsdfsdfasdfasdf', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36', 'comment', 0, 1),
(4, 105, 'pincman', 'support@jikexingkong.com', 'https://jikexingkong.com', '124.91.243.141', '2021-11-13 22:17:34', '2021-11-13 14:17:34', 'gggggg', 0, '1', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36', 'comment', 0, 1),
(5, 100, 'Best Dating Site', 'hywuuwyxh3@gmail.com', 'http://bit.do/fSCue', '91.219.236.197', '2021-11-23 17:27:13', '2021-11-23 09:27:13', 'fenct3yu', 0, '0', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.132 Safari/537.36', 'comment', 0, 0),
(6, 101, 'Best Dating Site', '099gw22ntf@gmail.com', 'http://bit.do/fSCue', '107.189.3.60', '2021-11-23 17:28:12', '2021-11-23 09:28:12', '4n92hd0f', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.82 Safari/537.36 OPR/35.0.2066.37 (Edition Yx)', 'comment', 0, 0),
(7, 102, 'Best Dating Site', 'd5r4wgvevy@gmail.com', 'http://bit.do/fSCue', '185.220.101.164', '2021-11-23 17:28:43', '2021-11-23 09:28:43', '0unnv7m2', 0, '0', 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.111 YaBrowser/16.2.0.3540 Yowser/2.5 Safari/537.36', 'comment', 0, 0),
(8, 103, 'Best Dating Site', 'i5ev0urso7u9@gmail.com', 'http://bit.do/fSCue', '5.2.69.50', '2021-11-23 17:29:22', '2021-11-23 09:29:22', '4mc32qt', 0, '0', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.97 Safari/537.11', 'comment', 0, 0),
(9, 104, 'Best Dating Site', 'qpfk7ezx@gmail.com', 'http://bit.do/fSCue', '185.170.114.25', '2021-11-23 17:29:55', '2021-11-23 09:29:55', 'hv9whq', 0, '0', 'Mozilla/5.0 (Windows NT 5.1; rv:42.0) Gecko/20100101 Firefox/42.0', 'comment', 0, 0),
(10, 105, 'Best Dating Site', 'k60j2e4jo@gmail.com', 'http://bit.do/fSCue', '185.220.102.242', '2021-11-23 17:30:29', '2021-11-23 09:30:29', '6b6v9a3', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0', 'comment', 0, 0),
(11, 106, 'Best Dating Site', 'qb4m7c34scro@gmail.com', 'http://bit.do/fSCue', '212.192.246.95', '2021-11-23 17:31:16', '2021-11-23 09:31:16', '7db996b', 0, '0', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36 OPR/32.0.1948.69', 'comment', 0, 0),
(12, 100, '123', '123@qq.com', '', '120.238.248.18', '2021-12-05 01:04:13', '2021-12-04 17:04:13', 'nestjs的教程现在更新到哪了，后面还会更新吗', 0, '0', 'Mozilla/5.0 (Linux; Android 10; HarmonyOS; SEA-AL10; HMSCore 6.2.0.302) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.105 HuaweiBrowser/12.0.1.300 Mobile Safari/537.36', 'comment', 0, 0),
(13, 100, '123', '123@qq.com', '', '183.37.157.50', '2021-12-05 01:07:49', '2021-12-04 17:07:49', 'nestjs教程现在更新到哪了，后面的还会更新吗', 0, '0', 'Mozilla/5.0 (Linux; Android 10; HarmonyOS; SEA-AL10; HMSCore 6.2.0.302) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.105 HuaweiBrowser/12.0.1.300 Mobile Safari/537.36', 'comment', 0, 0),
(14, 135, 'futbol galata', 'lynwoodbannister@myfastmail.com', 'https://www.sporx.com/futbol-galatasaray', '213.142.149.105', '2022-02-01 02:41:13', '2022-01-31 18:41:13', 'Cruz, 48, remained in custody for the fatal stabbing of a fellow tenant last weekend, only a few days before the victim’s planned wedding day.\nThe slaying came as no surprise inside the Sand Castle apartment complex, where shaken residents recounted tales from the accused killer’s alleged years-long reign of terror.\n\n<a href=\"https://fimody.com/pubg-mobile-free-accounts/\" rel=\"nofollow ugc\">pubg mobile free account</a>', 0, '0', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3400.0 Iron Safari/537.36', 'comment', 0, 0),
(15, 135, 'haberler dunya', 'benitooxley@ownmail.net', 'https://www.bbc.com/sport/american-football', '213.142.149.105', '2022-02-02 10:07:27', '2022-02-02 02:07:27', 'His final game in the NFL was a 30-27 loss \nto the Los Angeles Rams in the play-offs, when his heroics \nnarrowly failed to pull off a sensational comeback from 27-3 down.\n<a href=\"https://www.bbc.com/sport/american-football/\" rel=\"nofollow ugc\">haberler dunya</a>', 0, '0', 'Mozilla/5.0 (X11; Linux x86_64; rv:52.9) Gecko/20100101 Goanna/3.4 Firefox/52.9 PaleMoon/27.9.0', 'comment', 0, 0),
(16, 100, 'נערות ליווי', 'e0r0ku89h@gmail.com', 'https://romantik69.co.il/', '109.70.100.34', '2022-03-21 08:24:35', '2022-03-21 00:24:35', 'Good day! I just wish to give you a huge thumbs up for your excellent information you have got here on this post. I am coming back to your blog for more soon. Good day! I just wish to give you a huge thumbs up for your excellent information you have got here on this post. I am coming back to your blog for more soon. <a href=\"https://romantik69.co.il/%d7%a0%d7%a2%d7%a8%d7%95%d7%aa-%d7%9c%d7%99%d7%95%d7%95%d7%99-%d7%91%d7%a8%d7%9e%d7%9c%d7%94/\" rel=\"nofollow ugc\">נערות ליווי ברמלה</a>', 0, '0', 'Mozilla/5.0 (X11; U; Linux i686; ru; rv:1.9.0.5) Gecko/2008121622 Ubuntu/8.10 (intrepid) Firefox/3.0.5', 'comment', 0, 0),
(17, 137, 'MaryTreaw', 'esselmn@aol.com', 'http://cheapcialis40mgprice.quest/', '5.188.210.93', '2022-03-30 07:16:37', '2022-03-29 23:16:37', '[url=http://onlinecialis20mgpills.quest/]where can i buy cialis tablets[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36', 'comment', 0, 0),
(18, 137, 'PaulTreaw', 'pehr@hotmail.com', 'http://viagragenericmedicineforsale.quest/', '5.188.210.93', '2022-03-30 15:32:25', '2022-03-30 07:32:25', '[url=http://genericviagratabsbuy.monster/]can you buy viagra over the counter in us[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; ) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36', 'comment', 0, 0),
(19, 137, 'JaneTreaw', 'lamonica@gmail.com', 'https://cheapviagradrugnorx.monster/', '5.188.210.92', '2022-03-31 04:35:35', '2022-03-30 20:35:35', '[url=https://buyviagradrugnoprescription.monster/]viagra 10 mg tablet[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36', 'comment', 0, 0),
(20, 137, 'MiaTreaw', 'foxybullrider@yahoo.com', 'https://viagra100rx.quest/', '5.188.210.92', '2022-03-31 05:03:21', '2022-03-30 21:03:21', '[url=https://buyviagra150mglowcost.monster/]cheap canadian viagra pharmacy[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(21, 137, 'JaneTreaw', 'garyleeislove@yahoo.com', 'https://buyviagradrugnoprescription.monster/', '5.188.210.92', '2022-03-31 18:54:23', '2022-03-31 10:54:23', '[url=https://buyviagramedicationwithoutprescription.monster/]viagra from india for sale[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36', 'comment', 0, 0),
(22, 137, 'PaulTreaw', 'hlough@mail.com', 'https://cialisxtabs.shop/', '5.188.210.93', '2022-04-03 18:09:04', '2022-04-03 10:09:04', '[url=https://cheapviagratabletsonline.monster/]sildenafil citrate pills[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36', 'comment', 0, 0),
(23, 137, 'AshTreaw', 'dsfgsdf@yahoo.com', 'http://viagra100lowcost.monster/', '5.188.210.21', '2022-04-04 03:23:24', '2022-04-03 19:23:24', '[url=http://buyviagra100withoutprescription.monster/]where to buy generic viagra over the counter[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(24, 137, 'IvyTreaw', 'liemhts@gmail.com', 'http://lasix.golf/', '5.188.210.92', '2022-04-05 16:48:21', '2022-04-05 08:48:21', '[url=http://prozacfluoxetine.monster/]prozac 1986[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4427.0 Safari/537.36', 'comment', 0, 0),
(25, 137, 'WimTreaw', 'sandramodzelevsky@gmail.com', 'http://malegrasildenafil.monster/', '5.188.210.21', '2022-04-06 02:11:52', '2022-04-05 18:11:52', '[url=http://innopranpropranolol.quest/]propranolol 100 mg[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36', 'comment', 0, 0),
(26, 137, 'MiaTreaw', 'terisa@outlook.com', 'http://paroxetinepaxil.monster/', '5.188.210.92', '2022-04-06 03:21:41', '2022-04-05 19:21:41', '[url=http://tadalafil.cyou/]buy tadalafil usa online[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36', 'comment', 0, 0),
(27, 137, 'UgoTreaw', 'calinq@gmail.com', 'http://ivermectingy.quest/', '5.188.210.21', '2022-04-06 23:44:46', '2022-04-06 15:44:46', '[url=http://feldenepiroxicam.monster/]piroxicam medicine[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36 Edg/90.0.818.42', 'comment', 0, 0),
(28, 137, 'BooTreaw', 'latrice@mail.com', 'http://sildenafilbtabs.com/', '5.188.210.21', '2022-04-07 02:05:49', '2022-04-06 18:05:49', '[url=http://desyrel.online/]trazodone hcl 50mg[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36', 'comment', 0, 0),
(29, 137, 'IvyTreaw', 'lesha@outlook.com', 'http://chloroquinearalen.quest/', '5.188.210.92', '2022-04-07 05:15:22', '2022-04-06 21:15:22', '[url=http://vpxlpills.monster/]buy vpxl[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36', 'comment', 0, 0),
(30, 137, 'SueTreaw', 'espanolman007@gmail.com', 'http://ordercialistabwithoutrx.quest/', '5.188.210.92', '2022-04-08 12:03:02', '2022-04-08 04:03:02', '[url=http://cheapcialisdrugwithnoprescription.quest/]tadalafil best price 40 mg[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36', 'comment', 0, 0),
(31, 137, 'MaryTreaw', 'wheelchairrecycler@aol.com', 'https://cialisonlinemedicinepharmacy.quest/', '5.188.210.93', '2022-04-09 15:32:41', '2022-04-09 07:32:41', '[url=https://ordercialis40mgtablet.quest/]tadalafil india price[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(32, 137, 'JaneTreaw', 'lusensky@mail.com', 'https://ivermectincn.quest/', '5.188.210.92', '2022-04-10 19:35:45', '2022-04-10 11:35:45', '[url=https://silagrasildenafil.quest/]silagra 100 mg uk[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(33, 137, 'AshTreaw', 'joshscribner17@hotmail.com', 'http://elimitepermethrin.monster/', '5.188.210.21', '2022-04-10 20:10:50', '2022-04-10 12:10:50', '[url=http://budesonidebudecort.quest/]budesonide 9 mg capsules[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4427.0 Safari/537.36', 'comment', 0, 0),
(34, 137, 'BooTreaw', 'charcol007@hotmail.com', 'http://flomaxnoroxin.quest/', '5.188.210.21', '2022-04-12 03:07:03', '2022-04-11 19:07:03', '[url=http://azithromycin.golf/]azithromycin 250 mg tabs[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36', 'comment', 0, 0),
(35, 137, 'WimTreaw', 'jcannon@hotmail.com', 'http://keflexcephalexin.monster/', '5.188.210.21', '2022-04-12 07:53:50', '2022-04-11 23:53:50', '[url=http://lasix.world/]order lasix online[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36', 'comment', 0, 0),
(36, 137, 'BooTreaw', 'juanitabat@mail.com', 'http://prednisone.guru/', '5.188.210.21', '2022-04-13 02:27:26', '2022-04-12 18:27:26', '[url=http://tetracyclinesumycin.monster/]can you buy tetracycline over the counter[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36', 'comment', 0, 0),
(37, 137, 'LisaTreaw', 'richardclark@gmail.com', 'http://propecia.solutions/', '5.188.210.93', '2022-04-13 03:27:31', '2022-04-12 19:27:31', '[url=http://ivermectinch.monster/]how to get ivermectin[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(38, 135, 'ក្រដាសប្រាក់មួយដុល្លារក្លែងក្លាយ', 'cherimeudell@gmail.com', 'https://www.rielcambodi.com/', '85.117.239.247', '2022-04-13 03:42:04', '2022-04-12 19:42:04', 'Wow! In the end I got a website from where I know how \nto truly take useful data regarding my study and knowledge.\n\nក្រដាសប្រាក់មួយដុល្លារក្លែងក្លាយ\n<a href=\"https://www.rielcambodi.com/\" rel=\"nofollow ugc\">ដុល្លារក្លែងក្លាយសម្រាប់លក់</a>', 0, '0', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:62.0) Gecko/20100101 Firefox/62.0', 'comment', 0, 0),
(39, 137, 'MiaTreaw', 'tommcwhorter@gmail.com', 'https://lyrica.online/', '5.188.210.92', '2022-04-13 15:52:11', '2022-04-13 07:52:11', '[url=https://ventolin.boutique/]ventolin cost usa[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(40, 137, 'LisaTreaw', 'paniagu@mail.com', 'http://doxycycline.solutions/', '5.188.210.93', '2022-04-13 21:20:10', '2022-04-13 13:20:10', '[url=http://lisinopril.works/]lisinopril india[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.86 Safari/537.36', 'comment', 0, 0),
(41, 137, 'IvyTreaw', 'ernie150@outlook.com', 'https://flomax.cyou/', '5.188.210.92', '2022-04-14 05:39:17', '2022-04-13 21:39:17', '[url=https://feldene.online/]where can i buy feldene gel[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36 Edg/90.0.818.49', 'comment', 0, 0),
(42, 137, 'IvyTreaw', 'cookie4u1117@gmail.com', 'https://lisinoprilx.com/', '5.188.210.92', '2022-04-15 18:44:16', '2022-04-15 10:44:16', '[url=https://sildenafil2022.com/]sildenafil where to buy[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36 Edg/90.0.818.49', 'comment', 0, 0),
(43, 137, 'JaneTreaw', 'bhenke28@mail.com', 'https://sildenafil2022.com/', '5.188.210.92', '2022-04-16 10:08:00', '2022-04-16 02:08:00', '[url=https://azithromycin.life/]azithromycin 4 pills[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36', 'comment', 0, 0),
(44, 137, 'MiaTreaw', 'ajweaver74@hotmail.com', 'https://divermectin.com/', '5.188.210.92', '2022-04-18 08:28:20', '2022-04-18 00:28:20', '[url=https://vardenafiltabs.com/]vardenafil hcl[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(45, 137, 'MarkTreaw', 'joachimking@aol.com', 'https://prednisone.shop/', '5.188.210.93', '2022-04-18 15:28:34', '2022-04-18 07:28:34', '[url=https://propecia.fun/]propecia purchase online canada[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36 Edg/90.0.818.42', 'comment', 0, 0),
(46, 100, 'נערות ליווי במרכז', 's8sba754@gmail.com', 'https://israel-lady.co.il/%D7%A0%D7%A2%D7%A8%D7%95%D7%AA-%D7%9C%D7%99%D7%95%D7%95%D7%99-%D7%91%D7%9E%D7%A8%D7%9B%D7%96/', '109.70.100.27', '2022-04-18 18:46:39', '2022-04-18 10:46:39', 'Right here is the perfect webpage for everyone who would like to understand this topic. You understand a whole lot its almost tough to argue with you (not that I really will need toÖHaHa). You certainly put a fresh spin on a subject that has been discussed for a long time. Wonderful stuff, just excellent!', 0, '0', 'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.23 Safari/537.36', 'comment', 0, 0),
(47, 137, 'SueTreaw', 'stevenjschwartz@aol.com', 'http://amoxicillintabs.com/', '5.188.210.92', '2022-04-18 22:57:59', '2022-04-18 14:57:59', '[url=http://vivermectin.com/]india ivermectin[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36 Edg/90.0.818.49', 'comment', 0, 0),
(48, 137, 'MarkTreaw', 'alicemp@yahoo.com', 'https://metformin.cyou/', '5.188.210.93', '2022-04-19 03:00:25', '2022-04-18 19:00:25', '[url=https://dutasterideavodart.quest/]avodart medication[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36', 'comment', 0, 0),
(49, 137, 'PaulTreaw', 'roni@outlook.com', 'https://mviagra.quest/', '5.188.210.93', '2022-04-19 07:44:02', '2022-04-18 23:44:02', '[url=https://amoxicillintabs.com/]amoxicillin 500 mg discount[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36', 'comment', 0, 0),
(50, 137, 'AshTreaw', 'voxangelica@mail.com', 'https://elimiteacticin.monster/', '5.188.210.21', '2022-04-19 18:09:47', '2022-04-19 10:09:47', '[url=https://avodart.cyou/]avodart discount[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36', 'comment', 0, 0),
(51, 137, 'WimTreaw', 'nery@outlook.com', 'https://baclofen.shop/', '5.188.210.21', '2022-04-21 14:00:53', '2022-04-21 06:00:53', '[url=https://allopurinoltab.com/]allopurinol[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36', 'comment', 0, 0),
(52, 137, 'UgoTreaw', 'debra@mail.com', 'https://zithromaxa.com/', '5.188.210.21', '2022-04-22 15:44:34', '2022-04-22 07:44:34', '[url=https://vardenafil.shop/]vardenafil in usa[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36', 'comment', 0, 0),
(53, 137, 'BooTreaw', 'jeffreystraayer@gmail.com', 'https://sumycintetracycline.monster/', '5.188.210.21', '2022-04-22 18:22:56', '2022-04-22 10:22:56', '[url=https://tadalafil2022.com/]tadalafil cipla[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(54, 137, 'MiaTreaw', 'mfaye@hotmail.com', 'http://cialisdrug.store/', '5.188.210.92', '2022-04-23 15:09:39', '2022-04-23 07:09:39', '[url=http://lasix.shop/]buy lasix online with mastercard[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(55, 137, 'UgoTreaw', 'jcookie@outlook.com', 'http://cialisxtabs.monster/', '5.188.210.21', '2022-04-24 23:10:22', '2022-04-24 15:10:22', '[url=http://synthroidtabs.com/]cost of synthroid 75 mcg[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(56, 137, 'MiaTreaw', 'jls22@yahoo.com', 'https://bactrim.cyou/', '5.188.210.92', '2022-04-25 02:59:54', '2022-04-24 18:59:54', '[url=https://dapoxetineavana.quest/]priligy south africa[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36 Edg/90.0.818.49', 'comment', 0, 0),
(57, 137, 'MaryTreaw', 'dortiz317@aol.com', 'https://cialisxtabs.monster/', '5.188.210.93', '2022-04-25 15:00:38', '2022-04-25 07:00:38', '[url=https://cialist.quest/]cialis 5mg for daily use[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36 Edg/90.0.818.46', 'comment', 0, 0),
(58, 137, 'IvyTreaw', 'fumiko@gmail.com', 'https://brandviagra.monster/', '5.188.210.92', '2022-04-26 08:41:51', '2022-04-26 00:41:51', '[url=https://budesonide.cyou/]budesonide brand[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36 Edg/90.0.818.46', 'comment', 0, 0),
(59, 137, 'WimTreaw', 'mnencka@aol.com', 'http://glucophage.cyou/', '5.188.210.21', '2022-04-26 11:56:19', '2022-04-26 03:56:19', '[url=http://ibuprofenmotrin.quest/]order motrin[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; ) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(60, 137, 'PaulTreaw', 'jonclare@aol.com', 'https://bactrim.cyou/', '5.188.210.93', '2022-04-26 13:17:09', '2022-04-26 05:17:09', '[url=https://lopressormetoprolol.quest/]lopressor 75 mg[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36', 'comment', 0, 0),
(61, 137, 'MaryTreaw', 'faubrick@mail.com', 'https://cialisjtab.quest/', '5.188.210.93', '2022-04-26 23:49:17', '2022-04-26 15:49:17', '[url=https://cialisjtab.quest/]buying tadalafil in mexico[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(62, 137, 'JaneTreaw', 'kieronbeckett@hotmail.com', 'https://prazosinminipress.monster/', '5.188.210.92', '2022-04-29 11:33:40', '2022-04-29 03:33:40', '[url=https://sildalissildenafiltadalafil.monster/]singapore sildalis[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36', 'comment', 0, 0),
(63, 137, 'AshTreaw', 'alva@outlook.com', 'https://pentoxifyllinetrental.monster/', '5.188.210.21', '2022-04-29 16:42:57', '2022-04-29 08:42:57', '[url=https://atomoxetine.cyou/]strattera 2016[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(64, 137, 'MiaTreaw', 'helgelothe@hotmail.com', 'https://viagra0.quest/', '5.188.210.92', '2022-04-30 20:24:34', '2022-04-30 12:24:34', '[url=https://drugstore.cfd/]canadian 24 hour pharmacy[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36 Edg/90.0.818.42', 'comment', 0, 0),
(65, 137, 'IvyTreaw', 'alleen@mail.com', 'https://retina.directory/', '5.188.210.92', '2022-05-01 01:49:17', '2022-04-30 17:49:17', '[url=https://cialisntabs.quest/]tadalafil 2.5 mg india[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36', 'comment', 0, 0),
(66, 137, 'PaulTreaw', 'abswcps50@gmail.com', 'https://viagrac.quest/', '5.188.210.93', '2022-05-03 07:53:16', '2022-05-02 23:53:16', '[url=https://atomoxetine.cyou/]strattera order online[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36', 'comment', 0, 0),
(67, 137, 'IvyTreaw', 'friendsofrigoberta@gmail.com', 'https://celebrex.cyou/', '5.188.210.92', '2022-05-04 04:46:38', '2022-05-03 20:46:38', '[url=https://propecia.works/]buy generic propecia uk[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36 Edg/90.0.818.42', 'comment', 0, 0),
(68, 137, 'MaryTreaw', 'paulneely@gmail.com', 'http://tretinoin.store/', '5.188.210.93', '2022-05-04 06:12:56', '2022-05-03 22:12:56', '[url=http://synthroid.store/]synthroid 100 pill[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; ) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(69, 137, 'JaneTreaw', 'poosuppark@yahoo.com', 'https://vermoxforsale.com/', '5.188.210.92', '2022-05-04 22:52:22', '2022-05-04 14:52:22', '[url=https://clonidine.cyou/]where can i buy clonidine[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36', 'comment', 0, 0),
(70, 137, 'MarkTreaw', 'joachimking@yahoo.com', 'http://onlinedrugstore.store/', '5.188.210.93', '2022-05-05 15:05:11', '2022-05-05 07:05:11', '[url=http://lexaprotabs.com/]buy lexapro from canada[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36 Edg/90.0.818.49', 'comment', 0, 0),
(71, 137, 'WimTreaw', 'bigike24@hotmail.com', 'http://propranolol.cyou/', '5.188.210.21', '2022-05-06 06:24:09', '2022-05-05 22:24:09', '[url=http://lexaprotabs.com/]lexapro 5[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36 Edg/90.0.818.46', 'comment', 0, 0),
(72, 137, 'JaneTreaw', 'kjafar0502@gmail.com', 'https://sildenafil.cfd/', '5.188.210.92', '2022-05-06 10:51:45', '2022-05-06 02:51:45', '[url=https://onlinedrugstore.cfd/]safe online pharmacies[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36', 'comment', 0, 0),
(73, 137, 'IvyTreaw', 'juniorbirdie@yahoo.com', 'https://propranolol.cyou/', '5.188.210.92', '2022-05-07 06:34:21', '2022-05-06 22:34:21', '[url=https://azithromycin.cfd/]buy azithromycin cheap online[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; ) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36', 'comment', 0, 0),
(74, 137, 'JaneTreaw', 'alancarzone@yahoo.com', 'https://methocarbamol.quest/', '5.188.210.92', '2022-05-07 07:30:33', '2022-05-06 23:30:33', '[url=https://vermoxforsale.com/]vermox tablet price in india[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36', 'comment', 0, 0),
(75, 137, 'SueTreaw', 'mildred@yahoo.com', 'https://clonidine.store/', '5.188.210.92', '2022-05-07 10:15:03', '2022-05-07 02:15:03', '[url=https://trazodone.best/]trazodone india[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36 Edg/90.0.818.49', 'comment', 0, 0),
(76, 137, 'IvyTreaw', 'gordonbraley@outlook.com', 'http://cheapcialis10norx.monster/', '5.188.210.92', '2022-05-08 02:55:43', '2022-05-07 18:55:43', '[url=http://onlinecialis5lowcost.quest/]cialis australia over the counter[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(77, 137, 'MaryTreaw', 'rzinnecker@gmail.com', 'https://onlinecialisbuygeneric.monster/', '5.188.210.93', '2022-05-09 03:56:11', '2022-05-08 19:56:11', '[url=https://buygenericcialis20.monster/]where can you buy cialis over the counter[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36 Edg/90.0.818.46', 'comment', 0, 0),
(78, 137, 'BooTreaw', 'kwalls1@yahoo.com', 'https://ordercialis5withoutprescription.monster/', '5.188.210.21', '2022-05-09 04:33:19', '2022-05-08 20:33:19', '[url=https://bestcialis5mgcost.monster/]best place to buy cialis[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36 Edg/90.0.818.42', 'comment', 0, 0),
(79, 137, 'MarkTreaw', 'russd0077@gmail.com', 'https://ordercialis5lowcost.monster/', '5.188.210.93', '2022-05-10 23:09:25', '2022-05-10 15:09:25', '[url=https://buycialis5price.quest/]5mg cialis from canada[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(80, 137, 'WimTreaw', 'andrewz@yahoo.com', 'http://genericcialisonlinepharmacy.quest/', '5.188.210.21', '2022-05-12 01:29:29', '2022-05-11 17:29:29', '[url=http://buycialistabwithoutprescription.monster/]can i buy cialis online[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(81, 137, 'MiaTreaw', 'alemaire32@hotmail.com', 'https://onlineviagra50mgtabs.quest/', '5.188.210.92', '2022-05-12 01:45:39', '2022-05-11 17:45:39', '[url=https://buycialis5mgprice.quest/]tadalafil 20mg online[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36 Edg/90.0.818.39', 'comment', 0, 0),
(82, 137, 'UgoTreaw', 'spendola@aol.com', 'http://cheapviagra100bestprice.monster/', '5.188.210.21', '2022-05-12 03:00:02', '2022-05-11 19:00:02', '[url=http://buyviagra150mgnorx.quest/]how to buy viagra from india[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36 Edg/90.0.818.46', 'comment', 0, 0),
(83, 137, 'JaneTreaw', 'woozle31@outlook.com', 'https://bestviagra100mgtab.monster/', '5.188.210.92', '2022-05-12 12:24:42', '2022-05-12 04:24:42', '[url=https://onlineviagra100tablet.monster/]where can i buy viagra with paypal[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36 Edg/90.0.818.46', 'comment', 0, 0),
(84, 137, 'IvyTreaw', 'zstenroos@yahoo.com', 'https://orderviagra2021.monster/', '5.188.210.92', '2022-05-13 13:26:30', '2022-05-13 05:26:30', '[url=https://cialisonlinedrugpharmacy.monster/]cialis 2.5 mg tablet[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(85, 137, 'AshTreaw', 'qcash@aol.com', 'https://wellbutrin.store/', '5.188.210.21', '2022-05-14 03:14:42', '2022-05-13 19:14:42', '[url=https://finasteride.works/]buy propecia cheap online[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36', 'comment', 0, 0),
(86, 137, 'PaulTreaw', 'epaules@aol.com', 'http://lasix.sale/', '5.188.210.93', '2022-05-14 06:48:22', '2022-05-13 22:48:22', '[url=http://buyantibiotics.shop/]erythromycin 500 mg price[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36 Edg/90.0.818.46', 'comment', 0, 0),
(87, 137, 'MiaTreaw', 'kbehrens@mail.com', 'http://buypropecia.shop/', '5.188.210.92', '2022-05-14 15:52:01', '2022-05-14 07:52:01', '[url=http://levitra.cfd/]vardenafil 40 mg india[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(88, 137, 'PaulTreaw', 'barbo34@aol.com', 'http://onlinedrugstore.shop/', '5.188.210.93', '2022-05-16 20:34:51', '2022-05-16 12:34:51', '[url=http://augmentin.shop/]augmentin best price[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; ) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(89, 137, 'LisaTreaw', 'nora@aol.com', 'http://drugstore.works/', '5.188.210.93', '2022-05-17 00:44:54', '2022-05-16 16:44:54', '[url=http://plavix.store/]buying plavix online[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.86 Safari/537.36', 'comment', 0, 0),
(90, 137, 'MiaTreaw', 'helgelothe@yahoo.com', 'http://pharmacyonline.cfd/', '5.188.210.92', '2022-05-17 03:50:39', '2022-05-16 19:50:39', '[url=http://drugstore.works/]ez pharmacy[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36 Edg/90.0.818.49', 'comment', 0, 0),
(91, 137, 'IvyTreaw', 'rykyam@yahoo.com', 'http://lasix.sale/', '5.188.210.92', '2022-05-18 00:04:44', '2022-05-17 16:04:44', '[url=http://finasteride.works/]propecia prescription online[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(92, 137, 'UgoTreaw', 'roselia@gmail.com', 'http://effexor.online/', '5.188.210.21', '2022-05-18 05:00:03', '2022-05-17 21:00:03', '[url=http://ivermectin.ink/]ivermectin 4[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(93, 137, 'SueTreaw', 'skotina@hotmail.com', 'https://prednisolone.best/', '5.188.210.92', '2022-05-18 13:17:23', '2022-05-18 05:17:23', '[url=https://buyclomid.shop/]clomid india pharmacy[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36 Edg/90.0.818.42', 'comment', 0, 0),
(94, 137, 'WimTreaw', 'janyce@gmail.com', 'http://prednisolone.best/', '5.188.210.21', '2022-05-21 10:57:50', '2022-05-21 02:57:50', '[url=http://ivermectin.ink/]ivermectin virus[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.86 Safari/537.36', 'comment', 0, 0),
(95, 137, 'SueTreaw', 'kiko9000@mail.com', 'https://finasteride.digital/', '5.188.210.92', '2022-05-22 04:14:33', '2022-05-21 20:14:33', '[url=https://albuterol.guru/]albuterol 063[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4427.0 Safari/537.36', 'comment', 0, 0),
(96, 137, 'MiaTreaw', 'dondolce@hotmail.com', 'https://ivermectin.world/', '5.188.210.92', '2022-05-22 20:26:59', '2022-05-22 12:26:59', '[url=https://ivermectin.fyi/]ivermectin gel[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; ) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36', 'comment', 0, 0),
(97, 137, 'JaneTreaw', 'snorwai@mail.com', 'https://buyprednisone.shop/', '5.188.210.91', '2022-05-23 11:40:53', '2022-05-23 03:40:53', '[url=https://prednisolone.best/]prednisolone 25[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36 Edg/90.0.818.49', 'comment', 0, 0),
(98, 137, 'LisaTreaw', 'gregorygeliver@outlook.com', 'https://doxycycline.directory/', '5.188.210.93', '2022-05-24 04:36:12', '2022-05-23 20:36:12', '[url=https://vardenafil.digital/]levitra 20mg online[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36 Edg/90.0.818.49', 'comment', 0, 0),
(99, 137, 'MaryTreaw', 'krai25@hotmail.com', 'https://metformin.works/', '5.188.210.93', '2022-05-24 10:45:04', '2022-05-24 02:45:04', '[url=https://ivermectin.dog/]ivermectin 8000[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(100, 137, 'BooTreaw', 'dianalynnceleste@mail.com', 'https://lisinopril.best/', '5.188.210.21', '2022-05-24 14:30:28', '2022-05-24 06:30:28', '[url=https://ivermectin.science/]generic ivermectin[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; ) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36', 'comment', 0, 0),
(101, 137, 'MiaTreaw', 'jmiller1728@yahoo.com', 'https://ivermectin.fyi/', '5.188.210.91', '2022-05-25 00:32:02', '2022-05-24 16:32:02', '[url=https://clomid.digital/]clomid 50mg tablets[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36 Edg/90.0.818.39', 'comment', 0, 0),
(102, 137, 'WimTreaw', 'coetakahashi@aol.com', 'https://vardenafil.digital/', '5.188.210.21', '2022-05-26 12:11:24', '2022-05-26 04:11:24', '[url=https://zoloft.boutique/]buy zoloft online no prescription[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36', 'comment', 0, 0),
(103, 137, 'SueTreaw', 'shanzaakbar@aol.com', 'https://onlinecialistabletwithoutrx.quest/', '5.188.210.91', '2022-05-27 07:15:19', '2022-05-26 23:15:19', '[url=https://bestcialispillswithoutrx.monster/]cialis 50mg price[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36 Edg/90.0.818.46', 'comment', 0, 0),
(104, 137, 'UgoTreaw', 'mamafin58@yahoo.com', 'https://cephalexin.cfd/', '5.188.210.21', '2022-05-27 10:33:52', '2022-05-27 02:33:52', '[url=https://ivermectin.democrat/]buy stromectol canada[/url]', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36', 'comment', 0, 0),
(105, 105, 'sunnyvale health &amp; fitness', 'Holzner@yahoo.com', 'http://www.topratedlocal.com/push-personal-fitness-llc-reviews', '192.3.152.250', '2022-05-27 15:51:55', '2022-05-27 07:51:55', 'What is the easiest way to copy my WordPress blogs to a new hosting company?', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36', 'comment', 0, 0),
(106, 154, '1', '11111111@11.com', 'http://1', '43.154.60.123', '2022-05-28 16:44:16', '2022-05-28 08:44:16', '1', 0, '0', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5032.0 Safari/537.36 Edg/103.0.1255.0', 'comment', 0, 0),
(107, 100, 'דירות דיסקרטיות בבת ים', 'ml7ix7xmu@gmail.com', 'https://israelnightclub.com/apartments/%D7%93%D7%99%D7%A8%D7%95%D7%AA-%D7%93%D7%99%D7%A1%D7%A7%D7%A8%D7%98%D7%99%D7%95%D7%AA-%D7%91%D7%91%D7%AA-%D7%99%D7%9D/', '62.171.170.254', '2022-07-20 01:16:22', '2022-07-19 17:16:22', 'Can I just say what a comfort to find somebody who truly understands what theyre talking about on the net. You certainly understand how to bring a problem to light and make it important. A lot more people really need to look at this and understand this side of the story. I cant believe youre not more popular because you definitely possess the gift.', 0, '0', 'Mozilla/5.0 (Windows NT 6.2; ARM; Trident/7.0; Touch; rv:11.0; WPDesktop; Lumia 925) like Gecko', 'comment', 0, 0),
(108, 102, 'דירות דיסקרטיות בבת ים', 'dovwerv3gb@gmail.com', 'https://israelnightclub.com/apartments/%D7%93%D7%99%D7%A8%D7%95%D7%AA-%D7%93%D7%99%D7%A1%D7%A7%D7%A8%D7%98%D7%99%D7%95%D7%AA-%D7%91%D7%91%D7%AA-%D7%99%D7%9D/', '45.72.45.172', '2022-07-20 01:17:19', '2022-07-19 17:17:19', 'Can I just say what a comfort to find somebody who truly understands what theyre talking about on the net. You certainly understand how to bring a problem to light and make it important. A lot more people really need to look at this and understand this side of the story. I cant believe youre not more popular because you definitely possess the gift.', 0, '0', 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.134 Safari/537.36', 'comment', 0, 0),
(109, 103, 'דירות דיסקרטיות בבת ים', '4fjh6g95y@gmail.com', 'https://israelnightclub.com/apartments/%D7%93%D7%99%D7%A8%D7%95%D7%AA-%D7%93%D7%99%D7%A1%D7%A7%D7%A8%D7%98%D7%99%D7%95%D7%AA-%D7%91%D7%91%D7%AA-%D7%99%D7%9D/', '88.218.148.243', '2022-07-20 01:17:40', '2022-07-19 17:17:40', 'Can I just say what a comfort to find somebody who truly understands what theyre talking about on the net. You certainly understand how to bring a problem to light and make it important. A lot more people really need to look at this and understand this side of the story. I cant believe youre not more popular because you definitely possess the gift.', 0, '0', 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.73 YaBrowser/16.2.0.2568 (beta) Yowser/2.5 Safari/537.36', 'comment', 0, 0),
(110, 104, 'דירות דיסקרטיות בבת ים', '1po74ufs5@gmail.com', 'https://israelnightclub.com/apartments/%D7%93%D7%99%D7%A8%D7%95%D7%AA-%D7%93%D7%99%D7%A1%D7%A7%D7%A8%D7%98%D7%99%D7%95%D7%AA-%D7%91%D7%91%D7%AA-%D7%99%D7%9D/', '88.218.149.170', '2022-07-20 01:18:06', '2022-07-19 17:18:06', 'Can I just say what a comfort to find somebody who truly understands what theyre talking about on the net. You certainly understand how to bring a problem to light and make it important. A lot more people really need to look at this and understand this side of the story. I cant believe youre not more popular because you definitely possess the gift.', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 YaBrowser/15.10.2454.3821 Yowser/2.5 Safari/537.36', 'comment', 0, 0),
(111, 105, 'דירות דיסקרטיות בבת ים', 'f4jigz4k@gmail.com', 'https://israelnightclub.com/apartments/%D7%93%D7%99%D7%A8%D7%95%D7%AA-%D7%93%D7%99%D7%A1%D7%A7%D7%A8%D7%98%D7%99%D7%95%D7%AA-%D7%91%D7%91%D7%AA-%D7%99%D7%9D/', '95.111.239.65', '2022-07-20 01:18:21', '2022-07-19 17:18:21', 'Can I just say what a comfort to find somebody who truly understands what theyre talking about on the net. You certainly understand how to bring a problem to light and make it important. A lot more people really need to look at this and understand this side of the story. I cant believe youre not more popular because you definitely possess the gift.', 0, '0', 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0; Touch; MASEJS)', 'comment', 0, 0),
(112, 106, 'Google Sites', 'laureldhakiyarr@gmail.com', 'https://sites.google.com/view/best-ai-content-writing-tools/home', '104.144.89.33', '2022-08-21 17:53:18', '2022-08-21 09:53:18', 'Are you writing the articles in your website \nyourself or you outsource them? I am a blogger \nand having difficulty with content. Other bloggers told me I should use an AI \ncontent writer, they are actually pretty good. Here is a sample article some bloggers shared with me.\nPlease let me know what your opinion on it and should I go ahead and use AI - https://sites.google.com/view/best-ai-content-writing-tools/home', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; WOW64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36 OPR/89.0.4447.51', 'comment', 0, 0),
(113, 100, 'מגוון רחב של דירות דיסקרטיות', '8az9ecgz@gmail.com', 'https://israelnightclub.com/apartments/%D7%93%D7%99%D7%A8%D7%95%D7%AA-%D7%93%D7%99%D7%A1%D7%A7%D7%A8%D7%98%D7%99%D7%95%D7%AA/', '156.238.5.103', '2022-08-26 04:39:21', '2022-08-25 20:39:21', 'Very good post. I certainly appreciate this site. Continue the good work!', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.110 Safari/537.36 CoolNovo/2.0.9.20', 'comment', 0, 0),
(114, 101, 'מגוון רחב של דירות דיסקרטיות', 'bwc14oojok@gmail.com', 'https://israelnightclub.com/apartments/%D7%93%D7%99%D7%A8%D7%95%D7%AA-%D7%93%D7%99%D7%A1%D7%A7%D7%A8%D7%98%D7%99%D7%95%D7%AA/', '156.238.5.103', '2022-08-26 04:39:46', '2022-08-25 20:39:46', 'Very good post. I certainly appreciate this site. Continue the good work!', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.110 Safari/537.36 CoolNovo/2.0.9.20', 'comment', 0, 0),
(115, 102, 'מגוון רחב של דירות דיסקרטיות', 'dxcoodl6@gmail.com', 'https://israelnightclub.com/apartments/%D7%93%D7%99%D7%A8%D7%95%D7%AA-%D7%93%D7%99%D7%A1%D7%A7%D7%A8%D7%98%D7%99%D7%95%D7%AA/', '156.238.5.103', '2022-08-26 04:40:09', '2022-08-25 20:40:09', 'Very good post. I certainly appreciate this site. Continue the good work!', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.110 Safari/537.36 CoolNovo/2.0.9.20', 'comment', 0, 0),
(116, 103, 'מגוון רחב של דירות דיסקרטיות', 'sq2snpv0@gmail.com', 'https://israelnightclub.com/apartments/%D7%93%D7%99%D7%A8%D7%95%D7%AA-%D7%93%D7%99%D7%A1%D7%A7%D7%A8%D7%98%D7%99%D7%95%D7%AA/', '156.238.5.103', '2022-08-26 04:40:25', '2022-08-25 20:40:25', 'Very good post. I certainly appreciate this site. Continue the good work!', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.110 Safari/537.36 CoolNovo/2.0.9.20', 'comment', 0, 0),
(117, 104, 'מגוון רחב של דירות דיסקרטיות', 'sy55sma@gmail.com', 'https://israelnightclub.com/apartments/%D7%93%D7%99%D7%A8%D7%95%D7%AA-%D7%93%D7%99%D7%A1%D7%A7%D7%A8%D7%98%D7%99%D7%95%D7%AA/', '156.238.5.103', '2022-08-26 04:40:44', '2022-08-25 20:40:44', 'Very good post. I certainly appreciate this site. Continue the good work!', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.110 Safari/537.36 CoolNovo/2.0.9.20', 'comment', 0, 0),
(118, 106, 'מגוון רחב של דירות דיסקרטיות', '4l90uq@gmail.com', 'https://israelnightclub.com/apartments/%D7%93%D7%99%D7%A8%D7%95%D7%AA-%D7%93%D7%99%D7%A1%D7%A7%D7%A8%D7%98%D7%99%D7%95%D7%AA/', '156.238.5.103', '2022-08-26 04:41:08', '2022-08-25 20:41:08', 'Very good post. I certainly appreciate this site. Continue the good work!', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.110 Safari/537.36 CoolNovo/2.0.9.20', 'comment', 0, 0),
(119, 100, 'דירות דיסקרטיות בצפון', 'lm87m22u@gmail.com', 'https://www.israelxclub.co.il/girls-cat/%D7%93%D7%99%D7%A8%D7%95%D7%AA-%D7%93%D7%99%D7%A1%D7%A7%D7%A8%D7%98%D7%99%D7%95%D7%AA-%D7%91%D7%97%D7%99%D7%A4%D7%94/', '179.61.248.144', '2022-09-06 07:50:16', '2022-09-05 23:50:16', 'You ought to take part in a contest for one of the best websites on the net. I am going to recommend this website!', 0, '0', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Maxthon/4.4.6.1000 Chrome/30.0.1599.101 Safari/537.36', 'comment', 0, 0),
(120, 106, 'Mark', 'alcodato1970@gmail.com', 'https://tnr69-00.top/', '188.134.68.55', '2022-09-10 07:33:22', '2022-09-09 23:33:22', 'Thanks for your blog, nice to read. Do not stop.', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36', 'comment', 0, 0),
(121, 106, 'Did Queen Elizabeth Die', 'amandaedelson@gawab.com', 'http://buskaz.com/index.php?page=user&amp;action=pub_profile&amp;id=1015', '192.3.24.119', '2022-09-11 16:30:13', '2022-09-11 08:30:13', 'Hiya very cool site!! Guy .. Beautiful ..\nAmazing .. I will bookmark your site and take the feeds also?\nI am happy to find a lot of helpful info right here within the publish, we\'d like work \nout more techniques on this regard, thank you for sharing.\n. . . . .\n\nhttps://technoluddites.org/wiki/index.php/User:BillPrescott \nhttps://technoluddites.org/wiki/index.php/User:ElviaGillette \nhttps://bbarlock.com/index.php/User:InesTuttle95926 \nhttps://mybafo.com/index.php?page=user&amp;action=pub_profile&amp;id=102786 \nhttp://firmidablewiki.com/index.php/Queen_Elizabeth_Dead \nhttps://sleepbegone.com/index.php/Queen_Elizabeth_Death', 0, '0', 'Mozilla/5.0 (X11; Linux i686; rv:102.0) Gecko/20100101 Firefox/102.0', 'comment', 0, 0),
(122, 100, 'Israel night club', 'zxmw9hztr@gmail.com', 'https://israelnightclub.com/apartments/%d7%93%d7%99%d7%a8%d7%95%d7%aa-%d7%93%d7%99%d7%a1%d7%a7%d7%a8%d7%98%d7%99%d7%95%d7%aa-%d7%91%d7%97%d7%99%d7%a4%d7%94/', '138.128.106.214', '2022-09-20 12:06:53', '2022-09-20 04:06:53', 'Everything is very open with a clear description of the issues. It was really informative. Your website is useful. Thanks for sharing!', 0, '0', 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0; MASPJS)', 'comment', 0, 0),
(123, 106, 'Radiant Flawless Skin Serum Price', 'leifferris@web.de', 'http://www.kiriki-net.com/?attachment_id=623', '186.179.18.159', '2022-09-28 11:31:02', '2022-09-28 03:31:02', 'I\'m honored to get a call from a friend as he observed the important suggestions shared on the site.\n\nLooking at your blog write-up is a real great experience.\n\nMany thanks for taking into account readers much like me, and I would like for you the \nbest of success as being a professional in this field.\n\nAlso visit my web-site; <a href=\"http://www.kiriki-net.com/?attachment_id=623\" rel=\"nofollow ugc\">Radiant Flawless Skin Serum Price</a>', 0, '0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; Xbox; Xbox One) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36 Edge/44.18363.8131', 'comment', 0, 0),
(124, 106, 'Radiant Flawless Skin Serum Price', 'ivey_pulsford@web.de', 'https://natchez-history.com/nhodp/index.php/Tips_On_Anti_Aging_Products_For_Sensitive_Skin', '45.170.14.226', '2022-09-28 11:41:07', '2022-09-28 03:41:07', 'You ought to be a part of a contest for one of the highest quality sites on the net.\n\nI am going to highly recommend this blog!\n\nAlso visit my web site - <a href=\"https://natchez-history.com/nhodp/index.php/Tips_On_Anti_Aging_Products_For_Sensitive_Skin\" rel=\"nofollow ugc\">Radiant Flawless Skin Serum Price</a>', 0, '0', 'Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:102.0) Gecko/20100101 Firefox/102.0', 'comment', 0, 0);

-- --------------------------------------------------------

--
-- 表的结构 `wp_links`
--

CREATE TABLE `wp_links` (
  `link_id` bigint(20) UNSIGNED NOT NULL,
  `link_url` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_name` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_image` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_target` varchar(25) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_description` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_visible` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) UNSIGNED NOT NULL DEFAULT 1,
  `link_rating` int(11) NOT NULL DEFAULT 0,
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_notes` mediumtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `link_rss` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT ''
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- 转存表中的数据 `wp_links`
--

INSERT INTO `wp_links` (`link_id`, `link_url`, `link_name`, `link_image`, `link_target`, `link_description`, `link_visible`, `link_owner`, `link_rating`, `link_updated`, `link_rel`, `link_notes`, `link_rss`) VALUES
(1, 'https://ts.xcatliu.com/', 'Typescript入门教程', 'https://pic.pincman.com/media/20210421070524.png', '_blank', 'TS入门必备教材', 'Y', 1, 1, '0000-00-00 00:00:00', '', '', ''),
(2, 'https://es6.ruanyifeng.com/', 'ES6+入门教程', 'https://pic.pincman.com/media/20210421065131.png', '_blank', '阮一峰写的ES6+入门电子书', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(3, 'https://jkchao.github.io/typescript-book-chinese/', '深入理解Typescript', 'https://pic.pincman.com/media/20210430001227.png', '_blank', 'TS中文查询手册', 'Y', 1, 2, '0000-00-00 00:00:00', '', '', ''),
(4, 'https://zh-hans.reactjs.org/', 'React ✍️🔥🔥🔥', 'https://pic.pincman.com/media/20210421081928.jpeg', '_blank', '最流行的前端渲染库', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(5, 'https://cn.vitejs.dev/', 'vitejs 🇨🇳🔥🔥🔥', 'https://pic.pincman.com/media/20210421071103.svg', '_blank', '基于esbuild+rollup的前端脚手架', 'Y', 1, 1, '0000-00-00 00:00:00', '', '', ''),
(6, 'https://www.webpackjs.com/', 'webpack ✍️🔥🔥', 'https://pic.pincman.com/media/20210421082137.jpg', '_blank', '最流行的TS应用打包工具', 'Y', 1, 2, '0000-00-00 00:00:00', '', '', ''),
(7, 'https://recoil.js.cn/', 'recoil ✍️', 'https://pic.pincman.com/media/20210421111720.svg', '_blank', 'FB出品的React状态管理库', 'Y', 1, 2, '0000-00-00 00:00:00', '', '', ''),
(8, 'https://rematchjs.org/', 'Rematch 🔥🔥', 'https://pic.pincman.com/media/20210421111628.svg', '_blank', 'Redux的最佳实践封装库', 'Y', 1, 3, '0000-00-00 00:00:00', '', '', ''),
(9, 'https://mobx.js.org/README.html', 'Mobx 🔥', 'https://pic.pincman.com/media/20210421111945.png', '_blank', '另一种思想的react状态管理库', 'Y', 1, 4, '0000-00-00 00:00:00', '', '', ''),
(10, 'https://reactrouter.com/web/guides/quick-start', 'React Router 🔥🔥🔥', 'https://pic.pincman.com/media/20210421134753.png', '_blank', 'React路由实现模块', 'Y', 1, 1, '0000-00-00 00:00:00', '', '', ''),
(12, 'https://create-react-app.dev/', 'Create React App ✍️🔥🔥', 'https://pic.pincman.com/media/20210421110043.png', '_blank', 'React官方脚手架', 'Y', 1, 3, '0000-00-00 00:00:00', '', '', ''),
(14, 'https://ant-design.gitee.io/index-cn', 'Ant Design 🇨🇳✍️🔥🔥🔥', 'https://pic.pincman.com/media/20210421132912.png', '_blank', '蚂蚁开源的前端UI组件库', 'Y', 1, 5, '0000-00-00 00:00:00', '', '', ''),
(15, 'https://procomponents.ant.design/', 'pro components 官网中文', '', '_blank', '基于antd的页面级react组件库', 'Y', 1, 10, '0000-00-00 00:00:00', '', '', ''),
(16, 'https://www.nextjs.cn/', 'Nextjs ✍️🔥🔥', 'https://pic.pincman.com/media/20210421131718.svg', '_blank', '最好用的react ssr脚手架', 'Y', 1, 7, '0000-00-00 00:00:00', '', '', ''),
(17, 'https://www.tailwindcss.cn/', 'Tailwindcss ✍️🔥🔥', 'https://pic.pincman.com/media/20210421132658.png', '_blank', '用纯类名的方式写css样式', 'Y', 1, 4, '0000-00-00 00:00:00', '', '', ''),
(18, 'https://material-ui.com/zh/', 'material-ui ✍️🔥🔥', 'https://pic.pincman.com/media/20210421133029.svg', '_blank', '更适合写前台页面的react组件库', 'Y', 1, 6, '0000-00-00 00:00:00', '', '', ''),
(19, 'https://swr.vercel.app/zh-CN', 'swr.js ✍️🔥🔥🔥', 'https://pic.pincman.com/media/20210421131919.svg', '_blank', '最完美的react数据请求库', 'Y', 1, 8, '0000-00-00 00:00:00', '', '', ''),
(20, 'https://react.i18next.com/', 'React I18next ✍️🔥🔥🔥', 'https://pic.pincman.com/media/20210421133203.png', '_blank', '实现react应用国际化的组件库', 'Y', 1, 9, '0000-00-00 00:00:00', '', '', ''),
(21, 'https://ahooks.js.org/', 'ahooks 🇨🇳🔥', 'https://pic.pincman.com/media/20210421133521.svg', '_blank', '蚂蚁出品的react hooks集合', 'Y', 1, 10, '0000-00-00 00:00:00', '', '', ''),
(22, 'https://github.com/beautifulinteractions/beautiful-react-hooks/blob/master/docs/README.zh-CN.md', 'beautiful-react-hooks 🇨🇳🔥🔥🔥', 'https://pic.pincman.com/media/20210421133736.png', '_blank', '最好用的第三方hooks工具集', 'Y', 1, 1, '0000-00-00 00:00:00', '', '', ''),
(23, 'https://github.com/umijs/umi-request', 'umi-request 🇨🇳✍️🔥', 'https://pic.pincman.com/media/20210421132251.png', '_blank', 'umi系列的请求库', 'Y', 1, 10, '0000-00-00 00:00:00', '', '', ''),
(24, 'https://charts.ant.design/', 'antd charts 🇨🇳🔥', 'https://pic.pincman.com/media/20210421134058.png', '_blank', '一个蚂蚁出的数据可视化React组件库', 'Y', 1, 10, '0000-00-00 00:00:00', '', '', ''),
(25, 'https://dayjs.gitee.io/zh-CN', 'dayjs 🇨🇳✍️🔥🔥🔥', 'https://pic.pincman.com/media/20210421135033.png', '_blank', '最好用的node时间库', 'Y', 1, 10, '0000-00-00 00:00:00', '', '', ''),
(26, 'http://echarts.apache.org/zh/index.html', 'echarts 🇨🇳🔥🔥', 'https://pic.pincman.com/media/20210421133900.png', '_blank', '百度开源的数据图表库', 'Y', 1, 10, '0000-00-00 00:00:00', '', '', ''),
(27, 'https://umijs.org/', 'umijs 🇨🇳', 'https://pic.pincman.com/media/20210421132419.png', '_blank', '蚂蚁出品的react脚手架', 'Y', 1, 10, '0000-00-00 00:00:00', '', '', ''),
(28, 'https://beta-pro.ant.design/index-cn', 'Antd Pro5 🇨🇳', 'https://pic.pincman.com/media/20210421132912.png', '_blank', '快速搭建中后台系统的React管理面板', 'Y', 1, 10, '0000-00-00 00:00:00', '', '', ''),
(29, 'https://localforage.docschina.org/', 'localforage ✍️🔥🔥🔥', 'https://pic.pincman.com/media/20210421133351.png', '_blank', '最优秀的浏览器数据库管理类库', 'Y', 1, 10, '0000-00-00 00:00:00', '', '', ''),
(30, 'https://lodash.net/docs/4.16.1.html', 'Lodash ✍️🔥🔥🔥', 'https://pic.pincman.com/media/20210421134858.png', '_blank', '写TSJS代码必备的工具库', 'Y', 1, 10, '0000-00-00 00:00:00', '', '', ''),
(31, 'http://yargs.js.org/docs/', 'yargs 🍰🔥🔥', 'https://pic.pincman.com/media/20210421135758.png', '_blank', '最流行的Node CLI工具', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(32, 'https://github.com/typestack/class-validator', 'class-validator 🍰✍️🔥', 'https://pic.pincman.com/media/20210421140222.png', '_blank', '对TS对象进行数据验证的类库', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(33, 'https://github.com/typestack/class-transformer', 'class-transformer 🍰✍️🔥', 'https://pic.pincman.com/media/20210421140434.png', '_blank', '数据转义模块', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(34, 'https://cn.rx.js.org/', 'rxjs ✍️🔥🔥', 'https://pic.pincman.com/media/20210421135506.png', '_blank', '非常好用的数据流操作类库', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(35, 'https://www.fastify.cn/', 'fastify ✍️🔥🔥', 'https://pic.pincman.com/media/20210421135418.png', '_blank', '最快的node框架', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(36, 'https://typeorm.biunav.com/zh', 'typeorm ✍️🔥🔥', 'https://pic.pincman.com/media/20210421140644.png', '_blank', '最好的node数据库映射库', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(37, 'https://nestjs.com/', 'nestjs 🔥🔥🔥', 'https://pic.pincman.com/media/20210421135204.svg', '_blank', '最流行的node企业级开发框架', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(38, 'https://graphql.cn/', 'graphql ✍️🔥', 'https://pic.pincman.com/media/20210421140520.svg', '_blank', '使用特殊的语法替代restful写接口', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(39, 'https://www.apollographql.com/', 'appollo graphql 🔥', 'https://pic.pincman.com/media/20210421140814.png', '_blank', '最流行的graphql sdk', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(40, 'https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md', 'commander.js ✍️🔥', 'https://pic.pincman.com/media/20210421140049.png', '_blank', '轻量级Node CLI工具', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(41, 'http://www.passportjs.org/', 'passport.js 🔥🔥🔥', 'https://pic.pincman.com/media/20210421142114.png', '_blank', 'Node做用户验证最好的类库集', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(42, 'https://nodemailer.com/', 'nodemailer 🔥🔥', 'https://pic.pincman.com/media/20210421144000.png', '_blank', 'Node发送邮件的模块', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(43, 'https://docs.bullmq.io/', 'bullmq 🔥🔥', 'https://pic.pincman.com/media/20210421141704.png', '_blank', 'node中结合redis写异步消息列队的库', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(44, 'https://socket.io/', 'socket.io 🔥', 'https://pic.pincman.com/media/20210421141824.svg', '_blank', '最好的websockets通信库', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(45, 'https://github.com/websockets/ws', 'ws.js', 'https://pic.pincman.com/media/20210421142012.png', '_blank', 'websockets即使通信类库,只支持ws协议', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(46, 'https://email-templates.js.org/', 'email-templates.js 🔥', 'https://pic.pincman.com/media/20210421144337.png', '_blank', '结合nodemailer定制邮件模板', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(47, 'https://github.com/TencentCloud/tencentcloud-sdk-nodejs', '腾讯云SDK 🇨🇳🔥🔥', 'https://pic.pincman.com/media/20210421144925.png', '_blank', '腾讯云node sdk', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(48, 'https://github.com/markedjs/marked', 'marked.js', 'https://pic.pincman.com/media/20210421144538.svg', '_blank', 'TS/JS转义Markdown为HTML的类库', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(49, 'https://markdown-it.github.io/', 'markdown-it 🔥', 'https://pic.pincman.com/media/20210421144720.png', '_blank', '与Marked类似,用来转义Markdown的', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(50, 'https://github.com/luin/ioredis', 'ioredis 🔥🔥', 'https://pic.pincman.com/media/20210421141344.png', '_blank', 'node连接redis的模块', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(51, 'https://mongoosejs.com/', 'mongoosejs 🔥', 'https://pic.pincman.com/media/20210421141243.png', '_blank', 'node操作mongodb的唯一类库', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(52, 'https://www.prisma.io/', 'prisma 🔥🔥', 'https://pic.pincman.com/media/20210421141116.svg', '_blank', '一种新型node数据库操作模式', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(53, 'https://casl.js.org/', 'casl.js 🔥', 'https://pic.pincman.com/media/20210421143636.svg', '_blank', 'Nestjs官方推荐的RBAC管理库', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(54, 'https://onury.io/accesscontrol', 'accessctrol.js 🍰🔥🔥', 'https://pic.pincman.com/media/20210421143917.png', '_blank', '另一个node权限管理库', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(55, 'https://pnpm.io/zh', 'pnpm ✍️🔥🔥🔥', 'https://pic.pincman.com/media/20210421145702.svg', '_blank', '最好的npm替代品', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(56, 'https://yarnpkg.com/', 'yarn2', 'https://pic.pincman.com/media/20210421145324.svg', '_blank', '使用zip压缩包来存放依赖模块', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(58, 'https://github.com/lerna/lerna', 'lerna.js 🔥🔥', 'https://pic.pincman.com/media/20210421150751.png', '_blank', '传统的monorepo脚手架', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(59, 'https://rollupjs.org/guide/zh', 'rollupjs ✍️🔥🔥', 'https://pic.pincman.com/media/20210421151152.png', '_blank', 'TS类库打包工具', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(60, 'https://esbuild.github.io/', 'esbuild 🔥', 'https://pic.pincman.com/media/20210421152215.png', '_blank', 'go编写的极速TS模块打包工具', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(61, 'https://swc.rs/', 'swc.js 🔥', 'https://pic.pincman.com/media/20210421152334.png', '_blank', '使用rust编写的极速TS模块打包工具', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(62, 'https://nx.dev/', 'nx 🔥', 'https://pic.pincman.com/media/20210421152646.svg', '_blank', '好用不折腾的monorepo工具', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(64, 'https://tour.go-zh.org/welcome/1', 'go语言之旅中文版', 'https://pic.pincman.com/media/20210421153602.png', '_blank', '最好的golang入门教程(需要科学上网)', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(65, 'https://gofiber.io/', 'gofiber ✍️🔥🔥🔥', 'https://pic.pincman.com/media/20210422053654.svg', '_blank', '最好用的go web框架', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(66, 'https://gorm.io/zh_CN/', 'gorm ✍️🔥🔥🔥', 'https://pic.pincman.com/media/20210422060248.png', '_blank', '最流行的golang数据映射库', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(67, 'https://xorm.io/', 'xorm 🇨🇳🔥🔥', 'https://pic.pincman.com/media/20210422053845.png', '_blank', 'gorm的另一款替代品', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(68, 'https://go-micro.dev/', 'go-micro ✍️🔥🔥', 'https://pic.pincman.com/media/20210422054111.png', '_blank', '最流行的go微服务框架', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(69, 'https://casbin.org/', 'casbin 🔥', 'https://pic.pincman.com/media/20210422054226.png', '_blank', '最流行的go rbac模块', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(70, 'https://go-zero.dev/zh-hans/', 'go-zero 🇨🇳🔥🔥', 'https://pic.pincman.com/media/20210422054356.png', '_blank', '国产go微服务框架', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(71, 'https://gin-gonic.com/zh-cn/', 'gin ✍️🔥🔥', 'https://pic.pincman.com/media/20210422054559.png', '_blank', '最流行的golang web框架', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(72, 'https://www.ory.sh/', 'ory 🔥🔥', 'https://pic.pincman.com/media/20210422054646.svg', '_blank', 'go中最好的认证与安全模块', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(73, 'https://goframe.org/display/gf', 'goframe 🇨🇳🔥', 'https://pic.pincman.com/media/20210422053601.png', '_blank', '类laravel的go web框架', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(74, 'https://echo.laily.net/', 'echo ✍️🔥🔥', 'https://pic.pincman.com/media/20210422054912.png', '_blank', '另一个好用的go web框架', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(75, 'https://doc.go-admin.dev/', 'go admin 🇨🇳🔥', 'https://pic.pincman.com/media/20210422055233.png', '_blank', '好用的go后台管理面板', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(76, 'https://www.docker.com/', 'docker 🔥🔥🔥', 'https://pic.pincman.com/media/20210422055359.png', '_blank', '最流行的容器工具', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(77, 'https://www.drone.io/', 'drone 🔥🔥', 'https://pic.pincman.com/media/20210422055546.png', '_blank', '最好的轻量级CI工具', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(78, 'https://istio.io/', 'istio ✍️🔥🔥', 'https://pic.pincman.com/media/20210422055722.png', '_blank', '最流行的go编写的微服务管理平台', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(79, 'https://kubernetes.io/zh/', 'kubernetes ✍️🔥🔥', 'https://pic.pincman.com/media/20210422055856.png', '_blank', '最流行的容器编排管理工具', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(80, 'https://gitea.io/en-us/', 'gitea ✍️🔥🔥🔥', 'https://pic.pincman.com/media/20210422060052.png', '_blank', '轻量级自建git托管工具', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(81, 'https://circleci.com/docs/2.0/', 'circleci', 'https://pic.pincman.com/media/20210422055039.png', '_blank', '与drone差不多,也是一个比较优秀的自动构建工具', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(82, 'https://github.com/vercel/pkg', 'pkg 🔥🔥', 'https://pic.pincman.com/media/20210422060802.png', '_blank', '像golang一样打包node应用为可执行文件', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(83, 'https://github.com/vercel/ncc', 'ncc.js 🔥🔥', '', '_blank', '打包node应用为单文件js', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(84, 'https://bosens-china.github.io/Typescript-manual/', 'Typescript中文文档', 'https://pic.pincman.com/media/20210421064923.png', '_blank', '最新全译版TS中文文档', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(85, 'http://nodejs.cn/learn', 'Node.js入门指南', 'https://pic.pincman.com/media/20210430002632.png', '_blank', '最好的Node.js中文入门教程', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(86, 'https://learnku.com/', 'Learnku', 'https://pic.pincman.com/media/20210430004137.png', '_blank', '一个非常成熟的中文编程社区', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(87, 'https://www.osyunwei.com/', 'OS运维', 'https://pic.pincman.com/media/20210430004619.png', '_blank', '一个很棒的Linux服务器学习博客', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(88, 'https://cnodejs.org/', 'CNode', 'https://pic.pincman.com/media/20210430005112.svg', '_blank', '最好的Node.js中文社区', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(89, 'https://www.kubernetes.org.cn/', 'k8s中文社区', 'https://pic.pincman.com/media/20210430012139.png', '_blank', '学习K8S必上的中文社区', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(90, 'https://studygolang.com/', 'go语言中文社区', 'https://pic.pincman.com/media/20210430012642.png', '_blank', '', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(91, 'https://draveness.me/golang/', 'Go语言设计与实现', 'https://pic.pincman.com/media/20210430012642.png', '_blank', '一个非常好的go语言入门教材', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(92, 'https://developer.mozilla.org/zh-CN/docs/Web/CSS', 'MDN CSS3教程', 'https://pic.pincman.com/media/20210430014355.png', '_blank', 'Mozilla编写的CSS3教程', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', ''),
(93, 'https://yeasy.gitbook.io/docker_practice/', 'Docker-从入门到实践', 'https://pic.pincman.com/media/20210430024643.png', '_blank', '最好的Docker与K8S入门电子书', 'Y', 1, 0, '0000-00-00 00:00:00', '', '', '');

-- --------------------------------------------------------

--
-- 表的结构 `wp_options`
--

CREATE TABLE `wp_options` (
  `option_id` bigint(20) UNSIGNED NOT NULL,
  `option_name` varchar(191) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `option_value` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `autoload` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'yes'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- 转存表中的数据 `wp_options`
--

INSERT INTO `wp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(1, 'siteurl', 'https://jikexingkong.com', 'yes'),
(2, 'home', 'https://jikexingkong.com', 'yes'),
(3, 'blogname', '极氪星空', 'yes'),
(4, 'blogdescription', '全栈开发一站式学习网站', 'yes'),
(5, 'users_can_register', '0', 'yes'),
(6, 'admin_email', 'support@pincman.com', 'yes'),
(7, 'start_of_week', '1', 'yes'),
(8, 'use_balanceTags', '0', 'yes'),
(9, 'use_smilies', '1', 'yes'),
(10, 'require_name_email', '1', 'yes'),
(11, 'comments_notify', '1', 'yes'),
(12, 'posts_per_rss', '10', 'yes'),
(13, 'rss_use_excerpt', '0', 'yes'),
(14, 'mailserver_url', 'mail.example.com', 'yes'),
(15, 'mailserver_login', 'login@example.com', 'yes'),
(16, 'mailserver_pass', 'password', 'yes'),
(17, 'mailserver_port', '110', 'yes'),
(18, 'default_category', '1', 'yes'),
(19, 'default_comment_status', 'open', 'yes'),
(20, 'default_ping_status', 'open', 'yes'),
(21, 'default_pingback_flag', '1', 'yes'),
(22, 'posts_per_page', '10', 'yes'),
(23, 'date_format', 'Y年n月j日', 'yes'),
(24, 'time_format', 'ag:i', 'yes'),
(25, 'links_updated_date_format', 'Y年n月j日ag:i', 'yes'),
(26, 'comment_moderation', '', 'yes'),
(27, 'moderation_notify', '1', 'yes'),
(28, 'permalink_structure', '/%post_id%.html', 'yes'),
(29, 'rewrite_rules', 'a:181:{s:19:\"^oauth/([A-Za-z]+)$\";s:27:\"index.php?oauth=$matches[1]\";s:28:\"^oauth/([A-Za-z]+)/callback$\";s:44:\"index.php?oauth=$matches[1]&oauth_callback=1\";s:6:\"^goto$\";s:16:\"index.php?goto=1\";s:15:\"^user/([^/]*)/?\";s:39:\"index.php?page_id=14&action=$matches[1]\";s:11:\"^wp-json/?$\";s:22:\"index.php?rest_route=/\";s:14:\"^wp-json/(.*)?\";s:33:\"index.php?rest_route=/$matches[1]\";s:21:\"^index.php/wp-json/?$\";s:22:\"index.php?rest_route=/\";s:24:\"^index.php/wp-json/(.*)?\";s:33:\"index.php?rest_route=/$matches[1]\";s:17:\"^wp-sitemap\\.xml$\";s:23:\"index.php?sitemap=index\";s:17:\"^wp-sitemap\\.xsl$\";s:36:\"index.php?sitemap-stylesheet=sitemap\";s:23:\"^wp-sitemap-index\\.xsl$\";s:34:\"index.php?sitemap-stylesheet=index\";s:48:\"^wp-sitemap-([a-z]+?)-([a-z\\d_-]+?)-(\\d+?)\\.xml$\";s:75:\"index.php?sitemap=$matches[1]&sitemap-subtype=$matches[2]&paged=$matches[3]\";s:34:\"^wp-sitemap-([a-z]+?)-(\\d+?)\\.xml$\";s:47:\"index.php?sitemap=$matches[1]&paged=$matches[2]\";s:7:\"docs/?$\";s:24:\"index.php?post_type=docs\";s:37:\"docs/feed/(feed|rdf|rss|rss2|atom)/?$\";s:41:\"index.php?post_type=docs&feed=$matches[1]\";s:32:\"docs/(feed|rdf|rss|rss2|atom)/?$\";s:41:\"index.php?post_type=docs&feed=$matches[1]\";s:24:\"docs/page/([0-9]{1,})/?$\";s:42:\"index.php?post_type=docs&paged=$matches[1]\";s:25:\"api/([^/]+)/(.*?)\\.json?$\";s:56:\"index.php?module=json&action=mag.$matches[1].$matches[2]\";s:19:\"api/([^/]+)\\.json?$\";s:40:\"index.php?module=json&action=$matches[1]\";s:25:\"questions/([0-9]+)?.html$\";s:47:\"index.php?post_type=dwqa-question&p=$matches[1]\";s:9:\"course/?$\";s:26:\"index.php?post_type=course\";s:39:\"course/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?post_type=course&feed=$matches[1]\";s:34:\"course/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?post_type=course&feed=$matches[1]\";s:26:\"course/page/([0-9]{1,})/?$\";s:44:\"index.php?post_type=course&paged=$matches[1]\";s:19:\"^courses/([0-9]+)/?\";s:40:\"index.php?post_type=course&p=$matches[1]\";s:47:\"category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:42:\"category/(.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:23:\"category/(.+?)/embed/?$\";s:46:\"index.php?category_name=$matches[1]&embed=true\";s:35:\"category/(.+?)/page/?([0-9]{1,})/?$\";s:53:\"index.php?category_name=$matches[1]&paged=$matches[2]\";s:17:\"category/(.+?)/?$\";s:35:\"index.php?category_name=$matches[1]\";s:44:\"tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:39:\"tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:20:\"tag/([^/]+)/embed/?$\";s:36:\"index.php?tag=$matches[1]&embed=true\";s:32:\"tag/([^/]+)/page/?([0-9]{1,})/?$\";s:43:\"index.php?tag=$matches[1]&paged=$matches[2]\";s:14:\"tag/([^/]+)/?$\";s:25:\"index.php?tag=$matches[1]\";s:45:\"type/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:40:\"type/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:21:\"type/([^/]+)/embed/?$\";s:44:\"index.php?post_format=$matches[1]&embed=true\";s:33:\"type/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?post_format=$matches[1]&paged=$matches[2]\";s:15:\"type/([^/]+)/?$\";s:33:\"index.php?post_format=$matches[1]\";s:49:\"forum/profile/([^/]+)/([^/]+)/page/?([0-9]{1,})/?\";s:89:\"index.php?author_name=$matches[1]&ap_page=user&user_page=$matches[2]&ap_paged=$matches[3]\";s:31:\"forum/profile/([^/]+)/([^/]+)/?\";s:68:\"index.php?author_name=$matches[1]&ap_page=user&user_page=$matches[2]\";s:23:\"forum/profile/([^/]+)/?\";s:46:\"index.php?author_name=$matches[1]&ap_page=user\";s:15:\"forum/profile/?\";s:22:\"index.php?ap_page=user\";s:39:\"forum/tags/([^/]+)/page/?([0-9]{1,})/?$\";s:67:\"index.php?question_tag=$matches[1]&ap_paged=$matches[2]&ap_page=tag\";s:21:\"forum/tags/([^/]+)/?$\";s:46:\"index.php?question_tag=$matches[1]&ap_page=tag\";s:45:\"forum/categories/([^/]+)/page/?([0-9]{1,})/?$\";s:74:\"index.php?question_category=$matches[1]&paged=$matches[2]&ap_page=category\";s:27:\"forum/categories/([^/]+)/?$\";s:56:\"index.php?question_category=$matches[1]&ap_page=category\";s:41:\"forum/search/([^/]+)/page/?([0-9]{1,})/?$\";s:60:\"index.php?s=$matches[1]&paged=$matches[2]&post_type=question\";s:23:\"forum/search/([^/]+)/?$\";s:42:\"index.php?s=$matches[1]&post_type=question\";s:13:\"forum/edit/?$\";s:37:\"index.php?pagename=forum&ap_page=edit\";s:58:\"forum/([0-9]+)/answer/([0-9]+)/(feed|rdf|rss|rss2|atom)/?$\";s:89:\"index.php?post_type=answer&question_id=$matches[1]&answer_id=$matches[2]&feed=$matches[3]\";s:39:\"forum/([0-9]+)/answer/([0-9]+)/embed/?$\";s:83:\"index.php?post_type=answer&question_id=$matches[1]&answer_id=$matches[2]&embed=true\";s:33:\"forum/([0-9]+)/answer/([0-9]+)/?$\";s:64:\"index.php?post_type=question&p=$matches[1]&answer_id=$matches[2]\";s:35:\"forum/([0-9]+)/page/?([0-9]{1,})/?$\";s:63:\"index.php?post_type=question&p=$matches[1]&ap_paged=$matches[2]\";s:42:\"forum/([0-9]+)/(feed|rdf|rss|rss2|atom)/?$\";s:59:\"index.php?post_type=question&p=$matches[1]&feed=$matches[2]\";s:23:\"forum/([0-9]+)/embed/?$\";s:53:\"index.php?post_type=question&p=$matches[1]&embed=true\";s:17:\"forum/([0-9]+)/?$\";s:42:\"index.php?post_type=question&p=$matches[1]\";s:30:\"docs/.+?/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:40:\"docs/.+?/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:60:\"docs/.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:55:\"docs/.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:55:\"docs/.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:36:\"docs/.+?/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:19:\"docs/(.+?)/embed/?$\";s:37:\"index.php?docs=$matches[1]&embed=true\";s:23:\"docs/(.+?)/trackback/?$\";s:31:\"index.php?docs=$matches[1]&tb=1\";s:43:\"docs/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?docs=$matches[1]&feed=$matches[2]\";s:38:\"docs/(.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?docs=$matches[1]&feed=$matches[2]\";s:31:\"docs/(.+?)/page/?([0-9]{1,})/?$\";s:44:\"index.php?docs=$matches[1]&paged=$matches[2]\";s:38:\"docs/(.+?)/comment-page-([0-9]{1,})/?$\";s:44:\"index.php?docs=$matches[1]&cpage=$matches[2]\";s:27:\"docs/(.+?)(?:/([0-9]+))?/?$\";s:43:\"index.php?docs=$matches[1]&page=$matches[2]\";s:54:\"docs-category/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?docs_category=$matches[1]&feed=$matches[2]\";s:49:\"docs-category/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?docs_category=$matches[1]&feed=$matches[2]\";s:30:\"docs-category/([^/]+)/embed/?$\";s:46:\"index.php?docs_category=$matches[1]&embed=true\";s:42:\"docs-category/([^/]+)/page/?([0-9]{1,})/?$\";s:53:\"index.php?docs_category=$matches[1]&paged=$matches[2]\";s:24:\"docs-category/([^/]+)/?$\";s:35:\"index.php?docs_category=$matches[1]\";s:34:\"course/[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:44:\"course/[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:64:\"course/[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:59:\"course/[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:59:\"course/[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:40:\"course/[^/]+/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:23:\"course/([^/]+)/embed/?$\";s:39:\"index.php?course=$matches[1]&embed=true\";s:27:\"course/([^/]+)/trackback/?$\";s:33:\"index.php?course=$matches[1]&tb=1\";s:47:\"course/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:45:\"index.php?course=$matches[1]&feed=$matches[2]\";s:42:\"course/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:45:\"index.php?course=$matches[1]&feed=$matches[2]\";s:35:\"course/([^/]+)/page/?([0-9]{1,})/?$\";s:46:\"index.php?course=$matches[1]&paged=$matches[2]\";s:42:\"course/([^/]+)/comment-page-([0-9]{1,})/?$\";s:46:\"index.php?course=$matches[1]&cpage=$matches[2]\";s:31:\"course/([^/]+)(?:/([0-9]+))?/?$\";s:45:\"index.php?course=$matches[1]&page=$matches[2]\";s:23:\"course/[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:33:\"course/[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:53:\"course/[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:48:\"course/[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:48:\"course/[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:29:\"course/[^/]+/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:58:\"course_categories/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:54:\"index.php?course_category=$matches[1]&feed=$matches[2]\";s:53:\"course_categories/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:54:\"index.php?course_category=$matches[1]&feed=$matches[2]\";s:34:\"course_categories/([^/]+)/embed/?$\";s:48:\"index.php?course_category=$matches[1]&embed=true\";s:46:\"course_categories/([^/]+)/page/?([0-9]{1,})/?$\";s:55:\"index.php?course_category=$matches[1]&paged=$matches[2]\";s:28:\"course_categories/([^/]+)/?$\";s:37:\"index.php?course_category=$matches[1]\";s:54:\"course-series/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?course_series=$matches[1]&feed=$matches[2]\";s:49:\"course-series/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?course_series=$matches[1]&feed=$matches[2]\";s:30:\"course-series/([^/]+)/embed/?$\";s:46:\"index.php?course_series=$matches[1]&embed=true\";s:42:\"course-series/([^/]+)/page/?([0-9]{1,})/?$\";s:53:\"index.php?course_series=$matches[1]&paged=$matches[2]\";s:24:\"course-series/([^/]+)/?$\";s:35:\"index.php?course_series=$matches[1]\";s:47:\"series/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:45:\"index.php?series=$matches[1]&feed=$matches[2]\";s:42:\"series/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:45:\"index.php?series=$matches[1]&feed=$matches[2]\";s:23:\"series/([^/]+)/embed/?$\";s:39:\"index.php?series=$matches[1]&embed=true\";s:35:\"series/([^/]+)/page/?([0-9]{1,})/?$\";s:46:\"index.php?series=$matches[1]&paged=$matches[2]\";s:17:\"series/([^/]+)/?$\";s:28:\"index.php?series=$matches[1]\";s:12:\"robots\\.txt$\";s:18:\"index.php?robots=1\";s:13:\"favicon\\.ico$\";s:19:\"index.php?favicon=1\";s:48:\".*wp-(atom|rdf|rss|rss2|feed|commentsrss2)\\.php$\";s:18:\"index.php?feed=old\";s:20:\".*wp-app\\.php(/.*)?$\";s:19:\"index.php?error=403\";s:18:\".*wp-register.php$\";s:23:\"index.php?register=true\";s:14:\"([^/]+)\\.txt?$\";s:39:\"index.php?module=txt&action=$matches[1]\";s:32:\"feed/(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:27:\"(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:8:\"embed/?$\";s:21:\"index.php?&embed=true\";s:20:\"page/?([0-9]{1,})/?$\";s:28:\"index.php?&paged=$matches[1]\";s:27:\"comment-page-([0-9]{1,})/?$\";s:39:\"index.php?&page_id=20&cpage=$matches[1]\";s:41:\"comments/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:36:\"comments/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:17:\"comments/embed/?$\";s:21:\"index.php?&embed=true\";s:44:\"search/(.+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:39:\"search/(.+)/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:20:\"search/(.+)/embed/?$\";s:34:\"index.php?s=$matches[1]&embed=true\";s:32:\"search/(.+)/page/?([0-9]{1,})/?$\";s:41:\"index.php?s=$matches[1]&paged=$matches[2]\";s:14:\"search/(.+)/?$\";s:23:\"index.php?s=$matches[1]\";s:47:\"author/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:42:\"author/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:23:\"author/([^/]+)/embed/?$\";s:44:\"index.php?author_name=$matches[1]&embed=true\";s:35:\"author/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?author_name=$matches[1]&paged=$matches[2]\";s:17:\"author/([^/]+)/?$\";s:33:\"index.php?author_name=$matches[1]\";s:74:\"date/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:69:\"date/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:50:\"date/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/embed/?$\";s:74:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&embed=true\";s:62:\"date/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&paged=$matches[4]\";s:44:\"date/([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/?$\";s:63:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]\";s:61:\"date/([0-9]{4})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:56:\"date/([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:37:\"date/([0-9]{4})/([0-9]{1,2})/embed/?$\";s:58:\"index.php?year=$matches[1]&monthnum=$matches[2]&embed=true\";s:49:\"date/([0-9]{4})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&paged=$matches[3]\";s:31:\"date/([0-9]{4})/([0-9]{1,2})/?$\";s:47:\"index.php?year=$matches[1]&monthnum=$matches[2]\";s:48:\"date/([0-9]{4})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:43:\"date/([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:24:\"date/([0-9]{4})/embed/?$\";s:37:\"index.php?year=$matches[1]&embed=true\";s:36:\"date/([0-9]{4})/page/?([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&paged=$matches[2]\";s:18:\"date/([0-9]{4})/?$\";s:26:\"index.php?year=$matches[1]\";s:33:\"[0-9]+.html/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:43:\"[0-9]+.html/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:63:\"[0-9]+.html/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:58:\"[0-9]+.html/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:58:\"[0-9]+.html/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:39:\"[0-9]+.html/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:22:\"([0-9]+).html/embed/?$\";s:34:\"index.php?p=$matches[1]&embed=true\";s:26:\"([0-9]+).html/trackback/?$\";s:28:\"index.php?p=$matches[1]&tb=1\";s:46:\"([0-9]+).html/feed/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?p=$matches[1]&feed=$matches[2]\";s:41:\"([0-9]+).html/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?p=$matches[1]&feed=$matches[2]\";s:34:\"([0-9]+).html/page/?([0-9]{1,})/?$\";s:41:\"index.php?p=$matches[1]&paged=$matches[2]\";s:41:\"([0-9]+).html/comment-page-([0-9]{1,})/?$\";s:41:\"index.php?p=$matches[1]&cpage=$matches[2]\";s:30:\"([0-9]+).html(?:/([0-9]+))?/?$\";s:40:\"index.php?p=$matches[1]&page=$matches[2]\";s:22:\"[0-9]+.html/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:32:\"[0-9]+.html/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:52:\"[0-9]+.html/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:47:\"[0-9]+.html/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:47:\"[0-9]+.html/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:28:\"[0-9]+.html/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:27:\".?.+?/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:37:\".?.+?/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:57:\".?.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:33:\".?.+?/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:16:\"(.?.+?)/embed/?$\";s:41:\"index.php?pagename=$matches[1]&embed=true\";s:20:\"(.?.+?)/trackback/?$\";s:35:\"index.php?pagename=$matches[1]&tb=1\";s:40:\"(.?.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:35:\"(.?.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:28:\"(.?.+?)/page/?([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&paged=$matches[2]\";s:35:\"(.?.+?)/comment-page-([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&cpage=$matches[2]\";s:24:\"(.?.+?)(?:/([0-9]+))?/?$\";s:47:\"index.php?pagename=$matches[1]&page=$matches[2]\";}', 'yes'),
(30, 'hack_file', '0', 'yes'),
(31, 'blog_charset', 'UTF-8', 'yes'),
(32, 'moderation_keys', '', 'no'),
(33, 'active_plugins', 'a:10:{i:0;s:53:\"anspress-question-answer/anspress-question-answer.php\";i:1;s:43:\"custom-taxonomy-order-ne/customtaxorder.php\";i:2;s:23:\"docspress/docspress.php\";i:3;s:45:\"phoenix-media-rename/phoenix-media-rename.php\";i:4;s:37:\"post-types-order/post-types-order.php\";i:5;s:27:\"svg-support/svg-support.php\";i:6;s:30:\"table-of-contents-plus/toc.php\";i:7;s:29:\"wp-china-yes/wp-china-yes.php\";i:8;s:27:\"wp-editormd/wp-editormd.php\";i:9;s:27:\"wpjam-basic/wpjam-basic.php\";}', 'yes'),
(34, 'category_base', '', 'yes'),
(35, 'ping_sites', 'http://rpc.pingomatic.com/', 'yes'),
(36, 'comment_max_links', '2', 'yes'),
(37, 'gmt_offset', '', 'yes'),
(38, 'default_email_category', '1', 'yes'),
(39, 'recently_edited', 'a:2:{i:0;s:69:\"/home/pincman/htdocs/jikexingkong/wp-content/themes/rowfish/style.css\";i:2;s:0:\"\";}', 'no'),
(40, 'template', 'rizhuti-v2', 'yes'),
(41, 'stylesheet', 'rowfish', 'yes'),
(42, 'comment_registration', '', 'yes'),
(43, 'html_type', 'text/html', 'yes'),
(44, 'use_trackback', '0', 'yes'),
(45, 'default_role', 'subscriber', 'yes'),
(46, 'db_version', '51917', 'yes'),
(47, 'uploads_use_yearmonth_folders', '1', 'yes'),
(48, 'upload_path', '', 'yes'),
(49, 'blog_public', '1', 'yes'),
(50, 'default_link_category', '0', 'yes'),
(51, 'show_on_front', 'page', 'yes'),
(52, 'tag_base', '', 'yes'),
(53, 'show_avatars', '1', 'yes'),
(54, 'avatar_rating', 'G', 'yes'),
(55, 'upload_url_path', '', 'yes'),
(56, 'thumbnail_size_w', '300', 'yes'),
(57, 'thumbnail_size_h', '200', 'yes'),
(58, 'thumbnail_crop', '1', 'yes'),
(59, 'medium_size_w', '0', 'yes'),
(60, 'medium_size_h', '0', 'yes'),
(61, 'avatar_default', 'mystery', 'yes'),
(62, 'large_size_w', '0', 'yes'),
(63, 'large_size_h', '0', 'yes'),
(64, 'image_default_link_type', 'none', 'yes'),
(65, 'image_default_size', '', 'yes'),
(66, 'image_default_align', '', 'yes'),
(67, 'close_comments_for_old_posts', '', 'yes'),
(68, 'close_comments_days_old', '14', 'yes'),
(69, 'thread_comments', '1', 'yes'),
(70, 'thread_comments_depth', '5', 'yes'),
(71, 'page_comments', '', 'yes'),
(72, 'comments_per_page', '50', 'yes'),
(73, 'default_comments_page', 'newest', 'yes'),
(74, 'comment_order', 'asc', 'yes'),
(75, 'sticky_posts', 'a:0:{}', 'yes'),
(76, 'widget_categories', 'a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}', 'yes'),
(77, 'widget_text', 'a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}', 'yes'),
(78, 'widget_rss', 'a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}', 'yes'),
(79, 'uninstall_plugins', 'a:0:{}', 'no'),
(80, 'timezone_string', 'Asia/Shanghai', 'yes'),
(81, 'page_for_posts', '0', 'yes'),
(82, 'page_on_front', '20', 'yes'),
(83, 'default_post_format', '0', 'yes'),
(84, 'link_manager_enabled', '0', 'yes'),
(85, 'finished_splitting_shared_terms', '1', 'yes'),
(86, 'site_icon', '0', 'yes'),
(87, 'medium_large_size_w', '768', 'yes'),
(88, 'medium_large_size_h', '0', 'yes'),
(89, 'wp_page_for_privacy_policy', '3', 'yes'),
(90, 'show_comments_cookies_opt_in', '1', 'yes'),
(91, 'admin_email_lifespan', '1650971492', 'yes'),
(92, 'disallowed_keys', '', 'no'),
(93, 'comment_previously_approved', '1', 'yes'),
(94, 'auto_plugin_theme_update_emails', 'a:0:{}', 'no'),
(95, 'auto_update_core_dev', 'enabled', 'yes'),
(96, 'auto_update_core_minor', 'enabled', 'yes'),
(97, 'auto_update_core_major', 'enabled', 'yes'),
(98, 'wp_force_deactivated_plugins', 'a:0:{}', 'yes'),
(99, 'initial_db_version', '49752', 'yes'),
(100, 'wp_user_roles', 'a:9:{s:13:\"administrator\";a:2:{s:4:\"name\";s:13:\"Administrator\";s:12:\"capabilities\";a:108:{s:13:\"switch_themes\";b:1;s:11:\"edit_themes\";b:1;s:16:\"activate_plugins\";b:1;s:12:\"edit_plugins\";b:1;s:10:\"edit_users\";b:1;s:10:\"edit_files\";b:1;s:14:\"manage_options\";b:1;s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:6:\"import\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:8:\"level_10\";b:1;s:7:\"level_9\";b:1;s:7:\"level_8\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:12:\"delete_users\";b:1;s:12:\"create_users\";b:1;s:17:\"unfiltered_upload\";b:1;s:14:\"edit_dashboard\";b:1;s:14:\"update_plugins\";b:1;s:14:\"delete_plugins\";b:1;s:15:\"install_plugins\";b:1;s:13:\"update_themes\";b:1;s:14:\"install_themes\";b:1;s:11:\"update_core\";b:1;s:10:\"list_users\";b:1;s:12:\"remove_users\";b:1;s:13:\"promote_users\";b:1;s:18:\"edit_theme_options\";b:1;s:13:\"delete_themes\";b:1;s:6:\"export\";b:1;s:16:\"ap_read_question\";b:1;s:14:\"ap_read_answer\";b:1;s:15:\"ap_read_comment\";b:1;s:15:\"ap_new_question\";b:1;s:13:\"ap_new_answer\";b:1;s:14:\"ap_new_comment\";b:1;s:16:\"ap_edit_question\";b:1;s:14:\"ap_edit_answer\";b:1;s:15:\"ap_edit_comment\";b:1;s:18:\"ap_delete_question\";b:1;s:16:\"ap_delete_answer\";b:1;s:17:\"ap_delete_comment\";b:1;s:10:\"ap_vote_up\";b:1;s:12:\"ap_vote_down\";b:1;s:12:\"ap_vote_flag\";b:1;s:13:\"ap_vote_close\";b:1;s:15:\"ap_upload_cover\";b:1;s:16:\"ap_change_status\";b:1;s:23:\"ap_edit_others_question\";b:1;s:21:\"ap_edit_others_answer\";b:1;s:22:\"ap_edit_others_comment\";b:1;s:25:\"ap_delete_others_question\";b:1;s:23:\"ap_delete_others_answer\";b:1;s:24:\"ap_delete_others_comment\";b:1;s:24:\"ap_delete_post_permanent\";b:1;s:15:\"ap_view_private\";b:1;s:16:\"ap_view_moderate\";b:1;s:22:\"ap_change_status_other\";b:1;s:18:\"ap_approve_comment\";b:1;s:16:\"ap_no_moderation\";b:1;s:16:\"ap_restore_posts\";b:1;s:18:\"ap_toggle_featured\";b:1;s:21:\"ap_toggle_best_answer\";b:1;s:8:\"read_doc\";b:1;s:16:\"read_private_doc\";b:1;s:17:\"read_private_docs\";b:1;s:8:\"edit_doc\";b:1;s:9:\"edit_docs\";b:1;s:16:\"edit_others_docs\";b:1;s:17:\"edit_private_docs\";b:1;s:19:\"edit_published_docs\";b:1;s:10:\"delete_doc\";b:1;s:11:\"delete_docs\";b:1;s:18:\"delete_others_docs\";b:1;s:19:\"delete_private_docs\";b:1;s:21:\"delete_published_docs\";b:1;s:12:\"publish_docs\";b:1;}}s:6:\"editor\";a:2:{s:4:\"name\";s:6:\"Editor\";s:12:\"capabilities\";a:67:{s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:16:\"ap_read_question\";b:1;s:14:\"ap_read_answer\";b:1;s:15:\"ap_read_comment\";b:1;s:15:\"ap_new_question\";b:1;s:13:\"ap_new_answer\";b:1;s:14:\"ap_new_comment\";b:1;s:16:\"ap_edit_question\";b:1;s:14:\"ap_edit_answer\";b:1;s:15:\"ap_edit_comment\";b:1;s:18:\"ap_delete_question\";b:1;s:16:\"ap_delete_answer\";b:1;s:17:\"ap_delete_comment\";b:1;s:10:\"ap_vote_up\";b:1;s:12:\"ap_vote_down\";b:1;s:12:\"ap_vote_flag\";b:1;s:13:\"ap_vote_close\";b:1;s:15:\"ap_upload_cover\";b:1;s:16:\"ap_change_status\";b:1;s:23:\"ap_edit_others_question\";b:1;s:21:\"ap_edit_others_answer\";b:1;s:22:\"ap_edit_others_comment\";b:1;s:25:\"ap_delete_others_question\";b:1;s:23:\"ap_delete_others_answer\";b:1;s:24:\"ap_delete_others_comment\";b:1;s:24:\"ap_delete_post_permanent\";b:1;s:15:\"ap_view_private\";b:1;s:16:\"ap_view_moderate\";b:1;s:22:\"ap_change_status_other\";b:1;s:18:\"ap_approve_comment\";b:1;s:16:\"ap_no_moderation\";b:1;s:16:\"ap_restore_posts\";b:1;s:18:\"ap_toggle_featured\";b:1;s:21:\"ap_toggle_best_answer\";b:1;}}s:6:\"author\";a:2:{s:4:\"name\";s:6:\"Author\";s:12:\"capabilities\";a:28:{s:12:\"upload_files\";b:1;s:10:\"edit_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:16:\"ap_read_question\";b:1;s:14:\"ap_read_answer\";b:1;s:15:\"ap_read_comment\";b:1;s:15:\"ap_new_question\";b:1;s:13:\"ap_new_answer\";b:1;s:14:\"ap_new_comment\";b:1;s:16:\"ap_edit_question\";b:1;s:14:\"ap_edit_answer\";b:1;s:15:\"ap_edit_comment\";b:1;s:18:\"ap_delete_question\";b:1;s:16:\"ap_delete_answer\";b:1;s:17:\"ap_delete_comment\";b:1;s:10:\"ap_vote_up\";b:1;s:12:\"ap_vote_down\";b:1;s:12:\"ap_vote_flag\";b:1;s:13:\"ap_vote_close\";b:1;s:15:\"ap_upload_cover\";b:1;s:16:\"ap_change_status\";b:1;}}s:11:\"contributor\";a:2:{s:4:\"name\";s:11:\"Contributor\";s:12:\"capabilities\";a:23:{s:10:\"edit_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;s:16:\"ap_read_question\";b:1;s:14:\"ap_read_answer\";b:1;s:15:\"ap_read_comment\";b:1;s:15:\"ap_new_question\";b:1;s:13:\"ap_new_answer\";b:1;s:14:\"ap_new_comment\";b:1;s:16:\"ap_edit_question\";b:1;s:14:\"ap_edit_answer\";b:1;s:15:\"ap_edit_comment\";b:1;s:18:\"ap_delete_question\";b:1;s:16:\"ap_delete_answer\";b:1;s:17:\"ap_delete_comment\";b:1;s:10:\"ap_vote_up\";b:1;s:12:\"ap_vote_down\";b:1;s:12:\"ap_vote_flag\";b:1;s:13:\"ap_vote_close\";b:1;s:15:\"ap_upload_cover\";b:1;s:16:\"ap_change_status\";b:1;}}s:10:\"subscriber\";a:2:{s:4:\"name\";s:10:\"Subscriber\";s:12:\"capabilities\";a:20:{s:4:\"read\";b:1;s:7:\"level_0\";b:1;s:16:\"ap_read_question\";b:1;s:14:\"ap_read_answer\";b:1;s:15:\"ap_read_comment\";b:1;s:15:\"ap_new_question\";b:1;s:13:\"ap_new_answer\";b:1;s:14:\"ap_new_comment\";b:1;s:16:\"ap_edit_question\";b:1;s:14:\"ap_edit_answer\";b:1;s:15:\"ap_edit_comment\";b:1;s:18:\"ap_delete_question\";b:1;s:16:\"ap_delete_answer\";b:1;s:17:\"ap_delete_comment\";b:1;s:10:\"ap_vote_up\";b:1;s:12:\"ap_vote_down\";b:1;s:12:\"ap_vote_flag\";b:1;s:13:\"ap_vote_close\";b:1;s:15:\"ap_upload_cover\";b:1;s:16:\"ap_change_status\";b:1;}}s:12:\"ap_moderator\";a:2:{s:4:\"name\";s:18:\"AnsPress 管理员\";s:12:\"capabilities\";a:34:{s:4:\"read\";b:1;s:16:\"ap_read_question\";b:1;s:14:\"ap_read_answer\";b:1;s:15:\"ap_read_comment\";b:1;s:15:\"ap_new_question\";b:1;s:13:\"ap_new_answer\";b:1;s:14:\"ap_new_comment\";b:1;s:16:\"ap_edit_question\";b:1;s:14:\"ap_edit_answer\";b:1;s:15:\"ap_edit_comment\";b:1;s:18:\"ap_delete_question\";b:1;s:16:\"ap_delete_answer\";b:1;s:17:\"ap_delete_comment\";b:1;s:10:\"ap_vote_up\";b:1;s:12:\"ap_vote_down\";b:1;s:12:\"ap_vote_flag\";b:1;s:13:\"ap_vote_close\";b:1;s:15:\"ap_upload_cover\";b:1;s:16:\"ap_change_status\";b:1;s:23:\"ap_edit_others_question\";b:1;s:21:\"ap_edit_others_answer\";b:1;s:22:\"ap_edit_others_comment\";b:1;s:25:\"ap_delete_others_question\";b:1;s:23:\"ap_delete_others_answer\";b:1;s:24:\"ap_delete_others_comment\";b:1;s:24:\"ap_delete_post_permanent\";b:1;s:15:\"ap_view_private\";b:1;s:16:\"ap_view_moderate\";b:1;s:22:\"ap_change_status_other\";b:1;s:18:\"ap_approve_comment\";b:1;s:16:\"ap_no_moderation\";b:1;s:16:\"ap_restore_posts\";b:1;s:18:\"ap_toggle_featured\";b:1;s:21:\"ap_toggle_best_answer\";b:1;}}s:14:\"ap_participant\";a:2:{s:4:\"name\";s:18:\"AnsPress 参与者\";s:12:\"capabilities\";a:19:{s:4:\"read\";b:1;s:16:\"ap_read_question\";b:1;s:14:\"ap_read_answer\";b:1;s:15:\"ap_read_comment\";b:1;s:15:\"ap_new_question\";b:1;s:13:\"ap_new_answer\";b:1;s:14:\"ap_new_comment\";b:1;s:16:\"ap_edit_question\";b:1;s:14:\"ap_edit_answer\";b:1;s:15:\"ap_edit_comment\";b:1;s:18:\"ap_delete_question\";b:1;s:16:\"ap_delete_answer\";b:1;s:17:\"ap_delete_comment\";b:1;s:10:\"ap_vote_up\";b:1;s:12:\"ap_vote_down\";b:1;s:12:\"ap_vote_flag\";b:1;s:13:\"ap_vote_close\";b:1;s:15:\"ap_upload_cover\";b:1;s:16:\"ap_change_status\";b:1;}}s:9:\"ap_banned\";a:2:{s:4:\"name\";s:15:\"AnsPress 禁令\";s:12:\"capabilities\";a:1:{s:4:\"read\";b:1;}}s:17:\"docspress_manager\";a:2:{s:4:\"name\";s:15:\"文档管理器\";s:12:\"capabilities\";a:24:{s:12:\"upload_files\";b:1;s:10:\"edit_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:8:\"read_doc\";b:1;s:16:\"read_private_doc\";b:1;s:17:\"read_private_docs\";b:1;s:8:\"edit_doc\";b:1;s:9:\"edit_docs\";b:1;s:16:\"edit_others_docs\";b:1;s:17:\"edit_private_docs\";b:1;s:19:\"edit_published_docs\";b:1;s:10:\"delete_doc\";b:1;s:11:\"delete_docs\";b:1;s:18:\"delete_others_docs\";b:1;s:19:\"delete_private_docs\";b:1;s:21:\"delete_published_docs\";b:1;s:12:\"publish_docs\";b:1;}}}', 'yes'),
(101, 'fresh_site', '0', 'yes'),
(102, 'WPLANG', 'zh_CN', 'yes'),
(103, 'widget_block', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(104, 'sidebars_widgets', 'a:17:{s:19:\"wp_inactive_widgets\";a:0:{}s:7:\"ap-tags\";a:0:{}s:11:\"course_post\";a:3:{i:0;s:27:\"rf_course_download_widget-2\";i:1;s:25:\"rf_course_blocks_widget-3\";i:2;s:28:\"rf_relation_courses_widget-2\";}s:8:\"home_top\";a:2:{i:0;s:29:\"rf_home_course_power_widget-2\";i:1;s:28:\"rizhuti_v2_module_division-3\";}s:7:\"modules\";a:4:{i:0;s:32:\"rf_home_catbox_carousel_widget-2\";i:1;s:26:\"rf_home_post_list_widget-2\";i:2;s:30:\"rf_home_dospress_list_widget-2\";i:3;s:28:\"rf_home_series_list_widget-3\";}s:7:\"sidebar\";a:4:{i:0;s:8:\"search-3\";i:1;s:11:\"tag_cloud-3\";i:2;s:23:\"rf_post_blocks_widget-2\";i:3;s:20:\"rf_comments_widget-2\";}s:11:\"cat_sidebar\";a:4:{i:0;s:8:\"search-2\";i:1;s:11:\"tag_cloud-2\";i:2;s:23:\"rf_post_blocks_widget-3\";i:3;s:20:\"rf_comments_widget-3\";}s:12:\"page_sidebar\";a:0:{}s:6:\"footer\";a:0:{}s:9:\"ap-before\";a:0:{}s:6:\"ap-top\";a:0:{}s:10:\"ap-sidebar\";a:2:{i:0;s:18:\"ap_search_widget-2\";i:1;s:26:\"anspress_category_widget-2\";}s:11:\"ap-qsidebar\";a:0:{}s:11:\"ap-category\";a:0:{}s:6:\"ap-tag\";a:0:{}s:9:\"ap-author\";a:0:{}s:13:\"array_version\";i:3;}', 'yes'),
(105, 'cron', 'a:7:{i:1666881990;a:1:{s:21:\"wp_update_user_counts\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1666912293;a:4:{s:18:\"wp_https_detection\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:16:\"wp_version_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:17:\"wp_update_plugins\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:16:\"wp_update_themes\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1666912705;a:1:{s:26:\"ap_delete_temp_attachments\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1666938846;a:1:{s:30:\"wp_scheduled_auto_draft_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1666955493;a:2:{s:30:\"wp_site_health_scheduled_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:6:\"weekly\";s:4:\"args\";a:0:{}s:8:\"interval\";i:604800;}}s:32:\"recovery_mode_clean_expired_keys\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1666955506;a:2:{s:19:\"wp_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}s:25:\"delete_expired_transients\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}s:7:\"version\";i:2;}', 'yes'),
(106, 'widget_pages', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(107, 'widget_calendar', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(108, 'widget_archives', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(109, 'widget_media_audio', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(110, 'widget_media_image', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(111, 'widget_media_gallery', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(112, 'widget_media_video', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(113, 'widget_meta', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(114, 'widget_search', 'a:3:{i:2;a:1:{s:5:\"title\";s:0:\"\";}i:3;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(115, 'widget_tag_cloud', 'a:3:{i:2;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"taxonomy\";s:8:\"post_tag\";}i:3;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"taxonomy\";s:8:\"post_tag\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(116, 'widget_nav_menu', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(117, 'widget_custom_html', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(119, 'theme_mods_twentytwentyone', 'a:2:{s:18:\"custom_css_post_id\";i:-1;s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1635420115;s:4:\"data\";a:3:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:3:{i:0;s:7:\"block-2\";i:1;s:7:\"block-3\";i:2;s:7:\"block-4\";}s:9:\"sidebar-2\";a:2:{i:0;s:7:\"block-5\";i:1;s:7:\"block-6\";}}}}', 'yes'),
(120, 'recovery_keys', 'a:0:{}', 'yes'),
(121, 'https_detection_errors', 'a:0:{}', 'yes'),
(151, 'recently_activated', 'a:0:{}', 'yes'),
(156, 'finished_updating_comment_type', '1', 'yes'),
(178, 'anspress_opt', 'a:119:{s:17:\"show_login_signup\";b:1;s:10:\"show_login\";b:1;s:11:\"show_signup\";b:1;s:5:\"theme\";s:7:\"default\";s:14:\"author_credits\";b:1;s:14:\"clear_database\";b:0;s:21:\"minimum_qtitle_length\";i:10;s:23:\"minimum_question_length\";i:10;s:16:\"multiple_answers\";b:1;s:21:\"disallow_op_to_answer\";b:0;s:18:\"minimum_ans_length\";i:5;s:21:\"avatar_size_qquestion\";i:50;s:18:\"allow_private_post\";b:1;s:19:\"avatar_size_qanswer\";i:50;s:20:\"avatar_size_qcomment\";i:25;s:16:\"avatar_size_list\";i:45;s:17:\"question_per_page\";s:2:\"20\";s:16:\"answers_per_page\";s:1:\"5\";s:17:\"question_order_by\";s:6:\"active\";s:12:\"answers_sort\";s:6:\"active\";s:14:\"close_selected\";b:1;s:21:\"moderate_new_question\";s:6:\"no_mod\";s:18:\"mod_question_point\";i:10;s:15:\"question_prefix\";s:8:\"question\";s:20:\"question_text_editor\";b:1;s:18:\"answer_text_editor\";b:1;s:15:\"base_page_title\";s:6:\"问题\";s:17:\"search_page_title\";s:14:\"搜索“%s”\";s:15:\"user_page_title\";s:2:\"%s\";s:28:\"disable_comments_on_question\";b:0;s:26:\"disable_comments_on_answer\";b:0;s:19:\"new_question_status\";s:7:\"publish\";s:17:\"new_answer_status\";s:7:\"publish\";s:20:\"edit_question_status\";s:7:\"publish\";s:18:\"edit_answer_status\";s:7:\"publish\";s:20:\"disable_delete_after\";i:86400;s:10:\"db_cleanup\";b:0;s:26:\"disable_voting_on_question\";b:0;s:24:\"disable_voting_on_answer\";b:0;s:16:\"enable_recaptcha\";b:0;s:18:\"recaptcha_site_key\";s:0:\"\";s:20:\"recaptcha_secret_key\";s:0:\"\";s:21:\"show_question_sidebar\";b:1;s:12:\"allow_upload\";b:1;s:16:\"uploads_per_post\";i:4;s:18:\"question_page_slug\";s:5:\"forum\";s:23:\"question_page_permalink\";s:16:\"question_perma_3\";s:15:\"max_upload_size\";i:500000;s:29:\"disable_down_vote_on_question\";b:0;s:27:\"disable_down_vote_on_answer\";b:0;s:18:\"show_solved_prefix\";b:1;s:28:\"load_assets_in_anspress_only\";b:0;s:15:\"keep_stop_words\";b:1;s:19:\"default_date_format\";b:1;s:21:\"anonymous_post_status\";s:8:\"moderate\";s:9:\"bad_words\";s:0:\"\";s:15:\"duplicate_check\";b:1;s:20:\"disable_q_suggestion\";b:0;s:14:\"comment_number\";i:5;s:17:\"read_question_per\";s:6:\"anyone\";s:15:\"read_answer_per\";s:6:\"anyone\";s:16:\"read_comment_per\";s:6:\"anyone\";s:17:\"post_question_per\";s:9:\"logged_in\";s:15:\"post_answer_per\";s:9:\"logged_in\";s:16:\"post_comment_per\";s:9:\"logged_in\";s:22:\"activity_exclude_roles\";a:0:{}s:14:\"create_account\";b:1;s:19:\"allow_private_posts\";b:1;s:27:\"user_page_title_reputations\";s:6:\"声望\";s:26:\"user_page_slug_reputations\";s:11:\"reputations\";s:8:\"ap_flush\";s:5:\"false\";s:18:\"email_admin_emails\";s:19:\"support@pincman.com\";s:24:\"email_admin_new_question\";b:1;s:22:\"email_admin_new_answer\";b:1;s:23:\"email_admin_new_comment\";b:1;s:25:\"email_admin_edit_question\";b:1;s:23:\"email_admin_edit_answer\";b:1;s:26:\"email_admin_trash_question\";b:1;s:24:\"email_admin_trash_answer\";b:1;s:23:\"email_user_new_question\";b:1;s:21:\"email_user_new_answer\";b:1;s:24:\"email_user_select_answer\";b:1;s:22:\"email_user_new_comment\";b:1;s:24:\"email_user_edit_question\";b:1;s:22:\"email_user_edit_answer\";b:1;s:26:\"trash_answer_email_subject\";s:35:\"一个答案被用户 {user} 丢弃\";s:23:\"trash_answer_email_body\";s:66:\"您好!\n\'{question_title}\' 的回答已经被用户 {user} 丢弃\n\";s:12:\"ap_installed\";s:5:\"false\";s:10:\"ap_version\";s:5:\"4.3.0\";s:9:\"base_page\";i:5;s:12:\"base_page_id\";s:5:\"forum\";s:8:\"ask_page\";i:6;s:11:\"ask_page_id\";s:3:\"ask\";s:9:\"user_page\";i:7;s:12:\"user_page_id\";s:7:\"profile\";s:15:\"categories_page\";i:8;s:18:\"categories_page_id\";s:10:\"categories\";s:9:\"tags_page\";i:9;s:12:\"tags_page_id\";s:4:\"tags\";s:15:\"activities_page\";i:10;s:18:\"activities_page_id\";s:10:\"activities\";s:21:\"form_category_orderby\";s:5:\"count\";s:21:\"categories_page_order\";s:4:\"DESC\";s:23:\"categories_page_orderby\";s:5:\"count\";s:18:\"category_page_slug\";s:8:\"category\";s:19:\"categories_per_page\";i:20;s:23:\"categories_image_height\";i:150;s:11:\"sep-warning\";N;s:17:\"author_page_title\";s:6:\"主页\";s:29:\"user_page_title_notifications\";s:6:\"通知\";s:28:\"user_page_slug_notifications\";s:13:\"notifications\";s:8:\"max_tags\";i:5;s:8:\"min_tags\";i:1;s:13:\"tags_per_page\";i:20;s:13:\"tag_page_slug\";s:3:\"tag\";s:24:\"user_page_slug_questions\";s:9:\"questions\";s:22:\"user_page_slug_answers\";s:7:\"answers\";s:25:\"user_page_title_questions\";s:6:\"问题\";s:23:\"user_page_title_answers\";s:6:\"答案\";}', 'yes'),
(179, 'anspress_addons', 'a:6:{s:14:\"reputation.php\";b:1;s:9:\"email.php\";b:1;s:14:\"categories.php\";b:1;s:8:\"tags.php\";b:1;s:11:\"profile.php\";b:1;s:21:\"syntaxhighlighter.php\";b:1;}', 'yes'),
(180, 'anspress_db_version', '37', 'yes'),
(181, 'pmr_options', 'a:1:{s:20:\"pmr_update_revisions\";b:1;}', 'yes'),
(182, 'Activated_phoenix_media_rename', 'phoenix-media-rename', 'yes'),
(183, 'pmr_update_db_table', '1.0.1', 'yes'),
(184, 'pmr_table_installed', '1', 'yes'),
(185, 'bodhi_svgs_plugin_version', '2.5.1', 'yes'),
(196, 'wpjam-basic', 'a:6:{s:14:\"post_list_ajax\";i:0;s:23:\"post_list_set_thumbnail\";i:0;s:22:\"post_list_update_views\";i:1;s:23:\"post_list_author_filter\";i:0;s:23:\"post_list_sort_selector\";i:1;s:22:\"upload_external_images\";i:0;}', 'yes'),
(197, 'docspress_settings', 'a:1:{s:12:\"docs_page_id\";i:11;}', 'yes'),
(199, 'docspress_current_slug', 'docs', 'yes'),
(200, 'pmr_db_version', '1.0.1', 'yes'),
(201, 'wpjam-cdn', 'a:0:{}', 'yes'),
(202, 'widget_akismet_widget', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(203, 'widget_toc-widget', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(204, 'widget_ap_search_widget', 'a:2:{i:2;a:1:{s:5:\"title\";s:12:\"搜索问题\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(205, 'widget_ap_stats_widget', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(206, 'widget_ap_questions_widget', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(207, 'widget_ap_breadcrumbs_widget', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(208, 'widget_ap_askform_widget', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(209, 'widget_anspress_category_widget', 'a:2:{i:2;a:8:{s:5:\"title\";s:6:\"类别\";s:10:\"hide_empty\";b:0;s:6:\"parent\";s:1:\"0\";s:6:\"number\";s:2:\"10\";s:7:\"orderby\";s:5:\"count\";s:5:\"order\";s:4:\"DESC\";s:10:\"icon_width\";i:32;s:11:\"icon_height\";i:32;}s:12:\"_multiwidget\";i:1;}', 'yes'),
(210, 'wpjam-thumbnail', 'a:0:{}', 'yes'),
(211, 'ap_categories_path', 'forum/categories', 'yes'),
(213, 'docspress_single', 'a:12:{s:13:\"show_comments\";s:2:\"on\";s:21:\"show_feedback_buttons\";s:3:\"off\";s:27:\"show_feedback_buttons_likes\";s:2:\"on\";s:24:\"show_feedback_suggestion\";s:3:\"off\";s:30:\"show_feedback_suggestion_email\";s:0:\"\";s:17:\"show_anchor_links\";s:2:\"on\";s:19:\"sidebar_show_search\";s:2:\"on\";s:24:\"sidebar_show_nav_parents\";s:3:\"off\";s:23:\"sidebar_show_nav_childs\";s:3:\"off\";s:33:\"sidebar_show_nav_number_of_childs\";s:2:\"on\";s:4:\"ajax\";s:3:\"off\";s:14:\"ajax_custom_js\";s:115:\"/*\r\n * New page content loaded via ajax you can get in variable \'new_page\'\r\n * Example: console.log(new_page);\r\n */\";}', 'yes'),
(214, 'docspress_archive', '', 'yes'),
(215, 'docspress_export', '', 'yes'),
(218, 'wpjam-custom', 'a:0:{}', 'yes'),
(221, 'auto_update_plugins', 'a:9:{i:0;s:23:\"docspress/docspress.php\";i:1;s:27:\"wpjam-basic/wpjam-basic.php\";i:2;s:27:\"wp-editormd/wp-editormd.php\";i:3;s:30:\"table-of-contents-plus/toc.php\";i:4;s:27:\"svg-support/svg-support.php\";i:5;s:37:\"post-types-order/post-types-order.php\";i:6;s:45:\"phoenix-media-rename/phoenix-media-rename.php\";i:7;s:43:\"custom-taxonomy-order-ne/customtaxorder.php\";i:8;s:53:\"anspress-question-answer/anspress-question-answer.php\";}', 'no'),
(226, 'cpto_options', 'a:7:{s:23:\"show_reorder_interfaces\";a:6:{s:4:\"post\";s:4:\"show\";s:10:\"attachment\";s:4:\"show\";s:8:\"wp_block\";s:4:\"show\";s:8:\"question\";s:4:\"show\";s:6:\"answer\";s:4:\"show\";s:6:\"course\";s:4:\"show\";}s:8:\"autosort\";i:1;s:9:\"adminsort\";i:1;s:18:\"use_query_ASC_DESC\";s:0:\"\";s:17:\"archive_drag_drop\";i:1;s:10:\"capability\";s:14:\"manage_options\";s:21:\"navigation_sort_apply\";i:1;}', 'yes'),
(227, 'CPT_configured', 'TRUE', 'yes'),
(231, 'widget_recent-posts', 'a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}', 'yes'),
(232, 'widget_recent-comments', 'a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}', 'yes'),
(235, 'current_theme', 'rowfish', 'yes'),
(236, 'theme_mods_rizhuti-v2', 'a:4:{i:0;b:0;s:18:\"nav_menu_locations\";a:0:{}s:18:\"custom_css_post_id\";i:-1;s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1635420698;s:4:\"data\";a:13:{s:19:\"wp_inactive_widgets\";a:0:{}s:7:\"modules\";a:0:{}s:7:\"sidebar\";a:3:{i:0;s:7:\"block-2\";i:1;s:7:\"block-3\";i:2;s:7:\"block-4\";}s:11:\"cat_sidebar\";a:2:{i:0;s:7:\"block-5\";i:1;s:7:\"block-6\";}s:12:\"page_sidebar\";a:0:{}s:6:\"footer\";a:0:{}s:9:\"ap-before\";a:0:{}s:6:\"ap-top\";a:0:{}s:10:\"ap-sidebar\";a:0:{}s:11:\"ap-qsidebar\";a:0:{}s:11:\"ap-category\";a:0:{}s:6:\"ap-tag\";a:0:{}s:9:\"ap-author\";a:0:{}}}}', 'yes'),
(237, 'theme_switched', '', 'yes'),
(238, 'rizhutiv2_theme_send_status', 'https://jikexingkong.com', 'yes'),
(239, 'rizhuti_v2_theme_setup_status_1', '1', 'yes');
INSERT INTO `wp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(240, '_rizhutiv2_options', 'a:138:{s:22:\"disable_gutenberg_edit\";s:0:\"\";s:20:\"is_search_title_only\";s:0:\"\";s:16:\"is_site_comments\";s:1:\"1\";s:16:\"is_site_question\";s:0:\"\";s:15:\"is_site_tickets\";s:1:\"1\";s:14:\"is_site_tougao\";s:0:\"\";s:17:\"is_site_tougao_wp\";s:0:\"\";s:15:\"md5_file_udpate\";s:0:\"\";s:17:\"is_rizhuti_v2_seo\";s:1:\"1\";s:8:\"site_seo\";a:3:{s:9:\"separator\";s:1:\"-\";s:8:\"keywords\";s:74:\"日主题,日主题V2,Rizhuti,RizhutiV2,Riplus,rizhuti.com,rizhuti,Ritheme\";s:11:\"description\";s:197:\"日主题v2是一款全新架构的Wordpress主题，兼容老款日主题，支持会员商城 ，前后台界面均支持html5响应式布局，夜间模式一键切换。喜欢你就日一下。\";}s:9:\"site_logo\";s:68:\"https://jikexingkong.com/wp-content/themes/rizhuti-v2/assets/img/logo.png\";s:12:\"site_favicon\";s:71:\"https://jikexingkong.com/wp-content/themes/rizhuti-v2/assets/img/favicon.png\";s:12:\"navbar_style\";s:6:\"sticky\";s:21:\"navbar_disable_search\";s:1:\"1\";s:19:\"is_site_wide_screen\";s:0:\"\";s:28:\"is_compare_options_to_global\";s:0:\"\";s:17:\"hero_single_style\";s:4:\"none\";s:20:\"sidebar_single_style\";s:5:\"right\";s:20:\"archive_single_style\";s:4:\"none\";s:18:\"archive_item_style\";s:4:\"list\";s:21:\"is_post_thumb_has_box\";s:0:\"\";s:22:\"is_post_list_date_diff\";s:1:\"1\";s:19:\"is_post_list_author\";s:1:\"1\";s:21:\"is_post_list_category\";s:1:\"1\";s:17:\"is_post_list_date\";s:1:\"1\";s:20:\"is_post_list_comment\";s:0:\"\";s:19:\"is_post_list_favnum\";s:0:\"\";s:18:\"is_post_list_views\";s:1:\"1\";s:17:\"is_post_list_shop\";s:1:\"1\";s:18:\"is_post_list_price\";s:1:\"1\";s:20:\"is_post_grid_excerpt\";s:1:\"1\";s:19:\"is_post_grid_author\";s:1:\"1\";s:21:\"is_post_grid_category\";s:1:\"1\";s:17:\"is_post_grid_date\";s:1:\"1\";s:20:\"is_post_grid_comment\";s:0:\"\";s:19:\"is_post_grid_favnum\";s:0:\"\";s:18:\"is_post_grid_views\";s:1:\"1\";s:17:\"is_post_grid_shop\";s:1:\"1\";s:18:\"is_post_grid_price\";s:1:\"1\";s:15:\"site_pagination\";s:7:\"numeric\";s:23:\"is_single_shop_template\";s:0:\"\";s:27:\"is_single_shop_template_img\";s:1:\"1\";s:25:\"single_shop_template_help\";a:5:{i:0;a:2:{s:5:\"title\";s:54:\"免费下载或者VIP会员资源能否直接商用？\";s:4:\"desc\";s:232:\"本站所有资源版权均属于原作者所有，这里所提供资源均只能用于参考学习用，请勿直接商用。若由于商用引起版权纠纷，一切责任均由使用者承担。更多说明请参考 VIP介绍。\";}i:1;a:2:{s:5:\"title\";s:42:\"提示下载完但解压或打开不了？\";s:4:\"desc\";s:294:\"最常见的情况是下载不完整: 可对比下载完压缩包的与网盘上的容量，若小于网盘提示的容量则是这个原因。这是浏览器下载的bug，建议用百度网盘软件或迅雷下载。 若排除这种情况，可在对应资源底部留言，或联络我们。\";}i:2;a:2:{s:5:\"title\";s:54:\"找不到素材资源介绍文章里的示例图片？\";s:4:\"desc\";s:393:\"对于会员专享、整站源码、程序插件、网站模板、网页模版等类型的素材，文章内用于介绍的图片通常并不包含在对应可供下载素材包内。这些相关商业图片需另外购买，且本站不负责(也没有办法)找到出处。 同样地一些字体文件也是这种情况，但部分素材会在素材包内有一份字体下载链接清单。\";}i:3;a:2:{s:5:\"title\";s:60:\"付款后无法显示下载地址或者无法查看内容？\";s:4:\"desc\";s:111:\"如果您已经成功付款但是网站没有弹出成功提示，请联系站长提供付款信息为您处理\";}i:4;a:2:{s:5:\"title\";s:39:\"购买该资源后，可以退款吗？\";s:4:\"desc\";s:193:\"源码素材属于虚拟商品，具有可复制性，可传播性，一旦授予，不接受任何形式的退款、换货要求。请您在购买获取之前确认好 是您所需要的资源\";}}s:21:\"is_single_meta_favnum\";s:1:\"1\";s:20:\"is_single_meta_views\";s:1:\"1\";s:20:\"is_single_breadcrumb\";s:1:\"1\";s:16:\"single_copyright\";s:356:\"<small><strong>声明：</strong>本站所有文章，如无特殊说明或标注，均为本站原创发布。任何个人或组织，在未征得本站同意时，禁止复制、盗用、采集、发布本站内容到任何网站、书籍等各类媒体平台。如若本站内容侵犯了原著者的合法权益，可联系我们进行处理。</small>\";s:14:\"is_single_tags\";s:1:\"1\";s:15:\"is_single_share\";s:1:\"1\";s:20:\"is_single_entry_page\";s:1:\"1\";s:24:\"related_posts_item_style\";s:4:\"list\";s:24:\"single_related_posts_num\";s:1:\"4\";s:21:\"is_single_share_poser\";s:1:\"1\";s:23:\"single_share_poser_logo\";s:68:\"https://jikexingkong.com/wp-content/themes/rizhuti-v2/assets/img/logo.png\";s:23:\"single_share_poser_desc\";s:39:\"扫码识别右侧二维码阅读全文\";s:13:\"default_thumb\";s:69:\"https://jikexingkong.com/wp-content/themes/rizhuti-v2/assets/img/thumb.jpg\";s:19:\"post_thumbnail_size\";a:2:{s:5:\"width\";s:3:\"300\";s:6:\"height\";s:3:\"200\";}s:19:\"post_thumbnail_crop\";s:1:\"1\";s:16:\"post_medium_size\";a:2:{s:5:\"width\";s:1:\"0\";s:6:\"height\";s:1:\"0\";}s:15:\"post_large_size\";a:2:{s:5:\"width\";s:1:\"0\";s:6:\"height\";s:1:\"0\";}s:20:\"is_img_cloud_storage\";s:1:\"1\";s:24:\"img_cloud_storage_domain\";s:42:\"https://xxxxx.oss-cn-qingdao.aliyuncs.com/\";s:23:\"img_cloud_storage_param\";s:46:\"?x-oss-process=image/resize,m_fill,h_200,w_300\";s:17:\"is_archive_top_bg\";s:1:\"1\";s:21:\"is_archive_top_bg_one\";s:0:\"\";s:22:\"archive_top_bg_one_img\";s:70:\"https://jikexingkong.com/wp-content/themes/rizhuti-v2/assets/img/top-bg.jpg\";s:17:\"is_archive_filter\";s:1:\"1\";s:21:\"is_archive_filter_cat\";s:1:\"1\";s:20:\"archive_filter_cat_1\";s:0:\"\";s:27:\"is_archive_filter_cat_child\";s:1:\"1\";s:26:\"archive_filter_cat_orderby\";s:2:\"id\";s:21:\"is_archive_filter_tag\";s:1:\"1\";s:23:\"is_archive_filter_price\";s:1:\"1\";s:23:\"is_archive_filter_order\";s:1:\"1\";s:21:\"is_archive_breadcrumb\";s:1:\"1\";s:12:\"is_site_shop\";s:1:\"1\";s:14:\"is_site_mycoin\";s:1:\"1\";s:16:\"site_mycoin_name\";s:6:\"金币\";s:16:\"site_mycoin_rate\";s:2:\"10\";s:16:\"site_mycoin_icon\";s:12:\"fas fa-coins\";s:22:\"site_mycoin_pay_minnum\";s:1:\"1\";s:22:\"site_mycoin_pay_maxnum\";s:4:\"9999\";s:19:\"site_mycoin_pay_arr\";s:0:\"\";s:29:\"show_shop_widget_wap_position\";s:6:\"bottom\";s:25:\"is_rizhuti_v2_nologin_pay\";s:1:\"1\";s:25:\"rizhuti_v2_nologin_payKey\";s:15:\"WOAI_riplus_666\";s:23:\"rizhuti_v2_nologin_days\";s:1:\"7\";s:13:\"is_mycoin_pay\";s:1:\"1\";s:10:\"is_cdk_pay\";s:1:\"1\";s:16:\"cdk_pay_pay_link\";s:0:\"\";s:9:\"is_alipay\";s:1:\"1\";s:6:\"alipay\";a:7:{s:7:\"is_mapi\";s:0:\"\";s:9:\"is_mobile\";s:0:\"\";s:3:\"pid\";s:0:\"\";s:6:\"md5Key\";s:0:\"\";s:5:\"appid\";s:0:\"\";s:10:\"privateKey\";s:0:\"\";s:9:\"publicKey\";s:0:\"\";}s:12:\"is_weixinpay\";s:0:\"\";s:9:\"weixinpay\";a:5:{s:6:\"mch_id\";s:0:\"\";s:5:\"appid\";s:0:\"\";s:3:\"key\";s:0:\"\";s:8:\"is_jsapi\";s:1:\"1\";s:9:\"is_mobile\";s:0:\"\";}s:18:\"is_xunhupay_weixin\";s:0:\"\";s:15:\"xunhupay_weixin\";a:3:{s:5:\"mchid\";s:0:\"\";s:11:\"private_key\";s:0:\"\";s:6:\"url_do\";s:26:\"https://admin.xunhuweb.com\";}s:18:\"is_xunhupay_alipay\";s:0:\"\";s:15:\"xunhupay_alipay\";a:3:{s:5:\"mchid\";s:0:\"\";s:11:\"private_key\";s:0:\"\";s:6:\"url_do\";s:26:\"https://admin.xunhuweb.com\";}s:18:\"is_hupijiao_weixin\";s:0:\"\";s:15:\"hupijiao_weixin\";a:3:{s:5:\"appid\";s:0:\"\";s:9:\"appsecret\";s:0:\"\";s:6:\"url_do\";s:40:\"https://api.xunhupay.com/payment/do.html\";}s:18:\"is_hupijiao_alipay\";s:0:\"\";s:15:\"hupijiao_alipay\";a:3:{s:5:\"appid\";s:0:\"\";s:9:\"appsecret\";s:0:\"\";s:6:\"url_do\";s:40:\"https://api.xunhupay.com/payment/do.html\";}s:16:\"site_vip_options\";a:19:{s:13:\"0_vip_downnum\";s:1:\"5\";s:19:\"0_vip_download_rate\";s:3:\"100\";s:15:\"0_vip_aff_ratio\";s:4:\"0.05\";s:22:\"0_vip_author_aff_ratio\";s:1:\"0\";s:12:\"31_vip_price\";s:2:\"19\";s:14:\"31_vip_downnum\";s:2:\"10\";s:20:\"31_vip_download_rate\";s:3:\"200\";s:16:\"31_vip_aff_ratio\";s:3:\"0.1\";s:23:\"31_vip_author_aff_ratio\";s:1:\"0\";s:13:\"365_vip_price\";s:2:\"99\";s:15:\"365_vip_downnum\";s:2:\"20\";s:21:\"365_vip_download_rate\";s:3:\"300\";s:17:\"365_vip_aff_ratio\";s:4:\"0.15\";s:24:\"365_vip_author_aff_ratio\";s:1:\"0\";s:14:\"3600_vip_price\";s:3:\"199\";s:16:\"3600_vip_downnum\";s:2:\"99\";s:22:\"3600_vip_download_rate\";s:4:\"2000\";s:18:\"3600_vip_aff_ratio\";s:3:\"0.2\";s:25:\"3600_vip_author_aff_ratio\";s:1:\"0\";}s:11:\"is_site_aff\";s:1:\"1\";s:18:\"is_site_author_aff\";s:1:\"1\";s:10:\"wppay_type\";s:1:\"0\";s:11:\"wppay_price\";s:3:\"0.1\";s:14:\"wppay_vip_auth\";s:1:\"0\";s:10:\"wppay_down\";s:0:\"\";s:10:\"wppay_info\";s:0:\"\";s:17:\"site_login_bg_img\";s:72:\"https://jikexingkong.com/wp-content/themes/rizhuti-v2/assets/img/login-bg.jpg\";s:20:\"site_login_reg_href1\";s:1:\"#\";s:20:\"site_login_reg_href2\";s:1:\"#\";s:19:\"site_profile_bg_img\";s:74:\"https://jikexingkong.com/wp-content/themes/rizhuti-v2/assets/img/profile-bg.jpg\";s:27:\"is_site_register_bind_email\";s:0:\"\";s:28:\"is_site_email_captcha_verify\";s:0:\"\";s:17:\"is_qq_007_captcha\";s:0:\"\";s:20:\"qq_007_captcha_appid\";s:0:\"\";s:21:\"qq_007_captcha_appkey\";s:0:\"\";s:18:\"is_site_user_login\";s:1:\"1\";s:21:\"is_site_user_register\";s:1:\"1\";s:9:\"is_sns_qq\";s:0:\"\";s:6:\"sns_qq\";a:2:{s:6:\"app_id\";s:0:\"\";s:10:\"app_secret\";s:0:\"\";}s:13:\"is_sns_weixin\";s:0:\"\";s:10:\"sns_weixin\";a:7:{s:14:\"sns_weixin_mod\";s:2:\"mp\";s:6:\"app_id\";s:0:\"\";s:10:\"app_secret\";s:0:\"\";s:9:\"mp_app_id\";s:0:\"\";s:13:\"mp_app_secret\";s:0:\"\";s:12:\"mp_app_token\";s:13:\"rizhutiv28888\";s:15:\"is_mp_bind_open\";s:0:\"\";}s:12:\"is_sns_weibo\";s:0:\"\";s:9:\"sns_weibo\";a:2:{s:6:\"app_id\";s:0:\"\";s:10:\"app_secret\";s:0:\"\";}s:19:\"site_footer_rollbar\";a:4:{i:0;a:4:{s:5:\"title\";s:6:\"客服\";s:4:\"icon\";s:14:\"fas fa-headset\";s:8:\"is_blank\";s:0:\"\";s:4:\"href\";s:68:\"http://wpa.qq.com/msgrd?v=3&amp;uin=6666666&amp;site=qq&amp;menu=yes\";}i:1;a:4:{s:5:\"title\";s:18:\"云服务器推荐\";s:4:\"icon\";s:10:\"far fa-hdd\";s:8:\"is_blank\";s:0:\"\";s:4:\"href\";s:55:\"https://www.aliyun.com/minisite/goods?userCode=u4kxbrjo\";}i:2;a:4:{s:5:\"title\";s:6:\"会员\";s:4:\"icon\";s:13:\"fa fa-diamond\";s:8:\"is_blank\";s:0:\"\";s:4:\"href\";s:35:\"https://jikexingkong.com/user?action=vip\";}i:3;a:4:{s:5:\"title\";s:6:\"我的\";s:4:\"icon\";s:11:\"far fa-user\";s:8:\"is_blank\";s:0:\"\";s:4:\"href\";s:24:\"https://jikexingkong.com/user\";}}s:21:\"is_site_footer_widget\";s:1:\"1\";s:16:\"site_footer_logo\";s:68:\"https://jikexingkong.com/wp-content/themes/rizhuti-v2/assets/img/logo.png\";s:16:\"site_footer_desc\";s:173:\"日主题v2是一款全新架构的Wordpress主题，兼容老款日主题，支持会员商城 ，前后台界面均支持html5响应式布局，夜间模式一键切换。\";s:17:\"site_footer_links\";s:0:\"\";s:19:\"site_copyright_text\";s:85:\"Copyright © 2021 <a href=\"http://ritheme.com/\">日主题V2</a> - All rights reserved\";s:13:\"site_ipc_text\";s:104:\"<a href=\"https://beian.miit.gov.cn\" target=\"_blank\" rel=\"noreferrer nofollow\">京ICP备18888888号-1</a>\";s:14:\"site_ipc2_text\";s:152:\"<a href=\"http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=188888888\" target=\"_blank\" rel=\"noreferrer nofollow\">京公网安备 188888888</a>\";s:6:\"web_js\";s:0:\"\";s:12:\"ri_active_id\";s:18:\"ri6641101416549504\";s:13:\"ri_active_key\";s:16:\"Ei59H3RyT3QdnoGG\";}', 'yes'),
(241, 'widget_links', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(242, 'widget_rizhuti_v2_module_parallax', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(243, 'widget_rizhuti_v2_module_search', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(244, 'widget_rizhuti_v2_module_slideer_img', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(245, 'widget_rizhuti_v2_module_slideer_post', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(246, 'widget_rizhuti_v2_module_post_carousel', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(247, 'widget_rizhuti_v2_module_catbox_carousel', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(248, 'widget_rizhuti_v2_module_post_item', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(249, 'widget_rizhuti_v2_module_cms_post', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(250, 'widget_rizhuti_v2_module_cms_title', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(251, 'widget_rizhuti_v2_module_division', 'a:2:{i:3;a:2:{s:10:\"is_rounded\";s:1:\"1\";s:8:\"div_data\";a:4:{i:0;a:4:{s:5:\"title\";s:12:\"标题文字\";s:4:\"icon\";s:13:\"fab fa-buffer\";s:4:\"desc\";s:27:\"这里是描述内容介绍\";s:4:\"link\";s:0:\"\";}i:1;a:4:{s:5:\"title\";s:12:\"标题文字\";s:4:\"icon\";s:13:\"fab fa-buffer\";s:4:\"desc\";s:27:\"这里是描述内容介绍\";s:4:\"link\";s:0:\"\";}i:2;a:4:{s:5:\"title\";s:12:\"标题文字\";s:4:\"icon\";s:13:\"fab fa-buffer\";s:4:\"desc\";s:27:\"这里是描述内容介绍\";s:4:\"link\";s:0:\"\";}i:3;a:4:{s:5:\"title\";s:12:\"标题文字\";s:4:\"icon\";s:13:\"fab fa-buffer\";s:4:\"desc\";s:27:\"这里是描述内容介绍\";s:4:\"link\";s:0:\"\";}}}s:12:\"_multiwidget\";i:1;}', 'yes'),
(252, 'widget_rizhuti_v2_widget_btns', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(253, 'widget_rizhuti_v2_module_vip_price', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(254, 'widget_rizhuti_v2_module_cms_list', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(255, 'widget_rizhuti_v2_widget_post_item', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(256, 'widget_rizhuti_v2_shop_down', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(260, 'theme_mods_rowfish', 'a:3:{i:0;b:0;s:18:\"nav_menu_locations\";a:1:{s:7:\"primary\";i:12;}s:18:\"custom_css_post_id\";i:-1;}', 'yes'),
(261, '_riprov2_options', 'a:174:{s:9:\"site_logo\";s:0:\"\";s:12:\"site_favicon\";s:0:\"\";s:21:\"download_global_limit\";s:0:\"\";s:20:\"download_speed_limit\";s:1:\"0\";s:20:\"is_search_title_only\";s:0:\"\";s:16:\"is_site_comments\";s:1:\"1\";s:12:\"use_anspress\";s:1:\"1\";s:15:\"is_site_tickets\";s:1:\"1\";s:14:\"is_site_tougao\";i:0;s:17:\"is_site_tougao_wp\";s:0:\"\";s:15:\"md5_file_udpate\";s:0:\"\";s:17:\"is_rizhuti_v2_seo\";s:1:\"1\";s:8:\"site_seo\";a:3:{s:9:\"separator\";s:1:\"-\";s:8:\"keywords\";s:74:\"日主题,日主题V2,Rizhuti,RizhutiV2,Riplus,rizhuti.com,rizhuti,Ritheme\";s:11:\"description\";s:197:\"日主题v2是一款全新架构的Wordpress主题，兼容老款日主题，支持会员商城 ，前后台界面均支持html5响应式布局，夜间模式一键切换。喜欢你就日一下。\";}s:25:\"single_shop_template_help\";a:3:{i:0;a:2:{s:5:\"title\";s:54:\"免费下载或者VIP会员资源能否直接商用？\";s:4:\"desc\";s:232:\"本站所有资源版权均属于原作者所有，这里所提供资源均只能用于参考学习用，请勿直接商用。若由于商用引起版权纠纷，一切责任均由使用者承担。更多说明请参考 VIP介绍。\";}i:1;a:2:{s:5:\"title\";s:60:\"付款后无法显示下载地址或者无法查看内容？\";s:4:\"desc\";s:111:\"如果您已经成功付款但是网站没有弹出成功提示，请联系站长提供付款信息为您处理\";}i:2;a:2:{s:5:\"title\";s:39:\"购买该资源后，可以退款吗？\";s:4:\"desc\";s:193:\"源码素材属于虚拟商品，具有可复制性，可传播性，一旦授予，不接受任何形式的退款、换货要求。请您在购买获取之前确认好 是您所需要的资源\";}}s:18:\"is_top_bg_perticle\";s:1:\"1\";s:22:\"is_home_top_back_image\";s:1:\"1\";s:25:\"home_top_back_image_light\";s:82:\"https://jikexingkong.com/wp-content/themes/rowfish/assets/images/author/spring.png\";s:24:\"home_top_back_image_dark\";s:80:\"https://jikexingkong.com/wp-content/themes/rowfish/assets/images/author/deer.png\";s:17:\"is_archive_top_bg\";s:1:\"1\";s:17:\"author_top_images\";a:5:{i:0;a:2:{s:5:\"title\";s:12:\"梦幻麋鹿\";s:5:\"image\";s:80:\"https://jikexingkong.com/wp-content/themes/rowfish/assets/images/author/deer.png\";}i:1;a:2:{s:5:\"title\";s:12:\"末日城市\";s:5:\"image\";s:80:\"https://jikexingkong.com/wp-content/themes/rowfish/assets/images/author/city.png\";}i:2;a:2:{s:5:\"title\";s:12:\"春天来了\";s:5:\"image\";s:82:\"https://jikexingkong.com/wp-content/themes/rowfish/assets/images/author/spring.png\";}i:3;a:2:{s:5:\"title\";s:12:\"天下布武\";s:5:\"image\";s:79:\"https://jikexingkong.com/wp-content/themes/rowfish/assets/images/author/war.png\";}i:4;a:2:{s:5:\"title\";s:12:\"幽冥世界\";s:5:\"image\";s:86:\"https://jikexingkong.com/wp-content/themes/rowfish/assets/images/author/underworld.png\";}}s:22:\"default_archive_images\";a:3:{i:0;a:1:{s:3:\"url\";s:48:\"https://pic.pincman.com/media/20210518114708.jpg\";}i:1;a:1:{s:3:\"url\";s:48:\"https://pic.pincman.com/media/20210518114420.png\";}i:2;a:1:{s:3:\"url\";s:48:\"https://pic.pincman.com/media/20210518114740.png\";}}s:19:\"default_hero_images\";a:3:{i:0;a:1:{s:3:\"url\";s:48:\"https://pic.pincman.com/media/20210423110054.png\";}i:1;a:1:{s:3:\"url\";s:48:\"https://pic.pincman.com/media/20210423115122.png\";}i:2;a:1:{s:3:\"url\";s:48:\"https://pic.pincman.com/media/20210423130851.png\";}}s:20:\"default_thumb_images\";a:5:{i:0;a:1:{s:3:\"url\";s:70:\"https://jikexingkong.com/wp-content/themes/rowfish/assets/images/1.jpg\";}i:1;a:1:{s:3:\"url\";s:70:\"https://jikexingkong.com/wp-content/themes/rowfish/assets/images/2.jpg\";}i:2;a:1:{s:3:\"url\";s:70:\"https://jikexingkong.com/wp-content/themes/rowfish/assets/images/2.jpg\";}i:3;a:1:{s:3:\"url\";s:70:\"https://jikexingkong.com/wp-content/themes/rowfish/assets/images/3.jpg\";}i:4;a:1:{s:3:\"url\";s:70:\"https://jikexingkong.com/wp-content/themes/rowfish/assets/images/4.jpg\";}}s:19:\"post_thumbnail_size\";a:2:{s:5:\"width\";s:3:\"300\";s:6:\"height\";s:3:\"200\";}s:19:\"post_thumbnail_crop\";s:1:\"1\";s:16:\"post_medium_size\";a:2:{s:5:\"width\";s:1:\"0\";s:6:\"height\";s:1:\"0\";}s:15:\"post_large_size\";a:2:{s:5:\"width\";s:1:\"0\";s:6:\"height\";s:1:\"0\";}s:20:\"is_img_cloud_storage\";s:1:\"1\";s:24:\"img_cloud_storage_domain\";s:42:\"https://xxxxx.oss-cn-qingdao.aliyuncs.com/\";s:23:\"img_cloud_storage_param\";s:46:\"?x-oss-process=image/resize,m_fill,h_200,w_300\";s:17:\"free_onlogin_play\";s:1:\"1\";s:13:\"course_status\";a:4:{i:0;a:3:{s:4:\"slug\";s:9:\"preparing\";s:4:\"name\";s:9:\"策划中\";s:5:\"color\";s:7:\"#6c757d\";}i:1;a:3:{s:4:\"slug\";s:7:\"waiting\";s:4:\"name\";s:9:\"待发布\";s:5:\"color\";s:7:\"#10c469\";}i:2;a:3:{s:4:\"slug\";s:8:\"updating\";s:4:\"name\";s:9:\"更新中\";s:5:\"color\";s:7:\"#ff5b5b\";}i:3;a:3:{s:4:\"slug\";s:8:\"complete\";s:4:\"name\";s:9:\"已完结\";s:5:\"color\";s:7:\"#536de6\";}}s:13:\"course_levels\";a:3:{i:0;a:4:{s:4:\"slug\";s:6:\"simple\";s:4:\"name\";s:6:\"入门\";s:4:\"icon\";s:18:\"fas fa-feather-alt\";s:5:\"color\";s:7:\"warning\";}i:1;a:4:{s:4:\"slug\";s:8:\"advanced\";s:4:\"name\";s:6:\"进阶\";s:4:\"icon\";s:15:\"fab fa-gripfire\";s:5:\"color\";s:6:\"danger\";}i:2;a:4:{s:4:\"slug\";s:6:\"master\";s:4:\"name\";s:6:\"大师\";s:4:\"icon\";s:13:\"fab fa-envira\";s:5:\"color\";s:7:\"success\";}}s:23:\"is_course_template_help\";s:1:\"1\";s:20:\"course_template_help\";a:5:{i:0;a:2:{s:5:\"title\";s:64:\"为什么本站部分教程需要付费或者订阅才能使用?\";s:4:\"desc\";s:347:\"因为视频教程的制作耗费站长大量的业余时间,有着巨大的工作量.每一集教程,需要编写代码,编写文档,录制视频,剪辑视频等多个流程,并且还提供了问答服务,如果全部免费的话本站将很难持续发展下去为大家提供更优质的内容.所以不得不收取一定费用,望大家谅解.\";}i:1;a:2:{s:5:\"title\";s:61:\"成为订阅者将获得哪些权限以及享受哪些服务?\";s:4:\"desc\";s:289:\"订阅本站后可以使用本站的一切服务,包括视频教程的学习,下载,问答以及本站发布的其它任何资源都可以随意使用.本站保证不再对订阅者收取二次费用.需要注意的是,后续推送的站长直播服务只有终身订阅者才可以享受.\";}i:2;a:2:{s:5:\"title\";s:40:\"本站主要提供哪些内容和服务?\";s:4:\"desc\";s:364:\"本站目前提供各类编程开发相关的技术视频教程以及针对这些视频教程的问答服务和这些技术周边生态的导航,文档的翻译,开源项目的推荐,技巧性文章的发布等等.并且也为订阅者提供QQ群和discord问答服务.对于视频教程中的代码,站长专门搭建了一个代码托管平台方便大家下载.\";}i:3;a:2:{s:5:\"title\";s:49:\"本站的所涉及的技术栈包含哪些方面?\";s:4:\"desc\";s:389:\"本站在编程语言方面专注于Javascript/Typescript,Golang,PHP等几种站长擅长以及工作中常用的语言.技术栈涉及React,Vue等前端生态以及,Node.js,各种golang和php技术等后端技能,同时也会涉及一些包括Linux,Devops,Docker,K8S等在内与编程相关的技术,甚至还会讲解一些硬件方面的东西,总之用\"杂七杂八\"形容最为贴切.\";}i:4;a:2:{s:5:\"title\";s:34:\"本站支付后，可以退款吗?\";s:4:\"desc\";s:230:\"本站绝大多数收费属于原创的虚拟商品，具有可复制性，可传播性，一旦授予，不接受任何形式的退款、换货要求。请您在购买获取或订阅之前确认好 ,避免引起不必要的纠纷\";}}s:20:\"sidebar_course_style\";s:5:\"right\";s:21:\"is_course_list_author\";s:1:\"1\";s:22:\"is_course_list_excerpt\";s:1:\"1\";s:23:\"is_course_list_category\";s:1:\"1\";s:19:\"is_course_list_date\";s:0:\"\";s:21:\"is_course_list_status\";s:1:\"1\";s:20:\"is_course_list_level\";s:1:\"1\";s:20:\"is_course_list_views\";s:1:\"1\";s:21:\"is_course_list_favnum\";s:1:\"1\";s:19:\"is_course_list_shop\";s:1:\"1\";s:24:\"is_course_archive_filter\";s:1:\"1\";s:30:\"is_course_archive_filter_order\";s:1:\"1\";s:30:\"is_course_archive_filter_price\";s:1:\"1\";s:29:\"is_course_simple_filter_price\";s:1:\"1\";s:28:\"is_course_archive_filter_cat\";s:1:\"1\";s:27:\"course_archive_filter_cat_1\";a:6:{i:0;s:1:\"7\";i:1;s:1:\"6\";i:2;s:1:\"8\";i:3;s:1:\"9\";i:4;s:2:\"11\";i:5;s:2:\"10\";}s:23:\"is_course_status_filter\";s:1:\"1\";s:22:\"is_course_level_filter\";s:1:\"1\";s:19:\"is_site_wide_screen\";s:0:\"\";s:12:\"navbar_style\";s:6:\"sticky\";s:21:\"navbar_disable_search\";s:1:\"1\";s:28:\"is_compare_options_to_global\";s:1:\"0\";s:17:\"hero_single_style\";s:4:\"none\";s:24:\"archive_list_block_style\";s:3:\"fix\";s:28:\"archive_list_merge_thumbnail\";s:0:\"\";s:20:\"sidebar_single_style\";s:5:\"right\";s:20:\"archive_single_style\";s:4:\"none\";s:18:\"archive_item_style\";s:4:\"list\";s:21:\"is_post_thumb_has_box\";s:0:\"\";s:22:\"is_post_list_date_diff\";s:1:\"1\";s:19:\"is_post_list_author\";s:1:\"1\";s:21:\"is_post_list_category\";s:1:\"1\";s:17:\"is_post_list_date\";s:1:\"1\";s:20:\"is_post_list_comment\";s:0:\"\";s:19:\"is_post_list_favnum\";s:0:\"\";s:18:\"is_post_list_views\";s:1:\"1\";s:17:\"is_post_list_shop\";s:1:\"1\";s:18:\"is_post_list_price\";s:1:\"1\";s:20:\"is_post_grid_excerpt\";s:1:\"1\";s:19:\"is_post_grid_author\";s:1:\"1\";s:21:\"is_post_grid_category\";s:1:\"1\";s:17:\"is_post_grid_date\";s:1:\"1\";s:20:\"is_post_grid_comment\";s:0:\"\";s:19:\"is_post_grid_favnum\";s:0:\"\";s:18:\"is_post_grid_views\";s:1:\"1\";s:17:\"is_post_grid_shop\";s:1:\"1\";s:18:\"is_post_grid_price\";s:1:\"1\";s:15:\"site_pagination\";s:7:\"numeric\";s:26:\"is_single_template_top_img\";s:1:\"1\";s:23:\"is_single_shop_template\";i:1;s:21:\"is_single_meta_favnum\";s:1:\"1\";s:20:\"is_single_meta_views\";s:1:\"1\";s:20:\"is_single_breadcrumb\";s:1:\"1\";s:16:\"single_copyright\";s:356:\"<small><strong>声明：</strong>本站所有文章，如无特殊说明或标注，均为本站原创发布。任何个人或组织，在未征得本站同意时，禁止复制、盗用、采集、发布本站内容到任何网站、书籍等各类媒体平台。如若本站内容侵犯了原著者的合法权益，可联系我们进行处理。</small>\";s:14:\"is_single_tags\";s:1:\"1\";s:15:\"is_single_share\";s:1:\"1\";s:20:\"is_single_entry_page\";s:0:\"\";s:24:\"related_posts_item_style\";s:4:\"none\";s:24:\"single_related_posts_num\";s:1:\"4\";s:21:\"is_single_share_poser\";s:1:\"1\";s:23:\"single_share_poser_logo\";s:73:\"https://jikexingkong.com/wp-content/themes/rizhuti-v2/assets/img/logo.png\";s:23:\"single_share_poser_desc\";s:39:\"扫码识别右侧二维码阅读全文\";s:22:\"archive_top_bg_one_img\";s:75:\"https://jikexingkong.com/wp-content/themes/rizhuti-v2/assets/img/top-bg.jpg\";s:17:\"is_archive_filter\";s:1:\"1\";s:21:\"is_archive_filter_cat\";s:1:\"1\";s:20:\"archive_filter_cat_1\";s:0:\"\";s:27:\"is_archive_filter_cat_child\";s:1:\"1\";s:26:\"archive_filter_cat_orderby\";s:2:\"id\";s:21:\"is_archive_filter_tag\";s:1:\"1\";s:23:\"is_archive_filter_price\";s:1:\"0\";s:23:\"is_archive_filter_order\";s:1:\"1\";s:21:\"is_archive_breadcrumb\";s:1:\"1\";s:22:\"is_simple_filter_price\";s:1:\"1\";s:8:\"vip_name\";s:9:\"订阅者\";s:14:\"vip_dopay_name\";s:12:\"订阅本站\";s:8:\"vip_icon\";s:14:\"fab fa-codepen\";s:12:\"is_site_shop\";s:1:\"1\";s:14:\"is_site_mycoin\";i:0;s:16:\"site_mycoin_name\";s:6:\"金币\";s:16:\"site_mycoin_rate\";s:2:\"10\";s:16:\"site_mycoin_icon\";s:12:\"fas fa-coins\";s:22:\"site_mycoin_pay_minnum\";s:1:\"1\";s:22:\"site_mycoin_pay_maxnum\";s:4:\"9999\";s:19:\"site_mycoin_pay_arr\";s:0:\"\";s:25:\"is_rizhuti_v2_nologin_pay\";i:0;s:25:\"rizhuti_v2_nologin_payKey\";s:15:\"WOAI_riplus_666\";s:23:\"rizhuti_v2_nologin_days\";s:1:\"7\";s:16:\"site_vip_options\";a:18:{s:14:\"no_vip_service\";s:67:\"可以学习免费课程,查看免费文档以及下载免费资源\";s:15:\"0_vip_aff_ratio\";s:4:\"0.05\";s:22:\"0_vip_author_aff_ratio\";s:1:\"0\";s:14:\"31_vip_enabled\";s:0:\"\";s:14:\"31_vip_service\";s:89:\"一月内可享受本站所有的课程学习,文档查看,资源下载以及问答服务\";s:12:\"31_vip_price\";s:2:\"19\";s:16:\"31_vip_aff_ratio\";s:3:\"0.1\";s:23:\"31_vip_author_aff_ratio\";s:1:\"0\";s:15:\"365_vip_enabled\";s:1:\"1\";s:15:\"365_vip_service\";s:89:\"一年内可享受本站所有的课程学习,文档查看,资源下载以及问答服务\";s:13:\"365_vip_price\";s:2:\"99\";s:17:\"365_vip_aff_ratio\";s:4:\"0.15\";s:24:\"365_vip_author_aff_ratio\";s:1:\"0\";s:16:\"3600_vip_enabled\";s:1:\"1\";s:16:\"3600_vip_service\";s:107:\"永久享受所有的课程学习,文档查看,资源下载以及问答服务,可加入订阅者QQ群学习\";s:14:\"3600_vip_price\";s:3:\"199\";s:18:\"3600_vip_aff_ratio\";s:3:\"0.2\";s:25:\"3600_vip_author_aff_ratio\";s:1:\"0\";}s:11:\"is_site_aff\";s:1:\"1\";s:18:\"is_site_author_aff\";i:0;s:13:\"is_mycoin_pay\";s:1:\"1\";s:10:\"is_cdk_pay\";s:1:\"1\";s:16:\"cdk_pay_pay_link\";s:0:\"\";s:9:\"is_alipay\";s:1:\"1\";s:6:\"alipay\";a:7:{s:7:\"is_mapi\";s:0:\"\";s:9:\"is_mobile\";s:0:\"\";s:3:\"pid\";s:0:\"\";s:6:\"md5Key\";s:0:\"\";s:5:\"appid\";s:0:\"\";s:10:\"privateKey\";s:0:\"\";s:9:\"publicKey\";s:0:\"\";}s:12:\"is_weixinpay\";s:0:\"\";s:9:\"weixinpay\";a:5:{s:6:\"mch_id\";s:0:\"\";s:5:\"appid\";s:0:\"\";s:3:\"key\";s:0:\"\";s:8:\"is_jsapi\";s:1:\"1\";s:9:\"is_mobile\";s:0:\"\";}s:18:\"is_xunhupay_weixin\";s:0:\"\";s:15:\"xunhupay_weixin\";a:3:{s:5:\"mchid\";s:0:\"\";s:11:\"private_key\";s:0:\"\";s:6:\"url_do\";s:26:\"https://admin.xunhuweb.com\";}s:18:\"is_xunhupay_alipay\";s:0:\"\";s:15:\"xunhupay_alipay\";a:3:{s:5:\"mchid\";s:0:\"\";s:11:\"private_key\";s:0:\"\";s:6:\"url_do\";s:26:\"https://admin.xunhuweb.com\";}s:18:\"is_hupijiao_weixin\";s:0:\"\";s:15:\"hupijiao_weixin\";a:3:{s:5:\"appid\";s:0:\"\";s:9:\"appsecret\";s:0:\"\";s:6:\"url_do\";s:40:\"https://api.xunhupay.com/payment/do.html\";}s:18:\"is_hupijiao_alipay\";s:0:\"\";s:15:\"hupijiao_alipay\";a:3:{s:5:\"appid\";s:0:\"\";s:9:\"appsecret\";s:0:\"\";s:6:\"url_do\";s:40:\"https://api.xunhupay.com/payment/do.html\";}s:29:\"show_shop_widget_wap_position\";s:6:\"bottom\";s:10:\"wppay_type\";s:1:\"0\";s:11:\"wppay_price\";s:3:\"0.1\";s:14:\"wppay_vip_auth\";s:1:\"0\";s:10:\"wppay_down\";s:0:\"\";s:10:\"wppay_info\";s:0:\"\";s:17:\"site_login_bg_img\";s:77:\"https://jikexingkong.com/wp-content/themes/rizhuti-v2/assets/img/login-bg.jpg\";s:20:\"site_login_reg_href1\";s:1:\"#\";s:20:\"site_login_reg_href2\";s:1:\"#\";s:19:\"site_profile_bg_img\";s:79:\"https://jikexingkong.com/wp-content/themes/rizhuti-v2/assets/img/profile-bg.jpg\";s:27:\"is_site_register_bind_email\";s:0:\"\";s:28:\"is_site_email_captcha_verify\";s:0:\"\";s:17:\"is_qq_007_captcha\";s:0:\"\";s:20:\"qq_007_captcha_appid\";s:0:\"\";s:21:\"qq_007_captcha_appkey\";s:0:\"\";s:18:\"is_site_user_login\";s:1:\"1\";s:21:\"is_site_user_register\";s:1:\"1\";s:9:\"is_sns_qq\";s:0:\"\";s:6:\"sns_qq\";a:2:{s:6:\"app_id\";s:0:\"\";s:10:\"app_secret\";s:0:\"\";}s:13:\"is_sns_weixin\";s:0:\"\";s:10:\"sns_weixin\";a:7:{s:14:\"sns_weixin_mod\";s:2:\"mp\";s:6:\"app_id\";s:0:\"\";s:10:\"app_secret\";s:0:\"\";s:9:\"mp_app_id\";s:0:\"\";s:13:\"mp_app_secret\";s:0:\"\";s:12:\"mp_app_token\";s:13:\"rizhutiv28888\";s:15:\"is_mp_bind_open\";s:0:\"\";}s:12:\"is_sns_weibo\";s:0:\"\";s:9:\"sns_weibo\";a:2:{s:6:\"app_id\";s:0:\"\";s:10:\"app_secret\";s:0:\"\";}s:19:\"site_footer_rollbar\";a:4:{i:0;a:4:{s:5:\"title\";s:6:\"客服\";s:4:\"icon\";s:14:\"fas fa-headset\";s:8:\"is_blank\";s:0:\"\";s:4:\"href\";s:68:\"http://wpa.qq.com/msgrd?v=3&amp;uin=6666666&amp;site=qq&amp;menu=yes\";}i:1;a:4:{s:5:\"title\";s:18:\"云服务器推荐\";s:4:\"icon\";s:10:\"far fa-hdd\";s:8:\"is_blank\";s:0:\"\";s:4:\"href\";s:55:\"https://www.aliyun.com/minisite/goods?userCode=u4kxbrjo\";}i:2;a:4:{s:5:\"title\";s:6:\"会员\";s:4:\"icon\";s:13:\"fa fa-diamond\";s:8:\"is_blank\";s:0:\"\";s:4:\"href\";s:40:\"https://jikexingkong.com/user?action=vip\";}i:3;a:4:{s:5:\"title\";s:6:\"我的\";s:4:\"icon\";s:11:\"far fa-user\";s:8:\"is_blank\";s:0:\"\";s:4:\"href\";s:29:\"https://jikexingkong.com/user\";}}s:21:\"is_site_footer_widget\";s:1:\"1\";s:16:\"site_footer_logo\";s:73:\"https://jikexingkong.com/wp-content/themes/rizhuti-v2/assets/img/logo.png\";s:16:\"site_footer_desc\";s:173:\"日主题v2是一款全新架构的Wordpress主题，兼容老款日主题，支持会员商城 ，前后台界面均支持html5响应式布局，夜间模式一键切换。\";s:17:\"site_footer_links\";s:0:\"\";s:19:\"site_copyright_text\";s:85:\"Copyright © 2021 <a href=\"http://ritheme.com/\">日主题V2</a> - All rights reserved\";s:13:\"site_ipc_text\";s:104:\"<a href=\"https://beian.miit.gov.cn\" target=\"_blank\" rel=\"noreferrer nofollow\">浙ICP备18013418号-7</a>\";s:14:\"site_ipc2_text\";s:0:\"\";s:6:\"web_js\";s:0:\"\";s:12:\"ri_active_id\";s:18:\"ri6641101416549504\";s:13:\"ri_active_key\";s:16:\"Ei59H3RyT3QdnoGG\";}', 'yes'),
(262, 'widget_rf_course_download', 'a:2:{i:2;a:4:{s:12:\"pay_btn_name\";s:12:\"立即购买\";s:18:\"pay_login_btn_name\";s:12:\"登录账户\";s:12:\"vip_btn_name\";s:12:\"订阅本站\";s:4:\"desc\";s:81:\"如下载遇到问题可联系站长或<a href=\"/user/msg\">提交工单</a>处理\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(263, 'widget_rf_post_item', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(264, 'widget_rf_multi_post_loop', 'a:2:{i:2;a:24:{s:12:\"is_recommand\";s:1:\"1\";s:15:\"recommand_title\";s:12:\"推荐文章\";s:14:\"recommand_icon\";s:16:\"far fa-thumbs-up\";s:18:\"is_recommand_media\";s:1:\"1\";s:22:\"is_recommand_one_maxbg\";s:0:\"\";s:17:\"recommand_orderby\";s:10:\"menu_order\";s:25:\"is_recommand_only_current\";s:1:\"1\";s:18:\"recommand_category\";s:0:\"\";s:15:\"recommand_count\";s:1:\"5\";s:16:\"recommand_offset\";s:1:\"0\";s:6:\"is_hot\";s:1:\"1\";s:9:\"hot_title\";s:12:\"热门文章\";s:8:\"hot_icon\";s:15:\"fab fa-gripfire\";s:12:\"is_hot_media\";s:1:\"1\";s:16:\"is_hot_one_maxbg\";s:0:\"\";s:11:\"hot_orderby\";s:5:\"views\";s:19:\"is_hot_only_current\";s:1:\"1\";s:12:\"hot_category\";s:0:\"\";s:9:\"hot_count\";s:1:\"5\";s:10:\"hot_offset\";s:1:\"0\";s:11:\"is_comments\";s:1:\"1\";s:14:\"comments_title\";s:12:\"文章评论\";s:13:\"comments_icon\";s:18:\"far fa-comment-alt\";s:18:\"category_disableds\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(439, 'recovery_mode_email_last_sent', '1637328628', 'yes'),
(475, 'course_category_children', 'a:0:{}', 'yes'),
(483, 'wpcom_publish_comments_with_markdown', '1', 'yes'),
(520, 'ap_tags_path', 'forum/tags', 'yes'),
(523, 'ap_user_path', 'forum/profile', 'yes'),
(528, 'nav_menu_options', 'a:2:{i:0;b:0;s:8:\"auto_add\";a:0:{}}', 'yes'),
(590, '_transient_health-check-site-status-result', '{\"good\":16,\"recommended\":2,\"critical\":1}', 'yes'),
(839, 'series_children', 'a:0:{}', 'yes'),
(1006, 'customtaxorder_settings', 'a:12:{s:8:\"category\";i:0;s:8:\"post_tag\";i:0;s:8:\"nav_menu\";i:0;s:13:\"link_category\";i:1;s:11:\"post_format\";i:0;s:8:\"wp_theme\";i:0;s:17:\"question_category\";i:1;s:12:\"question_tag\";i:0;s:13:\"docs_category\";i:0;s:15:\"course_category\";i:0;s:13:\"course_series\";i:0;s:6:\"series\";i:0;}', 'yes'),
(1034, 'question_category_children', 'a:2:{i:33;a:3:{i:0;i:34;i:1;i:35;i:2;i:36;}i:37;a:4:{i:0;i:38;i:1;i:39;i:2;i:40;i:3;i:41;}}', 'yes'),
(1094, 'question_tag_children', 'a:0:{}', 'yes'),
(3539, 'new_admin_email', 'support@pincman.com', 'yes'),
(3560, 'toc-options', 'a:43:{s:15:\"fragment_prefix\";s:1:\"i\";s:8:\"position\";i:2;s:5:\"start\";i:4;s:17:\"show_heading_text\";b:0;s:12:\"heading_text\";s:6:\"目录\";s:22:\"auto_insert_post_types\";a:3:{i:0;s:4:\"post\";i:1;s:4:\"docs\";i:2;s:6:\"course\";}s:14:\"show_heirarchy\";b:1;s:12:\"ordered_list\";b:1;s:13:\"smooth_scroll\";b:1;s:20:\"smooth_scroll_offset\";i:30;s:10:\"visibility\";b:1;s:15:\"visibility_show\";s:6:\"显示\";s:15:\"visibility_hide\";s:6:\"隐藏\";s:26:\"visibility_hide_by_default\";b:1;s:5:\"width\";s:4:\"Auto\";s:12:\"width_custom\";d:275;s:18:\"width_custom_units\";s:2:\"px\";s:8:\"wrapping\";i:0;s:9:\"font_size\";d:95;s:15:\"font_size_units\";s:1:\"%\";s:5:\"theme\";i:99;s:24:\"custom_background_colour\";s:7:\"#f9f9f9\";s:20:\"custom_border_colour\";s:7:\"#aaaaaa\";s:19:\"custom_title_colour\";s:1:\"#\";s:19:\"custom_links_colour\";s:1:\"#\";s:25:\"custom_links_hover_colour\";s:1:\"#\";s:27:\"custom_links_visited_colour\";s:1:\"#\";s:9:\"lowercase\";b:0;s:9:\"hyphenate\";b:1;s:14:\"bullet_spacing\";b:1;s:16:\"include_homepage\";b:0;s:11:\"exclude_css\";b:0;s:7:\"exclude\";s:0:\"\";s:14:\"heading_levels\";a:3:{i:0;s:1:\"1\";i:1;s:1:\"2\";i:2;s:1:\"3\";}s:13:\"restrict_path\";s:0:\"\";s:19:\"css_container_class\";s:0:\"\";s:25:\"sitemap_show_page_listing\";b:1;s:29:\"sitemap_show_category_listing\";b:1;s:20:\"sitemap_heading_type\";i:3;s:13:\"sitemap_pages\";s:5:\"Pages\";s:18:\"sitemap_categories\";s:10:\"Categories\";s:23:\"show_toc_in_widget_only\";b:0;s:34:\"show_toc_in_widget_only_post_types\";a:1:{i:0;s:4:\"page\";}}', 'yes'),
(3969, 'widget_rf_widget_relation_courses', 'a:2:{i:2;a:8:{s:5:\"title\";s:12:\"相关课程\";s:8:\"is_media\";s:1:\"1\";s:12:\"is_one_maxbg\";s:0:\"\";s:11:\"is_category\";s:1:\"1\";s:9:\"is_series\";s:1:\"1\";s:7:\"orderby\";s:10:\"menu_order\";s:5:\"count\";s:1:\"4\";s:6:\"offset\";s:1:\"0\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(4637, 'widget_rf_multi_course_loop', 'a:2:{i:2;a:20:{s:12:\"is_recommand\";s:1:\"1\";s:15:\"recommand_title\";s:12:\"推荐课程\";s:14:\"recommand_icon\";s:16:\"far fa-thumbs-up\";s:17:\"recommand_orderby\";s:10:\"menu_order\";s:18:\"is_recommand_media\";s:1:\"1\";s:15:\"recommand_count\";s:1:\"5\";s:16:\"recommand_offset\";s:1:\"0\";s:9:\"is_payhot\";s:1:\"1\";s:12:\"payhot_title\";s:12:\"热销课程\";s:11:\"payhot_icon\";s:15:\"fab fa-gripfire\";s:15:\"is_payhot_media\";s:1:\"1\";s:12:\"payhot_count\";s:1:\"5\";s:13:\"payhot_offset\";s:1:\"0\";s:7:\"is_news\";s:1:\"1\";s:10:\"news_title\";s:12:\"最新课程\";s:9:\"news_icon\";s:18:\"far fa-comment-alt\";s:13:\"is_news_media\";s:1:\"1\";s:10:\"news_count\";s:1:\"5\";s:11:\"news_offset\";s:1:\"0\";s:10:\"categories\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(4761, 'widget_rf_widget_relation_posts', 'a:2:{i:2;a:8:{s:5:\"title\";s:12:\"相关文章\";s:8:\"is_media\";s:1:\"1\";s:12:\"is_one_maxbg\";s:0:\"\";s:11:\"is_category\";s:1:\"1\";s:9:\"is_series\";s:1:\"1\";s:7:\"orderby\";s:10:\"menu_order\";s:5:\"count\";s:1:\"4\";s:6:\"offset\";s:1:\"0\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(4881, 'widget_rf_widget_new_comments', 'a:3:{i:3;a:5:{s:5:\"title\";s:12:\"最新评论\";s:12:\"only_current\";s:1:\"1\";s:4:\"icon\";s:18:\"far fa-comment-alt\";s:9:\"is_avatar\";s:1:\"1\";s:5:\"count\";s:1:\"5\";}i:4;a:5:{s:5:\"title\";s:12:\"最新评论\";s:12:\"only_current\";s:1:\"1\";s:4:\"icon\";s:18:\"far fa-comment-alt\";s:9:\"is_avatar\";s:1:\"1\";s:5:\"count\";s:1:\"5\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(5915, 'course_series_children', 'a:0:{}', 'yes'),
(5937, 'wpapi', '2', 'yes'),
(5938, 'super_admin', '2', 'yes'),
(5939, 'super_gravatar', '1', 'yes'),
(5940, 'super_googlefonts', '2', 'yes'),
(5941, 'super_googleajax', '2', 'yes'),
(6236, 'widget_rf_module_power_course', 'a:2:{i:3;a:8:{s:5:\"title\";s:0:\"\";s:4:\"desc\";s:0:\"\";s:12:\"is_box_right\";s:0:\"\";s:7:\"orderby\";s:10:\"menu_order\";s:6:\"offset\";s:1:\"0\";s:8:\"autoplay\";s:0:\"\";s:10:\"categories\";s:0:\"\";s:8:\"diy_data\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(6270, 'widget_rf_module_catbox_carousel', 'a:2:{i:2;a:9:{s:5:\"title\";s:12:\"课程类别\";s:4:\"desc\";s:0:\"\";s:4:\"item\";s:6:\"课程\";s:4:\"type\";s:15:\"course_category\";s:17:\"course_categories\";a:6:{i:0;s:1:\"7\";i:1;s:1:\"6\";i:2;s:1:\"8\";i:3;s:1:\"9\";i:4;s:2:\"11\";i:5;s:2:\"10\";}s:8:\"autoplay\";s:0:\"\";s:10:\"categories\";s:0:\"\";s:6:\"series\";s:0:\"\";s:13:\"course_series\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(6287, 'widget_rf_module_post_item', 'a:2:{i:2;a:7:{s:5:\"title\";s:12:\"最新博文\";s:4:\"desc\";s:0:\"\";s:7:\"orderby\";s:10:\"menu_order\";s:5:\"count\";s:1:\"4\";s:10:\"is_excerpt\";s:1:\"1\";s:6:\"offset\";s:1:\"0\";s:10:\"categories\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(6316, 'widget_rf_new_module_parallax', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(6320, 'widget_rf_module_dospress_links', 'a:2:{i:2;a:2:{s:5:\"title\";s:6:\"文档\";s:4:\"desc\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(6332, 'widget_rf_module_series_list', 'a:2:{i:2;a:3:{s:5:\"title\";s:12:\"推荐专题\";s:4:\"desc\";s:36:\"热门的文章与课程系列专题\";s:13:\"category_data\";a:1:{i:0;a:7:{s:4:\"item\";s:6:\"课程\";s:5:\"count\";s:1:\"4\";s:4:\"type\";s:13:\"course_series\";s:13:\"course_series\";s:2:\"50\";s:12:\"post_orderby\";s:10:\"menu_order\";s:14:\"course_orderby\";s:10:\"menu_order\";s:6:\"offset\";s:1:\"0\";}}}s:12:\"_multiwidget\";i:1;}', 'yes'),
(6348, 'wpjam-actives', 'a:0:{}', 'yes'),
(6598, 'widget_rf_home_catbox_carousel', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(6599, 'widget_rf_home_dospress_list', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(6600, 'widget_rf_home_series_list', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(6601, 'widget_rf_home_parallax', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(6602, 'widget_rf_home_catbox_carousel_widget', 'a:2:{i:2;a:9:{s:5:\"title\";s:12:\"课程分类\";s:4:\"desc\";s:0:\"\";s:4:\"item\";s:6:\"课程\";s:4:\"type\";s:15:\"course_category\";s:17:\"course_categories\";a:6:{i:0;s:1:\"7\";i:1;s:1:\"6\";i:2;s:1:\"8\";i:3;s:1:\"9\";i:4;s:2:\"11\";i:5;s:2:\"10\";}s:8:\"autoplay\";s:0:\"\";s:10:\"categories\";s:0:\"\";s:6:\"series\";s:0:\"\";s:13:\"course_series\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(6603, 'widget_rf_home_parallax_widget', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(6604, 'widget_rf_home_dospress_list_widget', 'a:2:{i:2;a:2:{s:5:\"title\";s:12:\"最新文档\";s:4:\"desc\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(6605, 'widget_rf_home_series_list_widget', 'a:2:{i:3;a:3:{s:5:\"title\";s:12:\"系列专题\";s:4:\"desc\";s:0:\"\";s:13:\"category_data\";a:1:{i:0;a:7:{s:4:\"item\";s:6:\"课程\";s:5:\"count\";s:1:\"2\";s:4:\"type\";s:13:\"course_series\";s:13:\"course_series\";s:2:\"50\";s:12:\"post_orderby\";s:10:\"menu_order\";s:14:\"course_orderby\";s:10:\"menu_order\";s:6:\"offset\";s:1:\"0\";}}}s:12:\"_multiwidget\";i:1;}', 'yes'),
(6606, 'widget_rf_multi_post_list_widget', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(6607, 'widget_rf_home_post_list_widget', 'a:2:{i:2;a:7:{s:5:\"title\";s:12:\"推荐文章\";s:4:\"desc\";s:0:\"\";s:7:\"orderby\";s:10:\"menu_order\";s:5:\"count\";s:1:\"4\";s:10:\"is_excerpt\";s:1:\"1\";s:6:\"offset\";s:1:\"0\";s:10:\"categories\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(6611, 'widget_rf_block_post_list_widget', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(6612, 'widget_rf_post_blocks_widget', 'a:3:{i:2;a:24:{s:12:\"is_recommand\";s:1:\"1\";s:15:\"recommand_title\";s:12:\"推荐文章\";s:14:\"recommand_icon\";s:16:\"far fa-thumbs-up\";s:18:\"is_recommand_media\";s:1:\"1\";s:22:\"is_recommand_one_maxbg\";s:1:\"1\";s:17:\"recommand_orderby\";s:10:\"menu_order\";s:25:\"is_recommand_only_current\";s:1:\"1\";s:18:\"recommand_category\";s:0:\"\";s:15:\"recommand_count\";s:1:\"5\";s:16:\"recommand_offset\";s:1:\"0\";s:6:\"is_hot\";s:1:\"1\";s:9:\"hot_title\";s:12:\"热门文章\";s:8:\"hot_icon\";s:15:\"fab fa-gripfire\";s:12:\"is_hot_media\";s:1:\"1\";s:16:\"is_hot_one_maxbg\";s:0:\"\";s:11:\"hot_orderby\";s:5:\"views\";s:19:\"is_hot_only_current\";s:1:\"1\";s:12:\"hot_category\";s:0:\"\";s:9:\"hot_count\";s:1:\"5\";s:10:\"hot_offset\";s:1:\"0\";s:11:\"is_comments\";s:1:\"1\";s:14:\"comments_title\";s:12:\"文章评论\";s:13:\"comments_icon\";s:18:\"far fa-comment-alt\";s:18:\"category_disableds\";s:0:\"\";}i:3;a:24:{s:12:\"is_recommand\";s:1:\"1\";s:15:\"recommand_title\";s:12:\"推荐文章\";s:14:\"recommand_icon\";s:16:\"far fa-thumbs-up\";s:18:\"is_recommand_media\";s:1:\"1\";s:22:\"is_recommand_one_maxbg\";s:0:\"\";s:17:\"recommand_orderby\";s:10:\"menu_order\";s:25:\"is_recommand_only_current\";s:1:\"1\";s:18:\"recommand_category\";s:0:\"\";s:15:\"recommand_count\";s:1:\"5\";s:16:\"recommand_offset\";s:1:\"0\";s:6:\"is_hot\";s:1:\"1\";s:9:\"hot_title\";s:12:\"热门文章\";s:8:\"hot_icon\";s:15:\"fab fa-gripfire\";s:12:\"is_hot_media\";s:1:\"1\";s:16:\"is_hot_one_maxbg\";s:0:\"\";s:11:\"hot_orderby\";s:5:\"views\";s:19:\"is_hot_only_current\";s:1:\"1\";s:12:\"hot_category\";s:0:\"\";s:9:\"hot_count\";s:1:\"5\";s:10:\"hot_offset\";s:1:\"0\";s:11:\"is_comments\";s:1:\"1\";s:14:\"comments_title\";s:12:\"文章评论\";s:13:\"comments_icon\";s:18:\"far fa-comment-alt\";s:18:\"category_disableds\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(6613, 'widget_rf_comments_widget', 'a:3:{i:2;a:5:{s:5:\"title\";s:12:\"最新评论\";s:12:\"only_current\";s:1:\"1\";s:4:\"icon\";s:18:\"far fa-comment-alt\";s:9:\"is_avatar\";s:1:\"1\";s:5:\"count\";s:1:\"5\";}i:3;a:5:{s:5:\"title\";s:12:\"最新评论\";s:12:\"only_current\";s:1:\"1\";s:4:\"icon\";s:18:\"far fa-comment-alt\";s:9:\"is_avatar\";s:1:\"1\";s:5:\"count\";s:1:\"5\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(6614, 'widget_rf_relation_posts_widget', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(6618, 'widget_rf_relation_courses_widget', 'a:2:{i:2;a:8:{s:5:\"title\";s:12:\"相关课程\";s:8:\"is_media\";s:1:\"1\";s:12:\"is_one_maxbg\";s:0:\"\";s:11:\"is_category\";s:1:\"1\";s:9:\"is_series\";s:1:\"1\";s:7:\"orderby\";s:10:\"menu_order\";s:5:\"count\";s:1:\"4\";s:6:\"offset\";s:1:\"0\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(6619, 'widget_rf_course_blocks_widget', 'a:2:{i:3;a:20:{s:12:\"is_recommand\";s:1:\"1\";s:15:\"recommand_title\";s:12:\"推荐课程\";s:14:\"recommand_icon\";s:16:\"far fa-thumbs-up\";s:17:\"recommand_orderby\";s:10:\"menu_order\";s:18:\"is_recommand_media\";s:1:\"1\";s:15:\"recommand_count\";s:1:\"5\";s:16:\"recommand_offset\";s:1:\"0\";s:9:\"is_payhot\";s:1:\"1\";s:12:\"payhot_title\";s:12:\"热销课程\";s:11:\"payhot_icon\";s:15:\"fab fa-gripfire\";s:15:\"is_payhot_media\";s:1:\"1\";s:12:\"payhot_count\";s:1:\"5\";s:13:\"payhot_offset\";s:1:\"0\";s:7:\"is_news\";s:1:\"1\";s:10:\"news_title\";s:12:\"最新课程\";s:9:\"news_icon\";s:18:\"far fa-comment-alt\";s:13:\"is_news_media\";s:1:\"1\";s:10:\"news_count\";s:1:\"5\";s:11:\"news_offset\";s:1:\"0\";s:10:\"categories\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(6624, 'widget_rf_course_download_widget', 'a:2:{i:2;a:4:{s:12:\"pay_btn_name\";s:12:\"立即购买\";s:18:\"pay_login_btn_name\";s:12:\"登录账户\";s:12:\"vip_btn_name\";s:12:\"订阅本站\";s:4:\"desc\";s:81:\"如下载遇到问题可联系站长或<a href=\"/user/msg\">提交工单</a>处理\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(6625, 'widget_rf_home_course_power_widget', 'a:2:{i:2;a:8:{s:5:\"title\";s:0:\"\";s:4:\"desc\";s:0:\"\";s:12:\"is_box_right\";s:0:\"\";s:7:\"orderby\";s:10:\"menu_order\";s:6:\"offset\";s:1:\"0\";s:8:\"diy_data\";a:1:{i:0;a:5:{s:4:\"_img\";s:71:\"https://jikexingkong.com/wp-content/themes/rizhuti-v2/assets/img/bg.jpg\";s:6:\"_blank\";s:1:\"1\";s:5:\"_href\";s:0:\"\";s:5:\"title\";s:15:\"幻灯片标题\";s:5:\"_desc\";s:15:\"幻灯片描述\";}}s:8:\"autoplay\";s:0:\"\";s:10:\"categories\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}', 'yes'),
(35856, 'db_upgraded', '', 'yes'),
(35859, 'can_compress_scripts', '0', 'no'),
(38738, 'widget_ap_leaderboard_widget', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes'),
(51349, 'user_count', '30', 'no'),
(53469, '_site_transient_update_core', 'O:8:\"stdClass\":4:{s:7:\"updates\";a:2:{i:0;O:8:\"stdClass\":10:{s:8:\"response\";s:7:\"upgrade\";s:8:\"download\";s:60:\"http://d.w.org.ibadboy.net/release/zh_CN/wordpress-6.0.3.zip\";s:6:\"locale\";s:5:\"zh_CN\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:60:\"http://d.w.org.ibadboy.net/release/zh_CN/wordpress-6.0.3.zip\";s:10:\"no_content\";s:0:\"\";s:11:\"new_bundled\";s:0:\"\";s:7:\"partial\";s:0:\"\";s:8:\"rollback\";s:0:\"\";}s:7:\"current\";s:5:\"6.0.3\";s:7:\"version\";s:5:\"6.0.3\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:0:\"\";}i:1;O:8:\"stdClass\":10:{s:8:\"response\";s:7:\"upgrade\";s:8:\"download\";s:54:\"http://d.w.org.ibadboy.net/release/wordpress-6.0.3.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:54:\"http://d.w.org.ibadboy.net/release/wordpress-6.0.3.zip\";s:10:\"no_content\";s:65:\"http://d.w.org.ibadboy.net/release/wordpress-6.0.3-no-content.zip\";s:11:\"new_bundled\";s:66:\"http://d.w.org.ibadboy.net/release/wordpress-6.0.3-new-bundled.zip\";s:7:\"partial\";s:64:\"http://d.w.org.ibadboy.net/release/wordpress-6.0.3-partial-0.zip\";s:8:\"rollback\";s:0:\"\";}s:7:\"current\";s:5:\"6.0.3\";s:7:\"version\";s:5:\"6.0.3\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.9\";s:15:\"partial_version\";s:3:\"6.0\";}}s:12:\"last_checked\";i:1666869100;s:15:\"version_checked\";s:3:\"6.0\";s:12:\"translations\";a:0:{}}', 'no'),
(53470, '_site_transient_update_themes', 'O:8:\"stdClass\":5:{s:12:\"last_checked\";i:1666869101;s:7:\"checked\";a:7:{s:7:\"pincman\";s:5:\"1.0.1\";s:10:\"rizhuti-v2\";s:5:\"2.2.0\";s:7:\"rowfish\";s:5:\"1.0.1\";s:14:\"twentynineteen\";s:3:\"2.3\";s:12:\"twentytwenty\";s:3:\"2.0\";s:15:\"twentytwentyone\";s:3:\"1.6\";s:15:\"twentytwentytwo\";s:3:\"1.2\";}s:8:\"response\";a:0:{}s:9:\"no_update\";a:4:{s:14:\"twentynineteen\";a:6:{s:5:\"theme\";s:14:\"twentynineteen\";s:11:\"new_version\";s:3:\"2.3\";s:3:\"url\";s:44:\"https://wordpress.org/themes/twentynineteen/\";s:7:\"package\";s:55:\"http://d.w.org.ibadboy.net/theme/twentynineteen.2.3.zip\";s:8:\"requires\";s:5:\"4.9.6\";s:12:\"requires_php\";s:5:\"5.2.4\";}s:12:\"twentytwenty\";a:6:{s:5:\"theme\";s:12:\"twentytwenty\";s:11:\"new_version\";s:3:\"2.0\";s:3:\"url\";s:42:\"https://wordpress.org/themes/twentytwenty/\";s:7:\"package\";s:53:\"http://d.w.org.ibadboy.net/theme/twentytwenty.2.0.zip\";s:8:\"requires\";s:3:\"4.7\";s:12:\"requires_php\";s:5:\"5.2.4\";}s:15:\"twentytwentyone\";a:6:{s:5:\"theme\";s:15:\"twentytwentyone\";s:11:\"new_version\";s:3:\"1.6\";s:3:\"url\";s:45:\"https://wordpress.org/themes/twentytwentyone/\";s:7:\"package\";s:56:\"http://d.w.org.ibadboy.net/theme/twentytwentyone.1.6.zip\";s:8:\"requires\";s:3:\"5.3\";s:12:\"requires_php\";s:3:\"5.6\";}s:15:\"twentytwentytwo\";a:6:{s:5:\"theme\";s:15:\"twentytwentytwo\";s:11:\"new_version\";s:3:\"1.2\";s:3:\"url\";s:45:\"https://wordpress.org/themes/twentytwentytwo/\";s:7:\"package\";s:56:\"http://d.w.org.ibadboy.net/theme/twentytwentytwo.1.2.zip\";s:8:\"requires\";s:3:\"5.9\";s:12:\"requires_php\";s:3:\"5.6\";}}s:12:\"translations\";a:0:{}}', 'no'),
(53781, 'wpjam-extends', 'a:0:{}', 'yes'),
(55323, 'editor_basics', 'a:12:{s:9:\"task_list\";s:2:\"on\";s:10:\"imagepaste\";s:2:\"on\";s:13:\"imagepaste_sm\";s:3:\"off\";s:19:\"imagepaste_sm_token\";s:0:\"\";s:10:\"image_link\";s:2:\"on\";s:15:\"open_in_new_tab\";s:2:\"on\";s:12:\"live_preview\";s:2:\"on\";s:14:\"sync_scrolling\";s:2:\"on\";s:11:\"html_decode\";s:2:\"on\";s:13:\"support_front\";s:3:\"off\";s:13:\"support_reply\";s:3:\"off\";s:18:\"support_other_text\";s:0:\"\";}', 'yes'),
(55324, 'editor_style', 'a:3:{s:11:\"theme_style\";s:7:\"default\";s:10:\"code_style\";s:7:\"default\";s:13:\"editor_addres\";s:51:\"https://cdn.jsdelivr.net/wp/wp-editormd/tags/10.2.1\";}', 'yes'),
(55325, 'syntax_highlighting', 'a:6:{s:19:\"highlight_mode_auto\";s:2:\"on\";s:12:\"line_numbers\";s:2:\"on\";s:13:\"show_language\";s:2:\"on\";s:14:\"copy_clipboard\";s:2:\"on\";s:23:\"highlight_library_style\";s:8:\"tomorrow\";s:18:\"customize_my_style\";s:7:\"nothing\";}', 'yes'),
(55326, 'editor_emoji', 'a:1:{s:13:\"support_emoji\";s:2:\"on\";}', 'yes'),
(55327, 'editor_toc', 'a:1:{s:11:\"support_toc\";s:3:\"off\";}', 'yes'),
(55328, 'editor_latex', 'a:1:{s:13:\"support_latex\";s:5:\"katex\";}', 'yes'),
(55329, 'editor_mermaid', 'a:1:{s:13:\"support_latex\";s:5:\"katex\";}', 'yes'),
(55330, 'editor_mindmap', 'a:4:{s:11:\"theme_style\";s:7:\"default\";s:10:\"code_style\";s:7:\"default\";s:13:\"editor_addres\";s:51:\"https://cdn.jsdelivr.net/wp/wp-editormd/tags/10.2.1\";s:17:\"customize_mindmap\";s:81:\"https://cdn.jsdelivr.net/wp/wp-editormd/tags/10.2.1/assets/MindMap/mindMap.min.js\";}', 'yes'),
(55331, 'editor_advanced', 'a:2:{s:17:\"jquery_compatible\";s:3:\"off\";s:8:\"hide_ads\";s:3:\"off\";}', 'yes'),
(55332, 'editor_version', 'a:1:{s:15:\"wp_editormd_ver\";s:6:\"10.2.1\";}', 'yes'),
(76720, 'bodhi_svgs_settings', 'a:1:{s:22:\"sanitize_svg_front_end\";s:2:\"on\";}', 'yes'),
(154039, 'category_children', 'a:2:{i:13;a:8:{i:0;i:14;i:1;i:15;i:2;i:16;i:3;i:17;i:4;i:18;i:5;i:19;i:6;i:20;i:7;i:21;}i:17;a:1:{i:0;i:51;}}', 'yes');
INSERT INTO `wp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(224852, '_site_transient_update_plugins', 'O:8:\"stdClass\":5:{s:12:\"last_checked\";i:1666869101;s:8:\"response\";a:0:{}s:12:\"translations\";a:0:{}s:9:\"no_update\";a:8:{s:53:\"anspress-question-answer/anspress-question-answer.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:38:\"w.org/plugins/anspress-question-answer\";s:4:\"slug\";s:24:\"anspress-question-answer\";s:6:\"plugin\";s:53:\"anspress-question-answer/anspress-question-answer.php\";s:11:\"new_version\";s:5:\"4.3.0\";s:3:\"url\";s:55:\"https://wordpress.org/plugins/anspress-question-answer/\";s:7:\"package\";s:68:\"http://d.w.org.ibadboy.net/plugin/anspress-question-answer.4.3.0.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:89:\"https://ps.w.org.ibadboy.net/anspress-question-answer/assets/icon-256x256.png?rev=2432843\";s:2:\"1x\";s:89:\"https://ps.w.org.ibadboy.net/anspress-question-answer/assets/icon-128x128.png?rev=2432843\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:92:\"https://ps.w.org.ibadboy.net/anspress-question-answer/assets/banner-1544x500.png?rev=2414999\";s:2:\"1x\";s:91:\"https://ps.w.org.ibadboy.net/anspress-question-answer/assets/banner-772x250.png?rev=2414999\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"4.7\";}s:43:\"custom-taxonomy-order-ne/customtaxorder.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:38:\"w.org/plugins/custom-taxonomy-order-ne\";s:4:\"slug\";s:24:\"custom-taxonomy-order-ne\";s:6:\"plugin\";s:43:\"custom-taxonomy-order-ne/customtaxorder.php\";s:11:\"new_version\";s:5:\"3.4.4\";s:3:\"url\";s:55:\"https://wordpress.org/plugins/custom-taxonomy-order-ne/\";s:7:\"package\";s:68:\"http://d.w.org.ibadboy.net/plugin/custom-taxonomy-order-ne.3.4.4.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:89:\"https://ps.w.org.ibadboy.net/custom-taxonomy-order-ne/assets/icon-256x256.png?rev=1284953\";s:2:\"1x\";s:89:\"https://ps.w.org.ibadboy.net/custom-taxonomy-order-ne/assets/icon-128x128.png?rev=1284953\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:91:\"https://ps.w.org.ibadboy.net/custom-taxonomy-order-ne/assets/banner-772x250.jpg?rev=1284953\";}s:11:\"banners_rtl\";a:1:{s:2:\"1x\";s:95:\"https://ps.w.org.ibadboy.net/custom-taxonomy-order-ne/assets/banner-772x250-rtl.jpg?rev=1284953\";}s:8:\"requires\";s:3:\"3.7\";}s:23:\"docspress/docspress.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:23:\"w.org/plugins/docspress\";s:4:\"slug\";s:9:\"docspress\";s:6:\"plugin\";s:23:\"docspress/docspress.php\";s:11:\"new_version\";s:5:\"2.3.0\";s:3:\"url\";s:40:\"https://wordpress.org/plugins/docspress/\";s:7:\"package\";s:53:\"http://d.w.org.ibadboy.net/plugin/docspress.2.3.0.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:74:\"https://ps.w.org.ibadboy.net/docspress/assets/icon-256x256.png?rev=2402700\";s:2:\"1x\";s:74:\"https://ps.w.org.ibadboy.net/docspress/assets/icon-128x128.png?rev=2402700\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:77:\"https://ps.w.org.ibadboy.net/docspress/assets/banner-1544x500.jpg?rev=2402700\";s:2:\"1x\";s:76:\"https://ps.w.org.ibadboy.net/docspress/assets/banner-772x250.jpg?rev=2402700\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:5:\"4.6.0\";}s:45:\"phoenix-media-rename/phoenix-media-rename.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:34:\"w.org/plugins/phoenix-media-rename\";s:4:\"slug\";s:20:\"phoenix-media-rename\";s:6:\"plugin\";s:45:\"phoenix-media-rename/phoenix-media-rename.php\";s:11:\"new_version\";s:5:\"3.8.8\";s:3:\"url\";s:51:\"https://wordpress.org/plugins/phoenix-media-rename/\";s:7:\"package\";s:64:\"http://d.w.org.ibadboy.net/plugin/phoenix-media-rename.3.8.8.zip\";s:5:\"icons\";a:2:{s:2:\"1x\";s:77:\"https://ps.w.org.ibadboy.net/phoenix-media-rename/assets/icon.svg?rev=1485775\";s:3:\"svg\";s:77:\"https://ps.w.org.ibadboy.net/phoenix-media-rename/assets/icon.svg?rev=1485775\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:87:\"https://ps.w.org.ibadboy.net/phoenix-media-rename/assets/banner-772x250.png?rev=1490792\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"5.0\";}s:37:\"post-types-order/post-types-order.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:30:\"w.org/plugins/post-types-order\";s:4:\"slug\";s:16:\"post-types-order\";s:6:\"plugin\";s:37:\"post-types-order/post-types-order.php\";s:11:\"new_version\";s:7:\"1.9.9.1\";s:3:\"url\";s:47:\"https://wordpress.org/plugins/post-types-order/\";s:7:\"package\";s:62:\"http://d.w.org.ibadboy.net/plugin/post-types-order.1.9.9.1.zip\";s:5:\"icons\";a:1:{s:2:\"1x\";s:81:\"https://ps.w.org.ibadboy.net/post-types-order/assets/icon-128x128.png?rev=1226428\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:84:\"https://ps.w.org.ibadboy.net/post-types-order/assets/banner-1544x500.png?rev=1675574\";s:2:\"1x\";s:83:\"https://ps.w.org.ibadboy.net/post-types-order/assets/banner-772x250.png?rev=1429949\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"2.8\";}s:27:\"svg-support/svg-support.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:25:\"w.org/plugins/svg-support\";s:4:\"slug\";s:11:\"svg-support\";s:6:\"plugin\";s:27:\"svg-support/svg-support.php\";s:11:\"new_version\";s:5:\"2.5.1\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/svg-support/\";s:7:\"package\";s:55:\"http://d.w.org.ibadboy.net/plugin/svg-support.2.5.1.zip\";s:5:\"icons\";a:3:{s:2:\"2x\";s:76:\"https://ps.w.org.ibadboy.net/svg-support/assets/icon-256x256.png?rev=1417738\";s:2:\"1x\";s:68:\"https://ps.w.org.ibadboy.net/svg-support/assets/icon.svg?rev=1417738\";s:3:\"svg\";s:68:\"https://ps.w.org.ibadboy.net/svg-support/assets/icon.svg?rev=1417738\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:79:\"https://ps.w.org.ibadboy.net/svg-support/assets/banner-1544x500.jpg?rev=1215377\";s:2:\"1x\";s:78:\"https://ps.w.org.ibadboy.net/svg-support/assets/banner-772x250.jpg?rev=1215377\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"4.8\";}s:30:\"table-of-contents-plus/toc.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:36:\"w.org/plugins/table-of-contents-plus\";s:4:\"slug\";s:22:\"table-of-contents-plus\";s:6:\"plugin\";s:30:\"table-of-contents-plus/toc.php\";s:11:\"new_version\";s:4:\"2106\";s:3:\"url\";s:53:\"https://wordpress.org/plugins/table-of-contents-plus/\";s:7:\"package\";s:65:\"http://d.w.org.ibadboy.net/plugin/table-of-contents-plus.2106.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:87:\"https://ps.w.org.ibadboy.net/table-of-contents-plus/assets/icon-256x256.png?rev=1151771\";s:2:\"1x\";s:87:\"https://ps.w.org.ibadboy.net/table-of-contents-plus/assets/icon-128x128.png?rev=1151770\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:88:\"https://ps.w.org.ibadboy.net/table-of-contents-plus/assets/banner-772x250.png?rev=578600\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:3:\"3.2\";}s:27:\"wp-editormd/wp-editormd.php\";O:8:\"stdClass\":10:{s:2:\"id\";s:25:\"w.org/plugins/wp-editormd\";s:4:\"slug\";s:11:\"wp-editormd\";s:6:\"plugin\";s:27:\"wp-editormd/wp-editormd.php\";s:11:\"new_version\";s:6:\"10.2.1\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/wp-editormd/\";s:7:\"package\";s:56:\"http://d.w.org.ibadboy.net/plugin/wp-editormd.10.2.1.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:76:\"https://ps.w.org.ibadboy.net/wp-editormd/assets/icon-256x256.png?rev=2377951\";s:2:\"1x\";s:76:\"https://ps.w.org.ibadboy.net/wp-editormd/assets/icon-128x128.png?rev=2377951\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:79:\"https://ps.w.org.ibadboy.net/wp-editormd/assets/banner-1544x500.png?rev=2377951\";s:2:\"1x\";s:78:\"https://ps.w.org.ibadboy.net/wp-editormd/assets/banner-772x250.png?rev=2377951\";}s:11:\"banners_rtl\";a:0:{}s:8:\"requires\";s:5:\"5.0.0\";}}s:7:\"checked\";a:10:{s:53:\"anspress-question-answer/anspress-question-answer.php\";s:5:\"4.3.0\";s:43:\"custom-taxonomy-order-ne/customtaxorder.php\";s:5:\"3.4.4\";s:23:\"docspress/docspress.php\";s:5:\"2.3.0\";s:45:\"phoenix-media-rename/phoenix-media-rename.php\";s:5:\"3.8.8\";s:37:\"post-types-order/post-types-order.php\";s:7:\"1.9.9.1\";s:27:\"svg-support/svg-support.php\";s:5:\"2.5.1\";s:30:\"table-of-contents-plus/toc.php\";s:4:\"2106\";s:29:\"wp-china-yes/wp-china-yes.php\";s:5:\"3.5.3\";s:27:\"wp-editormd/wp-editormd.php\";s:6:\"10.2.1\";s:27:\"wpjam-basic/wpjam-basic.php\";s:5:\"6.0.9\";}}', 'no'),
(229009, '_site_transient_timeout_php_check_d564ef3bc004ad591bb7443752129422', '1666955602', 'no'),
(229010, '_site_transient_php_check_d564ef3bc004ad591bb7443752129422', 'a:5:{s:19:\"recommended_version\";s:3:\"7.4\";s:15:\"minimum_version\";s:6:\"5.6.20\";s:12:\"is_supported\";b:1;s:9:\"is_secure\";b:1;s:13:\"is_acceptable\";b:1;}', 'no'),
(247598, '_site_transient_timeout_available_translations', '1666878159', 'no');
INSERT INTO `wp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(247599, '_site_transient_available_translations', 'a:129:{s:2:\"af\";a:8:{s:8:\"language\";s:2:\"af\";s:7:\"version\";s:8:\"5.8-beta\";s:7:\"updated\";s:19:\"2021-05-13 15:59:22\";s:12:\"english_name\";s:9:\"Afrikaans\";s:11:\"native_name\";s:9:\"Afrikaans\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/5.8-beta/af.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"af\";i:2;s:3:\"afr\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"Gaan voort\";}}s:2:\"am\";a:8:{s:8:\"language\";s:2:\"am\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-06-19 20:18:07\";s:12:\"english_name\";s:7:\"Amharic\";s:11:\"native_name\";s:12:\"አማርኛ\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/translation/core/6.0/am.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"am\";i:2;s:3:\"amh\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"ቀጥል\";}}s:3:\"arg\";a:8:{s:8:\"language\";s:3:\"arg\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-06-14 22:54:15\";s:12:\"english_name\";s:9:\"Aragonese\";s:11:\"native_name\";s:9:\"Aragonés\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/translation/core/6.0/arg.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"an\";i:2;s:3:\"arg\";i:3;s:3:\"arg\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continar\";}}s:2:\"ar\";a:8:{s:8:\"language\";s:2:\"ar\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-05-30 20:47:16\";s:12:\"english_name\";s:6:\"Arabic\";s:11:\"native_name\";s:14:\"العربية\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/translation/core/6.0/ar.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ar\";i:2;s:3:\"ara\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:16:\"المتابعة\";}}s:3:\"ary\";a:8:{s:8:\"language\";s:3:\"ary\";s:7:\"version\";s:6:\"4.8.21\";s:7:\"updated\";s:19:\"2017-01-26 15:42:35\";s:12:\"english_name\";s:15:\"Moroccan Arabic\";s:11:\"native_name\";s:31:\"العربية المغربية\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/translation/core/4.8.21/ary.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ar\";i:3;s:3:\"ary\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:16:\"المتابعة\";}}s:2:\"as\";a:8:{s:8:\"language\";s:2:\"as\";s:7:\"version\";s:5:\"5.8.6\";s:7:\"updated\";s:19:\"2021-09-08 17:57:56\";s:12:\"english_name\";s:8:\"Assamese\";s:11:\"native_name\";s:21:\"অসমীয়া\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/5.8.6/as.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"as\";i:2;s:3:\"asm\";i:3;s:3:\"asm\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:3:\"azb\";a:8:{s:8:\"language\";s:3:\"azb\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-09-12 20:34:31\";s:12:\"english_name\";s:17:\"South Azerbaijani\";s:11:\"native_name\";s:29:\"گؤنئی آذربایجان\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/azb.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"az\";i:3;s:3:\"azb\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:2:\"az\";a:8:{s:8:\"language\";s:2:\"az\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-11-06 00:09:27\";s:12:\"english_name\";s:11:\"Azerbaijani\";s:11:\"native_name\";s:16:\"Azərbaycan dili\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/az.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"az\";i:2;s:3:\"aze\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:5:\"Davam\";}}s:3:\"bel\";a:8:{s:8:\"language\";s:3:\"bel\";s:7:\"version\";s:6:\"4.9.22\";s:7:\"updated\";s:19:\"2019-10-29 07:54:22\";s:12:\"english_name\";s:10:\"Belarusian\";s:11:\"native_name\";s:29:\"Беларуская мова\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/translation/core/4.9.22/bel.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"be\";i:2;s:3:\"bel\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:20:\"Працягнуць\";}}s:5:\"bg_BG\";a:8:{s:8:\"language\";s:5:\"bg_BG\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-10 19:34:56\";s:12:\"english_name\";s:9:\"Bulgarian\";s:11:\"native_name\";s:18:\"Български\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/bg_BG.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"bg\";i:2;s:3:\"bul\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"Напред\";}}s:5:\"bn_BD\";a:8:{s:8:\"language\";s:5:\"bn_BD\";s:7:\"version\";s:6:\"5.4.12\";s:7:\"updated\";s:19:\"2020-10-31 08:48:37\";s:12:\"english_name\";s:20:\"Bengali (Bangladesh)\";s:11:\"native_name\";s:15:\"বাংলা\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/translation/core/5.4.12/bn_BD.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"bn\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:23:\"এগিয়ে চল.\";}}s:2:\"bo\";a:8:{s:8:\"language\";s:2:\"bo\";s:7:\"version\";s:8:\"5.8-beta\";s:7:\"updated\";s:19:\"2020-10-30 03:24:38\";s:12:\"english_name\";s:7:\"Tibetan\";s:11:\"native_name\";s:21:\"བོད་ཡིག\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/5.8-beta/bo.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"bo\";i:2;s:3:\"tib\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:33:\"མུ་མཐུད་དུ།\";}}s:5:\"bs_BA\";a:8:{s:8:\"language\";s:5:\"bs_BA\";s:7:\"version\";s:5:\"5.9.5\";s:7:\"updated\";s:19:\"2022-04-25 09:39:54\";s:12:\"english_name\";s:7:\"Bosnian\";s:11:\"native_name\";s:8:\"Bosanski\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/5.9.5/bs_BA.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"bs\";i:2;s:3:\"bos\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:7:\"Nastavi\";}}s:2:\"ca\";a:8:{s:8:\"language\";s:2:\"ca\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-12 12:44:59\";s:12:\"english_name\";s:7:\"Catalan\";s:11:\"native_name\";s:7:\"Català\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/translation/core/6.0/ca.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ca\";i:2;s:3:\"cat\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continua\";}}s:3:\"ceb\";a:8:{s:8:\"language\";s:3:\"ceb\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-03-02 17:25:51\";s:12:\"english_name\";s:7:\"Cebuano\";s:11:\"native_name\";s:7:\"Cebuano\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/ceb.zip\";s:3:\"iso\";a:2:{i:2;s:3:\"ceb\";i:3;s:3:\"ceb\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:7:\"Padayun\";}}s:5:\"cs_CZ\";a:8:{s:8:\"language\";s:5:\"cs_CZ\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-12 07:59:05\";s:12:\"english_name\";s:5:\"Czech\";s:11:\"native_name\";s:9:\"Čeština\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/cs_CZ.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"cs\";i:2;s:3:\"ces\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:11:\"Pokračovat\";}}s:2:\"cy\";a:8:{s:8:\"language\";s:2:\"cy\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-11 11:10:19\";s:12:\"english_name\";s:5:\"Welsh\";s:11:\"native_name\";s:7:\"Cymraeg\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/translation/core/6.0/cy.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"cy\";i:2;s:3:\"cym\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Parhau\";}}s:5:\"da_DK\";a:8:{s:8:\"language\";s:5:\"da_DK\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-05-27 09:48:50\";s:12:\"english_name\";s:6:\"Danish\";s:11:\"native_name\";s:5:\"Dansk\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/da_DK.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"da\";i:2;s:3:\"dan\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Fortsæt\";}}s:5:\"de_CH\";a:8:{s:8:\"language\";s:5:\"de_CH\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-05-24 09:00:33\";s:12:\"english_name\";s:20:\"German (Switzerland)\";s:11:\"native_name\";s:17:\"Deutsch (Schweiz)\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/de_CH.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"de\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Weiter\";}}s:14:\"de_CH_informal\";a:8:{s:8:\"language\";s:14:\"de_CH_informal\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-05-24 08:57:04\";s:12:\"english_name\";s:30:\"German (Switzerland, Informal)\";s:11:\"native_name\";s:21:\"Deutsch (Schweiz, Du)\";s:7:\"package\";s:71:\"https://downloads.wordpress.org/translation/core/6.0/de_CH_informal.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"de\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Weiter\";}}s:5:\"de_AT\";a:8:{s:8:\"language\";s:5:\"de_AT\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-03-17 12:58:14\";s:12:\"english_name\";s:16:\"German (Austria)\";s:11:\"native_name\";s:21:\"Deutsch (Österreich)\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/de_AT.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"de\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Weiter\";}}s:5:\"de_DE\";a:8:{s:8:\"language\";s:5:\"de_DE\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-11 08:13:43\";s:12:\"english_name\";s:6:\"German\";s:11:\"native_name\";s:7:\"Deutsch\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/de_DE.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"de\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Weiter\";}}s:12:\"de_DE_formal\";a:8:{s:8:\"language\";s:12:\"de_DE_formal\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-11 08:17:49\";s:12:\"english_name\";s:15:\"German (Formal)\";s:11:\"native_name\";s:13:\"Deutsch (Sie)\";s:7:\"package\";s:69:\"https://downloads.wordpress.org/translation/core/6.0/de_DE_formal.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"de\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Weiter\";}}s:3:\"dsb\";a:8:{s:8:\"language\";s:3:\"dsb\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-05 18:40:12\";s:12:\"english_name\";s:13:\"Lower Sorbian\";s:11:\"native_name\";s:16:\"Dolnoserbšćina\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/translation/core/6.0/dsb.zip\";s:3:\"iso\";a:2:{i:2;s:3:\"dsb\";i:3;s:3:\"dsb\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:5:\"Dalej\";}}s:3:\"dzo\";a:8:{s:8:\"language\";s:3:\"dzo\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-06-29 08:59:03\";s:12:\"english_name\";s:8:\"Dzongkha\";s:11:\"native_name\";s:18:\"རྫོང་ཁ\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/dzo.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"dz\";i:2;s:3:\"dzo\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:2:\"el\";a:8:{s:8:\"language\";s:2:\"el\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-05 18:29:18\";s:12:\"english_name\";s:5:\"Greek\";s:11:\"native_name\";s:16:\"Ελληνικά\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/translation/core/6.0/el.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"el\";i:2;s:3:\"ell\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:16:\"Συνέχεια\";}}s:5:\"en_CA\";a:8:{s:8:\"language\";s:5:\"en_CA\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-06-09 10:19:51\";s:12:\"english_name\";s:16:\"English (Canada)\";s:11:\"native_name\";s:16:\"English (Canada)\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/en_CA.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"en\";i:2;s:3:\"eng\";i:3;s:3:\"eng\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:5:\"en_AU\";a:8:{s:8:\"language\";s:5:\"en_AU\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-04 04:03:07\";s:12:\"english_name\";s:19:\"English (Australia)\";s:11:\"native_name\";s:19:\"English (Australia)\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/en_AU.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"en\";i:2;s:3:\"eng\";i:3;s:3:\"eng\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:5:\"en_GB\";a:8:{s:8:\"language\";s:5:\"en_GB\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-05 17:05:41\";s:12:\"english_name\";s:12:\"English (UK)\";s:11:\"native_name\";s:12:\"English (UK)\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/en_GB.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"en\";i:2;s:3:\"eng\";i:3;s:3:\"eng\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:5:\"en_NZ\";a:8:{s:8:\"language\";s:5:\"en_NZ\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-04-01 22:35:34\";s:12:\"english_name\";s:21:\"English (New Zealand)\";s:11:\"native_name\";s:21:\"English (New Zealand)\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/en_NZ.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"en\";i:2;s:3:\"eng\";i:3;s:3:\"eng\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:5:\"en_ZA\";a:8:{s:8:\"language\";s:5:\"en_ZA\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2021-12-24 12:36:39\";s:12:\"english_name\";s:22:\"English (South Africa)\";s:11:\"native_name\";s:22:\"English (South Africa)\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/en_ZA.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"en\";i:2;s:3:\"eng\";i:3;s:3:\"eng\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:2:\"eo\";a:8:{s:8:\"language\";s:2:\"eo\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-05-19 15:14:54\";s:12:\"english_name\";s:9:\"Esperanto\";s:11:\"native_name\";s:9:\"Esperanto\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/translation/core/6.0/eo.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"eo\";i:2;s:3:\"epo\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Daŭrigi\";}}s:5:\"es_CO\";a:8:{s:8:\"language\";s:5:\"es_CO\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-05-25 04:48:45\";s:12:\"english_name\";s:18:\"Spanish (Colombia)\";s:11:\"native_name\";s:20:\"Español de Colombia\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/es_CO.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"es\";i:2;s:3:\"spa\";i:3;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_AR\";a:8:{s:8:\"language\";s:5:\"es_AR\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-06-24 20:32:44\";s:12:\"english_name\";s:19:\"Spanish (Argentina)\";s:11:\"native_name\";s:21:\"Español de Argentina\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/es_AR.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"es\";i:2;s:3:\"spa\";i:3;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_ES\";a:8:{s:8:\"language\";s:5:\"es_ES\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-12 15:36:23\";s:12:\"english_name\";s:15:\"Spanish (Spain)\";s:11:\"native_name\";s:8:\"Español\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/es_ES.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"es\";i:2;s:3:\"spa\";i:3;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_EC\";a:8:{s:8:\"language\";s:5:\"es_EC\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-05-25 04:48:06\";s:12:\"english_name\";s:17:\"Spanish (Ecuador)\";s:11:\"native_name\";s:19:\"Español de Ecuador\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/es_EC.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"es\";i:2;s:3:\"spa\";i:3;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_VE\";a:8:{s:8:\"language\";s:5:\"es_VE\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-07 20:37:41\";s:12:\"english_name\";s:19:\"Spanish (Venezuela)\";s:11:\"native_name\";s:21:\"Español de Venezuela\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/es_VE.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"es\";i:2;s:3:\"spa\";i:3;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_MX\";a:8:{s:8:\"language\";s:5:\"es_MX\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-06 15:13:59\";s:12:\"english_name\";s:16:\"Spanish (Mexico)\";s:11:\"native_name\";s:19:\"Español de México\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/es_MX.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"es\";i:2;s:3:\"spa\";i:3;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_CR\";a:8:{s:8:\"language\";s:5:\"es_CR\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-05-17 18:49:06\";s:12:\"english_name\";s:20:\"Spanish (Costa Rica)\";s:11:\"native_name\";s:22:\"Español de Costa Rica\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/es_CR.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"es\";i:2;s:3:\"spa\";i:3;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_PE\";a:8:{s:8:\"language\";s:5:\"es_PE\";s:7:\"version\";s:5:\"5.8.6\";s:7:\"updated\";s:19:\"2021-10-04 20:53:18\";s:12:\"english_name\";s:14:\"Spanish (Peru)\";s:11:\"native_name\";s:17:\"Español de Perú\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/5.8.6/es_PE.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"es\";i:2;s:3:\"spa\";i:3;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_DO\";a:8:{s:8:\"language\";s:5:\"es_DO\";s:7:\"version\";s:5:\"5.8.6\";s:7:\"updated\";s:19:\"2021-10-08 14:32:50\";s:12:\"english_name\";s:28:\"Spanish (Dominican Republic)\";s:11:\"native_name\";s:33:\"Español de República Dominicana\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/5.8.6/es_DO.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"es\";i:2;s:3:\"spa\";i:3;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_CL\";a:8:{s:8:\"language\";s:5:\"es_CL\";s:7:\"version\";s:8:\"5.8-beta\";s:7:\"updated\";s:19:\"2021-06-14 16:02:22\";s:12:\"english_name\";s:15:\"Spanish (Chile)\";s:11:\"native_name\";s:17:\"Español de Chile\";s:7:\"package\";s:67:\"https://downloads.wordpress.org/translation/core/5.8-beta/es_CL.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"es\";i:2;s:3:\"spa\";i:3;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_UY\";a:8:{s:8:\"language\";s:5:\"es_UY\";s:7:\"version\";s:8:\"5.8-beta\";s:7:\"updated\";s:19:\"2021-03-31 18:33:26\";s:12:\"english_name\";s:17:\"Spanish (Uruguay)\";s:11:\"native_name\";s:19:\"Español de Uruguay\";s:7:\"package\";s:67:\"https://downloads.wordpress.org/translation/core/5.8-beta/es_UY.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"es\";i:2;s:3:\"spa\";i:3;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_PR\";a:8:{s:8:\"language\";s:5:\"es_PR\";s:7:\"version\";s:6:\"5.4.12\";s:7:\"updated\";s:19:\"2020-04-29 15:36:59\";s:12:\"english_name\";s:21:\"Spanish (Puerto Rico)\";s:11:\"native_name\";s:23:\"Español de Puerto Rico\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/translation/core/5.4.12/es_PR.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"es\";i:2;s:3:\"spa\";i:3;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"es_GT\";a:8:{s:8:\"language\";s:5:\"es_GT\";s:7:\"version\";s:6:\"5.2.17\";s:7:\"updated\";s:19:\"2019-03-02 06:35:01\";s:12:\"english_name\";s:19:\"Spanish (Guatemala)\";s:11:\"native_name\";s:21:\"Español de Guatemala\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/translation/core/5.2.17/es_GT.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"es\";i:2;s:3:\"spa\";i:3;s:3:\"spa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:2:\"et\";a:8:{s:8:\"language\";s:2:\"et\";s:7:\"version\";s:8:\"5.8-beta\";s:7:\"updated\";s:19:\"2020-08-12 08:38:59\";s:12:\"english_name\";s:8:\"Estonian\";s:11:\"native_name\";s:5:\"Eesti\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/5.8-beta/et.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"et\";i:2;s:3:\"est\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Jätka\";}}s:2:\"eu\";a:8:{s:8:\"language\";s:2:\"eu\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-09 11:26:03\";s:12:\"english_name\";s:6:\"Basque\";s:11:\"native_name\";s:7:\"Euskara\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/translation/core/6.0/eu.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"eu\";i:2;s:3:\"eus\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Jarraitu\";}}s:5:\"fa_IR\";a:8:{s:8:\"language\";s:5:\"fa_IR\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-05-25 06:34:05\";s:12:\"english_name\";s:7:\"Persian\";s:11:\"native_name\";s:10:\"فارسی\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/fa_IR.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"fa\";i:2;s:3:\"fas\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"ادامه\";}}s:5:\"fa_AF\";a:8:{s:8:\"language\";s:5:\"fa_AF\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-11 21:11:12\";s:12:\"english_name\";s:21:\"Persian (Afghanistan)\";s:11:\"native_name\";s:31:\"(فارسی (افغانستان\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/fa_AF.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"fa\";i:2;s:3:\"fas\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"ادامه\";}}s:2:\"fi\";a:8:{s:8:\"language\";s:2:\"fi\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-05-23 18:39:08\";s:12:\"english_name\";s:7:\"Finnish\";s:11:\"native_name\";s:5:\"Suomi\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/translation/core/6.0/fi.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"fi\";i:2;s:3:\"fin\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:5:\"Jatka\";}}s:5:\"fr_CA\";a:8:{s:8:\"language\";s:5:\"fr_CA\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-05-25 17:36:24\";s:12:\"english_name\";s:15:\"French (Canada)\";s:11:\"native_name\";s:19:\"Français du Canada\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/fr_CA.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"fr\";i:2;s:3:\"fra\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuer\";}}s:5:\"fr_FR\";a:8:{s:8:\"language\";s:5:\"fr_FR\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-05 16:56:22\";s:12:\"english_name\";s:15:\"French (France)\";s:11:\"native_name\";s:9:\"Français\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/fr_FR.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"fr\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuer\";}}s:5:\"fr_BE\";a:8:{s:8:\"language\";s:5:\"fr_BE\";s:7:\"version\";s:8:\"5.8-beta\";s:7:\"updated\";s:19:\"2021-02-22 13:54:46\";s:12:\"english_name\";s:16:\"French (Belgium)\";s:11:\"native_name\";s:21:\"Français de Belgique\";s:7:\"package\";s:67:\"https://downloads.wordpress.org/translation/core/5.8-beta/fr_BE.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"fr\";i:2;s:3:\"fra\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuer\";}}s:3:\"fur\";a:8:{s:8:\"language\";s:3:\"fur\";s:7:\"version\";s:6:\"4.8.21\";s:7:\"updated\";s:19:\"2018-01-29 17:32:35\";s:12:\"english_name\";s:8:\"Friulian\";s:11:\"native_name\";s:8:\"Friulian\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/translation/core/4.8.21/fur.zip\";s:3:\"iso\";a:2:{i:2;s:3:\"fur\";i:3;s:3:\"fur\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:2:\"gd\";a:8:{s:8:\"language\";s:2:\"gd\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-08-23 17:41:37\";s:12:\"english_name\";s:15:\"Scottish Gaelic\";s:11:\"native_name\";s:9:\"Gàidhlig\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/gd.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"gd\";i:2;s:3:\"gla\";i:3;s:3:\"gla\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:15:\"Lean air adhart\";}}s:5:\"gl_ES\";a:8:{s:8:\"language\";s:5:\"gl_ES\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-07 04:27:49\";s:12:\"english_name\";s:8:\"Galician\";s:11:\"native_name\";s:6:\"Galego\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/gl_ES.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"gl\";i:2;s:3:\"glg\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:2:\"gu\";a:8:{s:8:\"language\";s:2:\"gu\";s:7:\"version\";s:6:\"4.9.22\";s:7:\"updated\";s:19:\"2018-09-14 12:33:48\";s:12:\"english_name\";s:8:\"Gujarati\";s:11:\"native_name\";s:21:\"ગુજરાતી\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.9.22/gu.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"gu\";i:2;s:3:\"guj\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:31:\"ચાલુ રાખવું\";}}s:3:\"haz\";a:8:{s:8:\"language\";s:3:\"haz\";s:7:\"version\";s:6:\"4.4.29\";s:7:\"updated\";s:19:\"2015-12-05 00:59:09\";s:12:\"english_name\";s:8:\"Hazaragi\";s:11:\"native_name\";s:15:\"هزاره گی\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/translation/core/4.4.29/haz.zip\";s:3:\"iso\";a:1:{i:3;s:3:\"haz\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"ادامه\";}}s:5:\"he_IL\";a:8:{s:8:\"language\";s:5:\"he_IL\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-10 09:13:56\";s:12:\"english_name\";s:6:\"Hebrew\";s:11:\"native_name\";s:16:\"עִבְרִית\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/he_IL.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"he\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"המשך\";}}s:5:\"hi_IN\";a:8:{s:8:\"language\";s:5:\"hi_IN\";s:7:\"version\";s:6:\"5.4.12\";s:7:\"updated\";s:19:\"2020-11-06 12:34:38\";s:12:\"english_name\";s:5:\"Hindi\";s:11:\"native_name\";s:18:\"हिन्दी\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/translation/core/5.4.12/hi_IN.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"hi\";i:2;s:3:\"hin\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:25:\"जारी रखें\";}}s:2:\"hr\";a:8:{s:8:\"language\";s:2:\"hr\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-05 17:59:23\";s:12:\"english_name\";s:8:\"Croatian\";s:11:\"native_name\";s:8:\"Hrvatski\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/translation/core/6.0/hr.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"hr\";i:2;s:3:\"hrv\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:7:\"Nastavi\";}}s:3:\"hsb\";a:8:{s:8:\"language\";s:3:\"hsb\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-05 18:14:16\";s:12:\"english_name\";s:13:\"Upper Sorbian\";s:11:\"native_name\";s:17:\"Hornjoserbšćina\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/translation/core/6.0/hsb.zip\";s:3:\"iso\";a:2:{i:2;s:3:\"hsb\";i:3;s:3:\"hsb\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:4:\"Dale\";}}s:5:\"hu_HU\";a:8:{s:8:\"language\";s:5:\"hu_HU\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-09 19:59:16\";s:12:\"english_name\";s:9:\"Hungarian\";s:11:\"native_name\";s:6:\"Magyar\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/hu_HU.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"hu\";i:2;s:3:\"hun\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"Folytatás\";}}s:2:\"hy\";a:8:{s:8:\"language\";s:2:\"hy\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-12-03 16:21:10\";s:12:\"english_name\";s:8:\"Armenian\";s:11:\"native_name\";s:14:\"Հայերեն\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/hy.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"hy\";i:2;s:3:\"hye\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:20:\"Շարունակել\";}}s:5:\"id_ID\";a:8:{s:8:\"language\";s:5:\"id_ID\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-06-17 00:59:11\";s:12:\"english_name\";s:10:\"Indonesian\";s:11:\"native_name\";s:16:\"Bahasa Indonesia\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/id_ID.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"id\";i:2;s:3:\"ind\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Lanjutkan\";}}s:5:\"is_IS\";a:8:{s:8:\"language\";s:5:\"is_IS\";s:7:\"version\";s:6:\"4.9.22\";s:7:\"updated\";s:19:\"2018-12-11 10:40:02\";s:12:\"english_name\";s:9:\"Icelandic\";s:11:\"native_name\";s:9:\"Íslenska\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/translation/core/4.9.22/is_IS.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"is\";i:2;s:3:\"isl\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Áfram\";}}s:5:\"it_IT\";a:8:{s:8:\"language\";s:5:\"it_IT\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-06 19:05:42\";s:12:\"english_name\";s:7:\"Italian\";s:11:\"native_name\";s:8:\"Italiano\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/it_IT.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"it\";i:2;s:3:\"ita\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continua\";}}s:2:\"ja\";a:8:{s:8:\"language\";s:2:\"ja\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-01 13:15:11\";s:12:\"english_name\";s:8:\"Japanese\";s:11:\"native_name\";s:9:\"日本語\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/translation/core/6.0/ja.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"ja\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"次へ\";}}s:5:\"jv_ID\";a:8:{s:8:\"language\";s:5:\"jv_ID\";s:7:\"version\";s:6:\"4.9.22\";s:7:\"updated\";s:19:\"2019-02-16 23:58:56\";s:12:\"english_name\";s:8:\"Javanese\";s:11:\"native_name\";s:9:\"Basa Jawa\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/translation/core/4.9.22/jv_ID.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"jv\";i:2;s:3:\"jav\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Nerusaké\";}}s:5:\"ka_GE\";a:8:{s:8:\"language\";s:5:\"ka_GE\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-05-08 19:36:41\";s:12:\"english_name\";s:8:\"Georgian\";s:11:\"native_name\";s:21:\"ქართული\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/ka_GE.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ka\";i:2;s:3:\"kat\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:30:\"გაგრძელება\";}}s:3:\"kab\";a:8:{s:8:\"language\";s:3:\"kab\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-09 09:53:03\";s:12:\"english_name\";s:6:\"Kabyle\";s:11:\"native_name\";s:9:\"Taqbaylit\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/translation/core/6.0/kab.zip\";s:3:\"iso\";a:2:{i:2;s:3:\"kab\";i:3;s:3:\"kab\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Kemmel\";}}s:2:\"kk\";a:8:{s:8:\"language\";s:2:\"kk\";s:7:\"version\";s:6:\"4.9.22\";s:7:\"updated\";s:19:\"2018-07-10 11:35:44\";s:12:\"english_name\";s:6:\"Kazakh\";s:11:\"native_name\";s:19:\"Қазақ тілі\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.9.22/kk.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"kk\";i:2;s:3:\"kaz\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:20:\"Жалғастыру\";}}s:2:\"km\";a:8:{s:8:\"language\";s:2:\"km\";s:7:\"version\";s:6:\"5.2.17\";s:7:\"updated\";s:19:\"2019-06-10 16:18:28\";s:12:\"english_name\";s:5:\"Khmer\";s:11:\"native_name\";s:27:\"ភាសាខ្មែរ\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/5.2.17/km.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"km\";i:2;s:3:\"khm\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"បន្ត\";}}s:2:\"kn\";a:8:{s:8:\"language\";s:2:\"kn\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-05-26 09:11:31\";s:12:\"english_name\";s:7:\"Kannada\";s:11:\"native_name\";s:15:\"ಕನ್ನಡ\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/translation/core/6.0/kn.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"kn\";i:2;s:3:\"kan\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:30:\"ಮುಂದುವರಿಸು\";}}s:5:\"ko_KR\";a:8:{s:8:\"language\";s:5:\"ko_KR\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-05-11 03:06:59\";s:12:\"english_name\";s:6:\"Korean\";s:11:\"native_name\";s:9:\"한국어\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/ko_KR.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ko\";i:2;s:3:\"kor\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"계속\";}}s:3:\"ckb\";a:8:{s:8:\"language\";s:3:\"ckb\";s:7:\"version\";s:5:\"5.8.6\";s:7:\"updated\";s:19:\"2021-12-07 16:32:30\";s:12:\"english_name\";s:16:\"Kurdish (Sorani)\";s:11:\"native_name\";s:13:\"كوردی‎\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/5.8.6/ckb.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ku\";i:3;s:3:\"ckb\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:30:\"به‌رده‌وام به‌\";}}s:2:\"lo\";a:8:{s:8:\"language\";s:2:\"lo\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-11-12 09:59:23\";s:12:\"english_name\";s:3:\"Lao\";s:11:\"native_name\";s:21:\"ພາສາລາວ\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/lo.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"lo\";i:2;s:3:\"lao\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:18:\"ຕໍ່​ໄປ\";}}s:5:\"lt_LT\";a:8:{s:8:\"language\";s:5:\"lt_LT\";s:7:\"version\";s:8:\"5.8-beta\";s:7:\"updated\";s:19:\"2021-03-23 12:35:40\";s:12:\"english_name\";s:10:\"Lithuanian\";s:11:\"native_name\";s:15:\"Lietuvių kalba\";s:7:\"package\";s:67:\"https://downloads.wordpress.org/translation/core/5.8-beta/lt_LT.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"lt\";i:2;s:3:\"lit\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Tęsti\";}}s:2:\"lv\";a:8:{s:8:\"language\";s:2:\"lv\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-05-25 11:55:56\";s:12:\"english_name\";s:7:\"Latvian\";s:11:\"native_name\";s:16:\"Latviešu valoda\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/translation/core/6.0/lv.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"lv\";i:2;s:3:\"lav\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Turpināt\";}}s:5:\"mk_MK\";a:8:{s:8:\"language\";s:5:\"mk_MK\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-04-12 12:32:07\";s:12:\"english_name\";s:10:\"Macedonian\";s:11:\"native_name\";s:31:\"Македонски јазик\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/mk_MK.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"mk\";i:2;s:3:\"mkd\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:16:\"Продолжи\";}}s:5:\"ml_IN\";a:8:{s:8:\"language\";s:5:\"ml_IN\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-27 03:43:32\";s:12:\"english_name\";s:9:\"Malayalam\";s:11:\"native_name\";s:18:\"മലയാളം\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/ml_IN.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ml\";i:2;s:3:\"mal\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:18:\"തുടരുക\";}}s:2:\"mn\";a:8:{s:8:\"language\";s:2:\"mn\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-12 07:29:35\";s:12:\"english_name\";s:9:\"Mongolian\";s:11:\"native_name\";s:12:\"Монгол\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/mn.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"mn\";i:2;s:3:\"mon\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:24:\"Үргэлжлүүлэх\";}}s:2:\"mr\";a:8:{s:8:\"language\";s:2:\"mr\";s:7:\"version\";s:6:\"4.9.22\";s:7:\"updated\";s:19:\"2019-11-22 15:32:08\";s:12:\"english_name\";s:7:\"Marathi\";s:11:\"native_name\";s:15:\"मराठी\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.9.22/mr.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"mr\";i:2;s:3:\"mar\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:25:\"सुरु ठेवा\";}}s:5:\"ms_MY\";a:8:{s:8:\"language\";s:5:\"ms_MY\";s:7:\"version\";s:6:\"5.5.11\";s:7:\"updated\";s:19:\"2022-03-11 13:52:22\";s:12:\"english_name\";s:5:\"Malay\";s:11:\"native_name\";s:13:\"Bahasa Melayu\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/translation/core/5.5.11/ms_MY.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ms\";i:2;s:3:\"msa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Teruskan\";}}s:5:\"my_MM\";a:8:{s:8:\"language\";s:5:\"my_MM\";s:7:\"version\";s:6:\"4.2.34\";s:7:\"updated\";s:19:\"2017-12-26 11:57:10\";s:12:\"english_name\";s:17:\"Myanmar (Burmese)\";s:11:\"native_name\";s:15:\"ဗမာစာ\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/translation/core/4.2.34/my_MM.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"my\";i:2;s:3:\"mya\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:54:\"ဆက်လက်လုပ်ဆောင်ပါ။\";}}s:5:\"nb_NO\";a:8:{s:8:\"language\";s:5:\"nb_NO\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-05 23:14:19\";s:12:\"english_name\";s:19:\"Norwegian (Bokmål)\";s:11:\"native_name\";s:13:\"Norsk bokmål\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/nb_NO.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"nb\";i:2;s:3:\"nob\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Fortsett\";}}s:5:\"ne_NP\";a:8:{s:8:\"language\";s:5:\"ne_NP\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-06-23 18:01:54\";s:12:\"english_name\";s:6:\"Nepali\";s:11:\"native_name\";s:18:\"नेपाली\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/ne_NP.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ne\";i:2;s:3:\"nep\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:43:\"जारी राख्नुहोस्\";}}s:12:\"nl_NL_formal\";a:8:{s:8:\"language\";s:12:\"nl_NL_formal\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-06-02 21:03:02\";s:12:\"english_name\";s:14:\"Dutch (Formal)\";s:11:\"native_name\";s:20:\"Nederlands (Formeel)\";s:7:\"package\";s:69:\"https://downloads.wordpress.org/translation/core/6.0/nl_NL_formal.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"nl\";i:2;s:3:\"nld\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Doorgaan\";}}s:5:\"nl_NL\";a:8:{s:8:\"language\";s:5:\"nl_NL\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-12 14:34:34\";s:12:\"english_name\";s:5:\"Dutch\";s:11:\"native_name\";s:10:\"Nederlands\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/nl_NL.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"nl\";i:2;s:3:\"nld\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Doorgaan\";}}s:5:\"nl_BE\";a:8:{s:8:\"language\";s:5:\"nl_BE\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-05 20:10:22\";s:12:\"english_name\";s:15:\"Dutch (Belgium)\";s:11:\"native_name\";s:20:\"Nederlands (België)\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/nl_BE.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"nl\";i:2;s:3:\"nld\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Doorgaan\";}}s:5:\"nn_NO\";a:8:{s:8:\"language\";s:5:\"nn_NO\";s:7:\"version\";s:8:\"5.8-beta\";s:7:\"updated\";s:19:\"2021-03-18 10:59:16\";s:12:\"english_name\";s:19:\"Norwegian (Nynorsk)\";s:11:\"native_name\";s:13:\"Norsk nynorsk\";s:7:\"package\";s:67:\"https://downloads.wordpress.org/translation/core/5.8-beta/nn_NO.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"nn\";i:2;s:3:\"nno\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Hald fram\";}}s:3:\"oci\";a:8:{s:8:\"language\";s:3:\"oci\";s:7:\"version\";s:6:\"4.8.21\";s:7:\"updated\";s:19:\"2017-08-25 10:03:08\";s:12:\"english_name\";s:7:\"Occitan\";s:11:\"native_name\";s:7:\"Occitan\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/translation/core/4.8.21/oci.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"oc\";i:2;s:3:\"oci\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Contunhar\";}}s:5:\"pa_IN\";a:8:{s:8:\"language\";s:5:\"pa_IN\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-16 05:19:43\";s:12:\"english_name\";s:15:\"Panjabi (India)\";s:11:\"native_name\";s:18:\"ਪੰਜਾਬੀ\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/pa_IN.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"pa\";i:2;s:3:\"pan\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:25:\"ਜਾਰੀ ਰੱਖੋ\";}}s:5:\"pl_PL\";a:8:{s:8:\"language\";s:5:\"pl_PL\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-06-23 06:23:26\";s:12:\"english_name\";s:6:\"Polish\";s:11:\"native_name\";s:6:\"Polski\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/pl_PL.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"pl\";i:2;s:3:\"pol\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Kontynuuj\";}}s:2:\"ps\";a:8:{s:8:\"language\";s:2:\"ps\";s:7:\"version\";s:6:\"4.3.30\";s:7:\"updated\";s:19:\"2015-12-02 21:41:29\";s:12:\"english_name\";s:6:\"Pashto\";s:11:\"native_name\";s:8:\"پښتو\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.3.30/ps.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ps\";i:2;s:3:\"pus\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:19:\"دوام ورکړه\";}}s:5:\"pt_PT\";a:8:{s:8:\"language\";s:5:\"pt_PT\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-08 16:02:18\";s:12:\"english_name\";s:21:\"Portuguese (Portugal)\";s:11:\"native_name\";s:10:\"Português\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/pt_PT.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"pt\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"pt_BR\";a:8:{s:8:\"language\";s:5:\"pt_BR\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-04 15:59:17\";s:12:\"english_name\";s:19:\"Portuguese (Brazil)\";s:11:\"native_name\";s:20:\"Português do Brasil\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/pt_BR.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"pt\";i:2;s:3:\"por\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:5:\"pt_AO\";a:8:{s:8:\"language\";s:5:\"pt_AO\";s:7:\"version\";s:5:\"5.8.6\";s:7:\"updated\";s:19:\"2021-11-27 16:28:47\";s:12:\"english_name\";s:19:\"Portuguese (Angola)\";s:11:\"native_name\";s:20:\"Português de Angola\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/5.8.6/pt_AO.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"pt\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:10:\"pt_PT_ao90\";a:8:{s:8:\"language\";s:10:\"pt_PT_ao90\";s:7:\"version\";s:5:\"5.8.6\";s:7:\"updated\";s:19:\"2021-09-09 21:40:55\";s:12:\"english_name\";s:27:\"Portuguese (Portugal, AO90)\";s:11:\"native_name\";s:17:\"Português (AO90)\";s:7:\"package\";s:69:\"https://downloads.wordpress.org/translation/core/5.8.6/pt_PT_ao90.zip\";s:3:\"iso\";a:1:{i:1;s:2:\"pt\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuar\";}}s:3:\"rhg\";a:8:{s:8:\"language\";s:3:\"rhg\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-03-16 13:03:18\";s:12:\"english_name\";s:8:\"Rohingya\";s:11:\"native_name\";s:8:\"Ruáinga\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/rhg.zip\";s:3:\"iso\";a:1:{i:3;s:3:\"rhg\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:5:\"ro_RO\";a:8:{s:8:\"language\";s:5:\"ro_RO\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-06 08:35:45\";s:12:\"english_name\";s:8:\"Romanian\";s:11:\"native_name\";s:8:\"Română\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/ro_RO.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ro\";i:2;s:3:\"ron\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Continuă\";}}s:5:\"ru_RU\";a:8:{s:8:\"language\";s:5:\"ru_RU\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-06 10:04:56\";s:12:\"english_name\";s:7:\"Russian\";s:11:\"native_name\";s:14:\"Русский\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/ru_RU.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ru\";i:2;s:3:\"rus\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:20:\"Продолжить\";}}s:3:\"sah\";a:8:{s:8:\"language\";s:3:\"sah\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-21 02:06:41\";s:12:\"english_name\";s:5:\"Sakha\";s:11:\"native_name\";s:14:\"Сахалыы\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/sah.zip\";s:3:\"iso\";a:2:{i:2;s:3:\"sah\";i:3;s:3:\"sah\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"Салҕаа\";}}s:3:\"snd\";a:8:{s:8:\"language\";s:3:\"snd\";s:7:\"version\";s:6:\"5.4.12\";s:7:\"updated\";s:19:\"2020-07-07 01:53:37\";s:12:\"english_name\";s:6:\"Sindhi\";s:11:\"native_name\";s:8:\"سنڌي\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/translation/core/5.4.12/snd.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"sd\";i:2;s:3:\"snd\";i:3;s:3:\"snd\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:15:\"اڳتي هلو\";}}s:5:\"si_LK\";a:8:{s:8:\"language\";s:5:\"si_LK\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-11-12 06:00:52\";s:12:\"english_name\";s:7:\"Sinhala\";s:11:\"native_name\";s:15:\"සිංහල\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/si_LK.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"si\";i:2;s:3:\"sin\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:44:\"දිගටම කරගෙන යන්න\";}}s:5:\"sk_SK\";a:8:{s:8:\"language\";s:5:\"sk_SK\";s:7:\"version\";s:5:\"5.9.5\";s:7:\"updated\";s:19:\"2022-10-17 03:57:13\";s:12:\"english_name\";s:6:\"Slovak\";s:11:\"native_name\";s:11:\"Slovenčina\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/5.9.5/sk_SK.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sk\";i:2;s:3:\"slk\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"Pokračovať\";}}s:3:\"skr\";a:8:{s:8:\"language\";s:3:\"skr\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-05-28 09:31:32\";s:12:\"english_name\";s:7:\"Saraiki\";s:11:\"native_name\";s:14:\"سرائیکی\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/translation/core/6.0/skr.zip\";s:3:\"iso\";a:1:{i:3;s:3:\"skr\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:17:\"جاری رکھو\";}}s:5:\"sl_SI\";a:8:{s:8:\"language\";s:5:\"sl_SI\";s:7:\"version\";s:5:\"5.9.5\";s:7:\"updated\";s:19:\"2022-02-01 10:20:40\";s:12:\"english_name\";s:9:\"Slovenian\";s:11:\"native_name\";s:13:\"Slovenščina\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/5.9.5/sl_SI.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sl\";i:2;s:3:\"slv\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Nadaljuj\";}}s:2:\"sq\";a:8:{s:8:\"language\";s:2:\"sq\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-06-26 14:20:57\";s:12:\"english_name\";s:8:\"Albanian\";s:11:\"native_name\";s:5:\"Shqip\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/translation/core/6.0/sq.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sq\";i:2;s:3:\"sqi\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"Vazhdo\";}}s:5:\"sr_RS\";a:8:{s:8:\"language\";s:5:\"sr_RS\";s:7:\"version\";s:5:\"5.8.6\";s:7:\"updated\";s:19:\"2021-08-01 21:21:06\";s:12:\"english_name\";s:7:\"Serbian\";s:11:\"native_name\";s:23:\"Српски језик\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/5.8.6/sr_RS.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sr\";i:2;s:3:\"srp\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:14:\"Настави\";}}s:5:\"sv_SE\";a:8:{s:8:\"language\";s:5:\"sv_SE\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-07 18:28:35\";s:12:\"english_name\";s:7:\"Swedish\";s:11:\"native_name\";s:7:\"Svenska\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/sv_SE.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sv\";i:2;s:3:\"swe\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:9:\"Fortsätt\";}}s:2:\"sw\";a:8:{s:8:\"language\";s:2:\"sw\";s:7:\"version\";s:6:\"5.3.14\";s:7:\"updated\";s:19:\"2019-10-13 15:35:35\";s:12:\"english_name\";s:7:\"Swahili\";s:11:\"native_name\";s:9:\"Kiswahili\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/5.3.14/sw.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"sw\";i:2;s:3:\"swa\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:7:\"Endelea\";}}s:3:\"szl\";a:8:{s:8:\"language\";s:3:\"szl\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-09-24 19:58:14\";s:12:\"english_name\";s:8:\"Silesian\";s:11:\"native_name\";s:17:\"Ślōnskŏ gŏdka\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/szl.zip\";s:3:\"iso\";a:1:{i:3;s:3:\"szl\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:13:\"Kōntynuować\";}}s:5:\"ta_IN\";a:8:{s:8:\"language\";s:5:\"ta_IN\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-27 03:22:47\";s:12:\"english_name\";s:5:\"Tamil\";s:11:\"native_name\";s:15:\"தமிழ்\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/ta_IN.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ta\";i:2;s:3:\"tam\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:24:\"தொடரவும்\";}}s:5:\"ta_LK\";a:8:{s:8:\"language\";s:5:\"ta_LK\";s:7:\"version\";s:6:\"4.2.34\";s:7:\"updated\";s:19:\"2015-12-03 01:07:44\";s:12:\"english_name\";s:17:\"Tamil (Sri Lanka)\";s:11:\"native_name\";s:15:\"தமிழ்\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/translation/core/4.2.34/ta_LK.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ta\";i:2;s:3:\"tam\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:18:\"தொடர்க\";}}s:2:\"te\";a:8:{s:8:\"language\";s:2:\"te\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2017-01-26 15:47:39\";s:12:\"english_name\";s:6:\"Telugu\";s:11:\"native_name\";s:18:\"తెలుగు\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/4.7.2/te.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"te\";i:2;s:3:\"tel\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:30:\"కొనసాగించు\";}}s:2:\"th\";a:8:{s:8:\"language\";s:2:\"th\";s:7:\"version\";s:5:\"5.8.6\";s:7:\"updated\";s:19:\"2022-06-08 04:30:30\";s:12:\"english_name\";s:4:\"Thai\";s:11:\"native_name\";s:9:\"ไทย\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/translation/core/5.8.6/th.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"th\";i:2;s:3:\"tha\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:15:\"ต่อไป\";}}s:2:\"tl\";a:8:{s:8:\"language\";s:2:\"tl\";s:7:\"version\";s:6:\"4.8.21\";s:7:\"updated\";s:19:\"2017-09-30 09:04:29\";s:12:\"english_name\";s:7:\"Tagalog\";s:11:\"native_name\";s:7:\"Tagalog\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.8.21/tl.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"tl\";i:2;s:3:\"tgl\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:10:\"Magpatuloy\";}}s:5:\"tr_TR\";a:8:{s:8:\"language\";s:5:\"tr_TR\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-07 22:28:45\";s:12:\"english_name\";s:7:\"Turkish\";s:11:\"native_name\";s:8:\"Türkçe\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/tr_TR.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"tr\";i:2;s:3:\"tur\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:5:\"Devam\";}}s:5:\"tt_RU\";a:8:{s:8:\"language\";s:5:\"tt_RU\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-11-20 20:20:50\";s:12:\"english_name\";s:5:\"Tatar\";s:11:\"native_name\";s:19:\"Татар теле\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/translation/core/4.7.2/tt_RU.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"tt\";i:2;s:3:\"tat\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:17:\"дәвам итү\";}}s:3:\"tah\";a:8:{s:8:\"language\";s:3:\"tah\";s:7:\"version\";s:5:\"4.7.2\";s:7:\"updated\";s:19:\"2016-03-06 18:39:39\";s:12:\"english_name\";s:8:\"Tahitian\";s:11:\"native_name\";s:10:\"Reo Tahiti\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/4.7.2/tah.zip\";s:3:\"iso\";a:3:{i:1;s:2:\"ty\";i:2;s:3:\"tah\";i:3;s:3:\"tah\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:8:\"Continue\";}}s:5:\"ug_CN\";a:8:{s:8:\"language\";s:5:\"ug_CN\";s:7:\"version\";s:6:\"4.9.22\";s:7:\"updated\";s:19:\"2021-07-03 18:41:33\";s:12:\"english_name\";s:6:\"Uighur\";s:11:\"native_name\";s:16:\"ئۇيغۇرچە\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/translation/core/4.9.22/ug_CN.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ug\";i:2;s:3:\"uig\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:26:\"داۋاملاشتۇرۇش\";}}s:2:\"uk\";a:8:{s:8:\"language\";s:2:\"uk\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-05-24 11:42:59\";s:12:\"english_name\";s:9:\"Ukrainian\";s:11:\"native_name\";s:20:\"Українська\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/translation/core/6.0/uk.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"uk\";i:2;s:3:\"ukr\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:20:\"Продовжити\";}}s:2:\"ur\";a:8:{s:8:\"language\";s:2:\"ur\";s:7:\"version\";s:6:\"5.4.12\";s:7:\"updated\";s:19:\"2020-04-09 11:17:33\";s:12:\"english_name\";s:4:\"Urdu\";s:11:\"native_name\";s:8:\"اردو\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/5.4.12/ur.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"ur\";i:2;s:3:\"urd\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:19:\"جاری رکھیں\";}}s:5:\"uz_UZ\";a:8:{s:8:\"language\";s:5:\"uz_UZ\";s:7:\"version\";s:8:\"5.8-beta\";s:7:\"updated\";s:19:\"2021-02-28 12:02:22\";s:12:\"english_name\";s:5:\"Uzbek\";s:11:\"native_name\";s:11:\"O‘zbekcha\";s:7:\"package\";s:67:\"https://downloads.wordpress.org/translation/core/5.8-beta/uz_UZ.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"uz\";i:2;s:3:\"uzb\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:11:\"Davom etish\";}}s:2:\"vi\";a:8:{s:8:\"language\";s:2:\"vi\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-06-15 08:04:07\";s:12:\"english_name\";s:10:\"Vietnamese\";s:11:\"native_name\";s:14:\"Tiếng Việt\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/translation/core/6.0/vi.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"vi\";i:2;s:3:\"vie\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:12:\"Tiếp tục\";}}s:5:\"zh_CN\";a:8:{s:8:\"language\";s:5:\"zh_CN\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-06-16 05:31:59\";s:12:\"english_name\";s:15:\"Chinese (China)\";s:11:\"native_name\";s:12:\"简体中文\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/zh_CN.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"zh\";i:2;s:3:\"zho\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"继续\";}}s:5:\"zh_TW\";a:8:{s:8:\"language\";s:5:\"zh_TW\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-12 07:42:16\";s:12:\"english_name\";s:16:\"Chinese (Taiwan)\";s:11:\"native_name\";s:12:\"繁體中文\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/zh_TW.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"zh\";i:2;s:3:\"zho\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"繼續\";}}s:5:\"zh_HK\";a:8:{s:8:\"language\";s:5:\"zh_HK\";s:7:\"version\";s:3:\"6.0\";s:7:\"updated\";s:19:\"2022-07-06 17:43:38\";s:12:\"english_name\";s:19:\"Chinese (Hong Kong)\";s:11:\"native_name\";s:12:\"香港中文\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/translation/core/6.0/zh_HK.zip\";s:3:\"iso\";a:2:{i:1;s:2:\"zh\";i:2;s:3:\"zho\";}s:7:\"strings\";a:1:{s:8:\"continue\";s:6:\"繼續\";}}}', 'no');
INSERT INTO `wp_options` (`option_id`, `option_name`, `option_value`, `autoload`) VALUES
(247670, '_site_transient_timeout_theme_roots', '1666870901', 'no'),
(247671, '_site_transient_theme_roots', 'a:7:{s:7:\"pincman\";s:7:\"/themes\";s:10:\"rizhuti-v2\";s:7:\"/themes\";s:7:\"rowfish\";s:7:\"/themes\";s:14:\"twentynineteen\";s:7:\"/themes\";s:12:\"twentytwenty\";s:7:\"/themes\";s:15:\"twentytwentyone\";s:7:\"/themes\";s:15:\"twentytwentytwo\";s:7:\"/themes\";}', 'no'),
(247786, '_transient_timeout_global_styles_rowfish', '1666875049', 'no'),
(247787, '_transient_global_styles_rowfish', 'body{--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--duotone--dark-grayscale: url(\'#wp-duotone-dark-grayscale\');--wp--preset--duotone--grayscale: url(\'#wp-duotone-grayscale\');--wp--preset--duotone--purple-yellow: url(\'#wp-duotone-purple-yellow\');--wp--preset--duotone--blue-red: url(\'#wp-duotone-blue-red\');--wp--preset--duotone--midnight: url(\'#wp-duotone-midnight\');--wp--preset--duotone--magenta-yellow: url(\'#wp-duotone-magenta-yellow\');--wp--preset--duotone--purple-green: url(\'#wp-duotone-purple-green\');--wp--preset--duotone--blue-orange: url(\'#wp-duotone-blue-orange\');--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}', 'no'),
(247788, '_transient_timeout_global_styles_svg_filters_rowfish', '1666875049', 'no'),
(247789, '_transient_global_styles_svg_filters_rowfish', '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 0 0\" width=\"0\" height=\"0\" focusable=\"false\" role=\"none\" style=\"visibility: hidden; position: absolute; left: -9999px; overflow: hidden;\" ><defs><filter id=\"wp-duotone-dark-grayscale\"><feColorMatrix color-interpolation-filters=\"sRGB\" type=\"matrix\" values=\" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 \" /><feComponentTransfer color-interpolation-filters=\"sRGB\" ><feFuncR type=\"table\" tableValues=\"0 0.49803921568627\" /><feFuncG type=\"table\" tableValues=\"0 0.49803921568627\" /><feFuncB type=\"table\" tableValues=\"0 0.49803921568627\" /><feFuncA type=\"table\" tableValues=\"1 1\" /></feComponentTransfer><feComposite in2=\"SourceGraphic\" operator=\"in\" /></filter></defs></svg><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 0 0\" width=\"0\" height=\"0\" focusable=\"false\" role=\"none\" style=\"visibility: hidden; position: absolute; left: -9999px; overflow: hidden;\" ><defs><filter id=\"wp-duotone-grayscale\"><feColorMatrix color-interpolation-filters=\"sRGB\" type=\"matrix\" values=\" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 \" /><feComponentTransfer color-interpolation-filters=\"sRGB\" ><feFuncR type=\"table\" tableValues=\"0 1\" /><feFuncG type=\"table\" tableValues=\"0 1\" /><feFuncB type=\"table\" tableValues=\"0 1\" /><feFuncA type=\"table\" tableValues=\"1 1\" /></feComponentTransfer><feComposite in2=\"SourceGraphic\" operator=\"in\" /></filter></defs></svg><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 0 0\" width=\"0\" height=\"0\" focusable=\"false\" role=\"none\" style=\"visibility: hidden; position: absolute; left: -9999px; overflow: hidden;\" ><defs><filter id=\"wp-duotone-purple-yellow\"><feColorMatrix color-interpolation-filters=\"sRGB\" type=\"matrix\" values=\" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 \" /><feComponentTransfer color-interpolation-filters=\"sRGB\" ><feFuncR type=\"table\" tableValues=\"0.54901960784314 0.98823529411765\" /><feFuncG type=\"table\" tableValues=\"0 1\" /><feFuncB type=\"table\" tableValues=\"0.71764705882353 0.25490196078431\" /><feFuncA type=\"table\" tableValues=\"1 1\" /></feComponentTransfer><feComposite in2=\"SourceGraphic\" operator=\"in\" /></filter></defs></svg><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 0 0\" width=\"0\" height=\"0\" focusable=\"false\" role=\"none\" style=\"visibility: hidden; position: absolute; left: -9999px; overflow: hidden;\" ><defs><filter id=\"wp-duotone-blue-red\"><feColorMatrix color-interpolation-filters=\"sRGB\" type=\"matrix\" values=\" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 \" /><feComponentTransfer color-interpolation-filters=\"sRGB\" ><feFuncR type=\"table\" tableValues=\"0 1\" /><feFuncG type=\"table\" tableValues=\"0 0.27843137254902\" /><feFuncB type=\"table\" tableValues=\"0.5921568627451 0.27843137254902\" /><feFuncA type=\"table\" tableValues=\"1 1\" /></feComponentTransfer><feComposite in2=\"SourceGraphic\" operator=\"in\" /></filter></defs></svg><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 0 0\" width=\"0\" height=\"0\" focusable=\"false\" role=\"none\" style=\"visibility: hidden; position: absolute; left: -9999px; overflow: hidden;\" ><defs><filter id=\"wp-duotone-midnight\"><feColorMatrix color-interpolation-filters=\"sRGB\" type=\"matrix\" values=\" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 \" /><feComponentTransfer color-interpolation-filters=\"sRGB\" ><feFuncR type=\"table\" tableValues=\"0 0\" /><feFuncG type=\"table\" tableValues=\"0 0.64705882352941\" /><feFuncB type=\"table\" tableValues=\"0 1\" /><feFuncA type=\"table\" tableValues=\"1 1\" /></feComponentTransfer><feComposite in2=\"SourceGraphic\" operator=\"in\" /></filter></defs></svg><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 0 0\" width=\"0\" height=\"0\" focusable=\"false\" role=\"none\" style=\"visibility: hidden; position: absolute; left: -9999px; overflow: hidden;\" ><defs><filter id=\"wp-duotone-magenta-yellow\"><feColorMatrix color-interpolation-filters=\"sRGB\" type=\"matrix\" values=\" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 \" /><feComponentTransfer color-interpolation-filters=\"sRGB\" ><feFuncR type=\"table\" tableValues=\"0.78039215686275 1\" /><feFuncG type=\"table\" tableValues=\"0 0.94901960784314\" /><feFuncB type=\"table\" tableValues=\"0.35294117647059 0.47058823529412\" /><feFuncA type=\"table\" tableValues=\"1 1\" /></feComponentTransfer><feComposite in2=\"SourceGraphic\" operator=\"in\" /></filter></defs></svg><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 0 0\" width=\"0\" height=\"0\" focusable=\"false\" role=\"none\" style=\"visibility: hidden; position: absolute; left: -9999px; overflow: hidden;\" ><defs><filter id=\"wp-duotone-purple-green\"><feColorMatrix color-interpolation-filters=\"sRGB\" type=\"matrix\" values=\" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 \" /><feComponentTransfer color-interpolation-filters=\"sRGB\" ><feFuncR type=\"table\" tableValues=\"0.65098039215686 0.40392156862745\" /><feFuncG type=\"table\" tableValues=\"0 1\" /><feFuncB type=\"table\" tableValues=\"0.44705882352941 0.4\" /><feFuncA type=\"table\" tableValues=\"1 1\" /></feComponentTransfer><feComposite in2=\"SourceGraphic\" operator=\"in\" /></filter></defs></svg><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 0 0\" width=\"0\" height=\"0\" focusable=\"false\" role=\"none\" style=\"visibility: hidden; position: absolute; left: -9999px; overflow: hidden;\" ><defs><filter id=\"wp-duotone-blue-orange\"><feColorMatrix color-interpolation-filters=\"sRGB\" type=\"matrix\" values=\" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 \" /><feComponentTransfer color-interpolation-filters=\"sRGB\" ><feFuncR type=\"table\" tableValues=\"0.098039215686275 1\" /><feFuncG type=\"table\" tableValues=\"0 0.66274509803922\" /><feFuncB type=\"table\" tableValues=\"0.84705882352941 0.41960784313725\" /><feFuncA type=\"table\" tableValues=\"1 1\" /></feComponentTransfer><feComposite in2=\"SourceGraphic\" operator=\"in\" /></filter></defs></svg>', 'no'),
(247790, '_transient_timeout_fetching_wpjam_weixin_user_ogP3AjvWXrW3CS-IlCzZmSeJtoZU', '1666875008', 'no'),
(247791, '_transient_fetching_wpjam_weixin_user_ogP3AjvWXrW3CS-IlCzZmSeJtoZU', '1', 'no'),
(247792, '_site_transient_timeout_browser_acff52a1652901ae7e446fb41b9189b7', '1667479799', 'no'),
(247793, '_site_transient_browser_acff52a1652901ae7e446fb41b9189b7', 'a:10:{s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:9:\"106.0.0.0\";s:8:\"platform\";s:7:\"Windows\";s:10:\"update_url\";s:29:\"https://www.google.com/chrome\";s:7:\"img_src\";s:55:\"http://s.w.org.ibadboy.net/images/browsers/chrome.png?1\";s:11:\"img_src_ssl\";s:56:\"https://s.w.org.ibadboy.net/images/browsers/chrome.png?1\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;s:6:\"mobile\";b:0;}', 'no'),
(247794, '_transient_timeout_ap_pages_check', '1666878599', 'no'),
(247795, '_transient_ap_pages_check', '1', 'no'),
(247796, '_transient_timeout_dashboard_jam_posts', '1666918199', 'no'),
(247797, '_transient_dashboard_jam_posts', 'a:10:{i:0;a:26:{s:2:\"id\";i:6049;s:9:\"post_type\";s:1:\"m\";s:4:\"type\";s:1:\"m\";s:6:\"status\";s:7:\"publish\";s:5:\"title\";s:55:\"WordPress 技巧：忘记了管理员密码怎么办？\";s:7:\"excerpt\";s:296:\"人类最大的错觉就是自己能够记得一切东西，但事实上是人们可以把什么都忘记了，所以一不小心把 WordPress 的管理员密码是很正常的事情，重点是忘记了，怎么办？怎么找回，下面就教你： 1. 能进入数据库吗？ 那就进到 …\";s:9:\"timestamp\";i:1585152942;s:4:\"time\";s:7:\"3年前\";s:4:\"date\";s:10:\"2020-03-26\";s:13:\"modified_time\";s:7:\"2天前\";s:13:\"modified_date\";s:10:\"2022-10-25\";s:4:\"name\";s:26:\"how-to-reset-administrator\";s:8:\"post_url\";s:30:\"/m/how-to-reset-administrator/\";s:9:\"thumbnail\";s:140:\"https://cdn.wpjam.com/2013/wordpress-tips.png?imageMogr2/auto-orient/thumbnail/!200x200r/gravity/Center/crop/200x200/quality/70/interlace/1#\";s:6:\"author\";a:5:{s:2:\"id\";i:28;s:8:\"nickname\";s:17:\"Denis | 邓鸿华\";s:12:\"display_name\";s:17:\"Denis | 邓鸿华\";s:4:\"name\";s:17:\"Denis | 邓鸿华\";s:6:\"avatar\";s:131:\"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er5Z4Hk40PsuLwzU0nicwSOaGjg3wUQtpopd3d3ia5C5TFOfKIicxaW9DSK4eRAgUqgNqWHY0nFtCzcw/132\";}s:7:\"user_id\";i:28;s:5:\"views\";i:1844;s:8:\"category\";a:1:{i:0;a:8:{s:2:\"id\";i:18;s:8:\"taxonomy\";s:8:\"category\";s:4:\"name\";s:9:\"WordPress\";s:5:\"count\";i:1184;s:11:\"description\";s:37:\"WordPress 最佳开源博客平台111\";s:4:\"slug\";s:9:\"wordpress\";s:6:\"parent\";i:0;s:9:\"thumbnail\";s:0:\"\";}}s:8:\"post_tag\";a:1:{i:0;a:7:{s:2:\"id\";i:39;s:8:\"taxonomy\";s:8:\"post_tag\";s:4:\"name\";s:16:\"WordPress 技巧\";s:5:\"count\";i:271;s:11:\"description\";s:63:\"每日分享 WordPress 使用技巧，让你玩转 WordPress！\";s:4:\"slug\";s:14:\"wordpress-tips\";s:9:\"thumbnail\";s:140:\"https://cdn.wpjam.com/2013/wordpress-tips.png?imageMogr2/auto-orient/thumbnail/!150x150r/gravity/Center/crop/150x150/quality/70/interlace/1#\";}}s:6:\"series\";a:0:{}s:14:\"comment_sticky\";b:1;s:10:\"reply_type\";s:3:\"all\";s:13:\"comment_count\";i:0;s:14:\"comment_status\";s:4:\"open\";s:16:\"meta_description\";s:0:\"\";s:13:\"meta_keywords\";s:0:\"\";}i:1;a:25:{s:2:\"id\";i:8819;s:9:\"post_type\";s:4:\"post\";s:4:\"type\";s:4:\"post\";s:6:\"status\";s:7:\"publish\";s:5:\"title\";s:55:\"WordPress 主题目录支持主题的样式风格预览\";s:7:\"excerpt\";s:283:\"WordPress 6.0 引入了向主题添加多种样式变化的功能 ，这些由主题作者设计的并打包在区块主题中的样式风格，可帮助用户在设计其网站的时候有更多的方法，主题的样式风格功能有助于突出现代 WordPress 主题的灵 …\";s:9:\"timestamp\";i:1666606193;s:4:\"time\";s:7:\"3天前\";s:4:\"date\";s:10:\"2022-10-24\";s:13:\"modified_time\";s:7:\"3天前\";s:13:\"modified_date\";s:10:\"2022-10-24\";s:4:\"name\";s:49:\"displaying-style-variations-for-supporting-themes\";s:8:\"post_url\";s:62:\"/2022/10/24/displaying-style-variations-for-supporting-themes/\";s:9:\"thumbnail\";s:173:\"https://cdn.97866.com/wp-content/uploads/sites/26/2022/10/1666606666-image.png?imageMogr2/auto-orient/thumbnail/!150x150r/gravity/Center/crop/150x150/quality/70/interlace/1#\";s:6:\"author\";a:5:{s:2:\"id\";i:28;s:8:\"nickname\";s:17:\"Denis | 邓鸿华\";s:12:\"display_name\";s:17:\"Denis | 邓鸿华\";s:4:\"name\";s:17:\"Denis | 邓鸿华\";s:6:\"avatar\";s:131:\"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er5Z4Hk40PsuLwzU0nicwSOaGjg3wUQtpopd3d3ia5C5TFOfKIicxaW9DSK4eRAgUqgNqWHY0nFtCzcw/132\";}s:7:\"user_id\";i:28;s:5:\"views\";i:118;s:8:\"category\";a:1:{i:0;a:8:{s:2:\"id\";i:18;s:8:\"taxonomy\";s:8:\"category\";s:4:\"name\";s:9:\"WordPress\";s:5:\"count\";i:1184;s:11:\"description\";s:37:\"WordPress 最佳开源博客平台111\";s:4:\"slug\";s:9:\"wordpress\";s:6:\"parent\";i:0;s:9:\"thumbnail\";s:0:\"\";}}s:8:\"post_tag\";a:1:{i:0;a:7:{s:2:\"id\";i:1022;s:8:\"taxonomy\";s:8:\"post_tag\";s:4:\"name\";s:16:\"WordPress 新闻\";s:5:\"count\";i:120;s:11:\"description\";s:0:\"\";s:4:\"slug\";s:14:\"wordpress-news\";s:9:\"thumbnail\";s:0:\"\";}}s:14:\"comment_sticky\";b:1;s:10:\"reply_type\";s:3:\"all\";s:13:\"comment_count\";i:0;s:14:\"comment_status\";s:4:\"open\";s:16:\"meta_description\";s:0:\"\";s:13:\"meta_keywords\";s:0:\"\";}i:2;a:26:{s:2:\"id\";i:8815;s:9:\"post_type\";s:1:\"m\";s:4:\"type\";s:1:\"m\";s:6:\"status\";s:7:\"publish\";s:5:\"title\";s:57:\"推荐一款适合图片博客的 WordPress 主题：Masu\";s:7:\"excerpt\";s:293:\"今天给大家推荐一款非常简洁的适合图片博客的 WordPress 主题 Masu： 下图是它首页的展示样子，以网格的方式展示图片，配上很淡的原木背景色，还是非常好看的： 好看的主题就不多废话了，大家自己去体验和下载了：  …\";s:9:\"timestamp\";i:1666448762;s:4:\"time\";s:7:\"5天前\";s:4:\"date\";s:10:\"2022-10-22\";s:13:\"modified_time\";s:7:\"5天前\";s:13:\"modified_date\";s:10:\"2022-10-22\";s:4:\"name\";s:20:\"masu-wordpress-theme\";s:8:\"post_url\";s:24:\"/m/masu-wordpress-theme/\";s:9:\"thumbnail\";s:173:\"https://cdn.97866.com/wp-content/uploads/sites/26/2022/10/1666448921-image.png?imageMogr2/auto-orient/thumbnail/!200x200r/gravity/Center/crop/200x200/quality/70/interlace/1#\";s:6:\"author\";a:5:{s:2:\"id\";i:28;s:8:\"nickname\";s:17:\"Denis | 邓鸿华\";s:12:\"display_name\";s:17:\"Denis | 邓鸿华\";s:4:\"name\";s:17:\"Denis | 邓鸿华\";s:6:\"avatar\";s:131:\"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er5Z4Hk40PsuLwzU0nicwSOaGjg3wUQtpopd3d3ia5C5TFOfKIicxaW9DSK4eRAgUqgNqWHY0nFtCzcw/132\";}s:7:\"user_id\";i:28;s:5:\"views\";i:401;s:8:\"category\";a:1:{i:0;a:8:{s:2:\"id\";i:18;s:8:\"taxonomy\";s:8:\"category\";s:4:\"name\";s:9:\"WordPress\";s:5:\"count\";i:1184;s:11:\"description\";s:37:\"WordPress 最佳开源博客平台111\";s:4:\"slug\";s:9:\"wordpress\";s:6:\"parent\";i:0;s:9:\"thumbnail\";s:0:\"\";}}s:8:\"post_tag\";a:1:{i:0;a:7:{s:2:\"id\";i:54;s:8:\"taxonomy\";s:8:\"post_tag\";s:4:\"name\";s:16:\"WordPress 主题\";s:5:\"count\";i:117;s:11:\"description\";s:1:\"\n\";s:4:\"slug\";s:15:\"wordpress-theme\";s:9:\"thumbnail\";s:0:\"\";}}s:6:\"series\";a:0:{}s:14:\"comment_sticky\";b:1;s:10:\"reply_type\";s:3:\"all\";s:13:\"comment_count\";i:0;s:14:\"comment_status\";s:4:\"open\";s:16:\"meta_description\";s:0:\"\";s:13:\"meta_keywords\";s:0:\"\";}i:3;a:26:{s:2:\"id\";i:8810;s:9:\"post_type\";s:1:\"m\";s:4:\"type\";s:1:\"m\";s:6:\"status\";s:7:\"publish\";s:5:\"title\";s:49:\"如何让微信公众号 Token 验证快速通过\";s:7:\"excerpt\";s:301:\"公众号 Token 通不过，是微信机器人碰到的最多问题，很多人追着我问，但是我自己的公众号或者其他朋友的公众号，使用微信机器人的时候都是一次就搞定，我也很无语，我回他程序没问题，又变成了我态度不好。😓 免费程 …\";s:9:\"timestamp\";i:1666091315;s:4:\"time\";s:7:\"1周前\";s:4:\"date\";s:10:\"2022-10-18\";s:13:\"modified_time\";s:7:\"1周前\";s:13:\"modified_date\";s:10:\"2022-10-18\";s:4:\"name\";s:28:\"weixin-mp-token-pass-quickly\";s:8:\"post_url\";s:32:\"/m/weixin-mp-token-pass-quickly/\";s:9:\"thumbnail\";s:182:\"https://cdn.97866.com/wp-content/uploads/sites/26/2022/02/1645061946-wp-dkblue-blue.png?imageMogr2/auto-orient/thumbnail/!200x200r/gravity/Center/crop/200x200/quality/70/interlace/1#\";s:6:\"author\";a:5:{s:2:\"id\";i:28;s:8:\"nickname\";s:17:\"Denis | 邓鸿华\";s:12:\"display_name\";s:17:\"Denis | 邓鸿华\";s:4:\"name\";s:17:\"Denis | 邓鸿华\";s:6:\"avatar\";s:131:\"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er5Z4Hk40PsuLwzU0nicwSOaGjg3wUQtpopd3d3ia5C5TFOfKIicxaW9DSK4eRAgUqgNqWHY0nFtCzcw/132\";}s:7:\"user_id\";i:28;s:5:\"views\";i:276;s:8:\"category\";a:1:{i:0;a:8:{s:2:\"id\";i:18;s:8:\"taxonomy\";s:8:\"category\";s:4:\"name\";s:9:\"WordPress\";s:5:\"count\";i:1184;s:11:\"description\";s:37:\"WordPress 最佳开源博客平台111\";s:4:\"slug\";s:9:\"wordpress\";s:6:\"parent\";i:0;s:9:\"thumbnail\";s:0:\"\";}}s:8:\"post_tag\";a:3:{i:0;a:7:{s:2:\"id\";i:75;s:8:\"taxonomy\";s:8:\"post_tag\";s:4:\"name\";s:16:\"WordPress 插件\";s:5:\"count\";i:390;s:11:\"description\";s:1:\"\n\";s:4:\"slug\";s:16:\"wordpress-plugin\";s:9:\"thumbnail\";s:0:\"\";}i:1;a:7:{s:2:\"id\";i:1021;s:8:\"taxonomy\";s:8:\"post_tag\";s:4:\"name\";s:18:\"微信公众平台\";s:5:\"count\";i:68;s:11:\"description\";s:0:\"\";s:4:\"slug\";s:9:\"weixin-mp\";s:9:\"thumbnail\";s:0:\"\";}i:2;a:7:{s:2:\"id\";i:1020;s:8:\"taxonomy\";s:8:\"post_tag\";s:4:\"name\";s:15:\"微信机器人\";s:5:\"count\";i:23;s:11:\"description\";s:0:\"\";s:4:\"slug\";s:12:\"weixin-robot\";s:9:\"thumbnail\";s:0:\"\";}}s:6:\"series\";a:0:{}s:14:\"comment_sticky\";b:1;s:10:\"reply_type\";s:3:\"all\";s:13:\"comment_count\";i:0;s:14:\"comment_status\";s:4:\"open\";s:16:\"meta_description\";s:0:\"\";s:13:\"meta_keywords\";s:0:\"\";}i:4;a:26:{s:2:\"id\";i:8803;s:9:\"post_type\";s:1:\"m\";s:4:\"type\";s:1:\"m\";s:6:\"status\";s:7:\"publish\";s:5:\"title\";s:60:\"推荐一款以照片为中心的 WordPress 主题：Arbutus\";s:7:\"excerpt\";s:288:\"Arbutus 是一个以照片为中心的 WordPress 主题，它布局简洁，去除其他干扰，最大化展示你喜欢的照片， 无论业余摄影师还是专业摄影师，Arbutus 都是用于展示作品的最佳选择。 下图是它首页的展示样子，除了图片和名 …\";s:9:\"timestamp\";i:1666018634;s:4:\"time\";s:7:\"1周前\";s:4:\"date\";s:10:\"2022-10-17\";s:13:\"modified_time\";s:7:\"1周前\";s:13:\"modified_date\";s:10:\"2022-10-17\";s:4:\"name\";s:23:\"arbutus-wordpress-theme\";s:8:\"post_url\";s:27:\"/m/arbutus-wordpress-theme/\";s:9:\"thumbnail\";s:173:\"https://cdn.97866.com/wp-content/uploads/sites/26/2022/10/1666018927-image.png?imageMogr2/auto-orient/thumbnail/!200x200r/gravity/Center/crop/200x200/quality/70/interlace/1#\";s:6:\"author\";a:5:{s:2:\"id\";i:28;s:8:\"nickname\";s:17:\"Denis | 邓鸿华\";s:12:\"display_name\";s:17:\"Denis | 邓鸿华\";s:4:\"name\";s:17:\"Denis | 邓鸿华\";s:6:\"avatar\";s:131:\"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er5Z4Hk40PsuLwzU0nicwSOaGjg3wUQtpopd3d3ia5C5TFOfKIicxaW9DSK4eRAgUqgNqWHY0nFtCzcw/132\";}s:7:\"user_id\";i:28;s:5:\"views\";i:451;s:8:\"category\";a:1:{i:0;a:8:{s:2:\"id\";i:18;s:8:\"taxonomy\";s:8:\"category\";s:4:\"name\";s:9:\"WordPress\";s:5:\"count\";i:1184;s:11:\"description\";s:37:\"WordPress 最佳开源博客平台111\";s:4:\"slug\";s:9:\"wordpress\";s:6:\"parent\";i:0;s:9:\"thumbnail\";s:0:\"\";}}s:8:\"post_tag\";a:1:{i:0;a:7:{s:2:\"id\";i:54;s:8:\"taxonomy\";s:8:\"post_tag\";s:4:\"name\";s:16:\"WordPress 主题\";s:5:\"count\";i:117;s:11:\"description\";s:1:\"\n\";s:4:\"slug\";s:15:\"wordpress-theme\";s:9:\"thumbnail\";s:0:\"\";}}s:6:\"series\";a:0:{}s:14:\"comment_sticky\";b:1;s:10:\"reply_type\";s:3:\"all\";s:13:\"comment_count\";i:0;s:14:\"comment_status\";s:4:\"open\";s:16:\"meta_description\";s:0:\"\";s:13:\"meta_keywords\";s:0:\"\";}i:5;a:25:{s:2:\"id\";i:8795;s:9:\"post_type\";s:4:\"post\";s:4:\"type\";s:4:\"post\";s:6:\"status\";s:7:\"publish\";s:5:\"title\";s:98:\"WPJAM「评论增强」插件增加「已读」功能，让你可以像朕已阅一样审阅评论\";s:7:\"excerpt\";s:297:\"WordPress 待审状态的评论，可以审核通过成为正常的评论，也可以判为垃圾留言或者直接删除，然后就没有其他操作了，这样就非常不方便。 因为有些用户的评论不想通过审核，可能没啥深度或者其他的原因，但也没有必要 …\";s:9:\"timestamp\";i:1665931375;s:4:\"time\";s:7:\"2周前\";s:4:\"date\";s:10:\"2022-10-16\";s:13:\"modified_time\";s:7:\"2周前\";s:13:\"modified_date\";s:10:\"2022-10-16\";s:4:\"name\";s:18:\"wpjam-comment-read\";s:8:\"post_url\";s:31:\"/2022/10/16/wpjam-comment-read/\";s:9:\"thumbnail\";s:173:\"https://cdn.97866.com/wp-content/uploads/sites/26/2022/10/1665929905-image.jpg?imageMogr2/auto-orient/thumbnail/!150x150r/gravity/Center/crop/150x150/quality/70/interlace/1#\";s:6:\"author\";a:5:{s:2:\"id\";i:28;s:8:\"nickname\";s:17:\"Denis | 邓鸿华\";s:12:\"display_name\";s:17:\"Denis | 邓鸿华\";s:4:\"name\";s:17:\"Denis | 邓鸿华\";s:6:\"avatar\";s:131:\"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er5Z4Hk40PsuLwzU0nicwSOaGjg3wUQtpopd3d3ia5C5TFOfKIicxaW9DSK4eRAgUqgNqWHY0nFtCzcw/132\";}s:7:\"user_id\";i:28;s:5:\"views\";i:739;s:8:\"category\";a:1:{i:0;a:8:{s:2:\"id\";i:18;s:8:\"taxonomy\";s:8:\"category\";s:4:\"name\";s:9:\"WordPress\";s:5:\"count\";i:1184;s:11:\"description\";s:37:\"WordPress 最佳开源博客平台111\";s:4:\"slug\";s:9:\"wordpress\";s:6:\"parent\";i:0;s:9:\"thumbnail\";s:0:\"\";}}s:8:\"post_tag\";a:2:{i:0;a:7:{s:2:\"id\";i:75;s:8:\"taxonomy\";s:8:\"post_tag\";s:4:\"name\";s:16:\"WordPress 插件\";s:5:\"count\";i:390;s:11:\"description\";s:1:\"\n\";s:4:\"slug\";s:16:\"wordpress-plugin\";s:9:\"thumbnail\";s:0:\"\";}i:1;a:7:{s:2:\"id\";i:1128;s:8:\"taxonomy\";s:8:\"post_tag\";s:4:\"name\";s:11:\"WPJAM Basic\";s:5:\"count\";i:186;s:11:\"description\";s:0:\"\";s:4:\"slug\";s:11:\"wpjam-basic\";s:9:\"thumbnail\";s:0:\"\";}}s:14:\"comment_sticky\";b:1;s:10:\"reply_type\";s:3:\"all\";s:13:\"comment_count\";i:0;s:14:\"comment_status\";s:4:\"open\";s:16:\"meta_description\";s:0:\"\";s:13:\"meta_keywords\";s:0:\"\";}i:6;a:25:{s:2:\"id\";i:8793;s:9:\"post_type\";s:4:\"post\";s:4:\"type\";s:4:\"post\";s:6:\"status\";s:7:\"publish\";s:5:\"title\";s:86:\"WordPress 6.1 的 wpdb::prepare 将转义表和字段名称，加强程序的安全性\";s:7:\"excerpt\";s:281:\"作为 WordPress 6.1 版本的一部分，wpdb::prepare() 也更新了，它可以使用 %i 占位符转义标识符（例如表和字段名称）。 这可以确保这些值被正确转义，然后不会导致 SQL 注入漏洞。举个例子： 虽然这可以保护免受 SQL …\";s:9:\"timestamp\";i:1665675924;s:4:\"time\";s:7:\"2周前\";s:4:\"date\";s:10:\"2022-10-13\";s:13:\"modified_time\";s:7:\"2周前\";s:13:\"modified_date\";s:10:\"2022-10-15\";s:4:\"name\";s:29:\"wpdb-prepare-table-name-field\";s:8:\"post_url\";s:42:\"/2022/10/13/wpdb-prepare-table-name-field/\";s:9:\"thumbnail\";s:175:\"https://cdn.97866.com/wp-content/uploads/sites/26/2022/02/1645061946-wp-blue.png?imageMogr2/auto-orient/thumbnail/!150x150r/gravity/Center/crop/150x150/quality/70/interlace/1#\";s:6:\"author\";a:5:{s:2:\"id\";i:28;s:8:\"nickname\";s:17:\"Denis | 邓鸿华\";s:12:\"display_name\";s:17:\"Denis | 邓鸿华\";s:4:\"name\";s:17:\"Denis | 邓鸿华\";s:6:\"avatar\";s:131:\"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er5Z4Hk40PsuLwzU0nicwSOaGjg3wUQtpopd3d3ia5C5TFOfKIicxaW9DSK4eRAgUqgNqWHY0nFtCzcw/132\";}s:7:\"user_id\";i:28;s:5:\"views\";i:746;s:8:\"category\";a:1:{i:0;a:8:{s:2:\"id\";i:18;s:8:\"taxonomy\";s:8:\"category\";s:4:\"name\";s:9:\"WordPress\";s:5:\"count\";i:1184;s:11:\"description\";s:37:\"WordPress 最佳开源博客平台111\";s:4:\"slug\";s:9:\"wordpress\";s:6:\"parent\";i:0;s:9:\"thumbnail\";s:0:\"\";}}s:8:\"post_tag\";a:1:{i:0;a:7:{s:2:\"id\";i:1022;s:8:\"taxonomy\";s:8:\"post_tag\";s:4:\"name\";s:16:\"WordPress 新闻\";s:5:\"count\";i:120;s:11:\"description\";s:0:\"\";s:4:\"slug\";s:14:\"wordpress-news\";s:9:\"thumbnail\";s:0:\"\";}}s:14:\"comment_sticky\";b:1;s:10:\"reply_type\";s:3:\"all\";s:13:\"comment_count\";i:0;s:14:\"comment_status\";s:4:\"open\";s:16:\"meta_description\";s:0:\"\";s:13:\"meta_keywords\";s:0:\"\";}i:7;a:25:{s:2:\"id\";i:8790;s:9:\"post_type\";s:4:\"post\";s:4:\"type\";s:4:\"post\";s:6:\"status\";s:7:\"publish\";s:5:\"title\";s:75:\"WordPress 6.1 将  send_headers Action 后移到准备加载文章的后面\";s:7:\"excerpt\";s:264:\"WordPress 6.1 将 send_headers Action 移到 WordPress 常规的例程的稍后的位置，之前在确定要发送哪些页面 headers 的时候，所有 is_ 的函数（比如is_singular）都不起作用，通过此项改动，将`send_headers` 移到 W …\";s:9:\"timestamp\";i:1665585771;s:4:\"time\";s:7:\"2周前\";s:4:\"date\";s:10:\"2022-10-12\";s:13:\"modified_time\";s:7:\"2周前\";s:13:\"modified_date\";s:10:\"2022-10-12\";s:4:\"name\";s:51:\"moving-the-send_headers-action-to-later-in-the-load\";s:8:\"post_url\";s:64:\"/2022/10/12/moving-the-send_headers-action-to-later-in-the-load/\";s:9:\"thumbnail\";s:177:\"https://cdn.97866.com/wp-content/uploads/sites/26/2022/02/1645061946-wp-orange.png?imageMogr2/auto-orient/thumbnail/!150x150r/gravity/Center/crop/150x150/quality/70/interlace/1#\";s:6:\"author\";a:5:{s:2:\"id\";i:28;s:8:\"nickname\";s:17:\"Denis | 邓鸿华\";s:12:\"display_name\";s:17:\"Denis | 邓鸿华\";s:4:\"name\";s:17:\"Denis | 邓鸿华\";s:6:\"avatar\";s:131:\"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er5Z4Hk40PsuLwzU0nicwSOaGjg3wUQtpopd3d3ia5C5TFOfKIicxaW9DSK4eRAgUqgNqWHY0nFtCzcw/132\";}s:7:\"user_id\";i:28;s:5:\"views\";i:932;s:8:\"category\";a:1:{i:0;a:8:{s:2:\"id\";i:18;s:8:\"taxonomy\";s:8:\"category\";s:4:\"name\";s:9:\"WordPress\";s:5:\"count\";i:1184;s:11:\"description\";s:37:\"WordPress 最佳开源博客平台111\";s:4:\"slug\";s:9:\"wordpress\";s:6:\"parent\";i:0;s:9:\"thumbnail\";s:0:\"\";}}s:8:\"post_tag\";a:1:{i:0;a:7:{s:2:\"id\";i:1022;s:8:\"taxonomy\";s:8:\"post_tag\";s:4:\"name\";s:16:\"WordPress 新闻\";s:5:\"count\";i:120;s:11:\"description\";s:0:\"\";s:4:\"slug\";s:14:\"wordpress-news\";s:9:\"thumbnail\";s:0:\"\";}}s:14:\"comment_sticky\";b:1;s:10:\"reply_type\";s:3:\"all\";s:13:\"comment_count\";i:0;s:14:\"comment_status\";s:4:\"open\";s:16:\"meta_description\";s:0:\"\";s:13:\"meta_keywords\";s:0:\"\";}i:8;a:25:{s:2:\"id\";i:8789;s:9:\"post_type\";s:4:\"post\";s:4:\"type\";s:4:\"post\";s:6:\"status\";s:7:\"publish\";s:5:\"title\";s:88:\"WordPress 6.1 新增 \"Update URI\" 主题标头，第三方主题可以自建更新系统\";s:7:\"excerpt\";s:272:\"我以前介绍过WordPress 5.8 新增 \"Update URI\" 插件头，第三方插件可以自建更新系统，现在 WordPress 将该功能扩展到了 6.1，主题也支持该了，这样第三方主题也可以自建更新系统。 新的主题头：\"Update URI\" WordPre …\";s:9:\"timestamp\";i:1665502067;s:4:\"time\";s:7:\"2周前\";s:4:\"date\";s:10:\"2022-10-11\";s:13:\"modified_time\";s:7:\"2周前\";s:13:\"modified_date\";s:10:\"2022-10-11\";s:4:\"name\";s:52:\"introducing-update-uri-theme-header-in-wordpress-6-1\";s:8:\"post_url\";s:65:\"/2022/10/11/introducing-update-uri-theme-header-in-wordpress-6-1/\";s:9:\"thumbnail\";s:177:\"https://cdn.97866.com/wp-content/uploads/sites/26/2022/02/1645061946-wp-orange.png?imageMogr2/auto-orient/thumbnail/!150x150r/gravity/Center/crop/150x150/quality/70/interlace/1#\";s:6:\"author\";a:5:{s:2:\"id\";i:28;s:8:\"nickname\";s:17:\"Denis | 邓鸿华\";s:12:\"display_name\";s:17:\"Denis | 邓鸿华\";s:4:\"name\";s:17:\"Denis | 邓鸿华\";s:6:\"avatar\";s:131:\"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er5Z4Hk40PsuLwzU0nicwSOaGjg3wUQtpopd3d3ia5C5TFOfKIicxaW9DSK4eRAgUqgNqWHY0nFtCzcw/132\";}s:7:\"user_id\";i:28;s:5:\"views\";i:236;s:8:\"category\";a:1:{i:0;a:8:{s:2:\"id\";i:18;s:8:\"taxonomy\";s:8:\"category\";s:4:\"name\";s:9:\"WordPress\";s:5:\"count\";i:1184;s:11:\"description\";s:37:\"WordPress 最佳开源博客平台111\";s:4:\"slug\";s:9:\"wordpress\";s:6:\"parent\";i:0;s:9:\"thumbnail\";s:0:\"\";}}s:8:\"post_tag\";a:2:{i:0;a:7:{s:2:\"id\";i:54;s:8:\"taxonomy\";s:8:\"post_tag\";s:4:\"name\";s:16:\"WordPress 主题\";s:5:\"count\";i:117;s:11:\"description\";s:1:\"\n\";s:4:\"slug\";s:15:\"wordpress-theme\";s:9:\"thumbnail\";s:0:\"\";}i:1;a:7:{s:2:\"id\";i:1022;s:8:\"taxonomy\";s:8:\"post_tag\";s:4:\"name\";s:16:\"WordPress 新闻\";s:5:\"count\";i:120;s:11:\"description\";s:0:\"\";s:4:\"slug\";s:14:\"wordpress-news\";s:9:\"thumbnail\";s:0:\"\";}}s:14:\"comment_sticky\";b:1;s:10:\"reply_type\";s:3:\"all\";s:13:\"comment_count\";i:0;s:14:\"comment_status\";s:4:\"open\";s:16:\"meta_description\";s:0:\"\";s:13:\"meta_keywords\";s:0:\"\";}i:9;a:25:{s:2:\"id\";i:8784;s:9:\"post_type\";s:4:\"post\";s:4:\"type\";s:4:\"post\";s:6:\"status\";s:7:\"publish\";s:5:\"title\";s:72:\"WordPress 6.1 将提高 WP_Query 查询性能，真正实现站点 0 SQL\";s:7:\"excerpt\";s:286:\"WP_Query 是 WordPress 中最重要的 class，几乎每个页面都是用它来获取文章，但是它最大的问题是，对文章进行查询的时候是直接到数据库查询的，结果没有被缓存起来，所以真正实现站点的 0SQL 就是这里。 我之前也通 …\";s:9:\"timestamp\";i:1665244270;s:4:\"time\";s:7:\"3周前\";s:4:\"date\";s:10:\"2022-10-08\";s:13:\"modified_time\";s:7:\"3周前\";s:13:\"modified_date\";s:10:\"2022-10-09\";s:4:\"name\";s:43:\"improvements-to-wp_query-performance-in-6-1\";s:8:\"post_url\";s:56:\"/2022/10/08/improvements-to-wp_query-performance-in-6-1/\";s:9:\"thumbnail\";s:175:\"https://cdn.97866.com/wp-content/uploads/sites/26/2022/02/1645061946-wp-blue.png?imageMogr2/auto-orient/thumbnail/!150x150r/gravity/Center/crop/150x150/quality/70/interlace/1#\";s:6:\"author\";a:5:{s:2:\"id\";i:28;s:8:\"nickname\";s:17:\"Denis | 邓鸿华\";s:12:\"display_name\";s:17:\"Denis | 邓鸿华\";s:4:\"name\";s:17:\"Denis | 邓鸿华\";s:6:\"avatar\";s:131:\"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er5Z4Hk40PsuLwzU0nicwSOaGjg3wUQtpopd3d3ia5C5TFOfKIicxaW9DSK4eRAgUqgNqWHY0nFtCzcw/132\";}s:7:\"user_id\";i:28;s:5:\"views\";i:1204;s:8:\"category\";a:1:{i:0;a:8:{s:2:\"id\";i:18;s:8:\"taxonomy\";s:8:\"category\";s:4:\"name\";s:9:\"WordPress\";s:5:\"count\";i:1184;s:11:\"description\";s:37:\"WordPress 最佳开源博客平台111\";s:4:\"slug\";s:9:\"wordpress\";s:6:\"parent\";i:0;s:9:\"thumbnail\";s:0:\"\";}}s:8:\"post_tag\";a:1:{i:0;a:7:{s:2:\"id\";i:1022;s:8:\"taxonomy\";s:8:\"post_tag\";s:4:\"name\";s:16:\"WordPress 新闻\";s:5:\"count\";i:120;s:11:\"description\";s:0:\"\";s:4:\"slug\";s:14:\"wordpress-news\";s:9:\"thumbnail\";s:0:\"\";}}s:14:\"comment_sticky\";b:1;s:10:\"reply_type\";s:3:\"all\";s:13:\"comment_count\";i:0;s:14:\"comment_status\";s:4:\"open\";s:16:\"meta_description\";s:0:\"\";s:13:\"meta_keywords\";s:0:\"\";}}', 'no');

-- --------------------------------------------------------

--
-- 表的结构 `wp_pmr_status`
--

CREATE TABLE `wp_pmr_status` (
  `id` int(11) NOT NULL,
  `bulk_filename_header` varchar(250) DEFAULT NULL,
  `bulk_rename_in_progress` int(11) DEFAULT NULL,
  `bulk_rename_from_post_in_progress` int(11) DEFAULT NULL,
  `current_image_index` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 表的结构 `wp_postmeta`
--

CREATE TABLE `wp_postmeta` (
  `meta_id` bigint(20) UNSIGNED NOT NULL,
  `post_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_520_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- 转存表中的数据 `wp_postmeta`
--

INSERT INTO `wp_postmeta` (`meta_id`, `post_id`, `meta_key`, `meta_value`) VALUES
(1, 2, '_wp_page_template', 'default'),
(2, 3, '_wp_page_template', 'default'),
(3, 11, 'inline_featured_image', '0'),
(6, 13, 'inline_featured_image', '0'),
(7, 13, '_wpcom_is_markdown', '1'),
(8, 13, '_wp_page_template', 'pages/page-modular.php'),
(9, 14, 'inline_featured_image', '0'),
(10, 14, '_wpcom_is_markdown', '1'),
(11, 14, '_wp_page_template', 'pages/page-user.php'),
(12, 15, 'inline_featured_image', '0'),
(13, 15, '_wpcom_is_markdown', '1'),
(14, 15, '_wp_page_template', 'pages/page-login.php'),
(15, 16, 'inline_featured_image', '0'),
(16, 16, '_wpcom_is_markdown', '1'),
(17, 16, '_wp_page_template', 'pages/page-series.php'),
(18, 17, 'inline_featured_image', '0'),
(19, 17, '_wpcom_is_markdown', '1'),
(20, 17, '_wp_page_template', 'pages/page-tags.php'),
(21, 18, 'inline_featured_image', '0'),
(22, 18, '_wpcom_is_markdown', '1'),
(23, 18, '_wp_page_template', 'pages/page-container.php'),
(24, 19, 'inline_featured_image', '0'),
(25, 19, '_wpcom_is_markdown', '1'),
(26, 19, '_wp_page_template', 'pages/page-link.php'),
(28, 20, '_wp_page_template', 'pages/courses.php'),
(29, 20, 'course_top_image_enabled', '1'),
(30, 17, '_views', '3'),
(31, 13, '_views', '2276'),
(32, 11, '_views', '2'),
(33, 2, '_views', '6'),
(34, 7, '_views', '1'),
(179, 14, '_views', '635'),
(180, 10, '_views', '13'),
(181, 15, '_views', '3843'),
(182, 5, '_views', '282'),
(183, 6, '_views', '78'),
(198, 39, 'inline_featured_image', '0'),
(199, 39, '_wpcom_is_markdown', '1'),
(200, 39, '_edit_lock', '1637621433:1'),
(201, 39, '_edit_last', '1'),
(202, 39, 'positive', ''),
(203, 39, 'negative', ''),
(204, 39, 'is_course_docs', ''),
(205, 40, 'inline_featured_image', '0'),
(206, 40, '_wpcom_is_markdown', '1'),
(207, 40, '_edit_lock', '1637615974:1'),
(208, 40, '_edit_last', '1'),
(209, 40, 'positive', ''),
(210, 40, 'negative', ''),
(211, 40, 'is_course_docs', ''),
(254, 47, 'inline_featured_image', '0'),
(255, 47, '_wpcom_is_markdown', '1'),
(256, 47, '_edit_lock', '1638482169:1'),
(257, 47, '_edit_last', '1'),
(258, 47, 'positive', ''),
(259, 47, 'negative', ''),
(260, 47, 'is_course_docs', '1'),
(261, 48, 'inline_featured_image', '0'),
(262, 48, '_wpcom_is_markdown', '1'),
(263, 48, '_edit_lock', '1637617014:1'),
(264, 48, '_edit_last', '1'),
(265, 48, 'positive', ''),
(266, 48, 'negative', ''),
(267, 48, 'is_course_docs', '1'),
(268, 49, 'inline_featured_image', '0'),
(269, 49, '_wpcom_is_markdown', '1'),
(270, 50, 'inline_featured_image', '0'),
(271, 50, '_wpcom_is_markdown', '1'),
(272, 51, 'inline_featured_image', '0'),
(273, 51, '_wpcom_is_markdown', '1'),
(274, 52, 'inline_featured_image', '0'),
(275, 52, '_wpcom_is_markdown', '1'),
(276, 53, 'inline_featured_image', '0'),
(277, 53, '_wpcom_is_markdown', '1'),
(278, 54, 'inline_featured_image', '0'),
(279, 54, '_wpcom_is_markdown', '1'),
(280, 55, 'inline_featured_image', '0'),
(281, 55, '_wpcom_is_markdown', '1'),
(282, 56, 'inline_featured_image', '0'),
(283, 56, '_wpcom_is_markdown', '1'),
(284, 57, 'inline_featured_image', '0'),
(285, 57, '_wpcom_is_markdown', '1'),
(286, 58, 'inline_featured_image', '0'),
(287, 58, '_wpcom_is_markdown', '1'),
(288, 59, 'inline_featured_image', '0'),
(289, 59, '_wpcom_is_markdown', '1'),
(290, 60, 'inline_featured_image', '0'),
(291, 60, '_wpcom_is_markdown', '1'),
(292, 59, '_edit_lock', '1642906945:1'),
(293, 59, '_edit_last', '1'),
(294, 59, 'positive', ''),
(295, 59, 'negative', ''),
(296, 59, 'is_course_docs', ''),
(297, 60, '_edit_lock', '1642906980:1'),
(298, 60, '_edit_last', '1'),
(299, 60, 'positive', ''),
(300, 60, 'negative', ''),
(301, 60, 'is_course_docs', ''),
(302, 61, 'inline_featured_image', '0'),
(303, 61, '_wpcom_is_markdown', '1'),
(304, 61, '_edit_lock', '1642906998:1'),
(305, 61, '_edit_last', '1'),
(306, 61, 'positive', ''),
(307, 61, 'negative', ''),
(308, 61, 'is_course_docs', ''),
(309, 62, 'inline_featured_image', '0'),
(310, 62, '_wpcom_is_markdown', '1'),
(311, 62, '_edit_lock', '1636492887:1'),
(312, 62, '_edit_last', '1'),
(313, 62, 'positive', ''),
(314, 62, 'negative', ''),
(315, 62, 'is_course_docs', ''),
(316, 63, 'inline_featured_image', '0'),
(317, 63, '_wpcom_is_markdown', '1'),
(318, 63, '_edit_lock', '1636492909:1'),
(319, 63, '_edit_last', '1'),
(320, 63, 'positive', ''),
(321, 63, 'negative', ''),
(322, 63, 'is_course_docs', ''),
(323, 64, 'inline_featured_image', '0'),
(324, 64, '_wpcom_is_markdown', '1'),
(325, 64, '_edit_last', '1'),
(326, 64, '_edit_lock', '1660749173:1'),
(329, 64, 'shop_enabled', '0'),
(330, 64, 'wppay_price', '899'),
(331, 64, 'wppay_vip_auth', '2'),
(332, 64, '_paynum', '382'),
(333, 64, 'content_summary', '作为实战系列的开篇,通过一个CRUD程序的实现初步的掌握Nestjs应用开发'),
(334, 64, 'hero_image', ''),
(335, 64, 'course_status', 'updating'),
(336, 64, 'course_level', 'advanced'),
(337, 64, 'course_intro', '1'),
(338, 64, 'course_intro_title', ''),
(339, 64, 'course_intro_video', 'https://api.dogecloud.com/player/get.m3u8?vcode=bdd57244c402a934&amp;userId=2426&amp;flsign=1d81a93059e8191118011f37ac03a55f&amp;ext=.m3u8'),
(340, 64, 'course_wppay_down', ''),
(341, 64, 'course_chapter_info', 'a:47:{i:0;a:7:{s:5:\"title\";s:18:\"编码环境搭建\";s:5:\"video\";s:138:\"https://api.dogecloud.com/player/get.m3u8?vcode=bdd57244c402a934&amp;userId=2426&amp;flsign=1d81a93059e8191118011f37ac03a55f&amp;ext=.m3u8\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:1:\"1\";s:11:\"enabled_doc\";s:1:\"1\";s:4:\"free\";s:1:\"1\";s:3:\"doc\";s:2:\"49\";}i:1;a:7:{s:5:\"title\";s:18:\"基本数据操作\";s:5:\"video\";s:138:\"https://api.dogecloud.com/player/get.m3u8?vcode=bdd57244c402a934&amp;userId=2426&amp;flsign=1d81a93059e8191118011f37ac03a55f&amp;ext=.m3u8\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:1:\"1\";s:11:\"enabled_doc\";s:1:\"1\";s:4:\"free\";s:1:\"1\";s:3:\"doc\";s:2:\"50\";}i:2;a:7:{s:5:\"title\";s:27:\"模型关联与嵌套结构\";s:5:\"video\";s:138:\"https://api.dogecloud.com/player/get.m3u8?vcode=bdd57244c402a934&amp;userId=2426&amp;flsign=1d81a93059e8191118011f37ac03a55f&amp;ext=.m3u8\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:1:\"1\";s:11:\"enabled_doc\";s:1:\"1\";s:4:\"free\";s:1:\"1\";s:3:\"doc\";s:2:\"51\";}i:3;a:7:{s:5:\"title\";s:22:\"排序,分页与过滤\";s:5:\"video\";s:138:\"https://api.dogecloud.com/player/get.m3u8?vcode=bdd57244c402a934&amp;userId=2426&amp;flsign=1d81a93059e8191118011f37ac03a55f&amp;ext=.m3u8\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:1:\"1\";s:11:\"enabled_doc\";s:1:\"1\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:2:\"52\";}i:4;a:7:{s:5:\"title\";s:37:\"自动验证,序列化与异常处理\";s:5:\"video\";s:138:\"https://api.dogecloud.com/player/get.m3u8?vcode=bdd57244c402a934&amp;userId=2426&amp;flsign=1d81a93059e8191118011f37ac03a55f&amp;ext=.m3u8\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:1:\"1\";s:11:\"enabled_doc\";s:1:\"1\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:2:\"54\";}i:5;a:7:{s:5:\"title\";s:24:\"简化数据操作代码\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:1:\"0\";s:11:\"enabled_doc\";s:1:\"1\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:2:\"54\";}i:6;a:7:{s:5:\"title\";s:31:\"批量删除,软删除与恢复\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:1:\"1\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:2:\"55\";}i:7;a:7:{s:5:\"title\";s:36:\"自定义验证规则与验证转义\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:1:\"1\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:2:\"56\";}i:8;a:7:{s:5:\"title\";s:21:\"定制化配置系统\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:1:\"1\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:2:\"57\";}i:9;a:7:{s:5:\"title\";s:29:\"使用esbuild/swc快速启动\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:1:\"1\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:2:\"58\";}i:10;a:7:{s:5:\"title\";s:16:\"Jest测试编写\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:11;a:7:{s:5:\"title\";s:21:\"配置式路由实现\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:12;a:7:{s:5:\"title\";s:32:\"约定式Open API(swagger)实现\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:13;a:7:{s:5:\"title\";s:33:\"自定义CLI命令行工具实现\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:14;a:7:{s:5:\"title\";s:33:\"完善配置系统与配置验证\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:15;a:7:{s:5:\"title\";s:39:\"动态模块创建与插件架构实现\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:16;a:7:{s:5:\"title\";s:24:\"数据库功能包开发\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:17;a:7:{s:5:\"title\";s:24:\"实现数据迁移命令\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:18;a:7:{s:5:\"title\";s:24:\"实现数据填充命令\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:19;a:7:{s:5:\"title\";s:39:\"用户模块数据结构与动态关联\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:20;a:7:{s:5:\"title\";s:21:\"邮件推送包开发\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:21;a:7:{s:5:\"title\";s:21:\"短信推送包发送\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:22;a:7:{s:5:\"title\";s:24:\"异步消息列队实现\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:23;a:7:{s:5:\"title\";s:27:\"用户认证策略与服务\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:24;a:7:{s:5:\"title\";s:24:\"认证守卫与装饰器\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:25;a:7:{s:5:\"title\";s:21:\"资源拥有者凭证\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:26;a:7:{s:5:\"title\";s:21:\"验证码发送服务\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:27;a:7:{s:5:\"title\";s:16:\"Auth操作功能\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:28;a:7:{s:5:\"title\";s:18:\"用户管理功能\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:29;a:7:{s:5:\"title\";s:18:\"账户中心功能\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:30;a:7:{s:5:\"title\";s:24:\"文件系统与云存储\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:31;a:7:{s:5:\"title\";s:37:\"websockets实现上线与消息广播\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:32;a:7:{s:5:\"title\";s:16:\"RBAC权限系统\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:33;a:7:{s:5:\"title\";s:27:\"角色与权限的初始化\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:34;a:7:{s:5:\"title\";s:36:\"标签功能与多态多对多实现\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:35;a:7:{s:5:\"title\";s:21:\"验证码功能实现\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:36;a:7:{s:5:\"title\";s:27:\"社会化账户登录实现\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:37;a:7:{s:5:\"title\";s:24:\"统一支付接口开发\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:38;a:7:{s:5:\"title\";s:21:\"VIP会员插件实现\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:39;a:7:{s:5:\"title\";s:24:\"系统设置插件实现\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:40;a:7:{s:5:\"title\";s:24:\"扩展包开发与发布\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:41;a:7:{s:5:\"title\";s:23:\"与前端构建Monreopo\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:42;a:7:{s:5:\"title\";s:33:\"单文件输出与二进制编译\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:43;a:7:{s:5:\"title\";s:29:\"Nginx反向代理与PM2部署\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:44;a:7:{s:5:\"title\";s:24:\"使用Docker进行部署\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:45;a:7:{s:5:\"title\";s:26:\"Gitea+Drone自动化部署\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}i:46;a:7:{s:5:\"title\";s:33:\"生命周期与请求范围详解\";s:5:\"video\";s:0:\"\";s:3:\"pic\";s:0:\"\";s:6:\"online\";s:0:\"\";s:11:\"enabled_doc\";s:0:\"\";s:4:\"free\";s:0:\"\";s:3:\"doc\";s:0:\"\";}}'),
(342, 64, 'course_document', '47'),
(507, 20, '_edit_lock', '1637619979:1'),
(508, 5, '_edit_lock', '1660806163:1'),
(509, 5, '_edit_last', '1'),
(510, 5, '_wp_page_template', 'default'),
(511, 5, 'inline_featured_image', '0'),
(512, 5, 'hero_single_style', 'none'),
(513, 5, 'sidebar_single_style', 'none'),
(514, 5, 'custom_title', ''),
(515, 5, 'keywords', ''),
(516, 5, 'description', ''),
(517, 5, 'course_page_close_filter', ''),
(518, 5, 'course_top_image_enabled', '1'),
(519, 5, 'course_top_image_description', ''),
(520, 5, 'course_single_top_image_enabled', ''),
(521, 5, 'course_single_top_image', ''),
(522, 5, '_wpcom_is_markdown', '1'),
(667, 13, '_edit_lock', '1635494640:1'),
(668, 13, '_edit_last', '1'),
(669, 13, 'hero_single_style', 'none'),
(670, 13, 'sidebar_single_style', 'right'),
(671, 13, 'custom_title', ''),
(672, 13, 'keywords', ''),
(673, 13, 'description', ''),
(674, 13, 'course_page_close_filter', ''),
(675, 13, 'course_top_image_enabled', '1'),
(676, 13, 'course_top_image_description', ''),
(677, 13, 'course_single_top_image_enabled', ''),
(678, 13, 'course_single_top_image', ''),
(679, 91, 'inline_featured_image', '0'),
(680, 91, '_wpcom_is_markdown', '1'),
(681, 91, '_wp_page_template', 'pages/page-modular.php'),
(682, 91, '_edit_lock', '1635494648:1'),
(683, 11, '_edit_lock', '1660807931:1'),
(684, 11, '_edit_last', '1'),
(685, 11, '_wp_page_template', 'default'),
(686, 11, 'hero_single_style', 'none'),
(687, 11, 'sidebar_single_style', 'right'),
(688, 11, 'custom_title', ''),
(689, 11, 'keywords', ''),
(690, 11, 'description', ''),
(691, 11, 'course_page_close_filter', ''),
(692, 11, 'course_top_image_enabled', '1'),
(693, 11, 'course_top_image_description', ''),
(694, 11, 'course_single_top_image_enabled', ''),
(695, 11, 'course_single_top_image', ''),
(696, 11, '_wpcom_is_markdown', '1'),
(697, 92, '_menu_item_type', 'post_type'),
(698, 92, '_menu_item_menu_item_parent', '0'),
(699, 92, '_menu_item_object_id', '20'),
(700, 92, '_menu_item_object', 'page'),
(701, 92, '_menu_item_target', ''),
(702, 92, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(703, 92, '_menu_item_xfn', ''),
(704, 92, '_menu_item_url', ''),
(706, 93, '_menu_item_type', 'post_type'),
(707, 93, '_menu_item_menu_item_parent', '0'),
(708, 93, '_menu_item_object_id', '11'),
(709, 93, '_menu_item_object', 'page'),
(710, 93, '_menu_item_target', ''),
(711, 93, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(712, 93, '_menu_item_xfn', ''),
(713, 93, '_menu_item_url', ''),
(724, 95, '_menu_item_type', 'post_type'),
(725, 95, '_menu_item_menu_item_parent', '0'),
(726, 95, '_menu_item_object_id', '13'),
(727, 95, '_menu_item_object', 'page'),
(728, 95, '_menu_item_target', ''),
(729, 95, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(730, 95, '_menu_item_xfn', ''),
(731, 95, '_menu_item_url', ''),
(733, 95, 'nav_icon', 'fas fa-home'),
(734, 95, 'is_mega_nav', ''),
(735, 92, 'nav_icon', 'fas fa-video'),
(736, 92, 'is_mega_nav', ''),
(737, 93, 'nav_icon', 'fab fa-dochub'),
(738, 93, 'is_mega_nav', ''),
(741, 96, '_menu_item_type', 'taxonomy'),
(742, 96, '_menu_item_menu_item_parent', '0'),
(743, 96, '_menu_item_object_id', '13'),
(744, 96, '_menu_item_object', 'category'),
(745, 96, '_menu_item_target', ''),
(746, 96, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(747, 96, '_menu_item_xfn', ''),
(748, 96, '_menu_item_url', ''),
(750, 96, 'nav_icon', 'fab fa-digital-ocean'),
(751, 96, 'is_mega_nav', ''),
(752, 97, '_menu_item_type', 'custom'),
(753, 97, '_menu_item_menu_item_parent', '0'),
(754, 97, '_menu_item_object_id', '97'),
(755, 97, '_menu_item_object', 'custom'),
(756, 97, '_menu_item_target', ''),
(757, 97, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(758, 97, '_menu_item_xfn', ''),
(759, 97, '_menu_item_url', 'https://git.pincman.com'),
(761, 97, 'nav_icon', 'fab fa-gitter'),
(762, 97, 'is_mega_nav', ''),
(764, 20, '_views', '6433'),
(765, 39, '_views', '34'),
(768, 40, '_views', '59'),
(778, 64, '_views', '1707'),
(782, 19, '_edit_last', '1'),
(783, 19, '_edit_lock', '1654460570:1'),
(787, 99, '_menu_item_type', 'post_type'),
(788, 99, '_menu_item_menu_item_parent', '0'),
(789, 99, '_menu_item_object_id', '19'),
(790, 99, '_menu_item_object', 'page'),
(791, 99, '_menu_item_target', ''),
(792, 99, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(793, 99, '_menu_item_xfn', ''),
(794, 99, '_menu_item_url', ''),
(796, 95, '_wp_old_date', '2021-10-29'),
(797, 92, '_wp_old_date', '2021-10-29'),
(798, 96, '_wp_old_date', '2021-10-29'),
(799, 93, '_wp_old_date', '2021-10-29'),
(800, 99, 'nav_icon', 'fab fa-staylinked'),
(801, 99, 'is_mega_nav', ''),
(802, 97, '_wp_old_date', '2021-10-29'),
(804, 19, '_views', '357'),
(813, 19, 'hero_single_style', 'none'),
(814, 19, 'sidebar_single_style', 'right'),
(815, 19, 'custom_title', ''),
(816, 19, 'keywords', ''),
(817, 19, 'description', ''),
(818, 19, 'course_page_close_filter', ''),
(819, 19, 'course_top_image_enabled', '1'),
(820, 19, 'course_top_image_description', ''),
(821, 19, 'course_single_top_image_enabled', ''),
(822, 19, 'course_single_top_image', ''),
(823, 100, 'inline_featured_image', '0'),
(824, 100, '_wpcom_is_markdown', '1'),
(825, 100, '_edit_last', '1'),
(826, 100, '_edit_lock', '1641749159:1'),
(827, 100, 'hero_single_style', 'none'),
(828, 100, 'sidebar_single_style', 'right'),
(829, 100, 'is_recommand', '1'),
(830, 100, 'disable_top_thumbnail', ''),
(831, 100, 'archive_block_style', '1'),
(832, 100, 'is_merge_thumbnail', ''),
(833, 100, 'wppay_type', '1'),
(834, 100, 'wppay_price', '0.1'),
(835, 100, 'wppay_vip_auth', '0'),
(836, 100, 'wppay_down', ''),
(837, 100, 'wppay_demourl', ''),
(838, 100, 'wppay_info', ''),
(839, 100, 'hero_video_data', ''),
(840, 100, 'hero_gallery_data', ''),
(841, 100, 'hero_gallery_data_free_num', '0'),
(842, 100, 'custom_title', ''),
(843, 100, 'keywords', ''),
(844, 100, 'description', ''),
(845, 101, 'inline_featured_image', '0'),
(846, 101, '_wpcom_is_markdown', '1'),
(847, 101, '_edit_last', '1'),
(848, 101, '_edit_lock', '1635580046:1'),
(849, 101, 'hero_single_style', 'none'),
(850, 101, 'sidebar_single_style', 'right'),
(851, 101, 'is_recommand', ''),
(852, 101, 'disable_top_thumbnail', ''),
(853, 101, 'archive_block_style', '1'),
(854, 101, 'is_merge_thumbnail', ''),
(855, 101, 'wppay_type', '0'),
(856, 101, 'wppay_price', '0.1'),
(857, 101, 'wppay_vip_auth', '0'),
(858, 101, 'wppay_down', ''),
(859, 101, 'wppay_demourl', ''),
(860, 101, 'wppay_info', ''),
(861, 101, 'hero_video_data', ''),
(862, 101, 'hero_gallery_data', ''),
(863, 101, 'hero_gallery_data_free_num', '0'),
(864, 101, 'custom_title', ''),
(865, 101, 'keywords', ''),
(866, 101, 'description', ''),
(867, 102, 'inline_featured_image', '0'),
(868, 102, '_wpcom_is_markdown', '1'),
(869, 102, '_edit_last', '1'),
(870, 102, '_edit_lock', '1635580068:1'),
(871, 102, 'hero_single_style', 'none'),
(872, 102, 'sidebar_single_style', 'right'),
(873, 102, 'is_recommand', ''),
(874, 102, 'disable_top_thumbnail', ''),
(875, 102, 'archive_block_style', '1'),
(876, 102, 'is_merge_thumbnail', ''),
(877, 102, 'wppay_type', '0'),
(878, 102, 'wppay_price', '0.1'),
(879, 102, 'wppay_vip_auth', '0'),
(880, 102, 'wppay_down', ''),
(881, 102, 'wppay_demourl', ''),
(882, 102, 'wppay_info', ''),
(883, 102, 'hero_video_data', ''),
(884, 102, 'hero_gallery_data', ''),
(885, 102, 'hero_gallery_data_free_num', '0'),
(886, 102, 'custom_title', ''),
(887, 102, 'keywords', ''),
(888, 102, 'description', ''),
(889, 103, 'inline_featured_image', '0'),
(890, 103, '_wpcom_is_markdown', '1'),
(891, 103, '_edit_last', '1'),
(892, 103, '_edit_lock', '1636754164:1'),
(893, 103, 'hero_single_style', 'none'),
(894, 103, 'sidebar_single_style', 'right'),
(895, 103, 'is_recommand', ''),
(896, 103, 'disable_top_thumbnail', ''),
(897, 103, 'archive_block_style', '1'),
(898, 103, 'is_merge_thumbnail', ''),
(899, 103, 'wppay_type', '0'),
(900, 103, 'wppay_price', '0.1'),
(901, 103, 'wppay_vip_auth', '0'),
(902, 103, 'wppay_down', ''),
(903, 103, 'wppay_demourl', ''),
(904, 103, 'wppay_info', ''),
(905, 103, 'hero_video_data', ''),
(906, 103, 'hero_gallery_data', ''),
(907, 103, 'hero_gallery_data_free_num', '0'),
(908, 103, 'custom_title', ''),
(909, 103, 'keywords', ''),
(910, 103, 'description', ''),
(911, 104, 'inline_featured_image', '0'),
(912, 104, '_wpcom_is_markdown', '1'),
(913, 104, '_edit_last', '1'),
(914, 104, '_edit_lock', '1636754152:1'),
(915, 104, 'hero_single_style', 'none'),
(916, 104, 'sidebar_single_style', 'right'),
(917, 104, 'is_recommand', ''),
(918, 104, 'disable_top_thumbnail', ''),
(919, 104, 'archive_block_style', '1'),
(920, 104, 'is_merge_thumbnail', ''),
(921, 104, 'wppay_type', '0'),
(922, 104, 'wppay_price', '0.1'),
(923, 104, 'wppay_vip_auth', '0'),
(924, 104, 'wppay_down', ''),
(925, 104, 'wppay_demourl', ''),
(926, 104, 'wppay_info', ''),
(927, 104, 'hero_video_data', ''),
(928, 104, 'hero_gallery_data', ''),
(929, 104, 'hero_gallery_data_free_num', '0'),
(930, 104, 'custom_title', ''),
(931, 104, 'keywords', ''),
(932, 104, 'description', ''),
(933, 105, 'inline_featured_image', '0'),
(934, 105, '_wpcom_is_markdown', '1'),
(935, 105, '_edit_last', '1'),
(936, 105, '_edit_lock', '1637086223:1'),
(937, 105, 'hero_single_style', 'none'),
(938, 105, 'sidebar_single_style', 'right'),
(939, 105, 'is_recommand', ''),
(940, 105, 'disable_top_thumbnail', ''),
(941, 105, 'archive_block_style', '1'),
(942, 105, 'is_merge_thumbnail', ''),
(943, 105, 'wppay_type', '0'),
(944, 105, 'wppay_price', '0'),
(945, 105, 'wppay_vip_auth', '0'),
(946, 105, 'wppay_down', 'a:1:{i:0;a:3:{s:4:\"name\";s:12:\"资源名称\";s:3:\"url\";s:1:\"#\";s:3:\"pwd\";s:3:\"888\";}}'),
(947, 105, 'wppay_demourl', ''),
(948, 105, 'wppay_info', ''),
(949, 105, 'hero_video_data', ''),
(950, 105, 'hero_gallery_data', ''),
(951, 105, 'hero_gallery_data_free_num', '0'),
(952, 105, 'custom_title', ''),
(953, 105, 'keywords', ''),
(954, 105, 'description', ''),
(955, 106, 'inline_featured_image', '0'),
(956, 106, '_wpcom_is_markdown', '1'),
(957, 106, '_edit_last', '1'),
(958, 106, '_edit_lock', '1636841570:1'),
(959, 106, 'hero_single_style', 'none'),
(960, 106, 'sidebar_single_style', 'right'),
(961, 106, 'is_recommand', ''),
(962, 106, 'disable_top_thumbnail', ''),
(963, 106, 'archive_block_style', '1'),
(964, 106, 'is_merge_thumbnail', ''),
(965, 106, 'wppay_type', '0'),
(966, 106, 'wppay_price', '0.1'),
(967, 106, 'wppay_vip_auth', '0'),
(968, 106, 'wppay_down', ''),
(969, 106, 'wppay_demourl', ''),
(970, 106, 'wppay_info', ''),
(971, 106, 'hero_video_data', ''),
(972, 106, 'hero_gallery_data', ''),
(973, 106, 'hero_gallery_data_free_num', '0'),
(974, 106, 'custom_title', ''),
(975, 106, 'keywords', ''),
(976, 106, 'description', ''),
(983, 100, '_views', '331'),
(984, 102, '_views', '41'),
(985, 101, '_views', '186'),
(986, 103, '_views', '66'),
(987, 104, '_views', '45'),
(988, 105, '_views', '66'),
(989, 106, '_views', '236'),
(990, 9, '_edit_lock', '1635645355:1'),
(991, 107, '_wpcom_is_markdown', '1'),
(992, 107, '_views', '358'),
(993, 6, 'sidebar_single_style', 'none'),
(995, 108, '_wpcom_is_markdown', '1'),
(996, 100, '_favnum', '1'),
(997, 64, '_favnum', '0'),
(1005, 58, '_views', '35'),
(1007, 10, '_edit_lock', '1635937425:1'),
(1008, 112, '_menu_item_type', 'post_type'),
(1009, 112, '_menu_item_menu_item_parent', '0'),
(1010, 112, '_menu_item_object_id', '5'),
(1011, 112, '_menu_item_object', 'page'),
(1012, 112, '_menu_item_target', ''),
(1013, 112, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}'),
(1014, 112, '_menu_item_xfn', ''),
(1015, 112, '_menu_item_url', ''),
(1017, 95, '_wp_old_date', '2021-10-30'),
(1018, 92, '_wp_old_date', '2021-10-30'),
(1019, 96, '_wp_old_date', '2021-10-30'),
(1020, 93, '_wp_old_date', '2021-10-30'),
(1021, 99, '_wp_old_date', '2021-10-30'),
(1022, 97, '_wp_old_date', '2021-10-30'),
(1023, 112, 'nav_icon', 'far fa-comments'),
(1024, 112, 'is_mega_nav', ''),
(1026, 64, 'course_question', '34'),
(1027, 521, '_views', '1'),
(1030, 49, '_edit_lock', '1660753847:1'),
(1031, 49, '_edit_last', '1'),
(1032, 49, 'positive', ''),
(1033, 49, 'negative', ''),
(1034, 49, 'is_course_docs', ''),
(1035, 50, '_edit_lock', '1636465299:1'),
(1036, 50, '_edit_last', '1'),
(1037, 50, 'positive', ''),
(1038, 50, 'negative', ''),
(1039, 50, 'is_course_docs', ''),
(1040, 51, '_edit_lock', '1636465312:1'),
(1041, 51, '_edit_last', '1'),
(1042, 51, 'positive', ''),
(1043, 51, 'negative', ''),
(1044, 51, 'is_course_docs', ''),
(1045, 52, '_edit_lock', '1636465330:1'),
(1046, 52, '_edit_last', '1'),
(1047, 52, 'positive', ''),
(1048, 52, 'negative', ''),
(1049, 52, 'is_course_docs', ''),
(1050, 53, '_edit_lock', '1636465411:1'),
(1051, 53, '_edit_last', '1'),
(1052, 53, 'positive', ''),
(1053, 53, 'negative', ''),
(1054, 53, 'is_course_docs', ''),
(1055, 54, '_edit_lock', '1636465420:1'),
(1056, 54, '_edit_last', '1'),
(1057, 54, 'positive', ''),
(1058, 54, 'negative', ''),
(1059, 54, 'is_course_docs', ''),
(1060, 55, '_edit_lock', '1636465431:1'),
(1061, 55, '_edit_last', '1'),
(1062, 55, 'positive', ''),
(1063, 55, 'negative', ''),
(1064, 55, 'is_course_docs', ''),
(1065, 56, '_edit_lock', '1636465455:1'),
(1066, 56, '_edit_last', '1'),
(1067, 56, 'positive', ''),
(1068, 56, 'negative', ''),
(1069, 56, 'is_course_docs', ''),
(1070, 57, '_edit_lock', '1636465512:1'),
(1071, 57, '_edit_last', '1'),
(1072, 57, 'positive', ''),
(1073, 57, 'negative', ''),
(1074, 57, 'is_course_docs', ''),
(1084, 64, 'is_recommand', '1'),
(1085, 104, 'content_summary', ''),
(1086, 100, 'content_summary', ''),
(1087, 9, '_views', '43'),
(1088, 57, '_views', '51'),
(1093, 8, '_views', '56'),
(1094, 52, '_views', '14'),
(1095, 47, '_views', '49'),
(1096, 56, '_views', '20'),
(1103, 121, '_wp_attached_file', '2021/10/2021111611475722.png'),
(1104, 121, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:960;s:6:\"height\";i:600;s:4:\"file\";s:28:\"2021/10/2021111611475722.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"2021111611475722-300x200.png\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:28:\"2021111611475722-768x480.png\";s:5:\"width\";i:768;s:6:\"height\";i:480;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"docspress_archive\";a:4:{s:4:\"file\";s:26:\"2021111611475722-40x40.png\";s:5:\"width\";i:40;s:6:\"height\";i:40;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1105, 64, '_thumbnail_id', '121'),
(1106, 122, '_wp_attached_file', '2021/10/202111161150365.png'),
(1107, 122, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:300;s:6:\"height\";i:200;s:4:\"file\";s:27:\"2021/10/202111161150365.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:27:\"202111161150365-300x200.png\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"docspress_archive\";a:4:{s:4:\"file\";s:25:\"202111161150365-40x40.png\";s:5:\"width\";i:40;s:6:\"height\";i:40;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1110, 123, '_wp_attached_file', '2021/10/20211116115114100.png'),
(1111, 123, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1086;s:6:\"height\";i:562;s:4:\"file\";s:29:\"2021/10/20211116115114100.png\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:29:\"20211116115114100-300x200.png\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:29:\"20211116115114100-768x397.png\";s:5:\"width\";i:768;s:6:\"height\";i:397;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"docspress_archive\";a:4:{s:4:\"file\";s:27:\"20211116115114100-40x40.png\";s:5:\"width\";i:40;s:6:\"height\";i:40;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1115, 105, 'content_summary', ''),
(1128, 129, '_wpcom_is_markdown', '1'),
(1129, 20, '_edit_last', '1'),
(1130, 20, 'inline_featured_image', '0'),
(1131, 20, 'hero_single_style', 'none'),
(1132, 20, 'sidebar_single_style', 'right'),
(1133, 20, 'custom_title', ''),
(1134, 20, 'keywords', ''),
(1135, 20, 'description', ''),
(1136, 20, 'course_page_close_filter', ''),
(1137, 20, 'course_top_image_description', ''),
(1138, 20, 'course_single_top_image_enabled', ''),
(1139, 20, 'course_single_top_image', ''),
(1140, 20, '_wpcom_is_markdown', '1'),
(1141, 48, '_views', '77'),
(1142, 61, '_views', '42'),
(1149, 132, 'inline_featured_image', '0'),
(1150, 132, '_wpcom_is_markdown', '1'),
(1151, 132, '_edit_lock', '1637819147:1'),
(1152, 132, '_edit_last', '1'),
(1153, 132, 'positive', ''),
(1154, 132, 'negative', ''),
(1155, 132, 'is_course_docs', ''),
(1156, 133, 'inline_featured_image', '0'),
(1157, 133, '_wpcom_is_markdown', '1'),
(1158, 133, '_edit_lock', '1642907536:1'),
(1159, 133, '_edit_last', '1'),
(1160, 133, 'positive', ''),
(1161, 133, 'negative', ''),
(1162, 133, 'is_course_docs', ''),
(1163, 133, '_views', '982'),
(1164, 134, 'inline_featured_image', '0'),
(1165, 134, '_wpcom_is_markdown', '1'),
(1166, 134, '_edit_lock', '1642907547:1'),
(1167, 134, '_edit_last', '1'),
(1168, 134, 'positive', ''),
(1169, 134, 'negative', ''),
(1170, 134, 'is_course_docs', ''),
(1171, 134, '_views', '1246'),
(1172, 132, '_views', '1670'),
(1173, 135, 'inline_featured_image', '0'),
(1174, 135, '_wpcom_is_markdown', '1'),
(1175, 135, '_edit_lock', '1642907521:1'),
(1176, 135, '_edit_last', '1'),
(1177, 135, 'positive', ''),
(1178, 135, 'negative', ''),
(1179, 135, 'is_course_docs', ''),
(1180, 135, '_views', '932'),
(1181, 136, 'inline_featured_image', '0'),
(1182, 136, '_wpcom_is_markdown', '1'),
(1183, 136, '_edit_lock', '1642907558:1'),
(1184, 136, '_edit_last', '1'),
(1185, 136, 'positive', ''),
(1186, 136, 'negative', ''),
(1187, 136, 'is_course_docs', ''),
(1188, 137, 'inline_featured_image', '0'),
(1189, 137, '_wpcom_is_markdown', '1'),
(1190, 137, '_edit_lock', '1642907567:1'),
(1191, 137, '_edit_last', '1'),
(1192, 137, 'positive', ''),
(1193, 137, 'negative', ''),
(1194, 137, 'is_course_docs', ''),
(1195, 137, '_views', '1161'),
(1196, 138, 'inline_featured_image', '0'),
(1197, 138, '_wpcom_is_markdown', '1'),
(1198, 138, '_edit_lock', '1642907584:1'),
(1199, 138, '_edit_last', '1'),
(1200, 138, 'positive', ''),
(1201, 138, 'negative', ''),
(1202, 138, 'is_course_docs', ''),
(1203, 136, '_views', '278'),
(1204, 138, '_views', '223'),
(1208, 140, '_wp_attached_file', '2021/11/2021112203365788.png'),
(1209, 140, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:225;s:6:\"height\";i:225;s:4:\"file\";s:28:\"2021/11/2021112203365788.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"2021112203365788-225x200.png\";s:5:\"width\";i:225;s:6:\"height\";i:200;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"docspress_archive\";a:4:{s:4:\"file\";s:26:\"2021112203365788-40x40.png\";s:5:\"width\";i:40;s:6:\"height\";i:40;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1210, 132, '_thumbnail_id', '140'),
(1212, 142, '_wpcom_is_markdown', '1'),
(1213, 143, 'inline_featured_image', '0'),
(1214, 143, '_wpcom_is_markdown', '1'),
(1215, 144, 'inline_featured_image', '0'),
(1216, 144, '_wpcom_is_markdown', '1'),
(1217, 145, 'inline_featured_image', '0'),
(1218, 145, '_wpcom_is_markdown', '1'),
(1219, 146, 'inline_featured_image', '0'),
(1220, 146, '_wpcom_is_markdown', '1'),
(1221, 147, 'inline_featured_image', '0'),
(1222, 147, '_wpcom_is_markdown', '1'),
(1223, 148, 'inline_featured_image', '0'),
(1224, 148, '_wpcom_is_markdown', '1'),
(1225, 146, '_edit_lock', '1637569100:1'),
(1226, 146, '_edit_last', '1'),
(1227, 146, 'positive', ''),
(1228, 146, 'negative', ''),
(1229, 146, 'is_course_docs', ''),
(1230, 143, '_edit_lock', '1637573492:1'),
(1231, 149, '_wpcom_is_markdown', '1'),
(1232, 143, '_edit_last', '1'),
(1233, 143, 'positive', ''),
(1234, 143, 'negative', ''),
(1235, 143, 'is_course_docs', ''),
(1236, 143, '_views', '45'),
(1237, 144, '_views', '49'),
(1238, 144, '_edit_lock', '1637576143:1'),
(1239, 145, '_edit_lock', '1637573513:1'),
(1240, 144, '_edit_last', '1'),
(1241, 144, 'positive', ''),
(1242, 144, 'negative', ''),
(1243, 144, 'is_course_docs', ''),
(1252, 152, 'inline_featured_image', '0'),
(1253, 152, '_wpcom_is_markdown', '1'),
(1254, 152, '_edit_lock', '1637617986:1'),
(1255, 152, '_edit_last', '1'),
(1256, 152, 'positive', ''),
(1257, 152, 'negative', ''),
(1258, 152, 'is_course_docs', ''),
(1259, 153, 'inline_featured_image', '0'),
(1260, 153, '_wpcom_is_markdown', '1'),
(1261, 153, '_edit_lock', '1660751665:1'),
(1262, 153, '_edit_last', '1'),
(1263, 153, 'positive', ''),
(1264, 153, 'negative', ''),
(1265, 153, 'is_course_docs', ''),
(1266, 154, 'inline_featured_image', '0'),
(1267, 154, '_wpcom_is_markdown', '1'),
(1268, 154, '_edit_lock', '1637617953:1'),
(1269, 154, '_edit_last', '1'),
(1270, 154, 'positive', ''),
(1271, 154, 'negative', ''),
(1272, 154, 'is_course_docs', ''),
(1273, 152, '_views', '111'),
(1283, 157, '_wpcom_is_markdown', '1'),
(1284, 153, '_views', '173'),
(1285, 158, 'inline_featured_image', '0'),
(1286, 158, '_wpcom_is_markdown', '1'),
(1287, 158, '_edit_lock', '1638485307:1'),
(1288, 158, '_edit_last', '1'),
(1289, 158, 'positive', ''),
(1290, 158, 'negative', ''),
(1291, 158, 'is_course_docs', ''),
(1292, 159, 'inline_featured_image', '0'),
(1293, 159, '_wpcom_is_markdown', '1'),
(1294, 159, '_edit_lock', '1637621890:1'),
(1295, 159, '_edit_last', '1'),
(1296, 159, 'positive', ''),
(1297, 159, 'negative', ''),
(1298, 159, 'is_course_docs', ''),
(1299, 159, '_views', '52'),
(1300, 160, 'inline_featured_image', '0'),
(1301, 160, '_wpcom_is_markdown', '1'),
(1302, 158, '_views', '113'),
(1303, 158, 'content_summary', 'Yargs是一个用于创建node.js命令行的库'),
(1304, 158, 'seo-title', ''),
(1305, 158, 'seo-keywords', ''),
(1306, 158, 'seo-description', ''),
(1307, 132, 'content_summary', '根据官方最新版本文档定期更新'),
(1308, 132, 'seo-title', ''),
(1309, 132, 'seo-keywords', ''),
(1310, 132, 'seo-description', ''),
(1311, 160, '_views', '21'),
(1312, 154, '_views', '608'),
(1313, 50, '_views', '18'),
(1314, 161, 'inline_featured_image', '0'),
(1315, 161, '_wpcom_is_markdown', '1'),
(1316, 161, '_wp_page_template', 'pages/page-links.php'),
(1319, 163, 'inline_featured_image', '0'),
(1320, 163, '_wpcom_is_markdown', '1'),
(1321, 163, '_edit_lock', '1638485389:1'),
(1322, 163, '_edit_last', '1'),
(1323, 163, 'positive', ''),
(1324, 163, 'negative', ''),
(1325, 163, 'is_course_docs', ''),
(1326, 163, 'content_summary', ''),
(1327, 163, 'seo-title', ''),
(1328, 163, 'seo-keywords', ''),
(1329, 163, 'seo-description', ''),
(1330, 163, '_oembed_ee406392186977014b7cca2c7ece1643', '{{unknown}}'),
(1331, 163, '_views', '349'),
(1332, 164, 'inline_featured_image', '0'),
(1333, 164, '_wpcom_is_markdown', '1'),
(1336, 164, '_edit_lock', '1638478480:1'),
(1337, 164, '_edit_last', '1'),
(1338, 164, 'positive', ''),
(1339, 164, 'negative', ''),
(1340, 164, 'is_course_docs', ''),
(1341, 164, 'content_summary', ''),
(1342, 164, 'seo-title', ''),
(1343, 164, 'seo-keywords', ''),
(1344, 164, 'seo-description', ''),
(1345, 62, '_views', '51'),
(1357, 167, 'inline_featured_image', '0'),
(1358, 167, '_wpcom_is_markdown', '1'),
(1359, 168, 'inline_featured_image', '0'),
(1360, 168, '_wpcom_is_markdown', '1'),
(1361, 169, 'inline_featured_image', '0'),
(1362, 169, '_wpcom_is_markdown', '1'),
(1363, 170, 'inline_featured_image', '0'),
(1364, 170, '_wpcom_is_markdown', '1'),
(1365, 171, 'inline_featured_image', '0'),
(1366, 171, '_wpcom_is_markdown', '1'),
(1367, 172, 'inline_featured_image', '0'),
(1368, 172, '_wpcom_is_markdown', '1'),
(1369, 173, 'inline_featured_image', '0'),
(1370, 173, '_wpcom_is_markdown', '1'),
(1371, 174, 'inline_featured_image', '0'),
(1372, 174, '_wpcom_is_markdown', '1'),
(1373, 175, 'inline_featured_image', '0'),
(1374, 175, '_wpcom_is_markdown', '1'),
(1375, 176, 'inline_featured_image', '0'),
(1376, 176, '_wpcom_is_markdown', '1'),
(1377, 177, 'inline_featured_image', '0'),
(1378, 177, '_wpcom_is_markdown', '1'),
(1380, 167, '_edit_lock', '1642956619:1'),
(1381, 167, '_edit_last', '1'),
(1382, 167, 'positive', ''),
(1383, 167, 'negative', ''),
(1384, 167, 'is_course_docs', ''),
(1385, 167, 'content_summary', ''),
(1386, 167, 'seo-title', ''),
(1387, 167, 'seo-keywords', ''),
(1388, 167, 'seo-description', ''),
(1389, 168, '_edit_lock', '1642956666:1'),
(1390, 168, '_edit_last', '1'),
(1391, 168, 'positive', ''),
(1392, 168, 'negative', ''),
(1393, 168, 'is_course_docs', ''),
(1394, 168, 'content_summary', ''),
(1395, 168, 'seo-title', ''),
(1396, 168, 'seo-keywords', ''),
(1397, 168, 'seo-description', ''),
(1398, 169, '_edit_lock', '1642956691:1'),
(1399, 169, '_edit_last', '1'),
(1400, 169, 'positive', ''),
(1401, 169, 'negative', ''),
(1402, 169, 'is_course_docs', ''),
(1403, 169, 'content_summary', ''),
(1404, 169, 'seo-title', ''),
(1405, 169, 'seo-keywords', ''),
(1406, 169, 'seo-description', ''),
(1407, 170, '_edit_lock', '1642956716:1'),
(1408, 170, '_edit_last', '1'),
(1409, 170, 'positive', ''),
(1410, 170, 'negative', ''),
(1411, 170, 'is_course_docs', ''),
(1412, 170, 'content_summary', ''),
(1413, 170, 'seo-title', ''),
(1414, 170, 'seo-keywords', ''),
(1415, 170, 'seo-description', ''),
(1416, 171, '_edit_lock', '1642956757:1'),
(1417, 171, '_edit_last', '1'),
(1418, 171, 'positive', ''),
(1419, 171, 'negative', ''),
(1420, 171, 'is_course_docs', ''),
(1421, 171, 'content_summary', ''),
(1422, 171, 'seo-title', ''),
(1423, 171, 'seo-keywords', ''),
(1424, 171, 'seo-description', ''),
(1425, 172, '_edit_lock', '1642956790:1'),
(1426, 172, '_edit_last', '1'),
(1427, 172, 'positive', ''),
(1428, 172, 'negative', ''),
(1429, 172, 'is_course_docs', ''),
(1430, 172, 'content_summary', ''),
(1431, 172, 'seo-title', ''),
(1432, 172, 'seo-keywords', ''),
(1433, 172, 'seo-description', ''),
(1434, 174, '_edit_lock', '1642956893:1'),
(1435, 173, '_edit_lock', '1642956828:1'),
(1436, 173, '_edit_last', '1'),
(1437, 173, 'positive', ''),
(1438, 173, 'negative', ''),
(1439, 173, 'is_course_docs', ''),
(1440, 173, 'content_summary', ''),
(1441, 173, 'seo-title', ''),
(1442, 173, 'seo-keywords', ''),
(1443, 173, 'seo-description', ''),
(1444, 174, '_edit_last', '1'),
(1445, 174, 'positive', ''),
(1446, 174, 'negative', ''),
(1447, 174, 'is_course_docs', ''),
(1448, 174, 'content_summary', ''),
(1449, 174, 'seo-title', ''),
(1450, 174, 'seo-keywords', ''),
(1451, 174, 'seo-description', ''),
(1452, 175, '_edit_lock', '1642956923:1'),
(1453, 175, '_edit_last', '1'),
(1454, 175, 'positive', ''),
(1455, 175, 'negative', ''),
(1456, 175, 'is_course_docs', ''),
(1457, 175, 'content_summary', ''),
(1458, 175, 'seo-title', ''),
(1459, 175, 'seo-keywords', ''),
(1460, 175, 'seo-description', ''),
(1461, 176, '_edit_lock', '1642956956:1'),
(1462, 177, '_edit_lock', '1642960553:1'),
(1463, 177, '_edit_last', '1'),
(1464, 177, 'positive', ''),
(1465, 177, 'negative', ''),
(1466, 177, 'is_course_docs', ''),
(1467, 177, 'content_summary', ''),
(1468, 177, 'seo-title', ''),
(1469, 177, 'seo-keywords', ''),
(1470, 177, 'seo-description', ''),
(1471, 164, '_views', '82'),
(1472, 174, '_oembed_b66358dca7c4cb82dc1d66a64499fd0b', '<iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" title=\"new-dawn-vl03k\" width=\"500\" height=\"750\" src=\"https://codesandbox.io/embed/new-dawn-vl03k?file=/src/App.js#?secret=tOQulu4lQI\" data-secret=\"tOQulu4lQI\"></iframe>'),
(1473, 174, '_oembed_time_b66358dca7c4cb82dc1d66a64499fd0b', '1638482197'),
(1474, 174, '_oembed_dd66f868065feb33863ecad10a6a88b0', '{{unknown}}'),
(1475, 174, '_oembed_06fe6b5a52e89f319c6dcecf44c7009c', '<iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" title=\"nostalgic-voice-3knvd\" width=\"500\" height=\"750\" src=\"https://codesandbox.io/embed/nostalgic-voice-3knvd?file=/src/App.js#?secret=5S1YnPThB1\" data-secret=\"5S1YnPThB1\"></iframe>'),
(1476, 174, '_oembed_time_06fe6b5a52e89f319c6dcecf44c7009c', '1638482200'),
(1477, 176, '_edit_last', '1'),
(1478, 176, 'positive', ''),
(1479, 176, 'negative', ''),
(1480, 176, 'is_course_docs', ''),
(1481, 176, 'content_summary', ''),
(1482, 176, 'seo-title', ''),
(1483, 176, 'seo-keywords', ''),
(1484, 176, 'seo-description', ''),
(1485, 177, '_oembed_a365023732beb037ecbb12f26f5e1161', '<iframe class=\"wp-embedded-content\" sandbox=\"allow-scripts\" security=\"restricted\" title=\"zustand normal/immer/optics/ramda updating\" width=\"500\" height=\"750\" src=\"https://codesandbox.io/embed/zustand-normal-immer-optics-ramda-updating-ynn3o?file=/src/App.tsx#?secret=7IBi2BUbxE\" data-secret=\"7IBi2BUbxE\"></iframe>'),
(1486, 177, '_oembed_time_a365023732beb037ecbb12f26f5e1161', '1638482249'),
(1488, 167, '_views', '107'),
(1489, 168, '_views', '62'),
(1490, 169, '_views', '182'),
(1491, 170, '_views', '62'),
(1492, 171, '_views', '49'),
(1493, 172, '_views', '75'),
(1494, 173, '_views', '60'),
(1495, 174, '_views', '92'),
(1496, 175, '_views', '104'),
(1497, 176, '_views', '27'),
(1498, 177, '_views', '58'),
(1499, 179, 'inline_featured_image', '0'),
(1500, 179, '_wpcom_is_markdown', '1'),
(1501, 179, '_edit_lock', '1642907595:1'),
(1502, 179, '_edit_last', '1'),
(1503, 179, 'positive', ''),
(1504, 179, 'negative', ''),
(1505, 179, 'is_course_docs', ''),
(1506, 179, 'content_summary', ''),
(1507, 179, 'seo-title', ''),
(1508, 179, 'seo-keywords', ''),
(1509, 179, 'seo-description', ''),
(1510, 179, '_views', '434'),
(1511, 147, '_views', '28'),
(1512, 18, '_views', '9'),
(1513, 49, '_views', '24'),
(1514, 59, '_views', '28'),
(1515, 148, '_views', '24'),
(1516, 60, '_views', '17'),
(1517, 63, '_views', '29'),
(1518, 16, '_views', '1'),
(1519, 146, '_views', '44'),
(1524, 145, '_views', '22'),
(1529, 54, '_views', '41'),
(1530, 55, '_views', '17'),
(1531, 51, '_views', '22'),
(1532, 53, '_views', '17'),
(1537, 64, 'seo-title', ''),
(1538, 64, 'seo-keywords', ''),
(1539, 64, 'seo-description', ''),
(1540, 102, '_favnum', '1'),
(1542, 189, '_wp_attached_file', '2022/06/2022060504164130.png'),
(1543, 189, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1920;s:6:\"height\";i:1080;s:4:\"file\";s:28:\"2022/06/2022060504164130.png\";s:5:\"sizes\";a:4:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:28:\"2022060504164130-300x200.png\";s:5:\"width\";i:300;s:6:\"height\";i:200;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:28:\"2022060504164130-768x432.png\";s:5:\"width\";i:768;s:6:\"height\";i:432;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"docspress_archive\";a:4:{s:4:\"file\";s:26:\"2022060504164130-40x40.png\";s:5:\"width\";i:40;s:6:\"height\";i:40;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"1536x1536\";a:4:{s:4:\"file\";s:29:\"2022060504164130-1536x864.png\";s:5:\"width\";i:1536;s:6:\"height\";i:864;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),
(1544, 19, '_thumbnail_id', '189'),
(1583, 195, '_wpcom_is_markdown', '1'),
(1584, 196, '_wpcom_is_markdown', '1'),
(1585, 197, '_wpcom_is_markdown', '1'),
(1586, 198, '_wpcom_is_markdown', '1'),
(1587, 199, '_wpcom_is_markdown', '1'),
(1588, 199, '_edit_lock', '1660746749:1'),
(1589, 199, '_edit_last', '1'),
(1590, 199, 'positive', ''),
(1591, 199, 'negative', ''),
(1592, 199, 'inline_featured_image', '0'),
(1593, 199, 'is_course_docs', ''),
(1594, 199, 'content_summary', ''),
(1595, 199, 'seo-title', ''),
(1596, 199, 'seo-keywords', ''),
(1597, 199, 'seo-description', ''),
(1598, 199, '_views', '8'),
(1599, 195, '_edit_lock', '1660747668:1'),
(1600, 196, '_edit_lock', '1660746970:1'),
(1601, 196, '_views', '39'),
(1602, 195, '_edit_last', '1'),
(1603, 195, 'positive', ''),
(1604, 195, 'negative', ''),
(1605, 195, 'inline_featured_image', '0'),
(1606, 195, 'is_course_docs', ''),
(1607, 195, 'content_summary', ''),
(1608, 195, 'seo-title', ''),
(1609, 195, 'seo-keywords', ''),
(1610, 195, 'seo-description', ''),
(1611, 197, '_views', '30'),
(1612, 195, '_views', '29'),
(1615, 107, '_edit_lock', '1660757876:1'),
(1621, 204, '_wpcom_is_markdown', '1');

-- --------------------------------------------------------

--
-- 表的结构 `wp_posts`
--

CREATE TABLE `wp_posts` (
  `ID` bigint(20) UNSIGNED NOT NULL,
  `post_author` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_title` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_excerpt` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_status` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'open',
  `post_password` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `post_name` varchar(200) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `to_ping` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `pinged` text COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_parent` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `guid` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT 0,
  `post_type` varchar(20) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- 转存表中的数据 `wp_posts`
--

INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(2, 1, '2021-10-28 19:11:33', '2021-10-28 11:11:33', '<!-- wp:paragraph -->\n<p>这是示范页面。页面和博客文章不同，它的位置是固定的，通常会在站点导航栏显示。很多用户都创建一个“关于”页面，向访客介绍自己。例如：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>嗨，大家好！我白天是个邮递员，晚上就是个有抱负的演员。这是我的网站。我住在北京，养了条吉通人性的狗叫小黑，我喜欢艺术和旅行。</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>……或这个：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>XYZ Doohickey公司成立于1971年，自从建立以来，我们一直向社会贡献着优秀doohickies。我们的公司总部位于天朝魔都，有着超过两千名员工，对魔都政府税收有着巨大贡献。</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>而您，作为一位 WordPress 新用户，我们建议您转到<a href=\"https://jikexingkong.com/wp-admin/\">您站点的仪表盘</a>，删除本页面，然后创建包含您自己内容的新页面。祝您使用愉快！</p>\n<!-- /wp:paragraph -->', '示例页面', '', 'publish', 'closed', 'open', '', 'sample-page', '', '', '2021-10-28 19:11:33', '2021-10-28 11:11:33', '', 0, 'https://jikexingkong.com/?page_id=2', 0, 'page', '', 0),
(3, 1, '2021-10-28 19:11:33', '2021-10-28 11:11:33', '<!-- wp:heading --><h2>我们是谁</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class=\"privacy-policy-tutorial\">推荐的文本： </strong>我们的站点地址是：https://jikexingkong.com。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>评论</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class=\"privacy-policy-tutorial\">推荐的文本： </strong>当访客留下评论时，我们会收集评论表单所显示的数据，和访客的IP地址及浏览器的user agent字符串来帮助检查垃圾评论。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>由您的电子邮箱地址所生成的匿名化字符串（又称为哈希）可能会被提供给Gravatar服务确认您是否有使用该服务。Gravatar服务的隐私政策在此：https://automattic.com/privacy/。在您的评论获批准后，您的资料图片将在您的评论旁公开展示。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>媒体</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class=\"privacy-policy-tutorial\">推荐的文本： </strong>如果您向此网站上传图片，您应当避免上传那些有嵌入地理位置信息（EXIF GPS）的图片。此网站的访客将可以下载并提取此网站的图片中的位置信息。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>Cookies</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class=\"privacy-policy-tutorial\">推荐的文本： </strong>如果您在我们的站点上留下评论，您可以选择用cookies保存您的名字、电子邮箱地址和网站地址。这是通过让您可以不用在评论时再次填写相关内容而向您提供方便。这些cookies会保留一年。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>如果您访问我们的登录页，我们会设置一个临时的cookie来确认您的浏览器是否接受cookies。此cookie不包含个人数据，且会在您关闭浏览器时被丢弃。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>当您登录时，我们也会设置多个cookies来保存您的登录信息及屏幕显示选项。登录cookies会保留两天，而屏幕显示选项cookies会保留一年。如果您选择了“记住我”，您的登录状态则会保留两周。如果您注销登陆了您的账户，用于登录的cookies将会被移除。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>如果您编辑或发布文章，我们会在您的浏览器中保存一个额外的cookie。这个cookie不包含个人数据而只记录了您刚才编辑的文章的ID。这个cookie会保留一天。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>来自其他网站的嵌入内容</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class=\"privacy-policy-tutorial\">推荐的文本： </strong>此站点上的文章可能会包含嵌入的内容（如视频、图片、文章等）。来自其他站点的嵌入内容的行为和您直接访问这些其他站点没有区别。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>这些站点可能会收集关于您的数据、使用cookies、嵌入额外的第三方跟踪程序及监视您与这些嵌入内容的交互，包括在您有这些站点的账户并登录了这些站点时，跟踪您与嵌入内容的交互。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>我们与谁共享您的信息</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class=\"privacy-policy-tutorial\">推荐的文本： </strong>若您请求重置密码，您的IP地址将包含于密码重置邮件中。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>我们保留多久您的信息</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class=\"privacy-policy-tutorial\">推荐的文本： </strong>如果您留下评论，评论和其元数据将被无限期保存。我们这样做以便能识别并自动批准任何后续评论，而不用将这些后续评论加入待审队列。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>对于本网站的注册用户，我们也会保存用户在个人资料中提供的个人信息。所有用户可以在任何时候查看、编辑或删除他们的个人信息（除了不能变更用户名外）、站点管理员也可以查看及编辑那些信息。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>您对您的信息有什么权利</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class=\"privacy-policy-tutorial\">推荐的文本： </strong>如果您有此站点的账户，或曾经留下评论，您可以请求我们提供我们所拥有的您的个人数据的导出文件，这也包括了所有您提供给我们的数据。您也可以要求我们抹除所有关于您的个人数据。这不包括我们因管理、法规或安全需要而必须保留的数据。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>我们将您的信息发送到哪</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong class=\"privacy-policy-tutorial\">推荐的文本： </strong>访客评论可能会被自动垃圾评论监测服务检查。</p><!-- /wp:paragraph -->', '隐私政策', '', 'draft', 'closed', 'open', '', 'privacy-policy', '', '', '2021-10-28 19:11:33', '2021-10-28 11:11:33', '', 0, 'https://jikexingkong.com/?page_id=3', 0, 'page', '', 0),
(5, 1, '2021-10-28 19:18:24', '2021-10-28 11:18:24', '[anspress]', '问题解答', '', 'publish', 'closed', 'closed', '', 'forum', '', '', '2021-11-03 19:05:58', '2021-11-03 11:05:58', '[anspress]', 0, 'https://jikexingkong.com/questions/', 0, 'page', '', 0),
(6, 1, '2021-10-28 19:18:24', '2021-10-28 11:18:24', '[anspress]', '提问', '', 'publish', 'closed', 'closed', '', 'ask', '', '', '2021-10-28 19:18:24', '2021-10-28 11:18:24', '', 5, 'https://jikexingkong.com/questions/ask/', 0, 'page', '', 0),
(7, 1, '2021-10-28 19:18:24', '2021-10-28 11:18:24', '[anspress]', '资料页', '', 'publish', 'closed', 'closed', '', 'profile', '', '', '2021-10-28 19:18:24', '2021-10-28 11:18:24', '', 5, 'https://jikexingkong.com/questions/profile/', 0, 'page', '', 0),
(8, 1, '2021-10-28 19:18:24', '2021-10-28 11:18:24', '[anspress]', '类别', '', 'publish', 'closed', 'closed', '', 'categories', '', '', '2021-10-28 19:18:24', '2021-10-28 11:18:24', '', 5, 'https://jikexingkong.com/questions/categories/', 0, 'page', '', 0),
(9, 1, '2021-10-28 19:18:24', '2021-10-28 11:18:24', '[anspress]', '标签', '', 'publish', 'closed', 'closed', '', 'tags', '', '', '2021-10-28 19:18:24', '2021-10-28 11:18:24', '', 5, 'https://jikexingkong.com/questions/tags/', 0, 'page', '', 0),
(10, 1, '2021-10-28 19:18:24', '2021-10-28 11:18:24', '[anspress]', '动态', '', 'publish', 'closed', 'closed', '', 'activities', '', '', '2021-10-28 19:18:24', '2021-10-28 11:18:24', '', 5, 'https://jikexingkong.com/questions/activities/', 0, 'page', '', 0),
(11, 1, '2021-10-28 19:18:25', '2021-10-28 11:18:25', '编写一些电子书以及翻译一些框架或类库文档,对于网络上已有完善文档的资源请到\"生态导航\"栏目查看', '文档中心', '', 'publish', 'closed', 'closed', '', 'docs', '', '', '2021-11-23 08:14:21', '2021-11-23 00:14:21', '编写一些电子书以及翻译一些框架或类库文档,对于网络上已有完善文档的资源请到\"生态导航\"栏目查看', 0, 'https://jikexingkong.com/docs/', 0, 'page', '', 0),
(13, 1, '2021-10-28 19:23:39', '2021-10-28 11:23:39', '', '首页', '', 'publish', 'closed', 'closed', '', 'home', '', '', '2021-10-29 16:06:02', '2021-10-29 08:06:02', '', 0, 'https://jikexingkong.com/home/', 0, 'page', '', 0),
(14, 1, '2021-10-28 19:23:39', '2021-10-28 11:23:39', '', '个人中心', '', 'publish', 'closed', 'closed', '', 'user', '', '', '2021-10-28 19:23:39', '2021-10-28 11:23:39', '', 0, 'https://jikexingkong.com/user/', 0, 'page', '', 0),
(15, 1, '2021-10-28 19:23:39', '2021-10-28 11:23:39', '', '登录/注册', '', 'publish', 'closed', 'closed', '', 'login', '', '', '2021-10-28 19:23:39', '2021-10-28 11:23:39', '', 0, 'https://jikexingkong.com/login/', 0, 'page', '', 0),
(16, 1, '2021-10-28 19:23:39', '2021-10-28 11:23:39', '', '专题集合', '', 'publish', 'closed', 'closed', '', 'series', '', '', '2021-10-28 19:23:39', '2021-10-28 11:23:39', '', 0, 'https://jikexingkong.com/series/', 0, 'page', '', 0),
(17, 1, '2021-10-28 19:23:39', '2021-10-28 11:23:39', '', '标签云', '', 'publish', 'closed', 'closed', '', 'tags', '', '', '2021-10-28 19:23:39', '2021-10-28 11:23:39', '', 0, 'https://jikexingkong.com/tags/', 0, 'page', '', 0),
(18, 1, '2021-10-28 19:23:39', '2021-10-28 11:23:39', '', '空白页面', '', 'publish', 'closed', 'closed', '', 'container', '', '', '2021-10-28 19:23:39', '2021-10-28 11:23:39', '', 0, 'https://jikexingkong.com/container/', 0, 'page', '', 0),
(19, 1, '2021-10-28 19:23:39', '2021-10-28 11:23:39', '一个比较全的编码者常用生态导航页,主要以Typescript,React,Node.js,Go语言为中心点添加,也包括一些诸如DevOPS等与开发有关联的技能\n<br/>\n🇨🇳 代表国产,✍️ 代表带中文翻译,🔥代表推荐指数 <em>入门文档和社区不包含图标</em>', '生态导航', '', 'publish', 'closed', 'closed', '', 'links', '', '', '2022-06-05 12:16:52', '2022-06-05 04:16:52', '一个比较全的编码者常用生态导航页,主要以Typescript,React,Node.js,Go语言为中心点添加,也包括一些诸如DevOPS等与开发有关联的技能\r\n<br/>\r\n🇨🇳 代表国产,✍️ 代表带中文翻译,🔥代表推荐指数 *入门文档和社区不包含图标*\r\n', 0, 'https://jikexingkong.com/links/', 0, 'page', '', 0),
(20, 1, '2021-10-28 19:31:38', '2021-10-28 11:31:38', '轻松拓展知识面,快速提升技术水平,节省大量学习时间用于放飞自我!', '视频课程', '', 'publish', 'closed', 'closed', '', 'courses', '', '', '2021-11-17 22:43:52', '2021-11-17 14:43:52', '轻松拓展知识面,快速提升技术水平,节省大量学习时间用于放飞自我!', 0, 'https://jikexingkong.com/courses/', 0, 'page', '', 0),
(39, 1, '2021-10-29 14:00:11', '2021-10-29 06:00:11', '', 'TS类库', '', 'publish', 'open', 'closed', '', 'ts-lib-cn', '', '', '2021-11-23 06:44:40', '2021-11-22 22:44:40', '', 0, 'https://jikexingkong.com/docs/js-ts%e7%b1%bb%e5%ba%93%e7%bf%bb%e8%af%91%e9%95%bf%e6%9c%9f%e6%96%b0%e5%a2%9e/', 3, 'docs', '', 0),
(40, 1, '2021-10-29 14:01:26', '2021-10-29 06:01:26', '', 'Go标准教程', '', 'publish', 'open', 'closed', '', 'golang-standard', '', '', '2021-11-23 06:31:57', '2021-11-22 22:31:57', '', 0, 'https://jikexingkong.com/docs/%e5%8c%85%e7%ae%a1%e7%90%86%e5%a4%a7%e9%9b%86%e5%90%88/', 0, 'docs', '', 0),
(47, 1, '2021-10-29 14:07:58', '2021-10-29 06:07:58', '', 'Nestjs最佳实践', '', 'publish', 'open', 'closed', '', 'nestjs-practices', '', '', '2021-10-29 14:42:21', '2021-10-29 06:42:21', '', 0, 'https://jikexingkong.com/docs/nestjs%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5/', 0, 'docs', '', 0),
(48, 1, '2021-10-29 14:08:43', '2021-10-29 06:08:43', '', 'React+TS实战', '', 'publish', 'open', 'closed', '', 'react-ts', '', '', '2021-11-23 05:39:17', '2021-11-22 21:39:17', '', 0, 'https://jikexingkong.com/docs/react%e5%85%a5%e9%97%a8%e4%b8%8e%e5%ae%9e%e6%88%98/', 1, 'docs', '', 0),
(49, 1, '2021-10-29 14:11:30', '2021-10-29 06:11:30', '<h1>编码环境搭建</h1>\n\n[scode type=\"yellow\"]注意: 本教程在MacOS下讲解,Linux用户根据各自的发行版安装软件,windows用户请自行安装wsl2作为替代 [/scode]\n\n<h2>学习目标</h2>\n\n<ul>\n<li>安装与配置<a href=\"https://nodejs.org/zh-cn/\" title=\"node.js\">node.js</a>+<a href=\"https://pnpm.io/\" title=\"pnpm\">pnpm</a>环境</li>\n<li>配置<code>tsconfig.json</code>+<a href=\"https://eslint.org/\" title=\"eslint\">eslint</a>+<a href=\"https://prettier.io/\" title=\"prettier\">prettier</a>实现代码规范化</li>\n<li>配置<a href=\"https://code.visualstudio.com/\" title=\"vscode\">vscode</a>实现调试与在保存代码时自动运行<code>eslint</code>/</li>\n</ul>\n\n<h2>环境搭建</h2>\n\n安装与配置<a href=\"https://nodejs.org/zh-cn/\" title=\"node.js\">node.js</a>环境\n\n<blockquote>\n  如果没有安装<a href=\"https://brew.sh/\" title=\"brew\">brew</a>请先安装\n</blockquote>\n\n<strong>建议:安装到GLOBAL里面的东西统一使用一个包管理器,我这里使用<a href=\"https://pnpm.io/\" title=\"pnpm\">pnpm</a></strong>\n\n安装<a href=\"https://nodejs.org/zh-cn/\" title=\"node.js\">node.js</a>\n\n<pre><code class=\"language-shell line-numbers\">~ brew install node\n</code></pre>\n\n配置<a href=\"https://www.npmjs.com/\" title=\"npm\">npm</a>淘宝镜像\n\n<pre><code class=\"language-shell line-numbers\">~ npm config set registry https://registry.npm.taobao.org\n</code></pre>\n\n安装<a href=\"https://pnpm.io/\" title=\"pnpm\">pnpm</a>\n\n<pre><code class=\"language-shell line-numbers\">~ npm install -g pnpm\n</code></pre>\n\n配置<a href=\"https://pnpm.io/\" title=\"pnpm\">pnpm</a>淘宝镜像\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm config set registry https://registry.npm.taobao.org\n</code></pre>\n\n安装镜像管理工具\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm add nrm -g \n</code></pre>\n\n建议安装一个<a href=\"https://nodejs.org/zh-cn/\" title=\"node.js\">node</a>版本管理工具比如<a href=\"https://github.com/tj/n\" title=\"n\">n</a>或者<a href=\"https://github.com/nvm-sh/nvm\" title=\"nvm\">nvm</a>\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm add n -g \n</code></pre>\n\n安装<a href=\"https://docs.nestjs.com/cli/overview\" title=\"nestjs cli\">nestjs cli</a>\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm add @nestjs/cli -g\n</code></pre>\n\n创建项目\n\n<pre><code class=\"language-shell line-numbers\">~ nest new project # 创建的时候选择npm\n</code></pre>\n\n进入删除<code>node_modules</code>目录和<code>package-lock.json</code>,执行<code>npm cache clean -f</code>再使用<code>pnpm i</code>重新安装\n\n升级所有包到最新版本\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm up -latest\n</code></pre>\n\n<h2>代码规范化</h2>\n\n具体代码与配置请自行查看源代码\n\n<h3>代码风格</h3>\n\n配置<a href=\"https://github.com/airbnb/javascript\" title=\"aribnb\">airbnb</a>的eslint规则并整合<a href=\"https://prettier.io/\" title=\"prettier\">prettier</a>,并且经过一定的客制化同时配合vscode可达到完美的编码体验\n\n<pre><code class=\"language-shell line-numbers\">pnpm add typescript \\\neslint \\\nprettier \\\n@typescript-eslint/parser \\\neslint-config-airbnb-typescript \\\neslint-plugin-import \\\n@typescript-eslint/eslint-plugin \\\njest \\\neslint-plugin-jest \\\neslint-config-prettier \\\neslint-plugin-prettier \\\neslint-plugin-unused-imports -D\n</code></pre>\n\n配置内容\n\n<pre><code class=\"language-javascript line-numbers\">...\nplugins: [\'@typescript-eslint\', \'jest\', \'prettier\', \'import\', \'unused-imports\'],\nextends: [\n    // 兼容typescript的airbnb规范\n    \'airbnb-typescript/base\',\n\n    // typescript的eslint插件\n    \'plugin:@typescript-eslint/eslint-recommended\',\n    \'plugin:@typescript-eslint/recommended-requiring-type-checking\',\n\n    // 支持jest\n    \'plugin:jest/recommended\',\n\n    // 使用prettier格式化代码\n    \'prettier\',\n    \'plugin:prettier/recommended\',\n],\n</code></pre>\n\n<h4>一些重要的规则</h4>\n\n<blockquote>\n  其余配置自行查看代码\n</blockquote>\n\n<code>eslint-plugin-unused-imports</code>用于自动删除未使用的导入\n\n<pre><code class=\"language-javascript line-numbers\">...\n \'no-unused-vars\': 0,\n \'@typescript-eslint/no-unused-vars\': 0,\n \'unused-imports/no-unused-imports\': 1,\n \'unused-imports/no-unused-vars\': [\n    \'error\',\n    {\n        vars: \'all\',\n        args: \'none\',\n        ignoreRestSiblings: true,\n    },\n]\n</code></pre>\n\n<code>import</code>插件,<code>import/order</code>可以按照自己的需求配置\n\n<pre><code class=\"language-javascript line-numbers\">// 导入模块的顺序\n\'import/order\': [\n     \'error\',\n     {\n         pathGroups: [\n             {\n                 pattern: \'@/**\',\n                 group: \'external\',\n                 position: \'after\',\n             },\n         ],\n         alphabetize: { order: \'asc\', caseInsensitive: false },\n         \'newlines-between\': \'always-and-inside-groups\',\n         warnOnUnassignedImports: true,\n     },\n],\n// 导入的依赖不必一定要在dependencies的文件\n\'import/no-extraneous-dependencies\': [\n    \'error\',\n     {\n         devDependencies: [\n             \'**/*.test.{ts,js}\',\n             \'**/*.spec.{ts,js}\',\n             \'scripts/**/*.{ts,js}\'\n         ],\n     },\n],\n</code></pre>\n\n最后需要配置一下<code>.prettierrc</code>,和<code>.editorconfig</code>,并且把一些它们各自需要忽略的目录和文件分别添加到<code>.eslintignore</code>和<code>.prettierignore</code>,最后把<code>git</code>仓库需要忽略的目录和文件写入<code>.gitignore</code>\n\n<h3>Tsconfig配置</h3>\n\ntsconfig.json文件中修改一下<code>lib</code>,添加<code>ESNEXT</code>就可以使用最新的ES语法,添加<code>WebWorker</code>可以支持多线程编程,并且添加一个<code>@</code>作为根目录映射符\n\n<pre><code class=\"language-json line-numbers\">{\n    \"compilerOptions\": {\n        // ...\n        \"paths\": {\n            \"@/*\": [\"src/*\"]\n        }\n    },\n    \"include\": [\n        \"src/**/*.ts\",\n        \"test/**/*.ts\",\n        \"typings/**/*.d.ts\",\n        \"**.js\"\n    ]\n}\n</code></pre>\n\ntsconfig.build.json中排除<code>**.js</code>\n\n<pre><code class=\"language-json line-numbers\">{\n    \"extends\": \"./tsconfig.json\",\n    \"exclude\": [\"node_modules\", \"dist\", \"test\", \"**/*spec.ts\", \"**.js\"]\n}\n</code></pre>\n\n<h2>开发工具</h2>\n\n对于<a href=\"https://nodejs.org/zh-cn/\" title=\"node.js\">node.js</a>,<a href=\"https://www.typescriptlang.org/\" title=\"typescript\">typescript</a>,前端等技术最好的开发工具毋庸置疑的就是<a href=\"https://code.visualstudio.com/\" title=\"vscode\">vscode</a>,任何其它选项(包括vim,emacs,sublime text,atom,webstorm等等)都有这样那样的问题需要去耗费精力,所以建议直接使用VScode进行开发\n\n<blockquote>\n  VSCode已经自带同步配置和插件的功能,建议启用\n</blockquote>\n\n安装<a href=\"https://code.visualstudio.com/\" title=\"vscode\">vscode</a>\n\n<pre><code class=\"language-shell line-numbers\">~ brew install vscode\n</code></pre>\n\n安装<a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\" title=\"vscode-eslint\">eslint</a>插件和<a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\" title=\"vscode-prettier\">prettier</a>插件\n\n<pre><code class=\"language-shell line-numbers\">~ code --install-extension dbaeumer.vscode-eslint \\\n  &amp;&amp; code esbenp.prettier-vscode\n</code></pre>\n\n按<code>cmd+,</code>选择偏好设置->工作空间,配置<a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\" title=\"vscode-eslint\">eslint</a>插件\n\n<pre><code class=\"language-json line-numbers\">{\n    \"editor.formatOnSave\": false,\n    \"editor.codeActionsOnSave\": {\n        \"source.fixAll.eslint\": true\n    }\n}\n</code></pre>\n\n为了确保<a href=\"https://pnpm.io/\" title=\"pnpm\">pnpm</a>安装的package可以拥有像npm,yarn一样的本地目录的提示效果,请在vscode底部选择工作区版本或者安装<a class=\"wp-editor-md-post-content-link\" href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next\">nighty</a>插件并选择vscode版本\n\n按<code>shift+cmd+d</code>创建<code>lanunch.json</code>,并且使用<code>ts-node</code>+<code>tsconfig-paths</code>配置断点调试,打好断点,按<code>F5</code>就可以进行调试\n\n<blockquote>\n  这种调试方式适合简单使用,后续我们将会讲到jest测试调试,这样效果会更好\n</blockquote>\n\n<pre><code class=\"language-json line-numbers\">{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"name\": \"Debug Nestplus\",\n            \"args\": [\"${workspaceFolder}/src/main.ts\"],\n            \"runtimeArgs\": [\n                \"--nolazy\",\n                \"-r\",\n                \"ts-node/register\",\n                \"-r\",\n                \"tsconfig-paths/register\"\n            ],\n            \"sourceMaps\": true,\n            \"envFile\": \"${workspaceFolder}/.env\",\n            \"env\": { \"TS_NODE_PROJECT\": \"tsconfig.build.json\" },\n            \"cwd\": \"${workspaceRoot}\",\n            \"console\": \"integratedTerminal\",\n            \"protocol\": \"inspector\"\n        }\n    ]\n}\n\n</code></pre>\n\n至此,所有配置完成,现在重启<a href=\"https://code.visualstudio.com/\" title=\"vscode\">vscode</a>就可以进入下一节学习如何愉快的使用<a href=\"https://nestjs.com/\" title=\"nestjs\">nestjs</a>构建应用了', '编码环境搭建', '', 'publish', 'open', 'closed', '', '%e7%bc%96%e7%a0%81%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba', '', '', '2021-11-09 21:43:48', '2021-11-09 13:43:48', '[node.js]: https://nodejs.org/zh-cn/	\"node.js\"\r\n[brew]: https://brew.sh/ \"brew\"\r\n[pnpm]: https://pnpm.io/	\"pnpm\"\r\n[npm]: https://www.npmjs.com/ \"npm\"\r\n[n]: https://github.com/tj/n	\"n\"\r\n[nvm]: https://github.com/nvm-sh/nvm	\"nvm\"\r\n[nestjs cli]: https://docs.nestjs.com/cli/overview	\"nestjs cli\"\r\n\r\n[airbnb]: https://github.com/airbnb/javascript	\"aribnb\"\r\n[prettier]: https://prettier.io/	\"prettier\"\r\n[typescript]: https://www.typescriptlang.org/	\"typescript\"\r\n[vscode]: https://code.visualstudio.com/	\"vscode\"\r\n[eslint]: https://eslint.org/	\"eslint\"\r\n[nestjs]: https://nestjs.com/	\"nestjs\"\r\n[vscode-eslint]: https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint	\"vscode-eslint\"\r\n[vscode-prettier]: https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode	\"vscode-prettier\"\r\n\r\n# 编码环境搭建\r\n\r\n[scode type=\"yellow\"]注意: 本教程在MacOS下讲解,Linux用户根据各自的发行版安装软件,windows用户请自行安装wsl2作为替代 [/scode]\r\n\r\n## 学习目标\r\n- 安装与配置[node.js][]+[pnpm][pnpm]环境\r\n- 配置`tsconfig.json`+[eslint][eslint]+[prettier][prettier]实现代码规范化\r\n- 配置[vscode][vscode]实现调试与在保存代码时自动运行`eslint`/\r\n## 环境搭建\r\n\r\n安装与配置[node.js][]环境\r\n\r\n> 如果没有安装[brew][]请先安装\r\n\r\n**建议:安装到GLOBAL里面的东西统一使用一个包管理器,我这里使用[pnpm][]**\r\n\r\n安装[node.js][]\r\n\r\n```shell\r\n~ brew install node\r\n```\r\n\r\n配置[npm][]淘宝镜像\r\n\r\n```shell\r\n~ npm config set registry https://registry.npm.taobao.org\r\n```\r\n\r\n安装[pnpm][]\r\n\r\n```shell\r\n~ npm install -g pnpm\r\n```\r\n\r\n配置[pnpm][]淘宝镜像\r\n\r\n```shell\r\n~ pnpm config set registry https://registry.npm.taobao.org\r\n```\r\n\r\n安装镜像管理工具 \r\n\r\n```shell\r\n~ pnpm add nrm -g \r\n```\r\n\r\n建议安装一个[node][node.js]版本管理工具比如[n][]或者[nvm][]\r\n\r\n```shell\r\n~ pnpm add n -g \r\n```\r\n\r\n安装[nestjs cli][]\r\n\r\n```shell\r\n~ pnpm add @nestjs/cli -g\r\n```\r\n\r\n创建项目\r\n\r\n```shell\r\n~ nest new project # 创建的时候选择npm\r\n```\r\n\r\n进入删除`node_modules`目录和`package-lock.json`,执行`npm cache clean -f`再使用`pnpm i`重新安装\r\n\r\n升级所有包到最新版本\r\n\r\n```shell\r\n~ pnpm up -latest\r\n```\r\n\r\n## 代码规范化\r\n\r\n具体代码与配置请自行查看源代码\r\n\r\n### 代码风格\r\n\r\n配置[airbnb][]的eslint规则并整合[prettier][],并且经过一定的客制化同时配合vscode可达到完美的编码体验\r\n\r\n```shell\r\npnpm add typescript \\\r\neslint \\\r\nprettier \\\r\n@typescript-eslint/parser \\\r\neslint-config-airbnb-typescript \\\r\neslint-plugin-import \\\r\n@typescript-eslint/eslint-plugin \\\r\njest \\\r\neslint-plugin-jest \\\r\neslint-config-prettier \\\r\neslint-plugin-prettier \\\r\neslint-plugin-unused-imports -D\r\n```\r\n\r\n配置内容\r\n\r\n```javascript\r\n...\r\nplugins: [\'@typescript-eslint\', \'jest\', \'prettier\', \'import\', \'unused-imports\'],\r\nextends: [\r\n    // 兼容typescript的airbnb规范\r\n    \'airbnb-typescript/base\',\r\n\r\n    // typescript的eslint插件\r\n    \'plugin:@typescript-eslint/eslint-recommended\',\r\n    \'plugin:@typescript-eslint/recommended-requiring-type-checking\',\r\n      \r\n    // 支持jest\r\n    \'plugin:jest/recommended\',\r\n\r\n    // 使用prettier格式化代码\r\n    \'prettier\',\r\n    \'plugin:prettier/recommended\',\r\n],\r\n```\r\n\r\n#### 一些重要的规则\r\n\r\n> 其余配置自行查看代码\r\n\r\n`eslint-plugin-unused-imports`用于自动删除未使用的导入\r\n\r\n```javascript\r\n...\r\n &#039;no-unused-vars&#039;: 0,\r\n &#039;@typescript-eslint/no-unused-vars&#039;: 0,\r\n &#039;unused-imports/no-unused-imports&#039;: 1,\r\n &#039;unused-imports/no-unused-vars&#039;: [\r\n    &#039;error&#039;,\r\n    {\r\n        vars: &#039;all&#039;,\r\n        args: &#039;none&#039;,\r\n        ignoreRestSiblings: true,\r\n    },\r\n]\r\n```\r\n\r\n`import`插件,`import/order`可以按照自己的需求配置\r\n\r\n```javascript\r\n// 导入模块的顺序\r\n&#039;import/order&#039;: [\r\n     &#039;error&#039;,\r\n     {\r\n         pathGroups: [\r\n             {\r\n                 pattern: &#039;@/**&#039;,\r\n                 group: &#039;external&#039;,\r\n                 position: &#039;after&#039;,\r\n             },\r\n         ],\r\n         alphabetize: { order: &#039;asc&#039;, caseInsensitive: false },\r\n         &#039;newlines-between&#039;: &#039;always-and-inside-groups&#039;,\r\n         warnOnUnassignedImports: true,\r\n     },\r\n],\r\n// 导入的依赖不必一定要在dependencies的文件\r\n&#039;import/no-extraneous-dependencies&#039;: [\r\n    &#039;error&#039;,\r\n     {\r\n         devDependencies: [\r\n             &#039;**/*.test.{ts,js}&#039;,\r\n             &#039;**/*.spec.{ts,js}&#039;,\r\n             &#039;scripts/**/*.{ts,js}&#039;\r\n         ],\r\n     },\r\n],\r\n```\r\n\r\n最后需要配置一下`.prettierrc`,和`.editorconfig`,并且把一些它们各自需要忽略的目录和文件分别添加到`.eslintignore`和`.prettierignore`,最后把`git`仓库需要忽略的目录和文件写入`.gitignore`\r\n\r\n### Tsconfig配置\r\n\r\ntsconfig.json文件中修改一下`lib`,添加`ESNEXT`就可以使用最新的ES语法,添加`WebWorker`可以支持多线程编程,并且添加一个`@`作为根目录映射符\r\n\r\n```json\r\n{\r\n    &quot;compilerOptions&quot;: {\r\n        // ...\r\n        &quot;paths&quot;: {\r\n            &quot;@/*&quot;: [&quot;src/*&quot;]\r\n        }\r\n    },\r\n    &quot;include&quot;: [\r\n        &quot;src/**/*.ts&quot;,\r\n        &quot;test/**/*.ts&quot;,\r\n        &quot;typings/**/*.d.ts&quot;,\r\n        &quot;**.js&quot;\r\n    ]\r\n}\r\n```\r\n\r\ntsconfig.build.json中排除`**.js`\r\n\r\n```json\r\n{\r\n    &quot;extends&quot;: &quot;./tsconfig.json&quot;,\r\n    &quot;exclude&quot;: [&quot;node_modules&quot;, &quot;dist&quot;, &quot;test&quot;, &quot;**/*spec.ts&quot;, &quot;**.js&quot;]\r\n}\r\n```\r\n\r\n## 开发工具\r\n\r\n对于[node.js][],[typescript][],前端等技术最好的开发工具毋庸置疑的就是[vscode][],任何其它选项(包括vim,emacs,sublime text,atom,webstorm等等)都有这样那样的问题需要去耗费精力,所以建议直接使用VScode进行开发\r\n\r\n> VSCode已经自带同步配置和插件的功能,建议启用\r\n\r\n安装[vscode][]\r\n\r\n```shell\r\n~ brew install vscode\r\n```\r\n\r\n安装[eslint][vscode-eslint]插件和[prettier][vscode-prettier]插件\r\n\r\n```shell\r\n~ code --install-extension dbaeumer.vscode-eslint \\\r\n  && code esbenp.prettier-vscode\r\n```\r\n\r\n按`cmd+,`选择偏好设置->工作空间,配置[eslint][vscode-eslint]插件\r\n\r\n```json\r\n{\r\n    &quot;editor.formatOnSave&quot;: false,\r\n    &quot;editor.codeActionsOnSave&quot;: {\r\n        &quot;source.fixAll.eslint&quot;: true\r\n    }\r\n}\r\n```\r\n\r\n为了确保[pnpm][]安装的package可以拥有像npm,yarn一样的本地目录的提示效果,请在vscode底部选择工作区版本或者安装[nighty](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next)插件并选择vscode版本\r\n\r\n按`shift+cmd+d`创建`lanunch.json`,并且使用`ts-node`+`tsconfig-paths`配置断点调试,打好断点,按`F5`就可以进行调试\r\n\r\n> 这种调试方式适合简单使用,后续我们将会讲到jest测试调试,这样效果会更好\r\n\r\n```json\r\n{\r\n    &quot;version&quot;: &quot;0.2.0&quot;,\r\n    &quot;configurations&quot;: [\r\n        {\r\n            &quot;type&quot;: &quot;node&quot;,\r\n            &quot;request&quot;: &quot;launch&quot;,\r\n            &quot;name&quot;: &quot;Debug Nestplus&quot;,\r\n            &quot;args&quot;: [&quot;${workspaceFolder}/src/main.ts&quot;],\r\n            &quot;runtimeArgs&quot;: [\r\n                &quot;--nolazy&quot;,\r\n                &quot;-r&quot;,\r\n                &quot;ts-node/register&quot;,\r\n                &quot;-r&quot;,\r\n                &quot;tsconfig-paths/register&quot;\r\n            ],\r\n            &quot;sourceMaps&quot;: true,\r\n            &quot;envFile&quot;: &quot;${workspaceFolder}/.env&quot;,\r\n            &quot;env&quot;: { &quot;TS_NODE_PROJECT&quot;: &quot;tsconfig.build.json&quot; },\r\n            &quot;cwd&quot;: &quot;${workspaceRoot}&quot;,\r\n            &quot;console&quot;: &quot;integratedTerminal&quot;,\r\n            &quot;protocol&quot;: &quot;inspector&quot;\r\n        }\r\n    ]\r\n}\r\n\r\n```\r\n\r\n至此,所有配置完成,现在重启[vscode][]就可以进入下一节学习如何愉快的使用[nestjs][]构建应用了', 47, 'https://jikexingkong.com/docs/nestjs-practices/%e7%bc%96%e7%a0%81%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba/', 0, 'docs', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(50, 1, '2021-10-29 14:11:48', '2021-10-29 06:11:48', '<h1>基本数据操作</h1>\n\n<h2>学习目标</h2>\n\n<ul>\n<li>简单地整合[nestjs][]框架与<a href=\"https://typeorm.io/\" title=\"typeorm\">typeorm</a></li>\n<li>实现基本的<em>CRUD</em>数据操作</li>\n<li>使用<a href=\"https://github.com/typestack/class-validator\" title=\"class-validator\">class-validator</a>验证请求数据</li>\n<li>更换更加快速的<a href=\"https://www.fastify.io/\" title=\"fastify\">fastify</a>适配器</li>\n<li>使用<a href=\"https://www.postman.com/\" title=\"postman\">postman</a>对测试接口</li>\n</ul>\n\n<h2>安装Mysql</h2>\n\n这里我们只在macos里演示,所以使用<code>brew install mysql</code>安装,其它系统都差不多,比如我日常用的比较多的另一个系统是manjaro,直接<code>sudo pacman -Syy mysql</code>,而windows则更简单,一个phpstudy就什么都有了,安装之后使用如下命令初始化一下\n\n<h2>预装依赖</h2>\n\n<ul>\n<li><a href=\"https://www.lodashjs.com/\" title=\"lodash\">lodash</a>是常用的工具库</li>\n<li><a href=\"https://github.com/kentcdodds/cross-env#readme\" title=\"cross-env\">cross-env</a>用于跨平台设置环境变量</li>\n<li><a href=\"https://github.com/typestack/class-transformer\" title=\"class-transformer\">class-transformer</a>用于对请求和返回等数据进行序列化</li>\n<li><a href=\"https://github.com/typestack/class-validator\" title=\"class-validator\">class-validator</a>用于验证请求<code>dto</code>等</li>\n<li><a href=\"https://typeorm.io/\" title=\"typeorm\">typeorm</a>一个TS编写的[node.js][]ORM</li>\n<li>[@nestjs/typeorm][]Nestjs的TypeOrm整合模块</li>\n<li><a href=\"https://docs.nestjs.com/techniques/performance\" title=\"@nestjs/platform-fastify\">@nestjs/platform-fastify</a>Fastify适配器,用于替代express</li>\n<li><a href=\"https://docs.nestjs.com/openapi/introduction\" title=\"nestjs-swagger\">nestjs-swagger</a>生成open api文档,目前我们使用其<code>PartialType</code>函数是<code>UpdateDto</code>中的属性可选</li>\n<li><a href=\"https://docs.nestjs.com/openapi/introduction\" title=\"fastify-swagger\">fastify-swagger</a>生成Fastify的Open API</li>\n</ul>\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm add class-transformer \\\n  @nestjs/platform-fastify \\\n  class-validator \\\n  lodash \\\n  @nestjs/swagger \\\n  fastify-swagger \\\n  mysql2 \\\n  typeorm \\\n  @nestjs/typeorm\n\n ~ pnpm add @types/lodash cross-env -D\n</code></pre>\n\n<h2>生命周期</h2>\n\n要合理的编写应用必须事先了解清楚整个程序的访问流程,本教程会讲解如何一步步演进每一次访问流,作为第一步课时,我们的访问流非常简单,可以参考下图\n\n<img src=\"https://pic.pincman.com/media/20201109040813.png\" alt=\"\" />\n\n<h2>文件结构</h2>\n\n我们通过整合<a href=\"https://typeorm.io/\" title=\"typeorm\">typeorm</a>来连接mysql实现一个基本的CRUD应用,首先我们需要创建一下文件结构\n1. 创建模块\n2. 编写模型\n3. 编写Repository(如果有需要的话)\n5. 编写数据验证的DTO\n6. 编写服务\n7. 编写控制器\n8. 在每个以上代码各自的目录下建立一个<code>index.ts</code>并导出它们\n9. 在各自的<code>Module</code>里进行注册提供者,导出等\n10. 在<code>AppModule</code>中导入这两个模块\n\n编写好之后的目录结构如下\n\n<pre><code class=\"language-shell line-numbers\">.\n├── app.module.ts                           # 引导模块           \n├── config                                  # 配置文件目录\n│   ├── database.config.ts                  # 数据库配置\n│   └── index.ts\n├── core                                    # 核心模块\n│   ├── core.module.ts\n│   └── index.ts\n├── main.ts                                 # 应用启动器\n├── modules\n│   ├── content                             # 内容模块目录\n│   │   ├── content.module.ts               # 内容模块\n│   │   ├── controllers                     # 控制器\n│   │   ├── dtos                            # DTO访问数据验证\n│   │   ├── entities                        # 数据实体模型\n|   |   ├── index.ts              \n│   │   ├── repositories                    # 自定义Repository\n│   │   ├── services                        # 服务\n│   └── user                                # 用户模块目录\n│       ├── index.ts\n│       └── user.module.ts\n</code></pre>\n\n<h2>应用编码</h2>\n\n在开始编码之前需要先更改一下<code>package.json</code>和<code>nestjs-cli.json</code>两个文件\n\n在<code>package.json</code>中修改一下启动命令,以便每次启动可以自动配置运行环境并兼容<code>windows</code>环境\n\n<pre><code class=\"language-json line-numbers\">\"prebuild\": \"cross-env rimraf dist\",\n\"start\": \"cross-env NODE_ENV=development nest start\",\n\"start:dev\": \"cross-env NODE_ENV=development nest start --watch\",\n\"start:debug\": \"cross-env NODE_ENV=development nest start --debug --watch\",\n\"start:prod\": \"cross-env NODE_ENV=production node dist/main\",\n</code></pre>\n\n为了在每次重新编译前自动删除上次的产出,在<code>nestjs-cli.json</code>中配置<code>\"deleteOutDir\": true</code>\n\n<h3><code>main.ts</code></h3>\n\n把适配器由<a href=\"https://expressjs.com/\" title=\"express\">express</a>换成更快的<a href=\"https://www.fastify.io/\" title=\"fastify\">fastify</a>,并把监听的IP改成<code>0.0.0.0</code>方便外部访问.为了在使用<a href=\"https://github.com/typestack/class-validator\" title=\"class-validator\">class-validator</a>的<code>DTO</code>类中也可以注入nestjs容器的依赖,需要添加<code>useContainer</code>\n\n<pre><code class=\"language-typescript line-numbers\">// main.ts\nimport { NestFactory } from \'@nestjs/core\';\nimport {\n  FastifyAdapter,\n  NestFastifyApplication,\n} from \'@nestjs/platform-fastify\';\nimport { useContainer } from \'class-validator\';\nimport { AppModule } from \'./app.module\';\n\nasync function bootstrap() {\n  const app = await NestFactory.create&lt;NestFastifyApplication&gt;(\n    AppModule,\n    new FastifyAdapter()\n  );\n  useContainer(app.select(AppModule), { fallbackOnErrors: true });\n  await app.listen(3000,\'0.0.0.0\');\n}\nbootstrap();\n</code></pre>\n\n<h3>连接配置</h3>\n\n创建一个<code>src/config/database.config.ts</code>文件\n\n<pre><code class=\"language-typescript line-numbers\">export const database: () =&gt; TypeOrmModuleOptions = () =&gt; ({\n    // ...\n    // 此处entites设置为空即可,我们直接通过在模块内部使用`forFeature`来注册模型\n    // 后续魔改框架的时候,我们会通过自定义的模块创建函数来重置entities,以便给自己编写的CLI使用\n    // 所以这个配置后面会删除\n    entities: [], \n    // 自动加载模块中注册的entity\n    autoLoadEntities: true,\n    // 可以在webpack热更新时保持连接,后续我们使用swc.js+nodemon热更新\n    // 所以用不到hot-reload,这个配置对于我们没作用,加不加无所谓\n    keepConnectionAlive: true,\n    // 可以在开发环境下同步entity的数据结构到数据库\n    // 后面教程会使用自定义的迁移命令来代替,以便在生产环境中使用,所以以后这个选项会永久false\n    synchronize: process.env.NODE_ENV !== \'production\',\n});\n\n</code></pre>\n\n<h3><code>CoreModule</code></h3>\n\n核心模块用于挂载一些全局类服务,比如整合<a href=\"https://typeorm.io/\" title=\"typeorm\">typeorm</a>的``TypeormModule`\n\n<strong>注意</strong>: 需要添加<code>@Global()</code>装饰器使<code>CoreModule</code>中导出的服务<code>metadata</code>全局可用\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/core.module.ts\n@Global()\n@Module({\n    imports: [TypeOrmModule.forRoot(database())],\n})\nexport class CoreModule {}\n\n</code></pre>\n\n在<code>AppModule</code>导入该模块\n\n<pre><code class=\"language-typescript line-numbers\">// src/app.module.ts\n@Module({\n    imports: [CoreModule],\n  ...\n})\nexport class AppModule {}\n</code></pre>\n\n<h3><code>ContentModule</code></h3>\n\n内容模块用于存放<em>CRUD</em>操作的逻辑代码\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/content.module.ts\n@Module({})\nexport class ContentModule {}\n</code></pre>\n\n在<code>AppModule</code>中注册\n\n<pre><code class=\"language-typescript line-numbers\">// src/app.module.ts\n@Module({\n    imports: [CoreModule,ContentModule],\n  ...\n})\nexport class AppModule {}\n</code></pre>\n\n<h4>实体模型</h4>\n\n创建一个<code>PostEntity</code>用于文章数据表\n\n<code>PostEntity</code>继承``BaseEntity<code>,这样做是为了我们可以进行</code>ActiveRecord<code>操作,例如</code>PostEntity.save(post)<code>,因为纯</code>DataMapper`的方式有时候代码会显得啰嗦,具体请查看<a class=\"wp-editor-md-post-content-link\" href=\"https://typeorm.io/#/active-record-data-mapper\">此处</a>\n\n<code>@CreateDateColumn</code>和<code>@UpdateDateColumn</code>是自动字段,会根据创建和更新数据的时间自动产生,写入后不必关注\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/entities/post.entity.ts\n// \'content_posts\'是表名称\n@Entity(\'content_posts\')\nexport class PostEntity extends BaseEntity {\n...\n    @CreateDateColumn({\n        comment: \'创建时间\',\n    })\n    createdAt!: Date;\n\n    @UpdateDateColumn({\n        comment: \'更新时间\',\n    })\n    updatedAt!: Date;\n}\n</code></pre>\n\n<h4>存储类</h4>\n\n本节存储类是一个空类,后面会添加各种操作方法\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/repositories/post.repository.ts\n@EntityRepository(PostEntity)\nexport class PostRepository extends Repository&lt;PostEntity&gt; {}\n</code></pre>\n\n<h4>注册模型和存储类</h4>\n\n在编写好<code>entity</code>和<code>repository</code>之后我们还需要通过<code>Typeorm.forFeature</code>这个静态方法进行注册,并把存储类导出为提供者以便在其它模块注入\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/content.module.ts\n@Module({\n    imports: [TypeOrmModule.forFeature([PostEntity, PostRepository])],\n    exports: [TypeOrmModule.forFeature([PostRepository])],\n})\nexport class ContentModule {}\n</code></pre>\n\n<h4>DTO验证</h4>\n\n<code>DTO</code>配合管道(PIPE)用于控制器的数据验证,验证器则使用<a href=\"https://github.com/typestack/class-validator\" title=\"class-validator\">class-validator</a>\n\n<blockquote>\n  class-validator是基于validator.js的封装,所以一些规则可以通过validator.js的文档查找,后面教程中我们会编写大量的自定义的验证规则,这节先尝试基本的用法\n</blockquote>\n\n其基本的使用方法就是给<code>DTO</code>类的属性添加一个验证装饰器,如下\n\n<blockquote>\n  <code>groups</code>选项用于配置验证组\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/dtos/create-post.dto.ts\n@Injectable()\nexport class CreatePostDto {\n    @MaxLength(255, {\n        always: true,\n        message: \'文章标题长度最大为$constraint1\',\n    })\n    @IsNotEmpty({ groups: [\'create\'], message: \'文章标题必须填写\' })\n    @IsOptional({ groups: [\'update\'] })\n    title!: string;\n    ...\n}\n\n</code></pre>\n\n更新验证类<code>UpdatePostDto</code>继承自<code>CreatePostDto</code>,为了使<code>CreatePostDto</code>中的属性变成可选,需要使用[@nestjs/swagger][]包中的<code>PartialType</code>方法,请查阅<a class=\"wp-editor-md-post-content-link\" href=\"https://docs.nestjs.com/openapi/mapped-types\">此处</a>文档\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/dtos/update-post.dto.ts\n@Injectable()\nexport class UpdatePostDto extends PartialType(CreatePostDto) {\n    @IsUUID(undefined, { groups: [\'update\'], message: \'文章ID格式错误\' })\n    @IsDefined({ groups: [\'update\'], message: \'文章ID必须指定\' })\n    id!: string;\n}\n\n</code></pre>\n\n<h4>服务类</h4>\n\n服务一共包括5个简单的方法,通过调用<code>PostRepository</code>来操作数据\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/services/post.service.ts\n@Injectable()\nexport class PostService {\n    // 此处需要注入`PostRepository`的依赖\n    constructor(private postRepository: PostRepository) {}\n    // 查询文章列表\n    async findList() \n    // 查询一篇文章的详细信息\n    async findOne(id: string)\n    // 添加文章\n    async create(data: CreatePostDto)\n    // 更新文章\n    async update(data: UpdatePostDto)\n    // 删除文章\n    async delete(id: string)\n}\n\n</code></pre>\n\n<h4>控制器</h4>\n\n控制器的方法通过<code>@GET</code>,<code>@POST</code>,<code>@PUT</code>,<code>@PATCH</code>,<code>@Delete</code>等装饰器对外提供接口,并且通过注入<code>PostService</code>服务来操作数据.在控制器的方法上使用框架自带的<code>ValidationPipe</code>管道来验证请求中的<code>body</code>数据,<code>ParseUUIDPipe</code>来验证<code>params</code>数据\n\n<pre><code class=\"language-typescript line-numbers\">// 控制器URL的前缀\n@Controller(\'posts\')\nexport class PostController {\n    constructor(protected postService: PostService) {}\n\n    ...\n   // 其它方法请自行查看源码\n    @Get(\':post\')\n    async show(@Param(\'post\', new ParseUUIDPipe()) post: string) {\n        return this.postService.findOne(post);\n    }\n\n    @Post()\n    async store(\n        @Body(\n            new ValidationPipe({\n                transform: true,\n                forbidUnknownValues: true,\n                validationError: { target: false },\n                groups: [\'create\'],\n            }),\n        )\n        data: CreatePostDto,\n    ) {\n        return this.postService.create(data);\n    }\n}\n</code></pre>\n\n<h4>注册控制器等</h4>\n\n<ul>\n<li>为了后面``DTO<code>中可能会导入服务,需要把</code>DTO<code>,同样注册为提供者并且改造一下</code>main.ts<code>,把容器加入到</code>class-containter`中</li>\n<li><code>PostService</code>服务可能后续会被<code>UserModule</code>等其它模块使用,所以此处我们也直接导出</li>\n</ul>\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/content.module.ts\n@Module({\n    imports: [TypeOrmModule.forFeature([PostEntity, PostRepository])],\n    providers: [PostService, CreatePostDto, UpdatePostDto],\n    controllers: [PostController],\n    exports: [PostService, TypeOrmModule.forFeature([PostRepository])],\n})\nexport class ContentModule {}\n</code></pre>\n\n<pre><code class=\"language-typescript line-numbers\">// src/main.ts\n...\nasync function bootstrap() {\n    const app = await NestFactory.create&lt;NestFastifyApplication&gt;(\n        AppModule,\n        new FastifyAdapter(),\n    );\n    useContainer(app.select(AppModule), { fallbackOnErrors: true });\n    await app.listen(3000, \'0.0.0.0\');\n}\n</code></pre>\n\n最后启动应用在<code>postman</code>中测试接口', '基本数据操作', '', 'publish', 'open', 'closed', '', '%e5%9f%ba%e6%9c%ac%e6%95%b0%e6%8d%ae%e6%93%8d%e4%bd%9c', '', '', '2021-11-09 21:44:02', '2021-11-09 13:44:02', '[postman]: https://www.postman.com/ \"postman\"\r\n\r\n[lodash]: https://www.lodashjs.com/	\"lodash\"\r\n[cross-env]: https://github.com/kentcdodds/cross-env#readme	\"cross-env\"\r\n[class-transformer]: https://github.com/typestack/class-transformer	\"class-transformer\"\r\n[class-validator]: https://github.com/typestack/class-validator	\"class-validator\"\r\n[typeorm]: https://typeorm.io/ \"typeorm\"\r\n[nestjs-typeorm]: https://docs.nestjs.com/techniques/database \"@nestjs/typeorm\"\r\n[@nestjs/platform-fastify]: https://docs.nestjs.com/techniques/performance	\"@nestjs/platform-fastify\"\r\n[nestjs-swagger]: https://docs.nestjs.com/openapi/introduction \"nestjs-swagger\"\r\n[fastify-swagger]: https://docs.nestjs.com/openapi/introduction	\"fastify-swagger\"\r\n[express]: https://expressjs.com/	\"express\"\r\n[fastify]: https://www.fastify.io/	\"fastify\"\r\n\r\n# 基本数据操作\r\n\r\n## 学习目标\r\n\r\n- 简单地整合[nestjs][]框架与[typeorm][]\r\n- 实现基本的*CRUD*数据操作\r\n- 使用[class-validator][]验证请求数据\r\n- 更换更加快速的[fastify][]适配器\r\n- 使用[postman][]对测试接口\r\n\r\n## 安装Mysql\r\n\r\n这里我们只在macos里演示,所以使用`brew install mysql`安装,其它系统都差不多,比如我日常用的比较多的另一个系统是manjaro,直接`sudo pacman -Syy mysql`,而windows则更简单,一个phpstudy就什么都有了,安装之后使用如下命令初始化一下\r\n\r\n## 预装依赖\r\n\r\n- [lodash][]是常用的工具库\r\n- [cross-env][]用于跨平台设置环境变量\r\n- [class-transformer][]用于对请求和返回等数据进行序列化 \r\n- [class-validator][]用于验证请求`dto`等\r\n- [typeorm][]一个TS编写的[node.js][]ORM\r\n- [@nestjs/typeorm][]Nestjs的TypeOrm整合模块\r\n- [@nestjs/platform-fastify][]Fastify适配器,用于替代express\r\n- [nestjs-swagger][]生成open api文档,目前我们使用其`PartialType`函数是`UpdateDto`中的属性可选\r\n- [fastify-swagger][]生成Fastify的Open API\r\n\r\n```shell\r\n~ pnpm add class-transformer \\\r\n  @nestjs/platform-fastify \\\r\n  class-validator \\\r\n  lodash \\\r\n  @nestjs/swagger \\\r\n  fastify-swagger \\\r\n  mysql2 \\\r\n  typeorm \\\r\n  @nestjs/typeorm\r\n\r\n ~ pnpm add @types/lodash cross-env -D\r\n```\r\n\r\n## 生命周期\r\n\r\n要合理的编写应用必须事先了解清楚整个程序的访问流程,本教程会讲解如何一步步演进每一次访问流,作为第一步课时,我们的访问流非常简单,可以参考下图\r\n\r\n![](https://pic.pincman.com/media/20201109040813.png)\r\n\r\n## 文件结构\r\n\r\n我们通过整合[typeorm][]来连接mysql实现一个基本的CRUD应用,首先我们需要创建一下文件结构\r\n1. 创建模块\r\n2. 编写模型\r\n3. 编写Repository(如果有需要的话)\r\n5. 编写数据验证的DTO\r\n6. 编写服务\r\n7. 编写控制器\r\n8. 在每个以上代码各自的目录下建立一个`index.ts`并导出它们\r\n9. 在各自的`Module`里进行注册提供者,导出等\r\n10. 在`AppModule`中导入这两个模块\r\n\r\n编写好之后的目录结构如下\r\n\r\n```shell\r\n.\r\n├── app.module.ts                           # 引导模块           \r\n├── config                                  # 配置文件目录\r\n│   ├── database.config.ts                  # 数据库配置\r\n│   └── index.ts\r\n├── core                                    # 核心模块\r\n│   ├── core.module.ts\r\n│   └── index.ts\r\n├── main.ts                                 # 应用启动器\r\n├── modules\r\n│   ├── content                             # 内容模块目录\r\n│   │   ├── content.module.ts               # 内容模块\r\n│   │   ├── controllers                     # 控制器\r\n│   │   ├── dtos                            # DTO访问数据验证\r\n│   │   ├── entities                        # 数据实体模型\r\n|   |   ├── index.ts              \r\n│   │   ├── repositories                    # 自定义Repository\r\n│   │   ├── services                        # 服务\r\n│   └── user                                # 用户模块目录\r\n│       ├── index.ts\r\n│       └── user.module.ts\r\n```\r\n\r\n## 应用编码\r\n\r\n在开始编码之前需要先更改一下`package.json`和`nestjs-cli.json`两个文件\r\n\r\n在`package.json`中修改一下启动命令,以便每次启动可以自动配置运行环境并兼容`windows`环境\r\n\r\n```json\r\n&quot;prebuild&quot;: &quot;cross-env rimraf dist&quot;,\r\n&quot;start&quot;: &quot;cross-env NODE_ENV=development nest start&quot;,\r\n&quot;start:dev&quot;: &quot;cross-env NODE_ENV=development nest start --watch&quot;,\r\n&quot;start:debug&quot;: &quot;cross-env NODE_ENV=development nest start --debug --watch&quot;,\r\n&quot;start:prod&quot;: &quot;cross-env NODE_ENV=production node dist/main&quot;,\r\n```\r\n\r\n为了在每次重新编译前自动删除上次的产出,在`nestjs-cli.json`中配置` \"deleteOutDir\": true`\r\n\r\n### `main.ts`\r\n\r\n把适配器由[express][]换成更快的[fastify][],并把监听的IP改成`0.0.0.0`方便外部访问.为了在使用[class-validator][]的`DTO`类中也可以注入nestjs容器的依赖,需要添加`useContainer`\r\n\r\n```typescript\r\n// main.ts\r\nimport { NestFactory } from &#039;@nestjs/core&#039;;\r\nimport {\r\n  FastifyAdapter,\r\n  NestFastifyApplication,\r\n} from &#039;@nestjs/platform-fastify&#039;;\r\nimport { useContainer } from &#039;class-validator&#039;;\r\nimport { AppModule } from &#039;./app.module&#039;;\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create&lt;NestFastifyApplication&gt;(\r\n    AppModule,\r\n    new FastifyAdapter()\r\n  );\r\n  useContainer(app.select(AppModule), { fallbackOnErrors: true });\r\n  await app.listen(3000,&#039;0.0.0.0&#039;);\r\n}\r\nbootstrap();\r\n```\r\n### 连接配置\r\n\r\n创建一个`src/config/database.config.ts`文件\r\n\r\n```typescript\r\nexport const database: () => TypeOrmModuleOptions = () => ({\r\n    // ...\r\n    // 此处entites设置为空即可,我们直接通过在模块内部使用`forFeature`来注册模型\r\n    // 后续魔改框架的时候,我们会通过自定义的模块创建函数来重置entities,以便给自己编写的CLI使用\r\n    // 所以这个配置后面会删除\r\n    entities: [], \r\n    // 自动加载模块中注册的entity\r\n    autoLoadEntities: true,\r\n    // 可以在webpack热更新时保持连接,后续我们使用swc.js+nodemon热更新\r\n    // 所以用不到hot-reload,这个配置对于我们没作用,加不加无所谓\r\n    keepConnectionAlive: true,\r\n    // 可以在开发环境下同步entity的数据结构到数据库\r\n    // 后面教程会使用自定义的迁移命令来代替,以便在生产环境中使用,所以以后这个选项会永久false\r\n    synchronize: process.env.NODE_ENV !== \'production\',\r\n});\r\n\r\n```\r\n\r\n### `CoreModule`\r\n\r\n核心模块用于挂载一些全局类服务,比如整合[typeorm][]的``TypeormModule`\r\n\r\n**注意**: 需要添加`@Global()`装饰器使`CoreModule`中导出的服务`metadata`全局可用\r\n\r\n```typescript\r\n// src/core/core.module.ts\r\n@Global()\r\n@Module({\r\n    imports: [TypeOrmModule.forRoot(database())],\r\n})\r\nexport class CoreModule {}\r\n\r\n```\r\n\r\n在`AppModule`导入该模块\r\n\r\n```typescript\r\n// src/app.module.ts\r\n@Module({\r\n    imports: [CoreModule],\r\n  ...\r\n})\r\nexport class AppModule {}\r\n```\r\n\r\n###  `ContentModule`\r\n\r\n内容模块用于存放*CRUD*操作的逻辑代码\r\n\r\n```typescript\r\n// src/modules/content/content.module.ts\r\n@Module({})\r\nexport class ContentModule {}\r\n```\r\n\r\n在`AppModule`中注册\r\n\r\n```typescript\r\n// src/app.module.ts\r\n@Module({\r\n    imports: [CoreModule,ContentModule],\r\n  ...\r\n})\r\nexport class AppModule {}\r\n```\r\n\r\n#### 实体模型\r\n\r\n创建一个`PostEntity`用于文章数据表\r\n\r\n`PostEntity`继承``BaseEntity`,这样做是为了我们可以进行`ActiveRecord`操作,例如`PostEntity.save(post)`,因为纯`DataMapper`的方式有时候代码会显得啰嗦,具体请查看[此处](https://typeorm.io/#/active-record-data-mapper)\r\n\r\n`@CreateDateColumn`和` @UpdateDateColumn`是自动字段,会根据创建和更新数据的时间自动产生,写入后不必关注\r\n\r\n```typescript\r\n// src/modules/content/entities/post.entity.ts\r\n// &#039;content_posts&#039;是表名称\r\n@Entity(&#039;content_posts&#039;)\r\nexport class PostEntity extends BaseEntity {\r\n...\r\n    @CreateDateColumn({\r\n        comment: &#039;创建时间&#039;,\r\n    })\r\n    createdAt!: Date;\r\n\r\n    @UpdateDateColumn({\r\n        comment: &#039;更新时间&#039;,\r\n    })\r\n    updatedAt!: Date;\r\n}\r\n```\r\n\r\n#### 存储类\r\n\r\n本节存储类是一个空类,后面会添加各种操作方法\r\n\r\n```typescript\r\n// src/modules/content/repositories/post.repository.ts\r\n@EntityRepository(PostEntity)\r\nexport class PostRepository extends Repository&lt;PostEntity&gt; {}\r\n```\r\n\r\n#### 注册模型和存储类\r\n\r\n在编写好`entity`和`repository`之后我们还需要通过`Typeorm.forFeature`这个静态方法进行注册,并把存储类导出为提供者以便在其它模块注入\r\n\r\n```typescript\r\n// src/modules/content/content.module.ts\r\n@Module({\r\n    imports: [TypeOrmModule.forFeature([PostEntity, PostRepository])],\r\n    exports: [TypeOrmModule.forFeature([PostRepository])],\r\n})\r\nexport class ContentModule {}\r\n```\r\n\r\n#### DTO验证\r\n\r\n`DTO`配合管道(PIPE)用于控制器的数据验证,验证器则使用[class-validator][]\r\n\r\n> class-validator是基于validator.js的封装,所以一些规则可以通过validator.js的文档查找,后面教程中我们会编写大量的自定义的验证规则,这节先尝试基本的用法\r\n\r\n其基本的使用方法就是给`DTO`类的属性添加一个验证装饰器,如下\r\n\r\n> `groups`选项用于配置验证组\r\n\r\n```typescript\r\n// src/modules/content/dtos/create-post.dto.ts\r\n@Injectable()\r\nexport class CreatePostDto {\r\n    @MaxLength(255, {\r\n        always: true,\r\n        message: &#039;文章标题长度最大为$constraint1&#039;,\r\n    })\r\n    @IsNotEmpty({ groups: [&#039;create&#039;], message: &#039;文章标题必须填写&#039; })\r\n    @IsOptional({ groups: [&#039;update&#039;] })\r\n    title!: string;\r\n    ...\r\n}\r\n\r\n```\r\n\r\n更新验证类`UpdatePostDto`继承自`CreatePostDto`,为了使`CreatePostDto`中的属性变成可选,需要使用[@nestjs/swagger][]包中的`PartialType`方法,请查阅[此处](https://docs.nestjs.com/openapi/mapped-types)文档\r\n\r\n```typescript\r\n// src/modules/content/dtos/update-post.dto.ts\r\n@Injectable()\r\nexport class UpdatePostDto extends PartialType(CreatePostDto) {\r\n    @IsUUID(undefined, { groups: [&#039;update&#039;], message: &#039;文章ID格式错误&#039; })\r\n    @IsDefined({ groups: [&#039;update&#039;], message: &#039;文章ID必须指定&#039; })\r\n    id!: string;\r\n}\r\n\r\n```\r\n\r\n#### 服务类\r\n\r\n服务一共包括5个简单的方法,通过调用`PostRepository`来操作数据\r\n\r\n```typescript\r\n// src/modules/content/services/post.service.ts\r\n@Injectable()\r\nexport class PostService {\r\n    // 此处需要注入`PostRepository`的依赖\r\n    constructor(private postRepository: PostRepository) {}\r\n    // 查询文章列表\r\n    async findList() \r\n    // 查询一篇文章的详细信息\r\n    async findOne(id: string)\r\n    // 添加文章\r\n    async create(data: CreatePostDto)\r\n    // 更新文章\r\n    async update(data: UpdatePostDto)\r\n    // 删除文章\r\n    async delete(id: string)\r\n}\r\n\r\n```\r\n\r\n#### 控制器\r\n\r\n控制器的方法通过`@GET`,`@POST`,`@PUT`,`@PATCH`,`@Delete`等装饰器对外提供接口,并且通过注入`PostService`服务来操作数据.在控制器的方法上使用框架自带的`ValidationPipe`管道来验证请求中的`body`数据,`ParseUUIDPipe`来验证`params`数据\r\n\r\n```typescript\r\n// 控制器URL的前缀\r\n@Controller(&#039;posts&#039;)\r\nexport class PostController {\r\n    constructor(protected postService: PostService) {}\r\n\r\n    ...\r\n   // 其它方法请自行查看源码\r\n    @Get(&#039;:post&#039;)\r\n    async show(@Param(&#039;post&#039;, new ParseUUIDPipe()) post: string) {\r\n        return this.postService.findOne(post);\r\n    }\r\n\r\n    @Post()\r\n    async store(\r\n        @Body(\r\n            new ValidationPipe({\r\n                transform: true,\r\n                forbidUnknownValues: true,\r\n                validationError: { target: false },\r\n                groups: [&#039;create&#039;],\r\n            }),\r\n        )\r\n        data: CreatePostDto,\r\n    ) {\r\n        return this.postService.create(data);\r\n    }\r\n}\r\n```\r\n\r\n#### 注册控制器等\r\n\r\n- 为了后面``DTO`中可能会导入服务,需要把`DTO`,同样注册为提供者并且改造一下`main.ts`,把容器加入到`class-containter`中\r\n- `PostService`服务可能后续会被`UserModule`等其它模块使用,所以此处我们也直接导出\r\n\r\n```typescript\r\n// src/modules/content/content.module.ts\r\n@Module({\r\n    imports: [TypeOrmModule.forFeature([PostEntity, PostRepository])],\r\n    providers: [PostService, CreatePostDto, UpdatePostDto],\r\n    controllers: [PostController],\r\n    exports: [PostService, TypeOrmModule.forFeature([PostRepository])],\r\n})\r\nexport class ContentModule {}\r\n```\r\n\r\n```typescript\r\n// src/main.ts\r\n...\r\nasync function bootstrap() {\r\n    const app = await NestFactory.create&lt;NestFastifyApplication&gt;(\r\n        AppModule,\r\n        new FastifyAdapter(),\r\n    );\r\n    useContainer(app.select(AppModule), { fallbackOnErrors: true });\r\n    await app.listen(3000, &#039;0.0.0.0&#039;);\r\n}\r\n```\r\n\r\n最后启动应用在`postman`中测试接口\r\n', 47, 'https://jikexingkong.com/docs/nestjs-practices/%e5%9f%ba%e6%9c%ac%e6%95%b0%e6%8d%ae%e6%93%8d%e4%bd%9c/', 1, 'docs', '', 0),
(51, 1, '2021-10-29 14:12:19', '2021-10-29 06:12:19', '<h1>模型关联与嵌套结构</h1>\n\n<h2>学习目标</h2>\n\n这次教程在上一节的基础上实现一个简单的CMS系统,实现如下功能\n\n<ul>\n<li>文章与分类多对多关联</li>\n<li>文章与评论一对多关联</li>\n<li>分类与评论的树形无限级嵌套</li>\n</ul>\n\n<h2>文件结构</h2>\n\n这次的更改集中于<code>ContentModule</code>模块,编写好之后的目录结构如下\n\n<pre><code class=\"language-shell line-numbers\">src/modules/content\n├── content.module.ts\n├── controllers\n│   ├── category.controller.ts  \n│   ├── comment.controller.ts\n│   ├── index.ts\n│   └── post.controller.ts\n├── dtos\n│   ├── create-category.dto.ts\n│   ├── create-comment.dto.ts\n│   ├── create-post.dto.ts\n│   ├── index.ts\n│   ├── update-category.dto.ts\n│   └── update-post.dto.ts\n├── entities\n│   ├── category.entity.ts\n│   ├── comment.entity.ts\n│   ├── index.ts\n│   └── post.entity.ts\n├── index.ts\n├── repositories\n│   ├── category.repository.ts\n│   ├── index.ts\n│   └── post.repository.ts\n└── services\n    ├── category.service.ts\n    ├── comment.service.ts\n    ├── index.ts\n    └── post.service.ts\n</code></pre>\n\n<pre><code class=\"language-shell line-numbers\">cd src/modules/content &amp;&amp; \\\ntouch controllers/category.controller.ts \\\ncontrollers/comment.controller.ts \\\ndtos/create-category.dto.ts \\\ndtos/create-comment.dto.ts \\\ndtos/update-category.dto.ts \\\nentities/category.entity.ts \\\nentities/comment.entity.ts \\\nrepositories/category.repository.ts \\\nservices/category.service.ts \\\nservices/comment.service.ts \\\n&amp;&amp; cd ../../../\n</code></pre>\n\ncate m-t-m\n\npost m-t-m jointable o-t-m\n\ncomment  m-t-o nullable false odelete oupdate cascade\n\npost cascade true\n\ncate comment Tree materialized-path parent children 类型 null 类型[] @treeparent @treechildren\n\ncate treeparent ondelete set null children cascade true\n\nComment treeparent ondelete cascade children cascade true\n\n<h2>应用编码</h2>\n\n编码流程与上一节一样,entity->repository->dto->service->controller,最后注册\n\n<h3>模型类</h3>\n\n<h4>模型关联</h4>\n\n分别创建分类模型(<code>CategoryEntity</code>)和评论模型(<code>CommentEntity</code>),并和<code>PostEntity</code>进行<a class=\"wp-editor-md-post-content-link\" href=\"https://typeorm.io/#/relations\">关联</a>\n\n分类模型\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/entities/category.entity.ts\n@Entity(\'content_categories\')\nexport class CategoryEntity extends BaseEntity {\n  ...\n    // 分类与文章多对多关联\n    @ManyToMany((type) =&gt; PostEntity, (post) =&gt; post.categories)\n    posts!: PostEntity[];\n}\n</code></pre>\n\n评论模型\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/entities/comment.entity.ts\n@Entity(\'content_comments\')\nexport class CommentEntity extends BaseEntity {\n  ...\n   // 评论与文章多对一,并触发`CASCADE`\n    @ManyToOne(() =&gt; PostEntity, (post) =&gt; post.comments, {\n        nullable: false,\n        onDelete: \'CASCADE\',\n        onUpdate: \'CASCADE\',\n    })\n    post!: PostEntity;\n}\n</code></pre>\n\n文章模型\n\n<pre><code class=\"language-typescript line-numbers\">@Entity(\'content_posts\')\nexport class PostEntity extends BaseEntity {\n    // 评论数量\n    // 虚拟字段,在Repository中通过QueryBuilder设置\n    commentCount!: number;\n\n    // 文章与分类反向多对多关联\n    @ManyToMany((type) =&gt; CategoryEntity, (category) =&gt; category.posts, {\n        cascade: true,\n    })\n    @JoinTable()\n    categories!: CategoryEntity[];\n    // 文章与评论一对多关联\n    @OneToMany(() =&gt; CommentEntity, (comment) =&gt; comment.post, {\n        cascade: true,\n    })\n    comments!: CommentEntity[];\n}\n</code></pre>\n\n<h4>树形嵌套</h4>\n\n评论模型与分类模型的树形嵌套实现基本一致,唯一的区别在于在删除父分类时子分类不会删除而是提升为顶级分类,而删除评论则连带删除其后代评论\n\n<blockquote>\n  <a class=\"wp-editor-md-post-content-link\" href=\"https://typeorm.io/#/tree-entities\">typeorm</a>有三种方案实现树形嵌套模型,我们使用综合来说最好用的一种,即物理路径(Materialized Path),原因在于Adjacency list的缺点是无法一次加载整个树,而closure则无法自动触发<code>Cascade</code>\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/entities/category.entity.ts\n@Entity(\'content_categories\')\n// 物理路径嵌套树需要使用`@Tree`装饰器并以\'materialized-path\'作为参数传入\n@Tree(\'materialized-path\')\nexport class CategoryEntity extends BaseEntity {\n  ...\n    // 子分类\n    @TreeChildren({ cascade: true })\n    children!: CategoryEntity[];\n    // 父分类\n    @TreeParent({ onDelete: \'SET NULL\' })\n    parent?: CategoryEntity | null;\n}\n\n// src/modules/content/entities/comment.entity.ts\n@Entity(\'content_comments\')\n@Tree(\'materialized-path\')\nexport class CommentEntity extends BaseEntity {\n    ...\n    @TreeChildren({ cascade: true })\n    children!: CommentEntity[];\n    @TreeParent({ onDelete: \'CASCADE\' })\n    parent?: CommentEntity | null;\n}\n\n</code></pre>\n\n<h3>存储类</h3>\n\n创建一个空的<code>CategoryRepository</code>用于操作<code>CategoryEntity</code>模型\n\n<strong>注意</strong>:树形的存储类必须通过<code>getTreeRepository</code>获取或者通过<code>getCustomRepository</code>加载一个继承自<code>TreeRepository</code>的类来获取\n\n在<a href=\"https://docs.nestjs.com/\" title=\"nestjs\">nestjs</a>中注入树形模型的存储库使用以下方法\n\n<ul>\n<li>使用该模型的存储库类是继承自<code>TreeRepository</code>类的自定义类,则直接注入即可</li>\n<li>如果没有存储库类就需要在注入的使用<code>TreeRepository&lt;Entity&gt;</code>作为类型提示</li>\n</ul>\n\n<blockquote>\n  为了简单,<code>CommentRepository</code>暂时不需要创建,直接注入服务即可\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/repositories/category.repository.ts\n@EntityRepository(CategoryEntity)\nexport class CategoryRepository extends TreeRepository&lt;CategoryEntity&gt; {}\n</code></pre>\n\n修改<code>PostRepository</code>添加<code>buildBaseQuery</code>用于服务查询,代码如下\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/repositories/post.repository.ts\nbuildBaseQuery() {\n        return this.createQueryBuilder(\'post\')\n            // 加入分类关联\n            .leftJoinAndSelect(\'post.categories\', \'categories\')\n            // 建立子查询用于查询评论数量\n            .addSelect((subQuery) =&gt; {\n                return subQuery\n                    .select(\'COUNT(c.id)\', \'count\')\n                    .from(CommentEntity, \'c\')\n                    .where(\'c.post.id = post.id\');\n            }, \'commentCount\')\n            // 把评论数量赋值给虚拟字段commentCount\n            .loadRelationCountAndMap(\'post.commentCount\', \'post.comments\');\n    }\n</code></pre>\n\n<h3>DTO验证</h3>\n\nDTO类与前面的<code>CreatePostDto</code>和<code>UpdatePostDto</code>写法是一样的\n\n<blockquote>\n  评论无需更新所以没有<code>update</code>的DTO\n</blockquote>\n\n<ul>\n<li><code>create-category.dto.ts</code>用于新建分类</li>\n<li><code>update-category.dto.ts</code>用于更新分类</li>\n<li><code>create-comment.dto.ts</code>用于添加评论</li>\n</ul>\n\n在代码中可以看到我这里对分类和评论的DTO添加了一个<code>parent</code>字段用于在创建和更新时设置他们的父级\n\n<code>@Transform</code>装饰器是用于转换数据的,基于<code>class-transformer</code>这个类库实现,此处的作用在于把请求中传入的值为<code>null</code>字符串的<code>parent</code>的值转换成真实的<code>null</code>类型\n\n<code>@ValidateIf</code>的作用在于<strong>只在请求的<code>parent</code>字段不为<code>null</code>且存在值的时候进行验证</strong>,这样做的目的在于如果在更新时设置<code>parent</code>为<code>null</code>把当前分类设置为顶级分类,如果不传值则不改变\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/dtos/create-category.dto.ts\n    @IsUUID(undefined, { always: true, message: \'父分类ID格式不正确\' })\n    @ValidateIf((p) =&gt; p.parent !== null &amp;&amp; p.parent)\n    @IsOptional({ always: true })\n    @Transform(({ value }) =&gt; (value === \'null\' ? null : value))\n    parent?: string;\n</code></pre>\n\n在<code>CreatePostDto</code>中添加分类IDS验证\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/dtos/create-post.dto.ts\n   @IsUUID(undefined, { each: true, always: true, message: \'分类ID格式错误\' })\n   @IsOptional({ always: true })\n   categories?: string[];\n</code></pre>\n\n在<code>CreateCommentDto</code>中添加一个文章ID验证\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/dtos/create-comment.dto.ts\n    @IsUUID(undefined, { message: \'文章ID格式错误\' })\n    @IsDefined({ message: \'评论文章ID必须指定\' })\n    post!: string;\n</code></pre>\n\n<h3>服务类</h3>\n\n<h4><code>Category/Comment</code></h4>\n\n服务的编写基本与<code>PostService</code>一致,我们新增了以下几个服务\n\n<ul>\n<li><code>CategoryService</code>用于分类操作</li>\n<li><code>CommentService</code>用于评论操作</li>\n</ul>\n\n分类服务通过<code>TreeRepository</code>自带的<code>findTrees</code>方法可直接查询出树形结构的数据,但是此方法无法添加查询条件和排序等,所以后续章节我们需要自己添加这些\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/services/category.service.ts\nexport class CategoryService {\n    constructor(\n        private entityManager: EntityManager,\n        private categoryRepository: CategoryRepository,\n    ) {}\n\n    async findTrees() {\n        return this.categoryRepository.findTrees();\n    }\n    ...\n</code></pre>\n\n<code>getParent</code>方法用于根据请求的<code>parent</code>字段的<code>ID</code>值获取分类和评论下的父级\n\n<pre><code class=\"language-typescript line-numbers\">protected async getParent(id?: string) {\n        let parent: CommentEntity | undefined;\n        if (id !== undefined) {\n            if (id === null) return id;\n            parent = await this.commentRepository.findOne(id);\n            if (!parent) {\n                throw new NotFoundException(`Parent comment ${id} not exists!`);\n            }\n        }\n        return parent;\n    }\n</code></pre>\n\n<h4><code>PostService</code></h4>\n\n现在为了读取和操作文章与分类和评论的关联,使用<code>QueryBuilder</code>来构建查询器\n\n在此之前,在<code>core/types</code>(新增)中定义一个用于额外传入查询回调参数的方法类型\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/types.ts\n\n/**\n * 为query添加查询的回调函数接口\n */\nexport type QueryHook&lt;Entity&gt; = (\n    hookQuery: SelectQueryBuilder&lt;Entity&gt;,\n) =&gt; Promise&lt;SelectQueryBuilder&lt;Entity&gt;&gt;;\n</code></pre>\n\n<code>PostService</code>更改\n\n<blockquote>\n  对于评论的嵌套展示在后续教程会重新定义一个新的专用接口来实现\n</blockquote>\n\n<ul>\n<li><code>create</code>时通过<code>findByIds</code>为新增文章出查询关联的分类</li>\n<li><code>update</code>时通过<code>addAndRemove</code>更新文章关联的分类</li>\n<li>查询时通过<code>.buildBaseQuery().leftJoinAndSelect</code>为文章数据添加上关联的评论</li>\n</ul>\n\n<h3>控制器</h3>\n\n新增两个控制器,分别用于处理分类和评论的请求操作\n\n<h4><code>CategoryContoller</code></h4>\n\n方法与<code>PostController</code>一样,<code>index</code>,<code>show</code>,<code>store</code>,<code>update</code>,<code>destory</code>\n\n暂时直接用<code>findTrees</code>查询出树形列表即可\n\n<pre><code class=\"language-typescript line-numbers\">export class CategoryController {\n  ...\n    @Get()\n    async index() {\n        return this.categoryService.findTrees();\n    }\n}\n</code></pre>\n\n<h4><code>CommentController</code></h4>\n\n目前评论控制器只有两个方法<code>store</code>和<code>destory</code>,分别用于新增和删除评论\n\n<h3>注册代码</h3>\n\n分别在<code>entities</code>,<code>repositories</code>,<code>dtos</code>,<code>services</code>,<code>controllers</code>等目录的<code>index.ts</code>文件中导出新增代码以给<code>ContentModule</code>进行注册', '模型关联与嵌套结构', '', 'publish', 'open', 'closed', '', '%e6%a8%a1%e5%9e%8b%e5%85%b3%e8%81%94%e4%b8%8e%e5%b5%8c%e5%a5%97%e7%bb%93%e6%9e%84', '', '', '2021-11-09 21:44:15', '2021-11-09 13:44:15', '[nestjs]: https://docs.nestjs.com/	\"nestjs\"\r\n\r\n# 模型关联与嵌套结构\r\n\r\n## 学习目标\r\n\r\n这次教程在上一节的基础上实现一个简单的CMS系统,实现如下功能\r\n\r\n- 文章与分类多对多关联\r\n- 文章与评论一对多关联\r\n- 分类与评论的树形无限级嵌套\r\n\r\n##  文件结构\r\n\r\n这次的更改集中于`ContentModule`模块,编写好之后的目录结构如下\r\n\r\n```shell\r\nsrc/modules/content\r\n├── content.module.ts\r\n├── controllers\r\n│   ├── category.controller.ts  \r\n│   ├── comment.controller.ts\r\n│   ├── index.ts\r\n│   └── post.controller.ts\r\n├── dtos\r\n│   ├── create-category.dto.ts\r\n│   ├── create-comment.dto.ts\r\n│   ├── create-post.dto.ts\r\n│   ├── index.ts\r\n│   ├── update-category.dto.ts\r\n│   └── update-post.dto.ts\r\n├── entities\r\n│   ├── category.entity.ts\r\n│   ├── comment.entity.ts\r\n│   ├── index.ts\r\n│   └── post.entity.ts\r\n├── index.ts\r\n├── repositories\r\n│   ├── category.repository.ts\r\n│   ├── index.ts\r\n│   └── post.repository.ts\r\n└── services\r\n    ├── category.service.ts\r\n    ├── comment.service.ts\r\n    ├── index.ts\r\n    └── post.service.ts\r\n```\r\n\r\n```shell\r\ncd src/modules/content &amp;&amp; \\\r\ntouch controllers/category.controller.ts \\\r\ncontrollers/comment.controller.ts \\\r\ndtos/create-category.dto.ts \\\r\ndtos/create-comment.dto.ts \\\r\ndtos/update-category.dto.ts \\\r\nentities/category.entity.ts \\\r\nentities/comment.entity.ts \\\r\nrepositories/category.repository.ts \\\r\nservices/category.service.ts \\\r\nservices/comment.service.ts \\\r\n&amp;&amp; cd ../../../\r\n```\r\n\r\ncate m-t-m\r\n\r\npost m-t-m jointable o-t-m\r\n\r\ncomment  m-t-o nullable false odelete oupdate cascade\r\n\r\npost cascade true\r\n\r\ncate comment Tree materialized-path parent children 类型 null 类型[] @treeparent @treechildren\r\n\r\ncate treeparent ondelete set null children cascade true\r\n\r\nComment treeparent ondelete cascade children cascade true\r\n\r\n\r\n\r\n\r\n\r\n## 应用编码\r\n\r\n编码流程与上一节一样,entity->repository->dto->service->controller,最后注册\r\n\r\n### 模型类\r\n\r\n#### 模型关联\r\n\r\n分别创建分类模型(`CategoryEntity`)和评论模型(`CommentEntity`),并和`PostEntity`进行[关联](https://typeorm.io/#/relations)\r\n\r\n分类模型\r\n\r\n```typescript\r\n// src/modules/content/entities/category.entity.ts\r\n@Entity(&#039;content_categories&#039;)\r\nexport class CategoryEntity extends BaseEntity {\r\n  ...\r\n    // 分类与文章多对多关联\r\n    @ManyToMany((type) =&gt; PostEntity, (post) =&gt; post.categories)\r\n    posts!: PostEntity[];\r\n}\r\n```\r\n\r\n评论模型\r\n\r\n```typescript\r\n// src/modules/content/entities/comment.entity.ts\r\n@Entity(\'content_comments\')\r\nexport class CommentEntity extends BaseEntity {\r\n  ...\r\n   // 评论与文章多对一,并触发`CASCADE`\r\n    @ManyToOne(() => PostEntity, (post) => post.comments, {\r\n        nullable: false,\r\n        onDelete: \'CASCADE\',\r\n        onUpdate: \'CASCADE\',\r\n    })\r\n    post!: PostEntity;\r\n}\r\n```\r\n\r\n文章模型\r\n\r\n```typescript\r\n@Entity(\'content_posts\')\r\nexport class PostEntity extends BaseEntity {\r\n    // 评论数量\r\n    // 虚拟字段,在Repository中通过QueryBuilder设置\r\n    commentCount!: number;\r\n\r\n    // 文章与分类反向多对多关联\r\n    @ManyToMany((type) => CategoryEntity, (category) => category.posts, {\r\n        cascade: true,\r\n    })\r\n    @JoinTable()\r\n    categories!: CategoryEntity[];\r\n    // 文章与评论一对多关联\r\n    @OneToMany(() => CommentEntity, (comment) => comment.post, {\r\n        cascade: true,\r\n    })\r\n    comments!: CommentEntity[];\r\n}\r\n```\r\n\r\n#### 树形嵌套\r\n\r\n评论模型与分类模型的树形嵌套实现基本一致,唯一的区别在于在删除父分类时子分类不会删除而是提升为顶级分类,而删除评论则连带删除其后代评论\r\n\r\n> [typeorm](https://typeorm.io/#/tree-entities)有三种方案实现树形嵌套模型,我们使用综合来说最好用的一种,即物理路径(Materialized Path),原因在于Adjacency list的缺点是无法一次加载整个树,而closure则无法自动触发`Cascade`\r\n\r\n```typescript\r\n// src/modules/content/entities/category.entity.ts\r\n@Entity(\'content_categories\')\r\n// 物理路径嵌套树需要使用`@Tree`装饰器并以\'materialized-path\'作为参数传入\r\n@Tree(\'materialized-path\')\r\nexport class CategoryEntity extends BaseEntity {\r\n  ...\r\n    // 子分类\r\n    @TreeChildren({ cascade: true })\r\n    children!: CategoryEntity[];\r\n    // 父分类\r\n    @TreeParent({ onDelete: \'SET NULL\' })\r\n    parent?: CategoryEntity | null;\r\n}\r\n    \r\n// src/modules/content/entities/comment.entity.ts\r\n@Entity(\'content_comments\')\r\n@Tree(\'materialized-path\')\r\nexport class CommentEntity extends BaseEntity {\r\n    ...\r\n    @TreeChildren({ cascade: true })\r\n    children!: CommentEntity[];\r\n    @TreeParent({ onDelete: \'CASCADE\' })\r\n    parent?: CommentEntity | null;\r\n}\r\n\r\n```\r\n\r\n### 存储类\r\n\r\n创建一个空的`CategoryRepository`用于操作`CategoryEntity`模型\r\n\r\n**注意**:树形的存储类必须通过`getTreeRepository`获取或者通过`getCustomRepository`加载一个继承自`TreeRepository`的类来获取\r\n\r\n在[nestjs][]中注入树形模型的存储库使用以下方法\r\n\r\n- 使用该模型的存储库类是继承自`TreeRepository`类的自定义类,则直接注入即可\r\n- 如果没有存储库类就需要在注入的使用`TreeRepository<Entity>`作为类型提示\r\n\r\n> 为了简单,`CommentRepository`暂时不需要创建,直接注入服务即可\r\n\r\n```typescript\r\n// src/modules/content/repositories/category.repository.ts\r\n@EntityRepository(CategoryEntity)\r\nexport class CategoryRepository extends TreeRepository&lt;CategoryEntity&gt; {}\r\n```\r\n\r\n修改`PostRepository`添加`buildBaseQuery`用于服务查询,代码如下\r\n\r\n```typescript\r\n// src/modules/content/repositories/post.repository.ts\r\nbuildBaseQuery() {\r\n        return this.createQueryBuilder(&#039;post&#039;)\r\n            // 加入分类关联\r\n            .leftJoinAndSelect(&#039;post.categories&#039;, &#039;categories&#039;)\r\n            // 建立子查询用于查询评论数量\r\n            .addSelect((subQuery) =&gt; {\r\n                return subQuery\r\n                    .select(&#039;COUNT(c.id)&#039;, &#039;count&#039;)\r\n                    .from(CommentEntity, &#039;c&#039;)\r\n                    .where(&#039;c.post.id = post.id&#039;);\r\n            }, &#039;commentCount&#039;)\r\n            // 把评论数量赋值给虚拟字段commentCount\r\n            .loadRelationCountAndMap(&#039;post.commentCount&#039;, &#039;post.comments&#039;);\r\n    }\r\n```\r\n\r\n### DTO验证\r\n\r\nDTO类与前面的`CreatePostDto`和`UpdatePostDto`写法是一样的\r\n\r\n> 评论无需更新所以没有`update`的DTO\r\n\r\n- `create-category.dto.ts`用于新建分类\r\n- `update-category.dto.ts`用于更新分类\r\n- `create-comment.dto.ts`用于添加评论\r\n\r\n在代码中可以看到我这里对分类和评论的DTO添加了一个`parent`字段用于在创建和更新时设置他们的父级\r\n\r\n` @Transform`装饰器是用于转换数据的,基于`class-transformer`这个类库实现,此处的作用在于把请求中传入的值为`null`字符串的`parent`的值转换成真实的`null`类型\r\n\r\n`@ValidateIf`的作用在于**只在请求的`parent`字段不为`null`且存在值的时候进行验证**,这样做的目的在于如果在更新时设置`parent`为`null`把当前分类设置为顶级分类,如果不传值则不改变\r\n\r\n```typescript\r\n// src/modules/content/dtos/create-category.dto.ts\r\n    @IsUUID(undefined, { always: true, message: &#039;父分类ID格式不正确&#039; })\r\n    @ValidateIf((p) =&gt; p.parent !== null &amp;&amp; p.parent)\r\n    @IsOptional({ always: true })\r\n    @Transform(({ value }) =&gt; (value === &#039;null&#039; ? null : value))\r\n    parent?: string;\r\n```\r\n\r\n在`CreatePostDto`中添加分类IDS验证\r\n\r\n```typescript\r\n// src/modules/content/dtos/create-post.dto.ts\r\n   @IsUUID(undefined, { each: true, always: true, message: &#039;分类ID格式错误&#039; })\r\n   @IsOptional({ always: true })\r\n   categories?: string[];\r\n```\r\n\r\n在`CreateCommentDto`中添加一个文章ID验证\r\n\r\n```typescript\r\n// src/modules/content/dtos/create-comment.dto.ts\r\n    @IsUUID(undefined, { message: &#039;文章ID格式错误&#039; })\r\n    @IsDefined({ message: &#039;评论文章ID必须指定&#039; })\r\n    post!: string;\r\n```\r\n\r\n### 服务类\r\n\r\n#### `Category/Comment`\r\n\r\n服务的编写基本与`PostService`一致,我们新增了以下几个服务\r\n\r\n- `CategoryService`用于分类操作\r\n- `CommentService`用于评论操作\r\n\r\n分类服务通过`TreeRepository`自带的`findTrees`方法可直接查询出树形结构的数据,但是此方法无法添加查询条件和排序等,所以后续章节我们需要自己添加这些\r\n\r\n```typescript\r\n// src/modules/content/services/category.service.ts\r\nexport class CategoryService {\r\n    constructor(\r\n        private entityManager: EntityManager,\r\n        private categoryRepository: CategoryRepository,\r\n    ) {}\r\n\r\n    async findTrees() {\r\n        return this.categoryRepository.findTrees();\r\n    }\r\n    ...\r\n```\r\n\r\n`getParent`方法用于根据请求的`parent`字段的`ID`值获取分类和评论下的父级\r\n\r\n```typescript\r\nprotected async getParent(id?: string) {\r\n        let parent: CommentEntity | undefined;\r\n        if (id !== undefined) {\r\n            if (id === null) return id;\r\n            parent = await this.commentRepository.findOne(id);\r\n            if (!parent) {\r\n                throw new NotFoundException(`Parent comment ${id} not exists!`);\r\n            }\r\n        }\r\n        return parent;\r\n    }\r\n```\r\n\r\n#### `PostService`\r\n\r\n现在为了读取和操作文章与分类和评论的关联,使用`QueryBuilder`来构建查询器\r\n\r\n在此之前,在`core/types`(新增)中定义一个用于额外传入查询回调参数的方法类型\r\n\r\n```typescript\r\n// src/core/types.ts\r\n\r\n/**\r\n * 为query添加查询的回调函数接口\r\n */\r\nexport type QueryHook&lt;Entity&gt; = (\r\n    hookQuery: SelectQueryBuilder&lt;Entity&gt;,\r\n) =&gt; Promise&lt;SelectQueryBuilder&lt;Entity&gt;&gt;;\r\n```\r\n\r\n`PostService`更改\r\n\r\n> 对于评论的嵌套展示在后续教程会重新定义一个新的专用接口来实现\r\n\r\n- `create`时通过`findByIds`为新增文章出查询关联的分类\r\n- `update`时通过`addAndRemove`更新文章关联的分类\r\n- 查询时通过`.buildBaseQuery().leftJoinAndSelect`为文章数据添加上关联的评论\r\n\r\n### 控制器\r\n\r\n新增两个控制器,分别用于处理分类和评论的请求操作\r\n\r\n#### `CategoryContoller`\r\n\r\n方法与`PostController`一样,`index`,`show`,`store`,`update`,`destory`\r\n\r\n暂时直接用`findTrees`查询出树形列表即可\r\n\r\n```typescript\r\nexport class CategoryController {\r\n  ...\r\n    @Get()\r\n    async index() {\r\n        return this.categoryService.findTrees();\r\n    }\r\n}\r\n```\r\n\r\n#### `CommentController`\r\n\r\n目前评论控制器只有两个方法`store`和`destory`,分别用于新增和删除评论\r\n\r\n### 注册代码\r\n\r\n分别在`entities`,`repositories`,`dtos`,`services`,`controllers`等目录的`index.ts`文件中导出新增代码以给`ContentModule`进行注册\r\n', 47, 'https://jikexingkong.com/docs/nestjs-practices/%e6%a8%a1%e5%9e%8b%e5%85%b3%e8%81%94%e4%b8%8e%e5%b5%8c%e5%a5%97%e7%bb%93%e6%9e%84/', 2, 'docs', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(52, 1, '2021-10-29 14:12:29', '2021-10-29 06:12:29', '<h1>排序,分页与过滤</h1>\n\n<h2>学习目标</h2>\n\n<ul>\n<li>重载TreeRepository自带方法来对树形结构的数据进行扁平化处理</li>\n<li>对Typeorm查询出的数据列表进行分页处理</li>\n<li>通过请求中的query查询对数据进行筛选处理,比如排序,过滤等</li>\n<li>Typeorm 模型事件和Subscriber(订阅者)的使用</li>\n<li>使用<code>sanitize-html</code>对文章内容进行防注入攻击处理</li>\n</ul>\n\n<h2>预装依赖</h2>\n\n<ul>\n<li><a href=\"https://github.com/nestjsx/nestjs-typeorm-paginate\" title=\"nestjs-typeorm-paginate\">nestjs-typeorm-paginate</a>实现分页</li>\n<li><a href=\"https://github.com/apostrophecms/sanitize-html\" title=\"sanitize-html\">sanitize-html</a>过滤<code>html</code>标签,防注入攻击</li>\n<li><a href=\"https://github.com/TehShrike/deepmerge\" title=\"deepmerge\">deepmerge</a>深度合并对象</li>\n</ul>\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm add nestjs-typeorm-paginate sanitize-html deepmerge\n~ pnpm add @types/sanitize-html -D\n</code></pre>\n\n<h2>文件结构</h2>\n\n与上一节一样,这一节的新增和修改集中于<code>ContentModule</code>\n\n<pre><code class=\"language-shell line-numbers\">src/modules/content\n├── constants.ts\n├── content.module.ts\n├── controllers\n│   ├── category.controller.ts\n│   ├── comment.controller.ts\n│   ├── index.ts\n│   └── post.controller.ts\n├── dtos\n│   ├── create-category.dto.ts\n│   ├── create-comment.dto.ts\n│   ├── create-post.dto.ts\n│   ├── index.ts\n│   ├── query-category.dto.ts\n│   ├── query-post.dto.ts\n│   ├── update-category.dto.ts\n│   └── update-post.dto.ts\n├── entities\n│   ├── category.entity.ts\n│   ├── comment.entity.ts\n│   ├── index.ts\n│   └── post.entity.ts\n├── index.ts\n├── repositories\n│   ├── category.repository.ts\n│   ├── index.ts\n│   └── post.repository.ts\n├── services\n│   ├── category.service.ts\n│   ├── comment.service.ts\n│   ├── index.ts\n│   ├── post.service.ts\n│   └── sanitize.service.ts\n└── subscribers\n    ├── index.ts\n    └── post.subscriber.ts\n</code></pre>\n\n<h2>应用编码</h2>\n\n这节多了一个新的概念,即<code>subscriber</code>,具体请查阅<code>typeorm</code>文档,当然你也可以在模型中使用事件处理函数,效果没差别\n\n<h3>模型</h3>\n\n<h4><code>CategoryEntity</code></h4>\n\n<em>代码:src/modules/content/entities/category.entity.ts</em>\n\n<ul>\n<li>添加<code>order</code>字段用于排序</li>\n<li>添加<code>level</code>属性(虚拟字段)用于在打平树形数据的时候添加当前项的等级</li>\n</ul>\n\n<h4>PostEntity</h4>\n\n<em>代码: src/modules/content/entities/post.entity.ts</em>\n\n<blockquote>\n  在<em>typeorm 0.3.0</em>后将支持<code>addSelectAndMap</code>方法,所以之后<code>isPublished</code>字段不再需要真实存在,作为虚拟属性在查询数据的时候设置即可,目前暂时用真实字段\n</blockquote>\n\n<code>type</code>字段的类型用<code>enum</code>枚举来设置,首先需要定义一个<code>PostBodyType</code>的<code>enum</code>类型,可以添加一个<code>constants.ts</code>文件来统一定义这些<code>enum</code>和常量\n\n<ul>\n<li>添加<code>publishedAt</code>字段用于控制发布时间</li>\n<li>添加<code>isPublished</code>字段用于根据<code>publishedAt</code>设置发布状态</li>\n<li>添加<code>type</code>字段用于设置发布类型</li>\n<li>添加<code>order</code>字段用于自定义排序</li>\n</ul>\n\n<h3>存储类</h3>\n\n<h4><code>CategoryRepository</code></h4>\n\n<em>代码:  src/modules/content/repositories/category.repository.ts</em>\n\n因为<code>CategoryRepository</code>继承自<code>TreeRepository</code>,所以我们在<code>typeorm</code>源码中找到这个类,并对部分方法进行覆盖,如此我们就可以对树形分类进行排序,覆盖的方法如下\n\n<blockquote>\n  当然后面会讲到更加深入的再次封装,此处暂时先这么用\n</blockquote>\n\n<ul>\n<li><code>findRoots</code> 为根分类列表查询添加排序</li>\n<li><code>createDescendantsQueryBuilder</code> 为子孙分类查询器添加排序</li>\n<li><code>createAncestorsQueryBuilder</code> 为祖先分类查询器添加排序</li>\n</ul>\n\n<h3>DTO验证</h3>\n\n新增<code>QueryCategoryDto</code>和<code>QueryPostDto</code>用于查询分类和文章时进行分页以及过滤数据和设置排序类型等\n\n在添加<code>DTO</code>之前,现在添加几个数据转义函数,以便把请求中的字符串改成需要的数据类型\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/helpers.ts\n\n// 用于请求验证中的number数据转义\nexport function tNumber(value?: string | number): number | undefined\n// 用于请求验证中的boolean数据转义\nexport function tBoolean(value?: string | boolean): boolean | undefined\n// 用于请求验证中转义null\nexport function tNull(value?: string | null): string | null | undefined\n</code></pre>\n\n修改<code>create-category.dto.ts</code>和<code>create-comment.dto.ts</code>的<code>parent</code>字段的<code>@Transform</code>装饰器\n\n<pre><code class=\"language-typescript line-numbers\">export class CreateCategoryDto {\n...\n    @Transform(({ value }) =&gt; tNull(value))\n    parent?: string;\n}\n</code></pre>\n\n添加一个通用的<code>DTO</code>接口类型\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/types.ts\n\n// 分页验证DTO接口\nexport interface PaginateDto {\n    page: number;\n    limit: number;\n}\n</code></pre>\n\n<h4><code>QueryCategoryDto</code></h4>\n\n<em>代码: src/modules/content/dtos/query-category.dto.ts</em>\n\n<ul>\n<li><code>page</code>属性设置当前分页</li>\n<li><code>limit</code>属性设置每页数据量</li>\n</ul>\n\n<h4><code>QueryPostDto</code></h4>\n\n除了与<code>QueryCateogryDto</code>一样的分页属性外,其它属性如下\n\n<ul>\n<li><code>orderBy</code>用于设置排序类型</li>\n<li><code>isPublished</code>根据发布状态过滤文章</li>\n<li><code>category</code>过滤出一下分类及其子孙分类下的文章</li>\n</ul>\n\n<code>orderBy</code>字段是一个<code>enum</code>类型的字段,它的可取值如下\n\n<ul>\n<li><code>CREATED</code>: 根据创建时间降序</li>\n<li><code>UPDATED</code>: 根据更新时间降序</li>\n<li><code>PUBLISHED</code>: 根据发布时间降序</li>\n<li><code>COMMENTCOUNT</code>: 根据评论数量降序</li>\n<li><code>CUSTOM</code>: 根据自定义的<code>order</code>字段升序</li>\n</ul>\n\n<h3>服务类</h3>\n\n<h4><code>SanitizeService</code></h4>\n\n<em>代码: src/modules/content/services/sanitize.service.ts</em>\n\n此服务类用于<code>clean html</code>\n\n<code>sanitize</code>方法用于对HTML数据进行防注入处理\n\n<h4><code>CategoryService</code></h4>\n\n<em>代码:src/modules/content/services/category.service.ts</em>\n\n添加一个辅助函数,用于对打平后的树形数据进行分页\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/helpers.ts\nexport function manualPaginate&lt;T extends ObjectLiteral&gt;(\n    { page, limit }: PaginateDto,\n    data: T[],\n): Pagination&lt;T&gt;\n</code></pre>\n\n新增<code>paginate(query: QueryCategoryDto)</code>方法用于处理分页\n\n<pre><code class=\"language-typescript line-numbers\">async paginate(query: QueryCategoryDto) {\n    // 获取树形数据\n    const tree = await this.findTrees();\n    // 打平树形数据\n    const list = await this.categoryRepository.toFlatTrees(tree);\n    // 调用手动分页函数进行分页\n    return manualPaginate(query, list);\n}\n</code></pre>\n\n<h4><code>PostService</code></h4>\n\n<em>代码:src/modules/content/services/post.service.ts</em>\n\n<ul>\n<li><code>getListQuery</code>: 用于构建过滤与排序以及通过分类查询文章数据等功能的<code>query</code>构建器</li>\n<li><code>paginate</code>: 调用<code>getListQuery</code>生成<code>query</code>,并作为<code>nestjs-typeorm-paginate</code>的<code>paginate</code>的参数对数据进行分页</li>\n</ul>\n\n<pre><code class=\"language-typescript line-numbers\">async paginate(params: FindParams, options: IPaginationOptions) {\n    const query = await this.getListQuery(params);\n    return paginate&lt;PostEntity&gt;(query, options);\n}\n</code></pre>\n\n<h3>订阅者</h3>\n\n<h4><code>PostSubscriber</code></h4>\n\n<em>代码: src/modules/content/subscribers/post.subscriber.ts</em>\n\n<ul>\n<li><code>beforeInsert</code>(插入数据前事件): 如果在添加文章的同时发布文章,则设置当前时间为发布时间</li>\n<li><code>beforeUpdate</code>(更新数据前事件): 更改发布状态会同时更新发布时间的值,如果文章更新为未发布状态,则把发布时间设置为null</li>\n<li><code>afterLoad</code>(加载数据后事件): 对HTML类型的文章内容进行去标签处理防止注入攻击</li>\n</ul>\n\n<strong>一个需要注意的点是需要在<code>subcriber</code>类的构造函数中注入<code>Connection</code>才能获取链接</strong>\n\n<pre><code class=\"language-typescript line-numbers\">   constructor(\n        connection: Connection,\n        protected sanitizeService: SanitizeService,\n    ) {\n        connection.subscribers.push(this);\n    }\n</code></pre>\n\n<h4>注册订阅者</h4>\n\n把订阅者注册成服务后,由于在构造函数中注入了<code>connection</code>这个连接对象,所以<code>typeorm</code>会自动把它加载到这个默认连接的<code>subscribers</code>配置中\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/subscribers/post.subscriber.ts\nimport * as SubscriberMaps from \'./subscribers\';\nconst subscribers = Object.values(SubscriberMaps);\n@Module({\n    ....\n    providers: [...subscribers, ...dtos, ...services],\n})\n</code></pre>\n\n<h3>控制器</h3>\n\n<h4><code>CategoryController</code></h4>\n\n<em>代码: src/modules/content/controllers/category.controller.ts</em>\n\n<ul>\n<li><code>list</code>: 通过分页来查找扁平化的分类列表</li>\n<li><code>index</code>: 把url设置成<code>@Get(\'tree\')</code></li>\n</ul>\n\n<pre><code class=\"language-typescript line-numbers\">    @Get()\n    // 分页查询\n    async list(\n        @Query(\n            new ValidationPipe({\n                transform: true,\n                forbidUnknownValues: true,\n                validationError: { target: false },\n            }),\n        )\n        query: QueryCategoryDto,\n    ) {\n        return this.categoryService.paginate(query);\n    }\n\n    // 查询树形分类\n    @Get(\'tree\')\n    async index() {\n        return this.categoryService.findTrees();\n    }\n</code></pre>\n\n<h4><code>PostController</code></h4>\n\n<strong>代码: src/modules/content/controllers/post.controller.ts</strong>\n\n修改<code>index</code>方法用于分页查询\n\n<pre><code class=\"language-typescript line-numbers\">// 通过分页查询数据\nasync index(\n        @Query(\n            new ValidationPipe({\n                transform: true,\n                forbidUnknownValues: true,\n                validationError: { target: false },\n            }),\n        )\n        { page, limit, ...params }: QueryPostDto,\n    ) {\n        return this.postService.paginate(params, { page, limit });\n    }\n</code></pre>', '排序,分页与过滤', '', 'publish', 'open', 'closed', '', '%e6%8e%92%e5%ba%8f%e5%88%86%e9%a1%b5%e4%b8%8e%e8%bf%87%e6%bb%a4', '', '', '2021-11-09 21:44:27', '2021-11-09 13:44:27', '[nestjs-typeorm-paginate]: https://github.com/nestjsx/nestjs-typeorm-paginate \"nestjs-typeorm-paginate\"\r\n[sanitize-html]: https://github.com/apostrophecms/sanitize-html \"sanitize-html\"\r\n[deepmerge]: https://github.com/TehShrike/deepmerge \"deepmerge\"\r\n\r\n# 排序,分页与过滤\r\n\r\n## 学习目标\r\n\r\n-   重载TreeRepository自带方法来对树形结构的数据进行扁平化处理\r\n-   对Typeorm查询出的数据列表进行分页处理\r\n-   通过请求中的query查询对数据进行筛选处理,比如排序,过滤等\r\n-   Typeorm 模型事件和Subscriber(订阅者)的使用\r\n-   使用`sanitize-html`对文章内容进行防注入攻击处理\r\n\r\n## 预装依赖\r\n\r\n- [nestjs-typeorm-paginate][]实现分页\r\n- [sanitize-html][]过滤`html`标签,防注入攻击\r\n- [deepmerge][]深度合并对象\r\n\r\n```shell\r\n~ pnpm add nestjs-typeorm-paginate sanitize-html deepmerge\r\n~ pnpm add @types/sanitize-html -D\r\n```\r\n\r\n## 文件结构\r\n\r\n与上一节一样,这一节的新增和修改集中于`ContentModule`\r\n\r\n```shell\r\nsrc/modules/content\r\n├── constants.ts\r\n├── content.module.ts\r\n├── controllers\r\n│   ├── category.controller.ts\r\n│   ├── comment.controller.ts\r\n│   ├── index.ts\r\n│   └── post.controller.ts\r\n├── dtos\r\n│   ├── create-category.dto.ts\r\n│   ├── create-comment.dto.ts\r\n│   ├── create-post.dto.ts\r\n│   ├── index.ts\r\n│   ├── query-category.dto.ts\r\n│   ├── query-post.dto.ts\r\n│   ├── update-category.dto.ts\r\n│   └── update-post.dto.ts\r\n├── entities\r\n│   ├── category.entity.ts\r\n│   ├── comment.entity.ts\r\n│   ├── index.ts\r\n│   └── post.entity.ts\r\n├── index.ts\r\n├── repositories\r\n│   ├── category.repository.ts\r\n│   ├── index.ts\r\n│   └── post.repository.ts\r\n├── services\r\n│   ├── category.service.ts\r\n│   ├── comment.service.ts\r\n│   ├── index.ts\r\n│   ├── post.service.ts\r\n│   └── sanitize.service.ts\r\n└── subscribers\r\n    ├── index.ts\r\n    └── post.subscriber.ts\r\n```\r\n\r\n## 应用编码\r\n\r\n这节多了一个新的概念,即`subscriber`,具体请查阅`typeorm`文档,当然你也可以在模型中使用事件处理函数,效果没差别\r\n\r\n### 模型\r\n\r\n#### `CategoryEntity`\r\n\r\n*代码:src/modules/content/entities/category.entity.ts*\r\n\r\n- 添加`order`字段用于排序\r\n- 添加`level`属性(虚拟字段)用于在打平树形数据的时候添加当前项的等级\r\n\r\n#### PostEntity\r\n\r\n*代码: src/modules/content/entities/post.entity.ts*\r\n\r\n> 在*typeorm 0.3.0*后将支持`addSelectAndMap`方法,所以之后`isPublished`字段不再需要真实存在,作为虚拟属性在查询数据的时候设置即可,目前暂时用真实字段\r\n\r\n`type`字段的类型用`enum`枚举来设置,首先需要定义一个`PostBodyType`的`enum`类型,可以添加一个`constants.ts`文件来统一定义这些`enum`和常量\r\n\r\n- 添加`publishedAt`字段用于控制发布时间\r\n- 添加`isPublished`字段用于根据`publishedAt`设置发布状态\r\n- 添加` type`字段用于设置发布类型\r\n- 添加`order`字段用于自定义排序\r\n\r\n### 存储类\r\n\r\n#### `CategoryRepository` \r\n\r\n*代码:  src/modules/content/repositories/category.repository.ts*\r\n\r\n因为`CategoryRepository`继承自`TreeRepository`,所以我们在`typeorm`源码中找到这个类,并对部分方法进行覆盖,如此我们就可以对树形分类进行排序,覆盖的方法如下\r\n\r\n> 当然后面会讲到更加深入的再次封装,此处暂时先这么用\r\n\r\n-  `findRoots` 为根分类列表查询添加排序\r\n- `createDescendantsQueryBuilder` 为子孙分类查询器添加排序\r\n- `createAncestorsQueryBuilder` 为祖先分类查询器添加排序\r\n\r\n### DTO验证\r\n\r\n新增`QueryCategoryDto`和`QueryPostDto`用于查询分类和文章时进行分页以及过滤数据和设置排序类型等\r\n\r\n在添加`DTO`之前,现在添加几个数据转义函数,以便把请求中的字符串改成需要的数据类型\r\n\r\n```typescript\r\n// src/core/helpers.ts\r\n\r\n// 用于请求验证中的number数据转义\r\nexport function tNumber(value?: string | number): number | undefined\r\n// 用于请求验证中的boolean数据转义\r\nexport function tBoolean(value?: string | boolean): boolean | undefined\r\n// 用于请求验证中转义null\r\nexport function tNull(value?: string | null): string | null | undefined\r\n```\r\n\r\n修改`create-category.dto.ts`和`create-comment.dto.ts`的`parent`字段的`@Transform`装饰器\r\n\r\n```typescript\r\nexport class CreateCategoryDto {\r\n...\r\n    @Transform(({ value }) =&gt; tNull(value))\r\n    parent?: string;\r\n}\r\n```\r\n\r\n添加一个通用的`DTO`接口类型\r\n\r\n```typescript\r\n// src/core/types.ts\r\n\r\n// 分页验证DTO接口\r\nexport interface PaginateDto {\r\n    page: number;\r\n    limit: number;\r\n}\r\n```\r\n\r\n#### `QueryCategoryDto`\r\n\r\n*代码: src/modules/content/dtos/query-category.dto.ts*\r\n\r\n- `page`属性设置当前分页\r\n- `limit`属性设置每页数据量\r\n\r\n#### `QueryPostDto`\r\n\r\n除了与`QueryCateogryDto`一样的分页属性外,其它属性如下\r\n\r\n- `orderBy`用于设置排序类型\r\n- `isPublished`根据发布状态过滤文章\r\n- `category`过滤出一下分类及其子孙分类下的文章\r\n\r\n`orderBy`字段是一个`enum`类型的字段,它的可取值如下\r\n\r\n- `CREATED`: 根据创建时间降序\r\n- `UPDATED`: 根据更新时间降序\r\n- `PUBLISHED`: 根据发布时间降序\r\n- `COMMENTCOUNT`: 根据评论数量降序\r\n- `CUSTOM`: 根据自定义的`order`字段升序\r\n\r\n### 服务类\r\n\r\n#### `SanitizeService`\r\n\r\n*代码: src/modules/content/services/sanitize.service.ts*\r\n\r\n此服务类用于`clean html`\r\n\r\n`sanitize`方法用于对HTML数据进行防注入处理\r\n\r\n#### `CategoryService`\r\n\r\n*代码:src/modules/content/services/category.service.ts*\r\n\r\n添加一个辅助函数,用于对打平后的树形数据进行分页\r\n\r\n```typescript\r\n// src/core/helpers.ts\r\nexport function manualPaginate&lt;T extends ObjectLiteral&gt;(\r\n    { page, limit }: PaginateDto,\r\n    data: T[],\r\n): Pagination&lt;T&gt;\r\n```\r\n\r\n新增`paginate(query: QueryCategoryDto)`方法用于处理分页\r\n\r\n```typescript\r\nasync paginate(query: QueryCategoryDto) {\r\n    // 获取树形数据\r\n    const tree = await this.findTrees();\r\n    // 打平树形数据\r\n    const list = await this.categoryRepository.toFlatTrees(tree);\r\n    // 调用手动分页函数进行分页\r\n    return manualPaginate(query, list);\r\n}\r\n```\r\n\r\n#### `PostService`\r\n\r\n*代码:src/modules/content/services/post.service.ts*\r\n\r\n- `getListQuery`: 用于构建过滤与排序以及通过分类查询文章数据等功能的`query`构建器\r\n- `paginate`: 调用`getListQuery`生成`query`,并作为`nestjs-typeorm-paginate`的` paginate`的参数对数据进行分页\r\n\r\n```typescript\r\nasync paginate(params: FindParams, options: IPaginationOptions) {\r\n    const query = await this.getListQuery(params);\r\n    return paginate&lt;PostEntity&gt;(query, options);\r\n}\r\n```\r\n\r\n### 订阅者\r\n\r\n#### `PostSubscriber`\r\n\r\n*代码: src/modules/content/subscribers/post.subscriber.ts* \r\n\r\n- `beforeInsert`(插入数据前事件): 如果在添加文章的同时发布文章,则设置当前时间为发布时间\r\n- `beforeUpdate`(更新数据前事件): 更改发布状态会同时更新发布时间的值,如果文章更新为未发布状态,则把发布时间设置为null\r\n- `afterLoad`(加载数据后事件): 对HTML类型的文章内容进行去标签处理防止注入攻击\r\n\r\n**一个需要注意的点是需要在`subcriber`类的构造函数中注入`Connection`才能获取链接**\r\n\r\n```typescript\r\n   constructor(\r\n        connection: Connection,\r\n        protected sanitizeService: SanitizeService,\r\n    ) {\r\n        connection.subscribers.push(this);\r\n    }\r\n```\r\n\r\n#### 注册订阅者\r\n\r\n把订阅者注册成服务后,由于在构造函数中注入了`connection`这个连接对象,所以`typeorm`会自动把它加载到这个默认连接的`subscribers`配置中\r\n\r\n```typescript\r\n// src/modules/content/subscribers/post.subscriber.ts\r\nimport * as SubscriberMaps from &#039;./subscribers&#039;;\r\nconst subscribers = Object.values(SubscriberMaps);\r\n@Module({\r\n    ....\r\n    providers: [...subscribers, ...dtos, ...services],\r\n})\r\n```\r\n\r\n### 控制器\r\n\r\n#### `CategoryController`\r\n\r\n*代码: src/modules/content/controllers/category.controller.ts*\r\n\r\n- `list`: 通过分页来查找扁平化的分类列表\r\n- `index`: 把url设置成` @Get(\'tree\')`\r\n\r\n```typescript\r\n    @Get()\r\n    // 分页查询\r\n    async list(\r\n        @Query(\r\n            new ValidationPipe({\r\n                transform: true,\r\n                forbidUnknownValues: true,\r\n                validationError: { target: false },\r\n            }),\r\n        )\r\n        query: QueryCategoryDto,\r\n    ) {\r\n        return this.categoryService.paginate(query);\r\n    }\r\n\r\n    // 查询树形分类\r\n    @Get(&#039;tree&#039;)\r\n    async index() {\r\n        return this.categoryService.findTrees();\r\n    }\r\n```\r\n\r\n#### `PostController`\r\n\r\n**代码: src/modules/content/controllers/post.controller.ts**\r\n\r\n修改`index`方法用于分页查询\r\n\r\n```typescript\r\n// 通过分页查询数据\r\nasync index(\r\n        @Query(\r\n            new ValidationPipe({\r\n                transform: true,\r\n                forbidUnknownValues: true,\r\n                validationError: { target: false },\r\n            }),\r\n        )\r\n        { page, limit, ...params }: QueryPostDto,\r\n    ) {\r\n        return this.postService.paginate(params, { page, limit });\r\n    }\r\n```\r\n', 47, 'https://jikexingkong.com/docs/nestjs-practices/%e6%8e%92%e5%ba%8f%e5%88%86%e9%a1%b5%e4%b8%8e%e8%bf%87%e6%bb%a4/', 3, 'docs', '', 0),
(53, 1, '2021-10-29 14:12:35', '2021-10-29 06:12:35', '<h1>自动验证,序列化与异常处理</h1>\n\n<h2>学习目标</h2>\n\n<ul>\n<li>全局自动数据验证管道</li>\n<li>全局数据序列化拦截器</li>\n<li>全局异常处理过滤器</li>\n</ul>\n\n<h2>文件结构</h2>\n\n本节内容主要聚焦于<code>CoreModule</code>\n\n<pre><code class=\"language-shell line-numbers\">src/core\n├── constants.ts\n├── core.module.ts\n├── decorators\n│   ├── dto-validation.decorator.ts\n│   └── index.ts\n├── helpers.ts\n├── index.ts\n├── providers\n│   ├── app.filter.ts\n│   ├── app.interceptor.ts\n│   ├── app.pipe.ts\n│   └── index.ts\n└── types.ts\n</code></pre>\n\n<h2>应用编码</h2>\n\n本节中用到一个新的<code>Typescript</code>知识点-自定义装饰器和<code>matedata</code>,详细使用请查看我写的一篇相关文章\n\n<h3>装饰器</h3>\n\n添加一个用于为<code>Dto</code>构造<code>metadata</code>数据的装饰器\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/decorators/dto-validation.decorator.ts\nexport const DtoValidation = (\n    options?: ValidatorOptions &amp; {\n        transformOptions?: ClassTransformOptions;\n    } &amp; { type?: Paramtype },\n) =&gt; SetMetadata(DTO_VALIDATION_OPTIONS, options ?? {});\n</code></pre>\n\n<h3>验证管道</h3>\n\n自定义一个全局的验证管道(继承自<code>Nestjs</code>自带的<code>ValidationPipe</code>管道)\n\n<em>代码: src/core/providers/app.pipe.ts</em>\n\n大致验证流程如下\n\n<ol>\n<li>获取要验证的dto类</li>\n<li>获取<code>Dto</code>自定义的<code>matadata</code>数据(通过上面的装饰器定义)</li>\n<li>合并默认验证选项(通过在<code>CoreModule</code>注册管道时定义)与<code>matadata</code></li>\n<li>根据DTO类上设置的type来设置当前的DTO请求类型(\'body\' | \'query\' | \'param\' | \'custom\')</li>\n<li>如果被验证的DTO设置的请求类型与被验证的数据的请求类型不是同一种类型则跳过此管道</li>\n<li>合并当前transform选项和自定义选项(验证后的数据使用class-transfomer`序列化)</li>\n<li>如果dto类的中存在transform静态方法,则返回调用进一步transform之后的结果</li>\n<li>重置验证选项和transform选项为默认</li>\n</ol>\n\n<h3>序列化拦截器</h3>\n\n默认的序列化拦截器是无法对分页数据进行处理的,所以自定义的全局序列化拦截器类重写<code>serialize</code>方法,以便对分页数据进行拦截并序列化\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/providers/app.interceptor.ts\nserialize(\n        response: PlainLiteralObject | Array&lt;PlainLiteralObject&gt;,\n        options: ClassTransformOptions,\n    ): PlainLiteralObject | PlainLiteralObject[] {\n        const isArray = Array.isArray(response);\n        if (!isObject(response) &amp;&amp; !isArray) return response;\n        // 如果是响应数据是数组,则遍历对每一项进行序列化\n        if (isArray) {\n            return (response as PlainLiteralObject[]).map((item) =&gt;\n                this.transformToPlain(item, options),\n            );\n        }\n        // 如果是分页数据,则对items中的每一项进行序列化\n        if (\n            \'meta\' in response &amp;&amp;\n            \'items\' in response &amp;&amp;\n            Array.isArray(response.items)\n        ) {\n            return {\n                ...response,\n                items: (response.items as PlainLiteralObject[]).map((item) =&gt;\n                    this.transformToPlain(item, options),\n                ),\n            };\n        }\n        // 如果响应是个对象则直接序列化\n        return this.transformToPlain(response, options);\n    }\n</code></pre>\n\n<h3>异常处理过滤器</h3>\n\nTypeorm在找不到模型数据时会抛出<code>EntityNotFound</code>的异常,而此异常不会被捕获进行处理,以至于直接抛出<code>500</code>错误,一般在数据找不到时我们需要抛出的是<code>404</code>异常,所以需要定义一个全局异常处理的过滤器来进行捕获并处理.\n\n全局的异常处理过滤器继承自Nestjs自带的<code>BaseExceptionFilter</code>,在自定义的类中定义一个对象属性,并复写<code>catch</code>方法以根据此属性中不同的异常进行判断处理\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/providers/app.filter.ts\nprotected resExceptions: Array&lt;\n        { class: Type&lt;Error&gt;; status?: number } | Type&lt;Error&gt;\n    &gt; = [{ class: EntityNotFoundError, status: HttpStatus.NOT_FOUND }];\ncatch(exception: T, host: ArgumentsHost) {...}\n\n</code></pre>\n\n<h3>注册全局</h3>\n\n在<code>CoreModule</code>中分别为全局的验证管道,序列化拦截器和异常处理过滤器进行注册\n\n<blockquote>\n  在注册全局管道验证时传入默认参数\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/core.module.ts\nproviders: [\n        {\n            provide: APP_PIPE,\n            useFactory: () =&gt;\n                new AppPipe({\n                    transform: true,\n                    forbidUnknownValues: true,\n                    validationError: { target: false },\n                }),\n        },\n        {\n            provide: APP_FILTER,\n            useClass: AppFilter,\n        },\n        {\n            provide: APP_INTERCEPTOR,\n            useClass: AppIntercepter,\n        },\n    ],\n})\n</code></pre>\n\n<h3>逻辑代码</h3>\n\n<ul>\n<li>对于验证器需要修改<code>Dto</code>和<code>Controller</code></li>\n<li>对于拦截器需要修改<code>Entity</code>和<code>Controller</code></li>\n<li>对于过滤器需要修改<code>Service</code></li>\n</ul>\n\n<h4>自动序列化</h4>\n\n以<code>PostEntity</code>为例,比如在显示文章列表数据的时候为了减少数据量不需要显示<code>body</code>内容,而单独访问一篇文章的时候则需要,这时候可以添加添加一个序列化组<code>post-detail</code>,而为了确定每个模型的字段在读取数据时只显示我们需要的,所以在类前添加一个<code>@Exclude</code>装饰器\n\n<blockquote>\n  对于对象类型需要通过<code>@Type</code>装饰器的字段转义\n</blockquote>\n\n示例\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/entities/post.entity.ts\n    ...\n    @Expose()\n    @Type(() =&gt; Date)\n    @CreateDateColumn({\n        comment: \'创建时间\',\n    })\n    createdAt!: Date;\n    @Expose()\n    @Type(() =&gt; CategoryEntity)\n    @ManyToMany((type) =&gt; CategoryEntity, (category) =&gt; category.posts, {\n        cascade: true,\n    })\n    @JoinTable()\n    categories!: CategoryEntity[];\n    @Expose({ groups: [\'post-detail\'] })\n    @Column({ comment: \'文章内容\', type: \'longtext\' })\n    body!: string;\n</code></pre>\n\n然后可以在在控制器中针对有特殊配置的序列化添加<code>@SerializeOptions</code>装饰器,如序列化组\n\n示例\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/controllers/post.controller.ts\n    ...\n    @Get(\':post\')\n    @SerializeOptions({ groups: [\'post-detail\'] })\n    async show(\n        @Param(\'post\', new ParseUUIDEntityPipe(PostEntity))\n        post: string,\n    ) {\n        return this.postService.detail(post);\n    }\n\n</code></pre>\n\n<h4>自动验证</h4>\n\n为了代码简洁,把所有针对同一模型的<code>DTO</code>类全部放入一个文件,于是有了以下2个<code>dto</code>文件\n\n<ul>\n<li><code>src/modules/content/dtos/category.dto.ts</code></li>\n<li><code>src/modules/content/dtos/post.dto.ts</code></li>\n</ul>\n\n为<code>dto</code>文件中需要传入自定义验证参数的类添加<code>@DtoValidation</code>装饰器,比如<code>@DtoValidation({ groups: [\'create\'] })</code>\n\n注意的是默认的<code>paramType</code>为<code>body</code>,所以对于<code>query</code>,需要额外加上<code>type: \'query\'</code>\n\n示例\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/dtos/category.dto.ts\n@Injectable()\n@DtoValidation({ type: \'query\' })\nexport class QueryCategoryDto implements PaginateDto {\n...\n}\n</code></pre>\n\n现在可以在控制器中删除所有的<code>new ValidatePipe(...)</code>代码了,因为全局验证管道会自行处理\n\n<h4>自动处理异常</h4>\n\n现在把服务中的<code>findOne</code>等查询全部改成<code>findOneOrFail</code>等,把抛出的<code>NotFoundError</code>这些异常去除就可以在typeorm抛出默认的<code>EntityNotFound</code>异常时就会响应<code>404</code>\n\n示例\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/services/post.service.ts\n    async findOne(id: string) {\n        const query = await this.getItemQuery();\n        const item = await query.where(\'post.id = :id\', { id }).getOne();\n        if (!item)\n            throw new EntityNotFoundError(PostEntity, `Post ${id} not exists!`);\n        return item;\n    }\n</code></pre>', '自动验证,序列化与异常处理', '', 'publish', 'open', 'closed', '', '%e8%87%aa%e5%8a%a8%e9%aa%8c%e8%af%81%e5%ba%8f%e5%88%97%e5%8c%96%e4%b8%8e%e5%bc%82%e5%b8%b8%e5%a4%84%e7%90%86', '', '', '2021-11-09 21:44:40', '2021-11-09 13:44:40', '# 自动验证,序列化与异常处理\r\n\r\n## 学习目标\r\n\r\n- 全局自动数据验证管道\r\n- 全局数据序列化拦截器\r\n- 全局异常处理过滤器\r\n\r\n## 文件结构\r\n\r\n本节内容主要聚焦于`CoreModule`\r\n\r\n```shell\r\nsrc/core\r\n├── constants.ts\r\n├── core.module.ts\r\n├── decorators\r\n│   ├── dto-validation.decorator.ts\r\n│   └── index.ts\r\n├── helpers.ts\r\n├── index.ts\r\n├── providers\r\n│   ├── app.filter.ts\r\n│   ├── app.interceptor.ts\r\n│   ├── app.pipe.ts\r\n│   └── index.ts\r\n└── types.ts\r\n```\r\n\r\n## 应用编码\r\n\r\n本节中用到一个新的`Typescript`知识点-自定义装饰器和`matedata`,详细使用请查看我写的一篇相关文章\r\n\r\n### 装饰器\r\n\r\n添加一个用于为`Dto`构造`metadata`数据的装饰器\r\n\r\n```typescript\r\n// src/core/decorators/dto-validation.decorator.ts\r\nexport const DtoValidation = (\r\n    options?: ValidatorOptions &amp; {\r\n        transformOptions?: ClassTransformOptions;\r\n    } &amp; { type?: Paramtype },\r\n) =&gt; SetMetadata(DTO_VALIDATION_OPTIONS, options ?? {});\r\n```\r\n\r\n### 验证管道\r\n\r\n自定义一个全局的验证管道(继承自`Nestjs`自带的`ValidationPipe`管道)\r\n\r\n*代码: src/core/providers/app.pipe.ts*\r\n\r\n大致验证流程如下\r\n\r\n1. 获取要验证的dto类\r\n2. 获取`Dto`自定义的`matadata`数据(通过上面的装饰器定义)\r\n3. 合并默认验证选项(通过在`CoreModule`注册管道时定义)与`matadata`\r\n4. 根据DTO类上设置的type来设置当前的DTO请求类型(\'body\' | \'query\' | \'param\' | \'custom\')\r\n5. 如果被验证的DTO设置的请求类型与被验证的数据的请求类型不是同一种类型则跳过此管道\r\n6. 合并当前transform选项和自定义选项(验证后的数据使用class-transfomer`序列化)\r\n7. 如果dto类的中存在transform静态方法,则返回调用进一步transform之后的结果\r\n8. 重置验证选项和transform选项为默认\r\n\r\n### 序列化拦截器\r\n\r\n默认的序列化拦截器是无法对分页数据进行处理的,所以自定义的全局序列化拦截器类重写`serialize`方法,以便对分页数据进行拦截并序列化\r\n\r\n```typescript\r\n// src/core/providers/app.interceptor.ts\r\nserialize(\r\n        response: PlainLiteralObject | Array&lt;PlainLiteralObject&gt;,\r\n        options: ClassTransformOptions,\r\n    ): PlainLiteralObject | PlainLiteralObject[] {\r\n        const isArray = Array.isArray(response);\r\n        if (!isObject(response) &amp;&amp; !isArray) return response;\r\n        // 如果是响应数据是数组,则遍历对每一项进行序列化\r\n        if (isArray) {\r\n            return (response as PlainLiteralObject[]).map((item) =&gt;\r\n                this.transformToPlain(item, options),\r\n            );\r\n        }\r\n        // 如果是分页数据,则对items中的每一项进行序列化\r\n        if (\r\n            &#039;meta&#039; in response &amp;&amp;\r\n            &#039;items&#039; in response &amp;&amp;\r\n            Array.isArray(response.items)\r\n        ) {\r\n            return {\r\n                ...response,\r\n                items: (response.items as PlainLiteralObject[]).map((item) =&gt;\r\n                    this.transformToPlain(item, options),\r\n                ),\r\n            };\r\n        }\r\n        // 如果响应是个对象则直接序列化\r\n        return this.transformToPlain(response, options);\r\n    }\r\n```\r\n\r\n### 异常处理过滤器\r\n\r\nTypeorm在找不到模型数据时会抛出`EntityNotFound`的异常,而此异常不会被捕获进行处理,以至于直接抛出`500`错误,一般在数据找不到时我们需要抛出的是`404`异常,所以需要定义一个全局异常处理的过滤器来进行捕获并处理.\r\n\r\n全局的异常处理过滤器继承自Nestjs自带的`BaseExceptionFilter`,在自定义的类中定义一个对象属性,并复写`catch`方法以根据此属性中不同的异常进行判断处理\r\n\r\n```typescript\r\n// src/core/providers/app.filter.ts\r\nprotected resExceptions: Array&lt;\r\n        { class: Type&lt;Error&gt;; status?: number } | Type&lt;Error&gt;\r\n    &gt; = [{ class: EntityNotFoundError, status: HttpStatus.NOT_FOUND }];\r\ncatch(exception: T, host: ArgumentsHost) {...}\r\n\r\n```\r\n\r\n### 注册全局\r\n\r\n在`CoreModule`中分别为全局的验证管道,序列化拦截器和异常处理过滤器进行注册\r\n\r\n> 在注册全局管道验证时传入默认参数\r\n\r\n```typescript\r\n// src/core/core.module.ts\r\nproviders: [\r\n        {\r\n            provide: APP_PIPE,\r\n            useFactory: () =&gt;\r\n                new AppPipe({\r\n                    transform: true,\r\n                    forbidUnknownValues: true,\r\n                    validationError: { target: false },\r\n                }),\r\n        },\r\n        {\r\n            provide: APP_FILTER,\r\n            useClass: AppFilter,\r\n        },\r\n        {\r\n            provide: APP_INTERCEPTOR,\r\n            useClass: AppIntercepter,\r\n        },\r\n    ],\r\n})\r\n```\r\n\r\n### 逻辑代码\r\n\r\n- 对于验证器需要修改`Dto`和`Controller`\r\n- 对于拦截器需要修改`Entity`和`Controller`\r\n- 对于过滤器需要修改`Service`\r\n\r\n#### 自动序列化\r\n\r\n以`PostEntity`为例,比如在显示文章列表数据的时候为了减少数据量不需要显示`body`内容,而单独访问一篇文章的时候则需要,这时候可以添加添加一个序列化组`post-detail`,而为了确定每个模型的字段在读取数据时只显示我们需要的,所以在类前添加一个`@Exclude`装饰器\r\n\r\n> 对于对象类型需要通过`@Type`装饰器的字段转义\r\n\r\n示例\r\n\r\n```typescript\r\n// src/modules/content/entities/post.entity.ts\r\n    ...\r\n    @Expose()\r\n    @Type(() =&gt; Date)\r\n    @CreateDateColumn({\r\n        comment: &#039;创建时间&#039;,\r\n    })\r\n    createdAt!: Date;\r\n    @Expose()\r\n    @Type(() =&gt; CategoryEntity)\r\n    @ManyToMany((type) =&gt; CategoryEntity, (category) =&gt; category.posts, {\r\n        cascade: true,\r\n    })\r\n    @JoinTable()\r\n    categories!: CategoryEntity[];\r\n    @Expose({ groups: [&#039;post-detail&#039;] })\r\n    @Column({ comment: &#039;文章内容&#039;, type: &#039;longtext&#039; })\r\n    body!: string;\r\n```\r\n\r\n然后可以在在控制器中针对有特殊配置的序列化添加`@SerializeOptions`装饰器,如序列化组\r\n\r\n示例\r\n\r\n```typescript\r\n// src/modules/content/controllers/post.controller.ts\r\n    ...\r\n    @Get(&#039;:post&#039;)\r\n    @SerializeOptions({ groups: [&#039;post-detail&#039;] })\r\n    async show(\r\n        @Param(&#039;post&#039;, new ParseUUIDEntityPipe(PostEntity))\r\n        post: string,\r\n    ) {\r\n        return this.postService.detail(post);\r\n    }\r\n\r\n```\r\n\r\n#### 自动验证\r\n\r\n为了代码简洁,把所有针对同一模型的`DTO`类全部放入一个文件,于是有了以下2个`dto`文件\r\n\r\n- `src/modules/content/dtos/category.dto.ts`\r\n- `src/modules/content/dtos/post.dto.ts`\r\n\r\n为`dto`文件中需要传入自定义验证参数的类添加`@DtoValidation`装饰器,比如`@DtoValidation({ groups: [\'create\'] })`\r\n\r\n注意的是默认的`paramType`为`body`,所以对于`query`,需要额外加上`type: \'query\'`\r\n\r\n示例\r\n\r\n```typescript\r\n// src/modules/content/dtos/category.dto.ts\r\n@Injectable()\r\n@DtoValidation({ type: &#039;query&#039; })\r\nexport class QueryCategoryDto implements PaginateDto {\r\n...\r\n}\r\n```\r\n\r\n现在可以在控制器中删除所有的`new ValidatePipe(...)`代码了,因为全局验证管道会自行处理\r\n\r\n#### 自动处理异常\r\n\r\n现在把服务中的`findOne`等查询全部改成`findOneOrFail`等,把抛出的`NotFoundError`这些异常去除就可以在typeorm抛出默认的`EntityNotFound`异常时就会响应`404`\r\n\r\n示例\r\n\r\n```typescript\r\n// src/modules/content/services/post.service.ts\r\n    async findOne(id: string) {\r\n        const query = await this.getItemQuery();\r\n        const item = await query.where(\'post.id = :id\', { id }).getOne();\r\n        if (!item)\r\n            throw new EntityNotFoundError(PostEntity, `Post ${id} not exists!`);\r\n        return item;\r\n    }\r\n```\r\n\r\n', 47, 'https://jikexingkong.com/docs/nestjs-practices/%e8%87%aa%e5%8a%a8%e9%aa%8c%e8%af%81%e5%ba%8f%e5%88%97%e5%8c%96%e4%b8%8e%e5%bc%82%e5%b8%b8%e5%a4%84%e7%90%86/', 4, 'docs', '', 0),
(54, 1, '2021-10-29 14:12:43', '2021-10-29 06:12:43', '<h1>简化数据操作代码</h1>\n\n<h2>学习目标</h2>\n\n<ul>\n<li>学会抽象代码,减少重复工作</li>\n</ul>\n\n<h2>文件结构</h2>\n\n本节内容仍然主要聚焦于<code>CoreModule</code>\n\n<pre><code class=\"language-shell line-numbers\">src/core\n├── base\n│   ├── data.service.ts\n│   ├── index.ts\n│   ├── repository.ts\n│   ├── subscriber.ts\n│   └── tree.repository.ts\n├── constants.ts\n├── core.module.ts\n├── decorators\n│   ├── dto-validation.decorator.ts\n│   └── index.ts\n├── helpers.ts\n├── index.ts\n├── providers\n│   ├── app.filter.ts\n│   ├── app.interceptor.ts\n│   ├── app.pipe.ts\n│   └── index.ts\n└── types.ts\n</code></pre>\n\n<h2>应用编码</h2>\n\n<h3>核心代码</h3>\n\n<h4><code>BaseRepository</code></h4>\n\n这是一个通用的基础存储类,继承自自带的<code>Repository</code>类\n\n<ul>\n<li><code>queryName</code>属性是一个抽象属性,在子类中设置,用于在构建查询时提供默认模型的查询名称</li>\n<li><code>buildBaseQuery</code>方法用于构建基础查询</li>\n<li><code>getQueryName</code>方法用于获取<code>queryName</code></li>\n</ul>\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/base/repository.ts\nexport abstract class BaseRepository&lt;\n    Entity extends ObjectLiteral,\n&gt; extends Repository&lt;Entity&gt; {\n    protected abstract queryName: string;\n    buildBaseQuery(): SelectQueryBuilder&lt;Entity&gt;\n    getQueryName():string\n}\n\n</code></pre>\n\n<h4><code>TreeRepository</code></h4>\n\n默认的<code>TreeRepository</code>基类的方法如<code>findRoots</code>等无法在<code>QueryBuilder</code>中实现排序,自定义<code>query</code>函数等,所以创建一个继承自默认基类的新的<code>TreeRepository</code>来实现\n\n在实现此类之前先添加如下类型\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/types.ts\n/**\n * 排序类型,{字段名称: 排序方法}\n * 如果多个值则传入数组即可\n * 排序方法不设置,默认DESC\n */\ntype OrderQueryType =\n    | string\n    | { name: string; order: \'DESC\' | \'ASC\' }\n    | Array&lt;{ name: string; order: \'DESC\' | \'ASC\' } | string&gt;;\n/**\n * 查询参数\n * orderBy: 排序类型\n * getQuery: 查询回调,可以在这个函数中添加自定义查询\n */\ntype TreeQueryParam&lt;E&gt; = {\n    getQuery?: (query: SelectQueryBuilder&lt;E&gt;) =&gt; SelectQueryBuilder&lt;E&gt;;\n    orderBy?: OrderQueryType;\n};\n</code></pre>\n\n<code>TreeRepository</code>包含<code>BaseRepository</code>的<code>queryName</code>等所有属性和方法\n\n其余属性及方法列如下\n\n<blockquote>\n  如果<code>params</code>中不传<code>orderBy</code>则使用<code>this.orderBy</code>属性\n</blockquote>\n\n<ul>\n<li><code>findTree</code>: 为<code>findTrees</code>添加添加参数</li>\n<li><code>findRts</code>: 为<code>findRoots</code>列表查询添加条件参数</li>\n<li><code>findDts</code>: 为<code>findDescendants</code>添加条件参数</li>\n<li><code>findDtsTree</code>: 为<code>findDescendantsTree</code>添加条件参数</li>\n<li><code>countDts</code>: 为<code>countDescendants</code>添加条件参数</li>\n<li><code>createDtsQueryBuilder</code>: 为<code>createDescendantsQueryBuilder</code>添加条件参数</li>\n<li><code>findAts</code>,<code>findAtsTree</code>,<code>countAts</code>,<code>createAtsQueryBuilder</code>与<code>DTS</code>的方法类似,都是为对应的原方法添加条件查询参数</li>\n<li><code>toFlatTrees</code>: 打平并展开树</li>\n<li><code>getOrderByQuery</code>: 根据<code>orderBy</code>属性生成排序的query</li>\n</ul>\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/base/base.repository.ts\nexport abstract class BaseTreeRepository&lt;\n    E extends ObjectLiteral,\n&gt; extends TreeRepository&lt;E&gt; {\n    // 自定义排序规则,如果没有设置则(entity中有`order`字段则使用`order`字段,否则不排序)\n    protected orderBy?: string | { name: string; order: \'DESC\' | \'ASC\' };\n    buildBaseQuery(): SelectQueryBuilder&lt;E&gt;\n    getQueryName()\n    // 查询树\n    async findTree(params: TreeQueryParam&lt;E&gt; = {}): Promise&lt;E[]&gt;\n    // 查询顶层列表\n    findRts(params: TreeQueryParam&lt;E&gt; = {}): Promise&lt;E[]&gt;\n    // 查询后代列表\n    findDts(entity: E, params: TreeQueryParam&lt;E&gt; = {}): Promise&lt;E[]&gt;\n    // 查询后代树\n    findDtsTree(entity: E, params: TreeQueryParam&lt;E&gt; = {}): Promise&lt;E&gt; \n    // 查询后代数量\n    countDts(entity: E, params: TreeQueryParam&lt;E&gt; = {}): Promise&lt;number&gt;\n    // 创建后代查询器\n    createDtsQueryBuilder(\n        alias: string,\n        closureTableAlias: string,\n        entity: E,\n        params: TreeQueryParam&lt;E&gt; = {},\n    ): SelectQueryBuilder&lt;E&gt;\n    // 查询祖先列表\n    findAts(entity: E, params: TreeQueryParam&lt;E&gt; = {}): Promise&lt;E[]&gt; \n    //  查询祖先树\n    findAtsTree(entity: E, params: TreeQueryParam&lt;E&gt; = {}): Promise&lt;E&gt;\n    // 查询祖先数量\n    countAts(entity: E, params: TreeQueryParam&lt;E&gt; = {}): Promise&lt;number&gt;\n    // 创建祖先查询器\n    createAtsQueryBuilder(\n        alias: string,\n        closureTableAlias: string,\n        entity: E,\n        params: TreeQueryParam&lt;E&gt; = {},\n    ): SelectQueryBuilder&lt;E&gt;\n    // 打平并展开树\n    async toFlatTrees(trees: E[], level = 0): Promise&lt;E[]&gt;\n    // 生成排序的query\n    protected getOrderByQuery(\n        query: SelectQueryBuilder&lt;E&gt;,\n        alias: string,\n        orderBy?: OrderQueryType,\n    )\n}\n</code></pre>\n\n<h4><code>BaseSubscriber</code></h4>\n\n添加一个<code>SubcriberSetting</code>类型用于添加设置\n\n<pre><code class=\"language-typescript line-numbers\">export type SubcriberSetting = {\n    // 监听的模型是否为树模型\n    tree?: boolean;\n};\n</code></pre>\n\n在构造函数中根据传入的参数设置连接,并在连接中加入当前订阅者,以及构建默认的<code>repository</code>等\n\n实现如下\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/base/subscriber.ts\n@EventSubscriber()\nexport abstract class BaseSubscriber&lt;E extends ObjectLiteral&gt;\n    implements EntitySubscriberInterface&lt;E&gt;\n{\n...\n\n    constructor(connection: Connection, repository?: Type&lt;SubscriberRepo&lt;E&gt;&gt;) {\n        this.connection = connection;\n        this.connection.subscribers.push(this);\n        this.em = this.connection.manager;\n        this.setRepository(repository);\n        if (!this.setting) this.setting = {};\n    }\n    listenTo()\n    async afterLoad(entity: any) {\n        // 是否启用树形\n        if (this.setting.tree &amp;&amp; !entity.level) entity.level = 0;\n    }\n    protected setRepository(repository?: Type&lt;SubscriberRepo&lt;E&gt;&gt;) \n    // 判断某个属性是否被更新\n    protected isUpdated(cloumn: keyof E, event: UpdateEvent&lt;E&gt;) \n}\n\n</code></pre>\n\n<h4><code>DataService</code></h4>\n\n此类目的在于封装和简化一些常用的数据操作\n\n更改<code>PaginateDto</code>使它支持泛型参数传入\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/types.ts\nexport interface PaginateDto&lt;C extends IPaginationMeta = IPaginationMeta&gt;\n    extends Omit&lt;IPaginationOptions&lt;C&gt;, \'page\' | \'limit\'&gt; {\n    page: number;\n    limit: number;\n}\n</code></pre>\n\n对于<code>create</code>和<code>update</code>方法因为子类需要变化的地方比较多,所以直接交给子类去实现,如果子类没有实现则直接抛出<code>403</code>异常.<code>repository</code>属性则在子类中必须被定义,可使用依赖直接注入\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/base/data.service.ts\nexport abstract class BaseDataService&lt;\n    E extends ObjectLiteral,\n    P extends Record&lt;string, any&gt; = {},\n    M extends IPaginationMeta = IPaginationMeta,\n&gt; {\n    // 服务默认存储类\n    protected abstract repository: BaseRepository&lt;E&gt; | BaseTreeRepository&lt;E&gt;;\n    // 获取数据列表\n    async list(params?: P, callback?: QueryHook&lt;E&gt;): Promise&lt;E[]&gt;\n    // 获取分页数据\n    async paginate(\n        options: PaginateDto&lt;M&gt;,\n        params?: P,\n        callback?: QueryHook&lt;E&gt;,\n    ): Promise&lt;Pagination&lt;E, M&gt;&gt;\n    // 获取数据详情\n    async detail(id: string, callback?: QueryHook&lt;E&gt;): Promise&lt;E&gt;\n    // 创建数据,如果子类没有实现则抛出404\n    create(data: any): Promise&lt;E&gt;\n    // 更新数据,如果子类没有实现则抛出404\n    update(data: any): Promise&lt;E&gt;\n    // 删除数据\n    async delete(id: string)\n    // 获取查询单个项目的QueryBuilder\n    protected async getItemQuery(\n        query: SelectQueryBuilder&lt;E&gt;,\n        callback?: QueryHook&lt;E&gt;,\n    )\n    // 获取查询数据列表的 QueryBuilder\n    protected async getListQuery(\n        query: SelectQueryBuilder&lt;E&gt;,\n        params: P,\n        callback?: QueryHook&lt;E&gt;,\n    )\n    // 如果是树形模型,则此方法返回父项\n    protected async getParent(id?: string)\n}\n</code></pre>\n\n<h3>修改应用</h3>\n\n<h4><code>subscribers</code></h4>\n\n使<code>CategorySubscriber</code>和<code>PostSubscriber</code>分别继承<code>BaseSubscriber</code>,以<code>CategorySubscriber</code>为例,如下\n\n<blockquote>\n  <code>CategoryEntity</code>是一个树形模型,所以需要在设置中添加<code>tree</code>\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/subscribers/category.subscriber.ts\n@EventSubscriber()\nexport class CategorySubscriber extends BaseSubscriber&lt;CategoryEntity&gt; {\n    protected entity = CategoryEntity;\n\n    protected setting: SubcriberSetting = {\n        tree: true,\n    };\n\n    constructor(protected connection: Connection) {\n        super(connection, CategoryRepository);\n    }\n}\n</code></pre>\n\n<h4><code>Services</code></h4>\n\n三个服务类都继承<code>BaseDataService</code>,省略掉各自一些在父类中已经实现而无需修改的方法,以<code>CategoryService</code>为例,如下\n\n<blockquote>\n  <code>create</code>和<code>update</code>方法需要自己封装\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/services/category.service.ts\nexport class CategoryService extends BaseDataService&lt;CategoryEntity&gt; {\n    protected entity = CategoryEntity;\n\n    constructor(\n        protected entityManager: EntityManager,\n        protected repository: CategoryRepository,\n    ) {\n        super();\n    }\n  ...\n}\n</code></pre>', '简化数据操作代码', '', 'publish', 'open', 'closed', '', '%e7%ae%80%e5%8c%96%e6%95%b0%e6%8d%ae%e6%93%8d%e4%bd%9c%e4%bb%a3%e7%a0%81', '', '', '2021-11-09 21:46:02', '2021-11-09 13:46:02', '# 简化数据操作代码\r\n\r\n## 学习目标\r\n\r\n- 学会抽象代码,减少重复工作\r\n\r\n## 文件结构\r\n\r\n本节内容仍然主要聚焦于`CoreModule`\r\n\r\n```shell\r\nsrc/core\r\n├── base\r\n│   ├── data.service.ts\r\n│   ├── index.ts\r\n│   ├── repository.ts\r\n│   ├── subscriber.ts\r\n│   └── tree.repository.ts\r\n├── constants.ts\r\n├── core.module.ts\r\n├── decorators\r\n│   ├── dto-validation.decorator.ts\r\n│   └── index.ts\r\n├── helpers.ts\r\n├── index.ts\r\n├── providers\r\n│   ├── app.filter.ts\r\n│   ├── app.interceptor.ts\r\n│   ├── app.pipe.ts\r\n│   └── index.ts\r\n└── types.ts\r\n```\r\n\r\n## 应用编码\r\n\r\n### 核心代码\r\n\r\n#### `BaseRepository`\r\n\r\n这是一个通用的基础存储类,继承自自带的`Repository`类\r\n\r\n- `queryName`属性是一个抽象属性,在子类中设置,用于在构建查询时提供默认模型的查询名称\r\n- `buildBaseQuery`方法用于构建基础查询\r\n- `getQueryName`方法用于获取`queryName`\r\n\r\n```typescript\r\n// src/core/base/repository.ts\r\nexport abstract class BaseRepository&lt;\r\n    Entity extends ObjectLiteral,\r\n&gt; extends Repository&lt;Entity&gt; {\r\n    protected abstract queryName: string;\r\n    buildBaseQuery(): SelectQueryBuilder&lt;Entity&gt;\r\n    getQueryName():string\r\n}\r\n\r\n```\r\n\r\n#### `TreeRepository`\r\n\r\n默认的`TreeRepository`基类的方法如`findRoots`等无法在`QueryBuilder`中实现排序,自定义`query`函数等,所以创建一个继承自默认基类的新的`TreeRepository`来实现\r\n\r\n在实现此类之前先添加如下类型\r\n\r\n```typescript\r\n// src/core/types.ts\r\n/**\r\n * 排序类型,{字段名称: 排序方法}\r\n * 如果多个值则传入数组即可\r\n * 排序方法不设置,默认DESC\r\n */\r\ntype OrderQueryType =\r\n    | string\r\n    | { name: string; order: &#039;DESC&#039; | &#039;ASC&#039; }\r\n    | Array&lt;{ name: string; order: &#039;DESC&#039; | &#039;ASC&#039; } | string&gt;;\r\n/**\r\n * 查询参数\r\n * orderBy: 排序类型\r\n * getQuery: 查询回调,可以在这个函数中添加自定义查询\r\n */\r\ntype TreeQueryParam&lt;E&gt; = {\r\n    getQuery?: (query: SelectQueryBuilder&lt;E&gt;) =&gt; SelectQueryBuilder&lt;E&gt;;\r\n    orderBy?: OrderQueryType;\r\n};\r\n```\r\n\r\n`TreeRepository`包含`BaseRepository`的`queryName`等所有属性和方法\r\n\r\n其余属性及方法列如下\r\n\r\n> 如果`params`中不传`orderBy`则使用`this.orderBy`属性\r\n\r\n- `findTree`: 为`findTrees`添加添加参数\r\n- `findRts`: 为`findRoots`列表查询添加条件参数\r\n- `findDts`: 为`findDescendants`添加条件参数\r\n- `findDtsTree`: 为`findDescendantsTree`添加条件参数\r\n- `countDts`: 为`countDescendants`添加条件参数\r\n- `createDtsQueryBuilder`: 为`createDescendantsQueryBuilder`添加条件参数\r\n- `findAts`,`findAtsTree`,`countAts`,`createAtsQueryBuilder`与`DTS`的方法类似,都是为对应的原方法添加条件查询参数\r\n- `toFlatTrees`: 打平并展开树\r\n- `getOrderByQuery`: 根据`orderBy`属性生成排序的query\r\n\r\n```typescript\r\n// src/core/base/base.repository.ts\r\nexport abstract class BaseTreeRepository<\r\n    E extends ObjectLiteral,\r\n> extends TreeRepository<E> {\r\n    // 自定义排序规则,如果没有设置则(entity中有`order`字段则使用`order`字段,否则不排序)\r\n    protected orderBy?: string | { name: string; order: \'DESC\' | \'ASC\' };\r\n    buildBaseQuery(): SelectQueryBuilder<E>\r\n    getQueryName()\r\n    // 查询树\r\n    async findTree(params: TreeQueryParam<E> = {}): Promise<E[]>\r\n    // 查询顶层列表\r\n    findRts(params: TreeQueryParam<E> = {}): Promise<E[]>\r\n    // 查询后代列表\r\n    findDts(entity: E, params: TreeQueryParam<E> = {}): Promise<E[]>\r\n    // 查询后代树\r\n    findDtsTree(entity: E, params: TreeQueryParam<E> = {}): Promise<E> \r\n    // 查询后代数量\r\n    countDts(entity: E, params: TreeQueryParam<E> = {}): Promise<number>\r\n    // 创建后代查询器\r\n    createDtsQueryBuilder(\r\n        alias: string,\r\n        closureTableAlias: string,\r\n        entity: E,\r\n        params: TreeQueryParam<E> = {},\r\n    ): SelectQueryBuilder<E>\r\n    // 查询祖先列表\r\n    findAts(entity: E, params: TreeQueryParam<E> = {}): Promise<E[]> \r\n    //  查询祖先树\r\n    findAtsTree(entity: E, params: TreeQueryParam<E> = {}): Promise<E>\r\n    // 查询祖先数量\r\n    countAts(entity: E, params: TreeQueryParam<E> = {}): Promise<number>\r\n    // 创建祖先查询器\r\n    createAtsQueryBuilder(\r\n        alias: string,\r\n        closureTableAlias: string,\r\n        entity: E,\r\n        params: TreeQueryParam<E> = {},\r\n    ): SelectQueryBuilder<E>\r\n    // 打平并展开树\r\n    async toFlatTrees(trees: E[], level = 0): Promise<E[]>\r\n    // 生成排序的query\r\n    protected getOrderByQuery(\r\n        query: SelectQueryBuilder<E>,\r\n        alias: string,\r\n        orderBy?: OrderQueryType,\r\n    )\r\n}\r\n```\r\n\r\n#### `BaseSubscriber`\r\n\r\n添加一个`SubcriberSetting`类型用于添加设置\r\n\r\n```typescript\r\nexport type SubcriberSetting = {\r\n    // 监听的模型是否为树模型\r\n    tree?: boolean;\r\n};\r\n```\r\n\r\n在构造函数中根据传入的参数设置连接,并在连接中加入当前订阅者,以及构建默认的`repository`等\r\n\r\n实现如下\r\n\r\n```typescript\r\n// src/core/base/subscriber.ts\r\n@EventSubscriber()\r\nexport abstract class BaseSubscriber&lt;E extends ObjectLiteral&gt;\r\n    implements EntitySubscriberInterface&lt;E&gt;\r\n{\r\n...\r\n\r\n    constructor(connection: Connection, repository?: Type&lt;SubscriberRepo&lt;E&gt;&gt;) {\r\n        this.connection = connection;\r\n        this.connection.subscribers.push(this);\r\n        this.em = this.connection.manager;\r\n        this.setRepository(repository);\r\n        if (!this.setting) this.setting = {};\r\n    }\r\n    listenTo()\r\n    async afterLoad(entity: any) {\r\n        // 是否启用树形\r\n        if (this.setting.tree &amp;&amp; !entity.level) entity.level = 0;\r\n    }\r\n    protected setRepository(repository?: Type&lt;SubscriberRepo&lt;E&gt;&gt;) \r\n    // 判断某个属性是否被更新\r\n    protected isUpdated(cloumn: keyof E, event: UpdateEvent&lt;E&gt;) \r\n}\r\n\r\n```\r\n\r\n#### `DataService`\r\n\r\n此类目的在于封装和简化一些常用的数据操作\r\n\r\n更改`PaginateDto`使它支持泛型参数传入\r\n\r\n```typescript\r\n// src/core/types.ts\r\nexport interface PaginateDto&lt;C extends IPaginationMeta = IPaginationMeta&gt;\r\n    extends Omit&lt;IPaginationOptions&lt;C&gt;, &#039;page&#039; | &#039;limit&#039;&gt; {\r\n    page: number;\r\n    limit: number;\r\n}\r\n```\r\n\r\n对于`create`和`update`方法因为子类需要变化的地方比较多,所以直接交给子类去实现,如果子类没有实现则直接抛出`403`异常.`repository`属性则在子类中必须被定义,可使用依赖直接注入\r\n\r\n```typescript\r\n// src/core/base/data.service.ts\r\nexport abstract class BaseDataService&lt;\r\n    E extends ObjectLiteral,\r\n    P extends Record&lt;string, any&gt; = {},\r\n    M extends IPaginationMeta = IPaginationMeta,\r\n&gt; {\r\n    // 服务默认存储类\r\n    protected abstract repository: BaseRepository&lt;E&gt; | BaseTreeRepository&lt;E&gt;;\r\n    // 获取数据列表\r\n    async list(params?: P, callback?: QueryHook&lt;E&gt;): Promise&lt;E[]&gt;\r\n    // 获取分页数据\r\n    async paginate(\r\n        options: PaginateDto&lt;M&gt;,\r\n        params?: P,\r\n        callback?: QueryHook&lt;E&gt;,\r\n    ): Promise&lt;Pagination&lt;E, M&gt;&gt;\r\n    // 获取数据详情\r\n    async detail(id: string, callback?: QueryHook&lt;E&gt;): Promise&lt;E&gt;\r\n    // 创建数据,如果子类没有实现则抛出404\r\n    create(data: any): Promise&lt;E&gt;\r\n    // 更新数据,如果子类没有实现则抛出404\r\n    update(data: any): Promise&lt;E&gt;\r\n    // 删除数据\r\n    async delete(id: string)\r\n    // 获取查询单个项目的QueryBuilder\r\n    protected async getItemQuery(\r\n        query: SelectQueryBuilder&lt;E&gt;,\r\n        callback?: QueryHook&lt;E&gt;,\r\n    )\r\n    // 获取查询数据列表的 QueryBuilder\r\n    protected async getListQuery(\r\n        query: SelectQueryBuilder&lt;E&gt;,\r\n        params: P,\r\n        callback?: QueryHook&lt;E&gt;,\r\n    )\r\n    // 如果是树形模型,则此方法返回父项\r\n    protected async getParent(id?: string)\r\n}\r\n```\r\n\r\n### 修改应用\r\n\r\n#### `subscribers`\r\n\r\n使`CategorySubscriber`和`PostSubscriber`分别继承`BaseSubscriber`,以`CategorySubscriber`为例,如下\r\n\r\n> `CategoryEntity`是一个树形模型,所以需要在设置中添加`tree`\r\n\r\n```typescript\r\n// src/modules/content/subscribers/category.subscriber.ts\r\n@EventSubscriber()\r\nexport class CategorySubscriber extends BaseSubscriber&lt;CategoryEntity&gt; {\r\n    protected entity = CategoryEntity;\r\n\r\n    protected setting: SubcriberSetting = {\r\n        tree: true,\r\n    };\r\n\r\n    constructor(protected connection: Connection) {\r\n        super(connection, CategoryRepository);\r\n    }\r\n}\r\n```\r\n\r\n#### `Services`\r\n\r\n三个服务类都继承`BaseDataService`,省略掉各自一些在父类中已经实现而无需修改的方法,以`CategoryService`为例,如下\r\n\r\n> `create`和`update`方法需要自己封装\r\n\r\n```typescript\r\n// src/modules/content/services/category.service.ts\r\nexport class CategoryService extends BaseDataService&lt;CategoryEntity&gt; {\r\n    protected entity = CategoryEntity;\r\n\r\n    constructor(\r\n        protected entityManager: EntityManager,\r\n        protected repository: CategoryRepository,\r\n    ) {\r\n        super();\r\n    }\r\n  ...\r\n}\r\n```\r\n\r\n', 47, 'https://jikexingkong.com/docs/nestjs-practices/%e7%ae%80%e5%8c%96%e6%95%b0%e6%8d%ae%e6%93%8d%e4%bd%9c%e4%bb%a3%e7%a0%81/', 5, 'docs', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(55, 1, '2021-10-29 14:12:49', '2021-10-29 06:12:49', '<h1>自定义验证规则与验证转义</h1>\n\n<h2>学习目标</h2>\n\n<ul>\n<li>编写自定义<code>class-validator</code>验证规则</li>\n<li>编译自定义<code>ID</code>验证管道</li>\n<li>验证后对数据进行自动转义为模型对象</li>\n</ul>\n\n<h2>应用编码</h2>\n\n在实现本节内容之前,需要先把<code>AppPipe</code>的<code>forbidUnknownValues</code>改成<code>false</code>,否则会报<code>400</code>错误\n\n<h3>编写验证规则</h3>\n\n验证器既可以定义为一个类而直接使用\n\n<pre><code class=\"language-typescript line-numbers\">@Validate(CustomTextLength, [3, 20], {\n    message: \'Wrong post title\',\n  })\n  title: string;\n</code></pre>\n\n也可以定义成一个装饰器,定义装饰器验证器需要预先编写好验证逻辑的函数或类\n\n<pre><code class=\"language-typescript line-numbers\">export function IsLongerThan(property: string, validationOptions?: ValidationOptions) {\n  return function (object: Object, propertyName: string) {\n    registerDecorator({\n      name: \'isLongerThan\',\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [property],\n      options: validationOptions,\n      validator: {\n        validate(value: any, args: ValidationArguments) {\n          const [relatedPropertyName] = args.constraints;\n          const relatedValue = (args.object as any)[relatedPropertyName];\n          return typeof value === \'string\' &amp;&amp; typeof relatedValue === \'string\' &amp;&amp; value.length &gt; relatedValue.length; // you can return a Promise&lt;boolean&gt; here as well, if you want to make async validation\n        },\n      },\n    });\n  };\n</code></pre>\n\n详细使用的话可以<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/typestack/class-validator\">官方文档</a>或者我的网站的<a class=\"wp-editor-md-post-content-link\" href=\"https://jikexingkong.com/docs/519.html\">翻译文档</a>\n\n新增以下验证规则\n\n<ul>\n<li><code>IsMatch</code>：判断两个字段的值是否相等的验证规则</li>\n<li><code>IsMatchPhone</code>: 验证是否为手机号(必须是\"区域号.手机号\"的形式)</li>\n<li><code>IsPassword</code>: 密码复杂度验证</li>\n<li><code>IsModelExist</code>: 数据存在性验证</li>\n<li><code>IsUnique</code>: 针对创建数据时的唯一性验证</li>\n<li><code>IsUniqueExist</code>: 针对更新数据时的唯一性验证</li>\n<li><code>IsTreeUnique</code>: 针对树形模型创建数据时同级别的唯一性验证</li>\n<li><code>IsTreeUniqueExist</code>: 针对树形模型更新数据时同级别的唯一性验证</li>\n</ul>\n\n所有验证类需要添加<code>@ValidatorConstraint</code>装饰器\n\n如果是与数据库相关的异步验证需要把<code>async</code>选项设置为<code>true</code>\n\n<pre><code class=\"language-typescript line-numbers\">@ValidatorConstraint({ name: \'entityItemUniqueExist\', async: true })\n</code></pre>\n\n每个规则的代码都有注释,详细请看源文件\n\n<h3>使用验证规则</h3>\n\n为需要验证数据存在性的<code>DTO</code>属性添加<code>@IsModelExist</code>,例如\n\n<blockquote>\n  多个验证请设置<code>each:true</code>\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">export class CreateCategoryDto {\n    @IsModelExist(CategoryEntity, { always: true, message: \'父分类不存在\' })\n    parent?: string;\n}\nexport class CreatePostDto {\n  @IsModelExist(CategoryEntity, {\n        each: true,\n        always: true,\n        message: \'分类不存在\',\n    })\n   categories?: string[];\n}\n</code></pre>\n\n对<code>category</code>的<code>name</code>属性进行同级别唯一性验证\n\n<pre><code class=\"language-typescript line-numbers\">export class CreateCategoryDto {\n  ...\n    @IsTreeUnique(CategoryEntity, {\n        groups: [\'create\'],\n        message: \'分类名称重复\',\n    })\n    @IsTreeUniqueExist(CategoryEntity, {\n        groups: [\'update\'],\n        message: \'分类名称重复\',\n    })\n    @MaxLength(25, {\n        always: true,\n        message: \'分类名称长度不能超过$constraint1\',\n    })\n    @IsNotEmpty({ groups: [\'create\'], message: \'分类名称不得为空\' })\n    @IsOptional({ groups: [\'update\'] })\n    name!: string;\n}\n</code></pre>\n\n<h3>验证中转义</h3>\n\n为了提高代码的可用性,可以直接在<code>DTO</code>中对一些数据进行查询,并把对象作为参数代替<code>id</code>传入服务中的方法\n\n<h4><code>ID</code>验证管道</h4>\n\n自定义一个针对数据存在性验证的<code>UUID</code>管道\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/providers/parse-uuid-entity.pipe.ts\nexport class ParseUUIDEntityPipe&lt;ET&gt;\n    implements PipeTransform&lt;string, Promise&lt;ET | string | undefined&gt;&gt;\n{\n    protected config: Config;\n\n    constructor(\n       // 需要验证的模型\n        protected readonly entity: ObjectType&lt;ET&gt;,\n        config?: Partial&lt;Config&gt;,\n    ) {\n        // 合并配置\n        this.config = merge(\n            {\n              // 数据库连接名称\n                manager: \'default\', \n              // 是否转义\n                transform: false,\n              // 查询中是否包含软删除数据\n                withDeleted: false,\n            },\n            config ?? {},\n        );\n    }\n\n    async transform(value: string, _metadata: ArgumentMetadata) {\n        if (value === undefined) return undefined;\n        // UUID验证\n        if (!isUUID(value)) {\n            throw new BadRequestException(\'id param must be an UUID\');\n        }\n        const em = getManager(this.config.manager);\n        const val = await em.findOne(this.entity, {\n            where: { id: value },\n            withDeleted: this.config.withDeleted,\n        });\n        if (!val) {\n            throw new EntityNotFoundError(this.entity, value);\n        }\n       // 是否返回查询出来的对象\n        return this.config.transform ? val : value;\n    }\n}\n</code></pre>\n\n修改<code>BaseDataService</code>中的以下方法,把原来传入的<code>string</code>类型的<code>ID</code>改成传入模型对象\n\n<strong>有了预转义,<code>getParent</code>方法就没用了,直接去掉即可,后面写好<code>DTO</code>后在子服务类中修改</strong>\n\n<pre><code class=\"language-typescript line-numbers\">    async delete(item: E, trash = true) \n    async deleteList(\n        data: E[],\n        params?: P,\n        trash?: boolean,\n        callback?: QueryHook&lt;E&gt;,\n    ) \n    async deletePaginate(\n        data: E[],\n        pageOptions: PaginateDto&lt;M&gt;,\n        params?: P,\n        trash?: boolean,\n        callback?: QueryHook&lt;E&gt;,\n    ) \n    async restore(item: E, callback?: QueryHook&lt;E&gt;) \n    async restoreList(data: E[], params?: P, callback?: QueryHook&lt;E&gt;) \n</code></pre>\n\n修改传入单个参数的方法(<code>destory</code>和<code>restore</code>),启用自定义管道验证与转义\n\n<blockquote>\n  <code>show</code>与服务中的<code>detail</code>不需要提前转义和验证\n</blockquote>\n\n在三个控制器中做如下修改,以<code>CategoryController</code>为例\n\n<pre><code class=\"language-typescript line-numbers\">@Patch(\'restore/:category\')\n    @SerializeOptions({ groups: [\'category-detail\'] })\n    async resore(\n        @Param(\n            \'category\',\n            new ParseUUIDEntityPipe(CategoryEntity, {\n                withDeleted: true,\n                transform: true,\n            }),\n        )\n        category: CategoryEntity,\n    ) {\n        return this.categoryService.restore(category);\n    }\n...\n</code></pre>\n\n<h4>验证后转义</h4>\n\n前面在自定义的全局验证管道中我们添加了一个<code>transform</code>静态方法调用,用于验证后的转义\n\n<pre><code class=\"language-typescript line-numbers\"> // src/core/providers/app.pipe.ts\nif (typeof result.transform === \'function\') {\n    result = await result.transform(result);\n    const { transform, ...data } = result;\n    result = data;\n}\n</code></pre>\n\n现在就可以在<code>DTO</code>中定义这个静态方法来实现验证后转义了,以<code>category.dto.ts</code>为例\n\n定义两个方法,分别转义创建与更新时的<code>parent</code>以及批量操作时的<code>categories</code>属性\n\n<blockquote>\n  注意,类无法继承静态方法,所以子类中需要重新定义一下\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">// src/modules/content/dtos/category.dto.ts\nconst transformParent = async (obj: CreateCategoryDto | UpdateCategoryDto) =&gt; {\n    const em = getManager();\n    if (obj.parent) {\n        obj.parent = await em\n            .getCustomRepository(CategoryRepository)\n            .findOneOrFail(obj.parent);\n    }\n    return obj;\n};\n\nconst transformCategories = async (\n    obj: DeleteCategoryMultiDto | RestoreCategoryMultiDto,\n) =&gt; {\n    const em = getManager();\n    obj.categories = await em\n        .getCustomRepository(CategoryRepository)\n        .findByIds(obj.categories, { withDeleted: true });\n    return obj;\n};\n\nexport class CreateCategoryDto {\n    ...\n    static async transform(obj: CreateCategoryDto) {\n        return transformParent(obj);\n    }\n}\n\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {\n    ...\n    static async transform(obj: UpdateCategoryDto) {\n        return transformParent(obj);\n    }\n}\n\n\n</code></pre>\n\n最后别忘了在各个服务类中去掉一些重新性查找和修改一下参数类型(以vscode不报错为准即可)', '批量删除,软删除与恢复', '', 'publish', 'open', 'closed', '', '%e6%89%b9%e9%87%8f%e5%88%a0%e9%99%a4%e8%bd%af%e5%88%a0%e9%99%a4%e4%b8%8e%e6%81%a2%e5%a4%8d', '', '', '2021-11-09 21:46:14', '2021-11-09 13:46:14', '# 自定义验证规则与验证转义\r\n\r\n## 学习目标\r\n\r\n- 编写自定义`class-validator`验证规则\r\n- 编译自定义`ID`验证管道\r\n- 验证后对数据进行自动转义为模型对象\r\n\r\n## 应用编码\r\n\r\n在实现本节内容之前,需要先把`AppPipe`的`forbidUnknownValues`改成`false`,否则会报`400`错误\r\n\r\n### 编写验证规则\r\n\r\n验证器既可以定义为一个类而直接使用\r\n\r\n```typescript\r\n@Validate(CustomTextLength, [3, 20], {\r\n    message: &#039;Wrong post title&#039;,\r\n  })\r\n  title: string;\r\n```\r\n\r\n也可以定义成一个装饰器,定义装饰器验证器需要预先编写好验证逻辑的函数或类\r\n\r\n```typescript\r\nexport function IsLongerThan(property: string, validationOptions?: ValidationOptions) {\r\n  return function (object: Object, propertyName: string) {\r\n    registerDecorator({\r\n      name: &#039;isLongerThan&#039;,\r\n      target: object.constructor,\r\n      propertyName: propertyName,\r\n      constraints: [property],\r\n      options: validationOptions,\r\n      validator: {\r\n        validate(value: any, args: ValidationArguments) {\r\n          const [relatedPropertyName] = args.constraints;\r\n          const relatedValue = (args.object as any)[relatedPropertyName];\r\n          return typeof value === &#039;string&#039; &amp;&amp; typeof relatedValue === &#039;string&#039; &amp;&amp; value.length &gt; relatedValue.length; // you can return a Promise&lt;boolean&gt; here as well, if you want to make async validation\r\n        },\r\n      },\r\n    });\r\n  };\r\n```\r\n\r\n详细使用的话可以[官方文档](https://github.com/typestack/class-validator)或者我的网站的[翻译文档](https://jikexingkong.com/docs/519.html)\r\n\r\n新增以下验证规则\r\n\r\n- `IsMatch`：判断两个字段的值是否相等的验证规则\r\n- `IsMatchPhone`: 验证是否为手机号(必须是\"区域号.手机号\"的形式)\r\n- `IsPassword`: 密码复杂度验证\r\n- `IsModelExist`: 数据存在性验证\r\n- `IsUnique`: 针对创建数据时的唯一性验证\r\n- `IsUniqueExist`: 针对更新数据时的唯一性验证\r\n- `IsTreeUnique`: 针对树形模型创建数据时同级别的唯一性验证\r\n- `IsTreeUniqueExist`: 针对树形模型更新数据时同级别的唯一性验证\r\n\r\n所有验证类需要添加`@ValidatorConstraint`装饰器\r\n\r\n如果是与数据库相关的异步验证需要把`async`选项设置为`true`\r\n\r\n```typescript\r\n@ValidatorConstraint({ name: &#039;entityItemUniqueExist&#039;, async: true })\r\n```\r\n\r\n每个规则的代码都有注释,详细请看源文件\r\n\r\n### 使用验证规则\r\n\r\n为需要验证数据存在性的`DTO`属性添加`@IsModelExist`,例如\r\n\r\n> 多个验证请设置`each:true`\r\n\r\n```typescript\r\nexport class CreateCategoryDto {\r\n    @IsModelExist(CategoryEntity, { always: true, message: &#039;父分类不存在&#039; })\r\n    parent?: string;\r\n}\r\nexport class CreatePostDto {\r\n  @IsModelExist(CategoryEntity, {\r\n        each: true,\r\n        always: true,\r\n        message: &#039;分类不存在&#039;,\r\n    })\r\n   categories?: string[];\r\n}\r\n```\r\n\r\n对`category`的`name`属性进行同级别唯一性验证\r\n\r\n```typescript\r\nexport class CreateCategoryDto {\r\n  ...\r\n    @IsTreeUnique(CategoryEntity, {\r\n        groups: [&#039;create&#039;],\r\n        message: &#039;分类名称重复&#039;,\r\n    })\r\n    @IsTreeUniqueExist(CategoryEntity, {\r\n        groups: [&#039;update&#039;],\r\n        message: &#039;分类名称重复&#039;,\r\n    })\r\n    @MaxLength(25, {\r\n        always: true,\r\n        message: &#039;分类名称长度不能超过$constraint1&#039;,\r\n    })\r\n    @IsNotEmpty({ groups: [&#039;create&#039;], message: &#039;分类名称不得为空&#039; })\r\n    @IsOptional({ groups: [&#039;update&#039;] })\r\n    name!: string;\r\n}\r\n```\r\n\r\n### 验证中转义\r\n\r\n为了提高代码的可用性,可以直接在`DTO`中对一些数据进行查询,并把对象作为参数代替`id`传入服务中的方法\r\n\r\n#### `ID`验证管道\r\n\r\n自定义一个针对数据存在性验证的`UUID`管道\r\n\r\n```typescript\r\n// src/core/providers/parse-uuid-entity.pipe.ts\r\nexport class ParseUUIDEntityPipe&lt;ET&gt;\r\n    implements PipeTransform&lt;string, Promise&lt;ET | string | undefined&gt;&gt;\r\n{\r\n    protected config: Config;\r\n\r\n    constructor(\r\n       // 需要验证的模型\r\n        protected readonly entity: ObjectType&lt;ET&gt;,\r\n        config?: Partial&lt;Config&gt;,\r\n    ) {\r\n        // 合并配置\r\n        this.config = merge(\r\n            {\r\n              // 数据库连接名称\r\n                manager: &#039;default&#039;, \r\n              // 是否转义\r\n                transform: false,\r\n              // 查询中是否包含软删除数据\r\n                withDeleted: false,\r\n            },\r\n            config ?? {},\r\n        );\r\n    }\r\n\r\n    async transform(value: string, _metadata: ArgumentMetadata) {\r\n        if (value === undefined) return undefined;\r\n        // UUID验证\r\n        if (!isUUID(value)) {\r\n            throw new BadRequestException(&#039;id param must be an UUID&#039;);\r\n        }\r\n        const em = getManager(this.config.manager);\r\n        const val = await em.findOne(this.entity, {\r\n            where: { id: value },\r\n            withDeleted: this.config.withDeleted,\r\n        });\r\n        if (!val) {\r\n            throw new EntityNotFoundError(this.entity, value);\r\n        }\r\n       // 是否返回查询出来的对象\r\n        return this.config.transform ? val : value;\r\n    }\r\n}\r\n```\r\n\r\n修改`BaseDataService`中的以下方法,把原来传入的`string`类型的`ID`改成传入模型对象\r\n\r\n**有了预转义,`getParent`方法就没用了,直接去掉即可,后面写好`DTO`后在子服务类中修改**\r\n\r\n```typescript\r\n    async delete(item: E, trash = true) \r\n    async deleteList(\r\n        data: E[],\r\n        params?: P,\r\n        trash?: boolean,\r\n        callback?: QueryHook&lt;E&gt;,\r\n    ) \r\n    async deletePaginate(\r\n        data: E[],\r\n        pageOptions: PaginateDto&lt;M&gt;,\r\n        params?: P,\r\n        trash?: boolean,\r\n        callback?: QueryHook&lt;E&gt;,\r\n    ) \r\n    async restore(item: E, callback?: QueryHook&lt;E&gt;) \r\n    async restoreList(data: E[], params?: P, callback?: QueryHook&lt;E&gt;) \r\n```\r\n\r\n修改传入单个参数的方法(`destory`和`restore`),启用自定义管道验证与转义\r\n\r\n> `show`与服务中的`detail`不需要提前转义和验证\r\n\r\n在三个控制器中做如下修改,以`CategoryController`为例\r\n\r\n```typescript\r\n@Patch(&#039;restore/:category&#039;)\r\n    @SerializeOptions({ groups: [&#039;category-detail&#039;] })\r\n    async resore(\r\n        @Param(\r\n            &#039;category&#039;,\r\n            new ParseUUIDEntityPipe(CategoryEntity, {\r\n                withDeleted: true,\r\n                transform: true,\r\n            }),\r\n        )\r\n        category: CategoryEntity,\r\n    ) {\r\n        return this.categoryService.restore(category);\r\n    }\r\n...\r\n```\r\n\r\n#### 验证后转义\r\n\r\n前面在自定义的全局验证管道中我们添加了一个`transform`静态方法调用,用于验证后的转义\r\n\r\n```typescript\r\n // src/core/providers/app.pipe.ts\r\nif (typeof result.transform === &#039;function&#039;) {\r\n    result = await result.transform(result);\r\n    const { transform, ...data } = result;\r\n    result = data;\r\n}\r\n```\r\n\r\n现在就可以在`DTO`中定义这个静态方法来实现验证后转义了,以`category.dto.ts`为例\r\n\r\n定义两个方法,分别转义创建与更新时的`parent`以及批量操作时的`categories`属性\r\n\r\n> 注意,类无法继承静态方法,所以子类中需要重新定义一下\r\n\r\n```typescript\r\n// src/modules/content/dtos/category.dto.ts\r\nconst transformParent = async (obj: CreateCategoryDto | UpdateCategoryDto) =&gt; {\r\n    const em = getManager();\r\n    if (obj.parent) {\r\n        obj.parent = await em\r\n            .getCustomRepository(CategoryRepository)\r\n            .findOneOrFail(obj.parent);\r\n    }\r\n    return obj;\r\n};\r\n\r\nconst transformCategories = async (\r\n    obj: DeleteCategoryMultiDto | RestoreCategoryMultiDto,\r\n) =&gt; {\r\n    const em = getManager();\r\n    obj.categories = await em\r\n        .getCustomRepository(CategoryRepository)\r\n        .findByIds(obj.categories, { withDeleted: true });\r\n    return obj;\r\n};\r\n\r\nexport class CreateCategoryDto {\r\n    ...\r\n    static async transform(obj: CreateCategoryDto) {\r\n        return transformParent(obj);\r\n    }\r\n}\r\n\r\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {\r\n    ...\r\n    static async transform(obj: UpdateCategoryDto) {\r\n        return transformParent(obj);\r\n    }\r\n}\r\n\r\n\r\n```\r\n\r\n最后别忘了在各个服务类中去掉一些重新性查找和修改一下参数类型(以vscode不报错为准即可)', 47, 'https://jikexingkong.com/docs/nestjs-practices/%e6%89%b9%e9%87%8f%e5%88%a0%e9%99%a4%e8%bd%af%e5%88%a0%e9%99%a4%e4%b8%8e%e6%81%a2%e5%a4%8d/', 6, 'docs', '', 0),
(56, 1, '2021-10-29 14:12:57', '2021-10-29 06:12:57', '<h1>定制化配置系统</h1>\n\n<h2>学习目标</h2>\n\n<ul>\n<li>构建一个灵活的配置系统</li>\n<li>写一个数据库配置工具</li>\n</ul>\n\n<h2>预装依赖</h2>\n\n<ul>\n<li><a href=\"https://github.com/chalk/chalk\" title=\"chalk\">chalk</a>:用于在命令行输出有颜色的消息</li>\n<li><a href=\"https://github.com/motdotla/dotenv\" title=\"dotenv\">dotenv</a>:读取环境变量文件到一个对象</li>\n<li><a href=\"https://github.com/sindresorhus/find-up\" title=\"find-up\">find-up</a>:向上查找一个文件并返回其路径</li>\n</ul>\n\n<h2>文件结构</h2>\n\n本节课目录和文件结构的更改只聚焦于<code>core</code>包,编写好之后的目录结构如下\n\n<pre><code class=\"language-typescript line-numbers\">src/core\n├── common\n│   ├── configure\n│   │   ├── base.util.ts\n│   │   ├── configure.ts\n│   │   ├── env.ts\n│   │   ├── index.ts\n│   │   └── utiler.ts\n│   ├── constants.ts\n│   ├── constraints\n│   │   ├── index.ts\n│   │   ├── match.constraint.ts\n│   │   ├── match.phone.constraint.ts\n│   │   └── password.constraint.ts\n│   ├── core.module.ts\n│   ├── decorators\n│   │   ├── dto-validation.decorator.ts\n│   │   └── index.ts\n│   ├── helpers.ts\n│   ├── index.ts\n│   ├── providers\n│   │   ├── app.filter.ts\n│   │   ├── app.interceptor.ts\n│   │   ├── app.pipe.ts\n│   │   └── index.ts\n│   └── types.ts\n└── database\n    ├── base\n    │   ├── data.service.ts\n    │   ├── index.ts\n    │   ├── repository.ts\n    │   ├── subscriber.ts\n    │   └── tree.repository.ts\n    ├── constants.ts\n    ├── constraints\n    │   ├── index.ts\n    │   ├── model.exist.constraint.ts\n    │   ├── tree.unique.constraint.ts\n    │   ├── tree.unique.exist.constraint.ts\n    │   ├── unique.constraint.ts\n    │   └── unique.exist.constraint.ts\n    ├── db.util.ts\n    ├── index.ts\n    ├── parse-uuid-entity.pipe.ts\n    └── types.ts\n</code></pre>\n\n<h2>应用编码</h2>\n\n在开始编码之后创建<code>supports/database</code>目录,并把原来的一些数据库相关的类型,常量,函数等放入此目录中的文件,目录结构如上面所示,然后更改一下应用中的导入地址\n\n<h3>配置系统</h3>\n\n由于官方提供的<code>@nestjs/config</code>是通过系统内部的模块方式注入服务来实现的,很多场景下无法满足灵活的需求,比如自动化的多数据配置等,所以本节实现一个简单灵活的配置系统\n\n<h4>类型及常量</h4>\n\n配置中并非所有元素都是静态,一些属性可能通过函数获取,比如通过<code>env</code>获取环境变量,而此函数在调用<code>loadEnvs</code>加载环境文件前是无法获取所有我们自定义的环境变量的,所以必须把配置包含在一个回调函数中,读取的时候去执行通过返回值获取,因此我们定义一个<code>ConfigRegister</code>作为获取配置的回调函数的类型\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/common/types.ts\nexport interface AppConfig {\n    debug: boolean; // 是否debug\n    timezone: string; // 时区\n    locale: string; // 语言\n    port: number; // 服务器端口\n    https: boolean; // 是否通过https访问\n    host: string; // 服务器地址\n}\n\nexport interface BaseConfig {\n    app: AppConfig;\n    [key: string]: any;\n}\n\n// 配置注册器函数\nexport type ConfigRegister&lt;T&gt; = () =&gt; T;\n// 多个配置注册器集合\nexport type ConfigRegCollection&lt;T&gt; = {\n    [P in keyof T]?: () =&gt; T[P];\n};\n</code></pre>\n\n定义一个专门用于配置当前环境值的枚举常量\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/common/constants.ts\nexport enum EnviromentType {\n    DEV = \'development\',\n    PROD = \'production\',\n    TEST = \'test\',\n}\n</code></pre>\n\n<h4>环境变量</h4>\n\n代码: <code>src/core/supports/configure/env.ts</code>\n\n首先编写<code>loadEnvs</code>函数,加载环境变量,步骤如下\n\n<blockquote>\n  当前环境通过启动命令中的<code>NODE_ENV</code>赋值,其它的<code>process.env</code>环境变量都可以通过启动命令赋值\n  \n  如<code>cross-env NODE_ENV=development nest start</code>\n</blockquote>\n\n<ul>\n<li>使用<a href=\"https://github.com/sindresorhus/find-up\" title=\"find-up\">find-up</a>向上层查找<code>.env</code>文件,直到找到为止,如果没有则<code>undefined</code></li>\n<li>使用<a href=\"https://github.com/sindresorhus/find-up\" title=\"find-up\">find-up</a>向上层查找<code>.env.当前环境</code>文件,直到找到为止,如果没有则<code>undefined</code></li>\n<li>把前面查找的两个文件地址放入一个数组并过滤掉<code>undefined</code></li>\n<li>使用<a href=\"https://github.com/motdotla/dotenv\" title=\"dotenv\">dotenv</a>循环读取上面过滤后的文件数组中的环境变量,后者覆盖前者的变量,最终赋值给一个对象</li>\n<li>把以上读取的自定义环境变量对象与<code>process.env</code>合并后赋值给一个对象,前者覆盖后者</li>\n<li>把这个对象中的环境变量重新全部赋值给<code>process.env</code></li>\n</ul>\n\n编写<code>env</code>函数来读取环境变量,<code>env</code>函数通过重载实现多参数模式,其参数如下\n\n<ul>\n<li><code>key</code>: 需要获取的环境变量的名称</li>\n<li><code>parseTo</code>: 转义函数(由于环境变量读取后其值都是字符串类型,所以对于<code>number</code>,<code>boolean</code>等类型的值需要传入转义函数进行转义)</li>\n<li><code>defaultValue</code>: 默认值</li>\n</ul>\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/common/configure/env.ts\n\n// 获取全部环境变量\nexport function env(): { [key: string]: string };\n// 直接获取环境变量\nexport function env&lt;T extends BaseType = string&gt;(key: string): T;\n// 获取类型转义后的环境变量\nexport function env&lt;T extends BaseType = string&gt;(\n    key: string,\n    parseTo: ParseType&lt;T&gt;,\n): T;\n// 获取环境变量,不存在则获取默认值\nexport function env&lt;T extends BaseType = string&gt;(\n    key: string,\n    defaultValue: T,\n): T;\n// 获取类型转义后的环境变量,不存在则获取默认值\nexport function env&lt;T extends BaseType = string&gt;(\n    key: string,\n    parseTo: ParseType&lt;T&gt;,\n    defaultValue: T,\n): T;\n// 获取环境变量的具体实现\nexport function env&lt;T extends BaseType = string&gt;(\n    key?: string,\n    parseTo?: ParseType&lt;T&gt; | T,\n    defaultValue?: T,\n)\n</code></pre>\n\n为了方便,写一个<code>environment</code>函数用于获取当前环境<code>NODE_ENV</code>\n\n<h4>配置类</h4>\n\n配置类的实现比较简单,其属性和方法如下\n\n<blockquote>\n  <code>_created</code>属性的作用是避免重复加载配置\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/common/configure/configure.ts\nexport class Configure&lt;T extends BaseConfig = BaseConfig&gt; {\n    // 配置加载状态\n    protected _created = false;\n    // 根据配置注册器生成的配置\n    protected _config!: { [key: string]: any };\n    // 根据传入的配置构造器对象集生成所有配置\n    create(_config: ConfigRegCollection&lt;T&gt;)\n    // 配置是否已加载\n    get created()\n    // 获取一个配置,不存在则返回defaultValue\n    get&lt;CT extends any = any&gt;(key: string, defaultValue?: CT)\n   // 判断一个配置是否存在\n    has(key: string): boolean\n    // 获取所有配置\n    all&lt;CT extends T = T&gt;()\n    // 加载环境变量并重置所有配置\n    protected reset(_config: ConfigRegCollection&lt;T&gt;)\n    // 传入配置注册器集合并执行每个配置注册器来加载所有配置\n    protected loadConfig(_config: ConfigRegCollection&lt;T&gt;)\n}\n</code></pre>\n\n<h3><code>Util</code>模式</h3>\n\n为了便捷的使用各种第三方服务和类库(如数据库,Redis,Socket,云存储等),我们构建一个简单的<code>Util</code>机制,每种服务使用<code>Util</code>类自动化配置以及在<code>Util</code>中编写各种API方法\n\n<h4><code>BaseUtil</code></h4>\n\n添加一个用于配置映射的类型\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/common/types.ts\nexport interface UtilConfigMaps {\n    required?: boolean | string[];\n    maps?: { [key: string]: string } | string;\n}\n</code></pre>\n\n这个所有<code>Util</code>了基类,运行流程如下\n\n<ul>\n<li>通过<code>mapConfig</code>把<code>configure</code>(前面创建的<code>Configure</code>类的对象)中需要的配置映射到<code>configMaps</code>属性</li>\n<li>在映射的时候使用<code>checkAndGetConfig</code>,如果是<code>required</code>是<code>true</code>或是个包含此字段的数组,但是配置中又没有就抛出错误</li>\n<li>最终在<code>factory</code>方法中调用<code>mapConfig</code>获取映射后的配置并作为参数赋值给子类的<code>create</code>方法,子类可以选择把配置赋值给<code>config</code>属性或其它用途</li>\n</ul>\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/common/configure/base.util.ts\nexport abstract class BaseUtil&lt;CT&gt; {\n    protected _created = false;\n\n    protected configure!: Configure;\n    // 子类配置\n    protected config!: CT;\n\n    // 配置映射\n    protected abstract configMaps?: UtilConfigMaps;\n\n    /**\n     * 检测是否已被初始化\n     */\n    created()\n    /**\n     * 始化Util类\n     * 将映射后的配置放入子类的factory进行进一步操作\n     * 比如赋值给this.config\n     */\n    factory(configure: Configure)\n    /**\n     * 由子类根据配置初始化\n     */\n    protected abstract create(config: any): void;\n    /**\n     * 根据configMaps获取映射后的配置\n     * 如果configs是一个string则直接在获取其在配置池中的值\n     * 如果configs是一个对象则获取后再一一映射\n     */\n    private mapConfig()\n    /**\n     * 检测并获取配置\n     * 如果required为true则检测每个配置在配置池中是否存在\n     * 如果required为数组则只把数组中的值作为key去检测它们在配置池中是否存在\n     * 其它情况不检测\n     */\n    protected checkAndGetConfig(\n        name: string,\n        key: string,\n        required?: UtilConfigMaps[\'required\'],\n    )\n}\n\n</code></pre>\n\n<h4><code>DbUtil</code></h4>\n\n添加用于数据库配置的类型\n\n<blockquote>\n  需要注意的是与<code>nestjs</code>默认的配置方式不同,为了让配置更加清晰,在自定义的配置方式中我们让每个连接必须带有连接名称\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/database/types.ts\nexport interface DatabaseConfig {\n    // 数据库默认配置\n    default?: string;\n    // 启用的连接名称\n    enabled: string[];\n    // 数据库连接配置\n    connections: DbOption[];\n    // 所有连接的公共配置,最终会合并到每个连接中\n    common: Record&lt;string, any&gt;;\n}\n// 数据库连接配置\nexport type DbOption = TypeOrmModuleOptions &amp; {\n    name: string;\n};\n</code></pre>\n\nDbUtil继承自<code>BaseUtil</code>用于配置数据库连接,后面的教程会做更多处理,比如数据迁移和填充都要用到,目前比较简单,方法列表如下\n\n<code>getNestOptions</code>\n\n获取所有用于TypeOrmModule的数据库连接的配置,设置<code>autoLoadEntities</code>为``true<code>,使</code>entity<code>在</code>autoLoadEntities<code>后自动加载\n由于</code>entity<code>在</code>autoLoadEntities<code>后自动加载,</code>subscriber`由提供者方式注册 所以在配置中去除这两者\n\n<blockquote>\n  后续教程我们会写一个自定义的模块创建器来处理<code>subscriber</code>等问题\n</blockquote>\n\n<code>getNestOption</code>\n\n根据名称获取一个用于Nestjs默认方式的TypeOrmModule的数据库连接配置\n\n<code>setOptions</code>\n\n根据配置设置连接\n\n<ul>\n<li>如果有设置默认连接则启用默认连接,否则选择enabled中的第一个连接为默认连接</li>\n<li>如果enabled中没有添加默认连接的自动,则自动添加</li>\n<li>检查所有enabled中的连接已配置</li>\n<li>合并common配置到每个连接</li>\n</ul>\n\n<code>getMeta</code>\n\n使用<code>getNestOptions</code>获取所有配置,并提供给<code>CoreModule</code>用于<code>TypeOrmModule.forRoot</code>注册每个连接\n\n<h4><code>Utiler</code>管理器</h4>\n\n<code>Utiler</code>用于管理所有的<code>Util</code>类，并为它们创建<code>[类名,对象]</code>的映射\n\n此类有一个<code>mergeMeta</code>专门用于合并<code>Util</code>中通过<code>getMeta</code>方法提供<code>ModuleDataMeta</code>数据\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/common/configure/utiler.ts\nexport class Utiler {\n    // 根据传入的configure对象和需要启用的utils进行初始化\n    create(configure: Configure, utils: Array&lt;Type&lt;BaseUtil&lt;any&gt;&gt;&gt;)\n    // Util是否存在\n    has&lt;U extends BaseUtil&lt;C&gt;, C extends any&gt;(name: Type&lt;U&gt;): boolean\n    // 根据Util类获取其对象\n    get&lt;U extends BaseUtil&lt;C&gt;, C extends any&gt;(name: Type&lt;U&gt;): U\n    // 合并ModuleMetaData数据\n    mergeMeta(meta: ModuleMetadata): ModuleMetadata {\n        const utilMetas: ModuleMetadata = this.utils\n            .map((u) =&gt; {\n                const v = u.value as any;\n                return typeof v.getMeta === \'function\' ? v.getModuleMeta() : {};\n            })\n            .reduce(\n                (o, n) =&gt;\n                    merge(o, n, {\n                        arrayMerge: (_d, _s, _o) =&gt; [..._d, ..._s],\n                    }),\n                {},\n            );\n        return merge(meta, utilMetas, {\n            arrayMerge: (_d, _s, _o) =&gt; [..._d, ..._s],\n        });\n    }\n}\n</code></pre>\n\n<h3>核心模块</h3>\n\n为了可以传入动态配置,需要把原来的<code>CoreModule</code>改成动态模块\n\n<ol>\n<li>根据传入的配置初始化<code>Configure</code>类</li>\n<li>将初始化后的<code>configure</code>对象用于传入<code>utiler</code>用于创建各个<code>util</code>对象</li>\n<li>使用<code>utiler</code>的<code>mergeMeta</code>合并各个<code>Util</code>中提供给核心模块的元元素和默认的元元素(如果一些<code>Util</code>中没有<code>getMeta</code>方法则略过),对于<code>DbUtil</code>将提供使用<code>TypeOrmModule.forRoot</code>注册每个启用的连接的<code>imports</code></li>\n</ol>\n\n<pre><code class=\"language-typescript line-numbers\">// src/core/common/core.module.ts\n@Module({})\nexport class CoreModule {\n    static forRoot&lt;T extends BaseConfig = BaseConfig&gt;(\n        configs: ConfigRegCollection&lt;T&gt;,\n        utils: Array&lt;Type&lt;BaseUtil&lt;any&gt;&gt;&gt;,\n    ): DynamicModule {\n        const configure = new Configure();\n        configure.create(configs);\n        const utiler = new Utiler();\n        utiler.create(configure, utils);\n        const defaultMeta: ModuleMetadata = {\n          ...\n        };\n        return {\n            module: CoreModule,\n            global: true,\n            ...utiler.mergeMeta(defaultMeta),\n        };\n    }\n}\n</code></pre>\n\n<h3>配置文件</h3>\n\n分别创建<code>config/app.config.ts</code>和<code>config/database.config.ts</code>对应用和typeorm数据库连接进行配置\n\n然后在<code>AppModule</code>中注册<code>CoreModule</code>,通过<code>forRoot</code>方法传入配置和需要启用的<code>DbUtil</code>\n\n<pre><code class=\"language-typescript line-numbers\">// src/app.module.ts\n@Module({\n    imports: [CoreModule.forRoot(config, [DbUtil]), ContentModule, CoreModule],\n    controllers: [AppController],\n    providers: [AppService],\n})\nexport class AppModule {}\n\n</code></pre>\n\n<h3>启动文件</h3>\n\n最后美化一下输出的日志,去除原来的普通日志,只输出debug,错误信息和<code>ip+端口</code>的格式\n\n<pre><code class=\"language-typescript line-numbers\">// src/main.ts\nasync function bootstrap() {\n    const app = await NestFactory.create&lt;NestFastifyApplication&gt;(\n        AppModule,\n        new FastifyAdapter(),\n        { logger: [\'error\', \'warn\', \'debug\'] },\n    );\n    useContainer(app.select(AppModule), { fallbackOnErrors: true });\n    const configure = app.get(Configure, { strict: false });\n    const appConfig = configure.get&lt;AppConfig&gt;(\'app\')!;\n    await app.listen(appConfig.port, appConfig.host, () =&gt; {\n        console.log();\n        console.log(\'Server has started:\');\n        const listens: string[] = [];\n        const nets = networkInterfaces();\n        Object.entries(nets).forEach(([_, net]) =&gt; {\n            if (net) {\n                for (const item of net) {\n                    if (item.family === \'IPv4\') listens.push(item.address);\n                }\n            }\n        });\n        const urls = listens.map(\n            (l) =&gt;\n                `${appConfig.https ? \'https\' : \'http\'}://${l}:${\n                    appConfig.port\n                }`,\n        );\n        if (urls.length &gt; 0) {\n            console.log(`- Local: ${green.underline(urls[0])}`);\n        }\n        if (urls.length &gt; 1) {\n            console.log(`- Network: ${green.underline(urls[1])}`);\n        }\n    });\n}\nbootstrap();\n</code></pre>', '自定义验证规则与验证转义', '', 'publish', 'open', 'closed', '', '%e8%87%aa%e5%ae%9a%e4%b9%89%e9%aa%8c%e8%af%81%e8%a7%84%e5%88%99%e4%b8%8e%e9%aa%8c%e8%af%81%e8%bd%ac%e4%b9%89', '', '', '2021-11-09 21:46:26', '2021-11-09 13:46:26', '[chalk]: https://github.com/chalk/chalk \"chalk\"\r\n[dotenv]: https://github.com/motdotla/dotenv \"dotenv\"\r\n[find-up]: https://github.com/sindresorhus/find-up \"find-up\"\r\n\r\n# 定制化配置系统\r\n\r\n## 学习目标\r\n\r\n- 构建一个灵活的配置系统\r\n- 写一个数据库配置工具\r\n\r\n## 预装依赖\r\n\r\n\r\n- [chalk][]:用于在命令行输出有颜色的消息\r\n- [dotenv][]:读取环境变量文件到一个对象\r\n- [find-up][]:向上查找一个文件并返回其路径 \r\n\r\n##  文件结构\r\n\r\n本节课目录和文件结构的更改只聚焦于`core`包,编写好之后的目录结构如下\r\n\r\n```typescript\r\nsrc/core\r\n├── common\r\n│   ├── configure\r\n│   │   ├── base.util.ts\r\n│   │   ├── configure.ts\r\n│   │   ├── env.ts\r\n│   │   ├── index.ts\r\n│   │   └── utiler.ts\r\n│   ├── constants.ts\r\n│   ├── constraints\r\n│   │   ├── index.ts\r\n│   │   ├── match.constraint.ts\r\n│   │   ├── match.phone.constraint.ts\r\n│   │   └── password.constraint.ts\r\n│   ├── core.module.ts\r\n│   ├── decorators\r\n│   │   ├── dto-validation.decorator.ts\r\n│   │   └── index.ts\r\n│   ├── helpers.ts\r\n│   ├── index.ts\r\n│   ├── providers\r\n│   │   ├── app.filter.ts\r\n│   │   ├── app.interceptor.ts\r\n│   │   ├── app.pipe.ts\r\n│   │   └── index.ts\r\n│   └── types.ts\r\n└── database\r\n    ├── base\r\n    │   ├── data.service.ts\r\n    │   ├── index.ts\r\n    │   ├── repository.ts\r\n    │   ├── subscriber.ts\r\n    │   └── tree.repository.ts\r\n    ├── constants.ts\r\n    ├── constraints\r\n    │   ├── index.ts\r\n    │   ├── model.exist.constraint.ts\r\n    │   ├── tree.unique.constraint.ts\r\n    │   ├── tree.unique.exist.constraint.ts\r\n    │   ├── unique.constraint.ts\r\n    │   └── unique.exist.constraint.ts\r\n    ├── db.util.ts\r\n    ├── index.ts\r\n    ├── parse-uuid-entity.pipe.ts\r\n    └── types.ts\r\n```\r\n\r\n## 应用编码\r\n\r\n在开始编码之后创建`supports/database`目录,并把原来的一些数据库相关的类型,常量,函数等放入此目录中的文件,目录结构如上面所示,然后更改一下应用中的导入地址\r\n\r\n### 配置系统\r\n\r\n由于官方提供的`@nestjs/config`是通过系统内部的模块方式注入服务来实现的,很多场景下无法满足灵活的需求,比如自动化的多数据配置等,所以本节实现一个简单灵活的配置系统\r\n\r\n#### 类型及常量\r\n\r\n配置中并非所有元素都是静态,一些属性可能通过函数获取,比如通过`env`获取环境变量,而此函数在调用`loadEnvs`加载环境文件前是无法获取所有我们自定义的环境变量的,所以必须把配置包含在一个回调函数中,读取的时候去执行通过返回值获取,因此我们定义一个`ConfigRegister`作为获取配置的回调函数的类型\r\n\r\n```typescript\r\n// src/core/common/types.ts\r\nexport interface AppConfig {\r\n    debug: boolean; // 是否debug\r\n    timezone: string; // 时区\r\n    locale: string; // 语言\r\n    port: number; // 服务器端口\r\n    https: boolean; // 是否通过https访问\r\n    host: string; // 服务器地址\r\n}\r\n\r\nexport interface BaseConfig {\r\n    app: AppConfig;\r\n    [key: string]: any;\r\n}\r\n\r\n// 配置注册器函数\r\nexport type ConfigRegister&lt;T&gt; = () =&gt; T;\r\n// 多个配置注册器集合\r\nexport type ConfigRegCollection&lt;T&gt; = {\r\n    [P in keyof T]?: () =&gt; T[P];\r\n};\r\n```\r\n\r\n定义一个专门用于配置当前环境值的枚举常量\r\n\r\n```typescript\r\n// src/core/common/constants.ts\r\nexport enum EnviromentType {\r\n    DEV = &#039;development&#039;,\r\n    PROD = &#039;production&#039;,\r\n    TEST = &#039;test&#039;,\r\n}\r\n```\r\n\r\n#### 环境变量\r\n\r\n代码: `src/core/supports/configure/env.ts`\r\n\r\n首先编写`loadEnvs`函数,加载环境变量,步骤如下\r\n\r\n> 当前环境通过启动命令中的`NODE_ENV`赋值,其它的`process.env`环境变量都可以通过启动命令赋值\r\n>\r\n> 如`cross-env NODE_ENV=development nest start`\r\n\r\n- 使用[find-up][]向上层查找`.env`文件,直到找到为止,如果没有则`undefined`\r\n- 使用[find-up][]向上层查找`.env.当前环境`文件,直到找到为止,如果没有则`undefined`\r\n- 把前面查找的两个文件地址放入一个数组并过滤掉`undefined`\r\n- 使用[dotenv][]循环读取上面过滤后的文件数组中的环境变量,后者覆盖前者的变量,最终赋值给一个对象\r\n- 把以上读取的自定义环境变量对象与`process.env`合并后赋值给一个对象,前者覆盖后者\r\n- 把这个对象中的环境变量重新全部赋值给`process.env`\r\n\r\n编写`env`函数来读取环境变量,`env`函数通过重载实现多参数模式,其参数如下\r\n\r\n- `key`: 需要获取的环境变量的名称\r\n- `parseTo`: 转义函数(由于环境变量读取后其值都是字符串类型,所以对于`number`,`boolean`等类型的值需要传入转义函数进行转义)\r\n- `defaultValue`: 默认值\r\n\r\n```typescript\r\n// src/core/common/configure/env.ts\r\n\r\n// 获取全部环境变量\r\nexport function env(): { [key: string]: string };\r\n// 直接获取环境变量\r\nexport function env&lt;T extends BaseType = string&gt;(key: string): T;\r\n// 获取类型转义后的环境变量\r\nexport function env&lt;T extends BaseType = string&gt;(\r\n    key: string,\r\n    parseTo: ParseType&lt;T&gt;,\r\n): T;\r\n// 获取环境变量,不存在则获取默认值\r\nexport function env&lt;T extends BaseType = string&gt;(\r\n    key: string,\r\n    defaultValue: T,\r\n): T;\r\n// 获取类型转义后的环境变量,不存在则获取默认值\r\nexport function env&lt;T extends BaseType = string&gt;(\r\n    key: string,\r\n    parseTo: ParseType&lt;T&gt;,\r\n    defaultValue: T,\r\n): T;\r\n// 获取环境变量的具体实现\r\nexport function env&lt;T extends BaseType = string&gt;(\r\n    key?: string,\r\n    parseTo?: ParseType&lt;T&gt; | T,\r\n    defaultValue?: T,\r\n)\r\n```\r\n\r\n为了方便,写一个`environment`函数用于获取当前环境`NODE_ENV`\r\n\r\n#### 配置类\r\n\r\n配置类的实现比较简单,其属性和方法如下\r\n\r\n> `_created`属性的作用是避免重复加载配置\r\n\r\n```typescript\r\n// src/core/common/configure/configure.ts\r\nexport class Configure&lt;T extends BaseConfig = BaseConfig&gt; {\r\n    // 配置加载状态\r\n    protected _created = false;\r\n    // 根据配置注册器生成的配置\r\n    protected _config!: { [key: string]: any };\r\n    // 根据传入的配置构造器对象集生成所有配置\r\n    create(_config: ConfigRegCollection&lt;T&gt;)\r\n    // 配置是否已加载\r\n    get created()\r\n    // 获取一个配置,不存在则返回defaultValue\r\n    get&lt;CT extends any = any&gt;(key: string, defaultValue?: CT)\r\n   // 判断一个配置是否存在\r\n    has(key: string): boolean\r\n    // 获取所有配置\r\n    all&lt;CT extends T = T&gt;()\r\n    // 加载环境变量并重置所有配置\r\n    protected reset(_config: ConfigRegCollection&lt;T&gt;)\r\n    // 传入配置注册器集合并执行每个配置注册器来加载所有配置\r\n    protected loadConfig(_config: ConfigRegCollection&lt;T&gt;)\r\n}\r\n```\r\n\r\n### `Util`模式\r\n\r\n为了便捷的使用各种第三方服务和类库(如数据库,Redis,Socket,云存储等),我们构建一个简单的`Util`机制,每种服务使用`Util`类自动化配置以及在`Util`中编写各种API方法\r\n\r\n#### `BaseUtil`\r\n\r\n添加一个用于配置映射的类型\r\n\r\n```typescript\r\n// src/core/common/types.ts\r\nexport interface UtilConfigMaps {\r\n    required?: boolean | string[];\r\n    maps?: { [key: string]: string } | string;\r\n}\r\n```\r\n\r\n这个所有`Util`了基类,运行流程如下\r\n\r\n- 通过`mapConfig`把`configure`(前面创建的`Configure`类的对象)中需要的配置映射到`configMaps`属性\r\n- 在映射的时候使用`checkAndGetConfig`,如果是`required`是`true`或是个包含此字段的数组,但是配置中又没有就抛出错误\r\n- 最终在`factory`方法中调用`mapConfig`获取映射后的配置并作为参数赋值给子类的`create`方法,子类可以选择把配置赋值给`config`属性或其它用途\r\n\r\n```typescript\r\n// src/core/common/configure/base.util.ts\r\nexport abstract class BaseUtil&lt;CT&gt; {\r\n    protected _created = false;\r\n\r\n    protected configure!: Configure;\r\n    // 子类配置\r\n    protected config!: CT;\r\n\r\n    // 配置映射\r\n    protected abstract configMaps?: UtilConfigMaps;\r\n\r\n    /**\r\n     * 检测是否已被初始化\r\n     */\r\n    created()\r\n    /**\r\n     * 始化Util类\r\n     * 将映射后的配置放入子类的factory进行进一步操作\r\n     * 比如赋值给this.config\r\n     */\r\n    factory(configure: Configure)\r\n    /**\r\n     * 由子类根据配置初始化\r\n     */\r\n    protected abstract create(config: any): void;\r\n    /**\r\n     * 根据configMaps获取映射后的配置\r\n     * 如果configs是一个string则直接在获取其在配置池中的值\r\n     * 如果configs是一个对象则获取后再一一映射\r\n     */\r\n    private mapConfig()\r\n    /**\r\n     * 检测并获取配置\r\n     * 如果required为true则检测每个配置在配置池中是否存在\r\n     * 如果required为数组则只把数组中的值作为key去检测它们在配置池中是否存在\r\n     * 其它情况不检测\r\n     */\r\n    protected checkAndGetConfig(\r\n        name: string,\r\n        key: string,\r\n        required?: UtilConfigMaps[&#039;required&#039;],\r\n    )\r\n}\r\n\r\n```\r\n\r\n#### `DbUtil`\r\n\r\n添加用于数据库配置的类型\r\n\r\n> 需要注意的是与`nestjs`默认的配置方式不同,为了让配置更加清晰,在自定义的配置方式中我们让每个连接必须带有连接名称\r\n\r\n```typescript\r\n// src/core/database/types.ts\r\nexport interface DatabaseConfig {\r\n    // 数据库默认配置\r\n    default?: string;\r\n    // 启用的连接名称\r\n    enabled: string[];\r\n    // 数据库连接配置\r\n    connections: DbOption[];\r\n    // 所有连接的公共配置,最终会合并到每个连接中\r\n    common: Record&lt;string, any&gt;;\r\n}\r\n// 数据库连接配置\r\nexport type DbOption = TypeOrmModuleOptions &amp; {\r\n    name: string;\r\n};\r\n```\r\n\r\nDbUtil继承自`BaseUtil`用于配置数据库连接,后面的教程会做更多处理,比如数据迁移和填充都要用到,目前比较简单,方法列表如下\r\n\r\n`getNestOptions`\r\n\r\n获取所有用于TypeOrmModule的数据库连接的配置,设置`autoLoadEntities`为``true`,使`entity`在`autoLoadEntities`后自动加载\r\n由于`entity`在`autoLoadEntities`后自动加载,`subscriber`由提供者方式注册 所以在配置中去除这两者\r\n\r\n> 后续教程我们会写一个自定义的模块创建器来处理`subscriber`等问题\r\n\r\n`getNestOption`\r\n\r\n根据名称获取一个用于Nestjs默认方式的TypeOrmModule的数据库连接配置\r\n\r\n`setOptions`\r\n\r\n根据配置设置连接\r\n\r\n- 如果有设置默认连接则启用默认连接,否则选择enabled中的第一个连接为默认连接\r\n- 如果enabled中没有添加默认连接的自动,则自动添加\r\n- 检查所有enabled中的连接已配置\r\n- 合并common配置到每个连接\r\n\r\n`getMeta`\r\n\r\n使用`getNestOptions`获取所有配置,并提供给`CoreModule`用于`TypeOrmModule.forRoot`注册每个连接\r\n\r\n#### `Utiler`管理器\r\n\r\n`Utiler`用于管理所有的`Util`类，并为它们创建`[类名,对象]`的映射\r\n\r\n此类有一个`mergeMeta`专门用于合并`Util`中通过`getMeta`方法提供`ModuleDataMeta`数据\r\n\r\n```typescript\r\n// src/core/common/configure/utiler.ts\r\nexport class Utiler {\r\n    // 根据传入的configure对象和需要启用的utils进行初始化\r\n    create(configure: Configure, utils: Array&lt;Type&lt;BaseUtil&lt;any&gt;&gt;&gt;)\r\n    // Util是否存在\r\n    has&lt;U extends BaseUtil&lt;C&gt;, C extends any&gt;(name: Type&lt;U&gt;): boolean\r\n    // 根据Util类获取其对象\r\n    get&lt;U extends BaseUtil&lt;C&gt;, C extends any&gt;(name: Type&lt;U&gt;): U\r\n    // 合并ModuleMetaData数据\r\n    mergeMeta(meta: ModuleMetadata): ModuleMetadata {\r\n        const utilMetas: ModuleMetadata = this.utils\r\n            .map((u) =&gt; {\r\n                const v = u.value as any;\r\n                return typeof v.getMeta === &#039;function&#039; ? v.getModuleMeta() : {};\r\n            })\r\n            .reduce(\r\n                (o, n) =&gt;\r\n                    merge(o, n, {\r\n                        arrayMerge: (_d, _s, _o) =&gt; [..._d, ..._s],\r\n                    }),\r\n                {},\r\n            );\r\n        return merge(meta, utilMetas, {\r\n            arrayMerge: (_d, _s, _o) =&gt; [..._d, ..._s],\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n### 核心模块\r\n\r\n为了可以传入动态配置,需要把原来的`CoreModule`改成动态模块\r\n\r\n1. 根据传入的配置初始化`Configure`类\r\n2. 将初始化后的`configure`对象用于传入`utiler`用于创建各个`util`对象\r\n3. 使用`utiler`的`mergeMeta`合并各个`Util`中提供给核心模块的元元素和默认的元元素(如果一些`Util`中没有`getMeta`方法则略过),对于`DbUtil`将提供使用`TypeOrmModule.forRoot`注册每个启用的连接的`imports`\r\n\r\n```typescript\r\n// src/core/common/core.module.ts\r\n@Module({})\r\nexport class CoreModule {\r\n    static forRoot&lt;T extends BaseConfig = BaseConfig&gt;(\r\n        configs: ConfigRegCollection&lt;T&gt;,\r\n        utils: Array&lt;Type&lt;BaseUtil&lt;any&gt;&gt;&gt;,\r\n    ): DynamicModule {\r\n        const configure = new Configure();\r\n        configure.create(configs);\r\n        const utiler = new Utiler();\r\n        utiler.create(configure, utils);\r\n        const defaultMeta: ModuleMetadata = {\r\n          ...\r\n        };\r\n        return {\r\n            module: CoreModule,\r\n            global: true,\r\n            ...utiler.mergeMeta(defaultMeta),\r\n        };\r\n    }\r\n}\r\n```\r\n\r\n### 配置文件\r\n\r\n分别创建`config/app.config.ts`和`config/database.config.ts`对应用和typeorm数据库连接进行配置\r\n\r\n然后在`AppModule`中注册`CoreModule`,通过`forRoot`方法传入配置和需要启用的`DbUtil`\r\n\r\n```typescript\r\n// src/app.module.ts\r\n@Module({\r\n    imports: [CoreModule.forRoot(config, [DbUtil]), ContentModule, CoreModule],\r\n    controllers: [AppController],\r\n    providers: [AppService],\r\n})\r\nexport class AppModule {}\r\n\r\n```\r\n\r\n### 启动文件\r\n\r\n最后美化一下输出的日志,去除原来的普通日志,只输出debug,错误信息和`ip+端口`的格式\r\n\r\n```typescript\r\n// src/main.ts\r\nasync function bootstrap() {\r\n    const app = await NestFactory.create<NestFastifyApplication>(\r\n        AppModule,\r\n        new FastifyAdapter(),\r\n        { logger: [\'error\', \'warn\', \'debug\'] },\r\n    );\r\n    useContainer(app.select(AppModule), { fallbackOnErrors: true });\r\n    const configure = app.get(Configure, { strict: false });\r\n    const appConfig = configure.get<AppConfig>(\'app\')!;\r\n    await app.listen(appConfig.port, appConfig.host, () => {\r\n        console.log();\r\n        console.log(\'Server has started:\');\r\n        const listens: string[] = [];\r\n        const nets = networkInterfaces();\r\n        Object.entries(nets).forEach(([_, net]) => {\r\n            if (net) {\r\n                for (const item of net) {\r\n                    if (item.family === \'IPv4\') listens.push(item.address);\r\n                }\r\n            }\r\n        });\r\n        const urls = listens.map(\r\n            (l) =>\r\n                `${appConfig.https ? \'https\' : \'http\'}://${l}:${\r\n                    appConfig.port\r\n                }`,\r\n        );\r\n        if (urls.length > 0) {\r\n            console.log(`- Local: ${green.underline(urls[0])}`);\r\n        }\r\n        if (urls.length > 1) {\r\n            console.log(`- Network: ${green.underline(urls[1])}`);\r\n        }\r\n    });\r\n}\r\nbootstrap();\r\n```\r\n\r\n', 47, 'https://jikexingkong.com/docs/nestjs-practices/%e8%87%aa%e5%ae%9a%e4%b9%89%e9%aa%8c%e8%af%81%e8%a7%84%e5%88%99%e4%b8%8e%e9%aa%8c%e8%af%81%e8%bd%ac%e4%b9%89/', 7, 'docs', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(57, 1, '2021-10-29 14:13:03', '2021-10-29 06:13:03', '<h1>使用esbuild快速热启动</h1>\n\n<h2>学习目标</h2>\n\n<ul>\n<li>使用<a href=\"http://yargs.js.org/\" title=\"yargs\">yargs</a>构建命令行工具</li>\n<li>父子进程间通信</li>\n<li>使使用<a href=\"https://esbuild.github.io/\" title=\"esbuild\">esbuild</a>极速执行<code>ts</code>文件的<code>node.js</code>应用</li>\n<li><a href=\"https://nodemon.io/\" title=\"nodemon\">nodemon</a>监控文件变化重启</li>\n</ul>\n\n<h2>预装依赖</h2>\n\n<blockquote>\n  为了防止依赖的混乱(比如在应用中无需依赖<a href=\"https://esbuild.github.io/\" title=\"esbuild\">esbuild</a>等),后续教程会使用monorepo模式把CLI工具包作为一个单独的包来管理自身的依赖\n</blockquote>\n\n<ul>\n<li><a href=\"http://yargs.js.org/\" title=\"yargs\">yargs</a>:构建CLI工具的框架</li>\n<li><a href=\"https://nodemon.io/\" title=\"nodemon\">nodemon</a>: 监控文件改变并重新执行命令</li>\n<li><a href=\"https://github.com/sindresorhus/execa\" title=\"execa\">execa</a>:异步获取子进程消息替代<code>process</code>的回调函数方式</li>\n<li><a href=\"https://github.com/sindresorhus/ora\" title=\"ora\">ora</a>:在命令行生成雪碧图</li>\n<li><a href=\"https://esbuild.github.io/\" title=\"esbuild\">esbuild</a>:编译<code>ts</code>文件</li>\n<li><a href=\"https://github.com/anatine/esbuildnx/tree/main/packages/esbuild-decorators\" title=\"esbuild-decorators\">esbuild-decorators</a>:使<a href=\"https://esbuild.github.io/\" title=\"esbuild\">esbuild</a>支持<a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html#metadata\" title=\"metadata\">metadata</a></li>\n<li><a href=\"https://github.com/evanw/node-source-map-support\" title=\"source-map-support\">source-map-support</a>:为转义的<code>ts</code>代码提供源映射支持</li>\n</ul>\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm add chalk execa ora yargs\n~ pnpm add esbuild nodemon @types/nodemon @anatine/esbuild-decorators source-map-support -D\n</code></pre>\n\n<h2>文件结构</h2>\n\n本次编码集中于新建的<code>scripts</code>目录,文件结构如下\n\n<pre><code class=\"language-shell line-numbers\">scripts\n├── cli.js\n├── commands\n│   ├── index.ts\n│   └── start.command.ts\n├── esbuild\n│   ├── runner.js\n│   ├── tansfomer.d.ts\n│   └── tansfomer.js\n├── handlers\n│   ├── index.ts\n│   └── start.handler.ts\n├── helpers.ts\n└── types.ts\n</code></pre>\n\n<h2>CLI编码</h2>\n\n这节教程以构建一个自定义的启动命令为例\n\n<h3>代码转义</h3>\n\n本节教程使用<a href=\"https://esbuild.github.io/\" title=\"esbuild\">esbuild</a>来作为编译器执行我们的应用,当然你也可以使用其它的编译器,举例几个目前我自己测试过确实可用的编译器,并简短说明一下他们各自的优缺点\n\n<blockquote>\n  以下应用重启耗时测试环境为在笔者本机(16G,i7的MBP)下结合<a href=\"https://nodemon.io/\" title=\"nodemon\">nodemon</a>(<a href=\"https://github.com/wclr/ts-node-dev\" title=\"ts-node-dev\">ts-node-dev</a>除外)在每次修改代码后重启本教程示例应用的耗时\n</blockquote>\n\n<h4><a href=\"https://typestrong.org/ts-node/\" title=\"ts-node\">ts-node</a></h4>\n\n耗时: <code>4.5-5s</code>左右\n\n优点: 与原生<code>tsc</code>效果一样,是类标准的<code>typescript</code>的<code>node</code>运行时,基本无bug并且支持编程.因为由<code>ts</code>编写,所以即使遇到问题也可以自己处理.\n\n缺点: 效率低下,重启后需要等待一会儿才能启动应用\n\n如果使用<code>ts-node</code>编译的话,把<code>runner.js</code>改成如下代码即可\n\n<pre><code class=\"language-javascript line-numbers\">require(\'ts-node\').register({\n    files: true,     \n    transpileOnly: true,\n    project: tsconfig,\n});\nrequire(\'tsconfig-paths/register\');\n</code></pre>\n\n<h4><a href=\"https://swc.rs/\" title=\"swc.js\">swc.js</a></h4>\n\n耗时: <code>2-3s</code>左右\n\n优点: 使用[rust][]编写,运行效率非常快,同样支持编程,并且无需插件等,原生支持<a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html#metadata\" title=\"metadata\">metadata</a>\n\n缺点: 部分代码闭源私有,另一个问题是[rust][]这语言比较偏,对于不熟悉的同学遇到问题就显得非常黑盒(比如不支持<code>class-validator</code>的问题),只能等待官方解决\n\n<h4><a href=\"https://github.com/wclr/ts-node-dev\" title=\"ts-node-dev\">ts-node-dev</a></h4>\n\n耗时: <code>0.5-1s</code>\n\n优点: 基于<code>ts-node</code>实现,基本无bug,效率非常高,几乎实时重启\n\n缺点: 不支持编程,重启为热重启,会造成程序内部一些比较大的问题\n\n<h4><a href=\"https://esbuild.github.io/\" title=\"esbuild\">esbuild</a></h4>\n\n耗时: <code>2.2-3.5s</code>左右\n\n优点: 使用[golang][]编写,对于跟笔者一样对[golang][]比较熟悉的同学非常友好,而且完全开源,这也是本教程采用它的一个重要原因.运行效率也适中,默认即为编程实现.官方原则上是用来作为打包工具的,在本教程里我们通过简短的几个函数就可以让他变为支持<code>ts</code>的<code>node</code>运行时.还有一个优点就是前端打包工具[vite][]目前比较流行,如果做[react][]或者[vue][]的全栈应用可以避免重复学习\n\n缺点: 原生不支持装饰器的<a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html#metadata\" title=\"metadata\">metadata</a>,需要安装<a href=\"https://github.com/anatine/esbuildnx/tree/main/packages/esbuild-decorators\" title=\"esbuild-decorators\">esbuild-decorators</a>插件,并且有可能会有意想不到的bug,一些问题需要自己爬坑\n\n对于<a href=\"https://esbuild.github.io/\" title=\"esbuild\">esbuild</a>只需要使用两个函数即可实现对nestjs应用的转义\n\n<pre><code class=\"language-javascript line-numbers\">// scripts/esbuild/runner.js\n\n// 据配置使用esbuild转义指定文件,并返回转义后的代码\nasync function transpile(code, filename, options = {})\n// 循环转义指定后缀的文件\nfunction runner(options = {}) \n</code></pre>\n\n此处为了有类型提示需要定义一个声明文件\n\n<pre><code class=\"language-typescript line-numbers\">// scripts/esbuild/tansfomer.d.ts\nimport { BuildOptions } from \'esbuild\';\n\nexport declare function transpile(\n    code: string,\n    filename: string,\n    options: Partial&lt;BuildOptions&gt; = {},\n): Promise&lt;string&gt;;\n\nexport declare function runner(\n    options: Partial&lt;BuildOptions&gt; = {},\n): Promise&lt;void&gt;;\n</code></pre>\n\n<h3>参数类型</h3>\n\n由控制台传给命令一些参数可以实现不同的功能,参数的类型如下\n\n<pre><code class=\"language-typescript line-numbers\">// scripts/types.ts\nexport type StartCommandArgs = {\n    watch: boolean; // 是否监控文件变化重启服务器\n    lint: boolean;  // 是否在启动前预先使用eslint进行格式化\n    debug: boolean; // 是否在debug中启动,以便使用vscode或chrome调试\n    debug_port?: number; // 调试服务的端口\n};\n</code></pre>\n\n<h3>编译器</h3>\n\n因为<a href=\"https://nodemon.io/\" title=\"nodemon\">nodemon</a>目前无法直接使用<a href=\"https://typestrong.org/ts-node/\" title=\"ts-node\">ts-node</a>或者<a href=\"https://esbuild.github.io/\" title=\"esbuild\">esbuild</a>等<code>ts</code>编译器(甚至不能使用<code>node</code>参数<code>-r</code>)直接在<code>fork</code>模式下执行子进程,其<code>spawn</code>选项只对纯<code>node</code>脚本有效,所以即使把<code>spawn</code>设置为<code>false</code>,任然会以普通shell来执行子进程,具体情况查阅[此处][https://github.com/remy/nodemon/issues/1871],为了可以使用<code>fork</code>,新建一个<code>runner.js</code>文件,并在其中加载<a href=\"https://esbuild.github.io/\" title=\"esbuild\">esbuild</a>编译器和包含<code>main.ts</code>即可\n\n<pre><code class=\"language-javascript line-numbers\">// scripts/esbuild/runner.js\nconst path = require(\'path\');\nconst { runner } = require(\'./tansfomer\');\n\nconst tsconfig = path.resolve(__dirname, \'../../tsconfig.build.json\');\n\nrunner({\n    tsconfig,\n    platform: \'node\',\n    target: \'esnext\',\n    sourcemap: false,\n});\n\nrequire(path.resolve(__dirname, \'../../src/main.ts\'));\n</code></pre>\n\n<h3>常规启动</h3>\n\n常规启动直接使用<code>fork</code>子进程启动,在这里分类方便使用异步和<code>std</code>数据,不采用<code>node</code>自带的<code>proccess</code> API,而使用更为方便的<code>execa</code>这个库来实现\n\n<pre><code class=\"language-typescript line-numbers\">// scripts/handlers/start.handler.ts\nexport async function StartHandler(args: yargs.Arguments&lt;StartCommandArgs&gt;) {\n   const script = path.resolve(__dirname, \'../esbuild/runner.js\');\n  ...\n  if (args.watch &amp;&amp; !args.debug) {...}\n  else{\n    const subprocess = execa.node(script, undefined, {\n        ...commonOptions,\n         stdio: \'pipe\',\n         nodeOptions: execArgs,\n     });\n     startLog(subprocess, spinner, args.debug);\n  }\n}\n</code></pre>\n\n<h3>监控与重启</h3>\n\n使用<a href=\"https://nodemon.io/\" title=\"nodemon\">nodemon</a>对文件进行监控,一旦文件发生改变则自动重启\n\n启动后可以看到三个<code>node</code>进程,分别为<code>cli.js</code>执行<a href=\"http://yargs.js.org/\" title=\"yargs\">yargs</a>的主进程,<code>nodemon</code>的进程,和以<code>nodemon</code>启动的<code>server</code>子进程\n\n其关系为,<code>nodemon</code>为<code>yargs</code>的子进程,<code>server</code>为<code>nodemon</code>的子进程(<code>fork</code>进程)\n\n在退出<code>nodemon</code>进程(<code>ctrl+c</code>)的时候<code>server</code>子进程会自动退出,而<code>yargs</code>父进程需要主动退出\n\n具体实现如下\n\n<pre><code class=\"language-typescript line-numbers\">// scripts/handlers/start.handler.ts\n    if (args.watch &amp;&amp; !args.debug) {\n        const runner = nodemon({\n            ...commonOptions,\n            script,\n            exec: \'node\',\n            args: execArgs,\n            ext: \'js,json,ts\',\n            watch: [\'src\'],\n            ignore: [\'.git\', \'node_modules\', \'dist\', \'scripts\'],\n            nodeArgs: execArgs,\n            spawn: false, // 使用fork\n            verbose: true,\n            stdout: false, // 把server子进程的stdout消息发送到nodemon父进程的管道,由父进程控制输出\n        });\n        // 重启时输出消息\n        runner.on(\'restart\', async () =&gt; {\n            console.log();\n            console.log(chalk.yellow(startMsg.restarting));\n        });\n        // 在退出nodemon进程时关闭yargs父进程\n        runner.on(\'quit\', async (code: number) =&gt; process.exit(code));\n        // eslint-disable-next-line func-names\n        runner.on(\'readable\', function (this: ChildProcess) {\n            startLog(this, spinner, args.debug);\n        });\n    }\n</code></pre>\n\n<h3>子进程消息</h3>\n\n启动器和<a href=\"https://nodemon.io/\" title=\"nodemon\">nodemon</a>的<code>startLog</code>函数用于在启动应用时输出应用内的消息,如果是<code>debug</code>模式则直接输出<code>stdout</code>消息,如果是普通模式则托管给<code>printFork</code>处理\n\n<code>printFork</code>函数可通过<code>fork</code>通信与<code>message</code>钩子获取子进程主动发送的内容,为了让应用在启动后停止雪碧图,可以在<code>main.ts</code>中发送一个<code>started</code>消息\n\n<pre><code class=\"language-typescript line-numbers\">// scripts/helpers.ts\nexport function printFork(\n    subprocess: ChildProcess, // server子进程\n    spinner: ora.Ora, // 雪碧图对象\n    msg: { successed: string; failed: string }, // 启动成功与错误的消息,为应用内部的日志\n    success: string, // 应用主动发出的fork消息\n) {\n    if (subprocess.stdout) subprocess.stdout.pipe(process.stdout);\n    if (subprocess.stderr) {\n        subprocess.stderr.on(\'data\', (data) =&gt; {\n            console.error(data.toString());\n            spinner.fail(chalk.red(msg.failed));\n            spinner.clear();\n        });\n    }\n    subprocess.once(\'message\', (m) =&gt; {\n        if (m === success) {\n            spinner.succeed(chalk.greenBright.underline(msg.successed));\n            spinner.clear();\n        }\n    });\n}\n</code></pre>\n\n在应用内部发送<strong>已启动</strong>消息\n\n<pre><code class=\"language-typescript line-numbers\">// src/main.ts\n...\nif (process.send) process.send(\'started\');\nawait app.listen(appConfig.port, appConfig.host, () =&gt; {\n</code></pre>\n\n感兴趣的话还可以添加一个时间计算的功能,具体可以看代码\n\n<h3>处理<code>Eslint</code></h3>\n\n可以在启动应用的时候对代码做一次<code>eslint</code>规则检测\n\n<blockquote>\n  后续我们为<code>cli</code>添加自定义的配置功能后此函数可以独立为一个命令\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">// scripts/helpers.ts\nexport async function lintCode()\n</code></pre>\n\n在<code>StartHandler</code>函数中添加\n\n<pre><code class=\"language-typescript line-numbers\">// scripts/handlers/start.handler.ts\nexport async function StartHandler(args: yargs.Arguments&lt;StartCommandArgs&gt;) {\n    if (args.lint) await lintCode();\n    ...\n}\n</code></pre>\n\n<h3>构建命令</h3>\n\n为了执行<code>ts</code>文件,需要在<code>cli.js</code>中引用前面编写的<code>runner</code>方法,并包含我们的命令行包\n\n<pre><code class=\"language-javascript line-numbers\">// scripts/cli.js\nconst { runner } = require(\'./esbuild/tansfomer\');\n\nrunner({\n    platform: \'node\',\n    target: \'esnext\',\n    sourcemap: false,\n});\nrequire(\'./commands\');\n</code></pre>\n\n构建<code>start</code>命令\n\n<pre><code class=\"language-typescript line-numbers\">// scripts/commands/start.command.ts\nexport const StartCommand: CommandModule&lt;any, StartCommandArgs&gt; = {\n    command: [\'app:start\', \'as\'], // 命令别名为 \'as\'\n    describe: \'Start app.\',\n    builder: {\n        // 是否启用监控热重启,默认启用\n        watch\n       // 是否在启动时eslint一次,默认启用\n        lint\n      // 是否启用debug模式.默认不启用\n        debug\n       // 给编辑器和IDE用于debug的端口\n        debug_portdefault: 9999,\n        },\n    } as const,\n    handler: async (args: yargs.Arguments&lt;StartCommandArgs&gt;) =&gt;\n        StartHandler(args),\n};\n</code></pre>\n\n然后直接在<code>index.ts</code>中构建<a href=\"http://yargs.js.org/\" title=\"yargs\">yargs</a>命令即可\n\n<pre><code class=\"language-typescript line-numbers\">// scripts/commands/index.tss\ncommands.forEach((command) =&gt; yargs.command(command));\nyargs\n    .usage(\'Usage: $0 &lt;command&gt; [options]\')\n    .demandCommand(1)\n    .strict()\n    .scriptName(\'cli\')\n    .fail((msg, err, y) =&gt; {\n        // 遇到错误命令时,如果无参数则直接显示帮助信息\n        if ((!msg &amp;&amp; !err) || args.length === 0) {\n            yargs.showHelp();\n            process.exit();\n        }\n        if (msg) console.error(chalk.red(msg));\n        if (err) console.error(chalk.red(err.message));\n        process.exit();\n    })\n    .alias(\'v\', \'version\')\n    .help(\'h\')\n    .alias(\'h\', \'help\').argv;\n</code></pre>\n\n<h2>Debug模式</h2>\n\n原来我们直接使用<a href=\"https://typestrong.org/ts-node/\" title=\"ts-node\">ts-node</a>进行debug,现在尝试使用自己构建的<code>cli</code>进行debug,在debug模式时可以关闭<code>spinner</code>功能,然后作为<code>node</code>参数传入子进程即可\n\n<blockquote>\n  因为debug时,vscode等ide会自动监控文件与重启,所以如果是<code>watch</code>模式启动,则直接跳到非<code>watch</code>的普通模式启动\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">// scripts/handlers/start.handler.ts\nconst execArgs: string[] = [];\nif (!args.debug) spinner.start();\nif (args.watch &amp;&amp; !args.debug) {\n  ...\n}else {\n   if (args.debug) execArgs.push(`--inspect=${args.debug_port}`);\n   const subprocess = execa.node(script, undefined, {\n            ...\n            nodeOptions: execArgs,\n   });\n}\n</code></pre>\n\n修改vscode的<code>launch.json</code>\n\n<pre><code class=\"language-json line-numbers\">// .vscode/launch.json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"NESTPLUS\",\n            \"type\": \"pwa-node\",\n            \"request\": \"attach\",\n            \"restart\": true,\n            \"cwd\": \"${workspaceRoot}\",\n            \"port\": 9999,\n            \"sourceMaps\": true,\n            \"resolveSourceMapLocations\": [\n                \"${workspaceFolder}/**\",\n                \"!**/node_modules/**\"\n            ]\n        }\n    ]\n}\n</code></pre>\n\n<h2>更改命令</h2>\n\n修改<code>package.json</code>中的启动命令\n\n<pre><code class=\"language-json line-numbers\">// package.json\n    \"cli\": \"node ./scripts/cli.js\",\n    \"cli:prod\": \"cross-env NODE_ENV=production node ./scripts/cli.js\",\n    \"prebuild\": \"cross-env rimraf dist\",\n    \"build\": \"nest build\",\n    \"format\": \"prettier --write \\\"src/**/*.ts\\\" \\\"test/**/*.ts\\\"\",\n    \"start\": \"node ./scripts/cli.js as --no-lint\",\n    \"start:lint\": \"node ./scripts/cli.js as\",\n    \"start:nw\": \"node ./scripts/cli.js as --no-w --no-lint\",\n    \"start:debug\": \"node ./scripts/cli.js as --no-lint --debug\",\n    ...\n</code></pre>', '定制化配置系统', '', 'publish', 'open', 'closed', '', '%e5%ae%9a%e5%88%b6%e5%8c%96%e9%85%8d%e7%bd%ae%e7%b3%bb%e7%bb%9f', '', '', '2021-11-09 21:47:34', '2021-11-09 13:47:34', '[yargs]: http://yargs.js.org/ \"yargs\"\r\n[nodemon]: https://nodemon.io/ \"nodemon\"\r\n[execa]: https://github.com/sindresorhus/execa	\"execa\"\r\n[ora]:  https://github.com/sindresorhus/ora \"ora\"\r\n[esbuild]: https://esbuild.github.io/	\"esbuild\"\r\n[esbuild-decorators]: https://github.com/anatine/esbuildnx/tree/main/packages/esbuild-decorators	\"esbuild-decorators\"\r\n[source-map-support]: https://github.com/evanw/node-source-map-support	\"source-map-support\"\r\n[metadata]: https://www.typescriptlang.org/docs/handbook/decorators.html#metadata \"metadata\"\r\n[ts-node]: https://typestrong.org/ts-node/ \"ts-node\"\r\n[swc.js]: https://swc.rs/ \"swc.js\"\r\n[ts-node-dev]: https://github.com/wclr/ts-node-dev \"ts-node-dev\"\r\n# 使用esbuild快速热启动\r\n\r\n## 学习目标\r\n\r\n- 使用[yargs][]构建命令行工具\r\n- 父子进程间通信\r\n- 使使用[esbuild][]极速执行`ts`文件的`node.js`应用\r\n- [nodemon][]监控文件变化重启\r\n\r\n## 预装依赖\r\n\r\n> 为了防止依赖的混乱(比如在应用中无需依赖[esbuild][]等),后续教程会使用monorepo模式把CLI工具包作为一个单独的包来管理自身的依赖\r\n\r\n- [yargs][]:构建CLI工具的框架\r\n- [nodemon][]: 监控文件改变并重新执行命令\r\n- [execa][]:异步获取子进程消息替代`process`的回调函数方式\r\n- [ora][]:在命令行生成雪碧图\r\n- [esbuild][]:编译`ts`文件\r\n- [esbuild-decorators][]:使[esbuild][]支持[metadata][]\r\n- [source-map-support][]:为转义的`ts`代码提供源映射支持\r\n\r\n```shell\r\n~ pnpm add chalk execa ora yargs\r\n~ pnpm add esbuild nodemon @types/nodemon @anatine/esbuild-decorators source-map-support -D\r\n```\r\n\r\n## 文件结构\r\n\r\n本次编码集中于新建的`scripts`目录,文件结构如下\r\n\r\n```shell\r\nscripts\r\n├── cli.js\r\n├── commands\r\n│   ├── index.ts\r\n│   └── start.command.ts\r\n├── esbuild\r\n│   ├── runner.js\r\n│   ├── tansfomer.d.ts\r\n│   └── tansfomer.js\r\n├── handlers\r\n│   ├── index.ts\r\n│   └── start.handler.ts\r\n├── helpers.ts\r\n└── types.ts\r\n```\r\n\r\n## CLI编码\r\n\r\n这节教程以构建一个自定义的启动命令为例\r\n\r\n### 代码转义\r\n\r\n本节教程使用[esbuild][]来作为编译器执行我们的应用,当然你也可以使用其它的编译器,举例几个目前我自己测试过确实可用的编译器,并简短说明一下他们各自的优缺点\r\n\r\n> 以下应用重启耗时测试环境为在笔者本机(16G,i7的MBP)下结合[nodemon][]([ts-node-dev][]除外)在每次修改代码后重启本教程示例应用的耗时\r\n\r\n#### [ts-node][]\r\n\r\n耗时: `4.5-5s`左右\r\n\r\n优点: 与原生`tsc`效果一样,是类标准的`typescript`的`node`运行时,基本无bug并且支持编程.因为由`ts`编写,所以即使遇到问题也可以自己处理.\r\n\r\n缺点: 效率低下,重启后需要等待一会儿才能启动应用\r\n\r\n如果使用`ts-node`编译的话,把`runner.js`改成如下代码即可\r\n\r\n```javascript\r\nrequire(&#039;ts-node&#039;).register({\r\n    files: true,     \r\n    transpileOnly: true,\r\n    project: tsconfig,\r\n});\r\nrequire(&#039;tsconfig-paths/register&#039;);\r\n```\r\n\r\n#### [swc.js][]\r\n\r\n耗时: `2-3s`左右\r\n\r\n优点: 使用[rust][]编写,运行效率非常快,同样支持编程,并且无需插件等,原生支持[metadata][]\r\n\r\n缺点: 部分代码闭源私有,另一个问题是[rust][]这语言比较偏,对于不熟悉的同学遇到问题就显得非常黑盒(比如不支持`class-validator`的问题),只能等待官方解决\r\n\r\n#### [ts-node-dev][]\r\n\r\n耗时: `0.5-1s`\r\n\r\n优点: 基于`ts-node`实现,基本无bug,效率非常高,几乎实时重启\r\n\r\n缺点: 不支持编程,重启为热重启,会造成程序内部一些比较大的问题\r\n\r\n#### [esbuild][]\r\n\r\n耗时: `2.2-3.5s`左右\r\n\r\n优点: 使用[golang][]编写,对于跟笔者一样对[golang][]比较熟悉的同学非常友好,而且完全开源,这也是本教程采用它的一个重要原因.运行效率也适中,默认即为编程实现.官方原则上是用来作为打包工具的,在本教程里我们通过简短的几个函数就可以让他变为支持`ts`的`node`运行时.还有一个优点就是前端打包工具[vite][]目前比较流行,如果做[react][]或者[vue][]的全栈应用可以避免重复学习\r\n\r\n缺点: 原生不支持装饰器的[metadata][],需要安装[esbuild-decorators][]插件,并且有可能会有意想不到的bug,一些问题需要自己爬坑\r\n\r\n对于[esbuild][]只需要使用两个函数即可实现对nestjs应用的转义\r\n\r\n```javascript\r\n// scripts/esbuild/runner.js\r\n\r\n// 据配置使用esbuild转义指定文件,并返回转义后的代码\r\nasync function transpile(code, filename, options = {})\r\n// 循环转义指定后缀的文件\r\nfunction runner(options = {}) \r\n```\r\n\r\n此处为了有类型提示需要定义一个声明文件\r\n\r\n```typescript\r\n// scripts/esbuild/tansfomer.d.ts\r\nimport { BuildOptions } from &#039;esbuild&#039;;\r\n\r\nexport declare function transpile(\r\n    code: string,\r\n    filename: string,\r\n    options: Partial&lt;BuildOptions&gt; = {},\r\n): Promise&lt;string&gt;;\r\n\r\nexport declare function runner(\r\n    options: Partial&lt;BuildOptions&gt; = {},\r\n): Promise&lt;void&gt;;\r\n```\r\n\r\n### 参数类型\r\n\r\n由控制台传给命令一些参数可以实现不同的功能,参数的类型如下\r\n\r\n```typescript\r\n// scripts/types.ts\r\nexport type StartCommandArgs = {\r\n    watch: boolean; // 是否监控文件变化重启服务器\r\n    lint: boolean;  // 是否在启动前预先使用eslint进行格式化\r\n    debug: boolean; // 是否在debug中启动,以便使用vscode或chrome调试\r\n    debug_port?: number; // 调试服务的端口\r\n};\r\n```\r\n\r\n### 编译器\r\n\r\n因为[nodemon][]目前无法直接使用[ts-node][]或者[esbuild][]等`ts`编译器(甚至不能使用`node`参数`-r`)直接在`fork`模式下执行子进程,其`spawn`选项只对纯`node`脚本有效,所以即使把`spawn`设置为`false`,任然会以普通shell来执行子进程,具体情况查阅[此处][https://github.com/remy/nodemon/issues/1871],为了可以使用`fork`,新建一个`runner.js`文件,并在其中加载[esbuild][]编译器和包含`main.ts`即可\r\n\r\n```javascript\r\n// scripts/esbuild/runner.js\r\nconst path = require(&#039;path&#039;);\r\nconst { runner } = require(&#039;./tansfomer&#039;);\r\n\r\nconst tsconfig = path.resolve(__dirname, &#039;../../tsconfig.build.json&#039;);\r\n\r\nrunner({\r\n    tsconfig,\r\n    platform: &#039;node&#039;,\r\n    target: &#039;esnext&#039;,\r\n    sourcemap: false,\r\n});\r\n\r\nrequire(path.resolve(__dirname, &#039;../../src/main.ts&#039;));\r\n```\r\n\r\n### 常规启动\r\n\r\n常规启动直接使用`fork`子进程启动,在这里分类方便使用异步和`std`数据,不采用`node`自带的`proccess` API,而使用更为方便的`execa`这个库来实现\r\n\r\n```typescript\r\n// scripts/handlers/start.handler.ts\r\nexport async function StartHandler(args: yargs.Arguments&lt;StartCommandArgs&gt;) {\r\n   const script = path.resolve(__dirname, &#039;../esbuild/runner.js&#039;);\r\n  ...\r\n  if (args.watch &amp;&amp; !args.debug) {...}\r\n  else{\r\n    const subprocess = execa.node(script, undefined, {\r\n        ...commonOptions,\r\n         stdio: &#039;pipe&#039;,\r\n         nodeOptions: execArgs,\r\n     });\r\n     startLog(subprocess, spinner, args.debug);\r\n  }\r\n}\r\n```\r\n\r\n### 监控与重启\r\n\r\n使用[nodemon][]对文件进行监控,一旦文件发生改变则自动重启\r\n\r\n启动后可以看到三个`node`进程,分别为`cli.js`执行[yargs][]的主进程,`nodemon`的进程,和以`nodemon`启动的`server`子进程\r\n\r\n其关系为,`nodemon`为`yargs`的子进程,`server`为`nodemon`的子进程(`fork`进程)\r\n\r\n在退出`nodemon`进程(`ctrl+c`)的时候`server`子进程会自动退出,而`yargs`父进程需要主动退出\r\n\r\n具体实现如下\r\n\r\n```typescript\r\n// scripts/handlers/start.handler.ts\r\n    if (args.watch &amp;&amp; !args.debug) {\r\n        const runner = nodemon({\r\n            ...commonOptions,\r\n            script,\r\n            exec: &#039;node&#039;,\r\n            args: execArgs,\r\n            ext: &#039;js,json,ts&#039;,\r\n            watch: [&#039;src&#039;],\r\n            ignore: [&#039;.git&#039;, &#039;node_modules&#039;, &#039;dist&#039;, &#039;scripts&#039;],\r\n            nodeArgs: execArgs,\r\n            spawn: false, // 使用fork\r\n            verbose: true,\r\n            stdout: false, // 把server子进程的stdout消息发送到nodemon父进程的管道,由父进程控制输出\r\n        });\r\n        // 重启时输出消息\r\n        runner.on(&#039;restart&#039;, async () =&gt; {\r\n            console.log();\r\n            console.log(chalk.yellow(startMsg.restarting));\r\n        });\r\n        // 在退出nodemon进程时关闭yargs父进程\r\n        runner.on(&#039;quit&#039;, async (code: number) =&gt; process.exit(code));\r\n        // eslint-disable-next-line func-names\r\n        runner.on(&#039;readable&#039;, function (this: ChildProcess) {\r\n            startLog(this, spinner, args.debug);\r\n        });\r\n    }\r\n```\r\n\r\n### 子进程消息\r\n\r\n启动器和[nodemon][]的`startLog `函数用于在启动应用时输出应用内的消息,如果是`debug`模式则直接输出`stdout`消息,如果是普通模式则托管给`printFork`处理\r\n\r\n`printFork`函数可通过`fork`通信与`message`钩子获取子进程主动发送的内容,为了让应用在启动后停止雪碧图,可以在`main.ts`中发送一个`started`消息\r\n\r\n```typescript\r\n// scripts/helpers.ts\r\nexport function printFork(\r\n    subprocess: ChildProcess, // server子进程\r\n    spinner: ora.Ora, // 雪碧图对象\r\n    msg: { successed: string; failed: string }, // 启动成功与错误的消息,为应用内部的日志\r\n    success: string, // 应用主动发出的fork消息\r\n) {\r\n    if (subprocess.stdout) subprocess.stdout.pipe(process.stdout);\r\n    if (subprocess.stderr) {\r\n        subprocess.stderr.on(&#039;data&#039;, (data) =&gt; {\r\n            console.error(data.toString());\r\n            spinner.fail(chalk.red(msg.failed));\r\n            spinner.clear();\r\n        });\r\n    }\r\n    subprocess.once(&#039;message&#039;, (m) =&gt; {\r\n        if (m === success) {\r\n            spinner.succeed(chalk.greenBright.underline(msg.successed));\r\n            spinner.clear();\r\n        }\r\n    });\r\n}\r\n```\r\n\r\n在应用内部发送**已启动**消息\r\n\r\n```typescript\r\n// src/main.ts\r\n...\r\nif (process.send) process.send(&#039;started&#039;);\r\nawait app.listen(appConfig.port, appConfig.host, () =&gt; {\r\n```\r\n\r\n感兴趣的话还可以添加一个时间计算的功能,具体可以看代码\r\n\r\n### 处理`Eslint`\r\n\r\n可以在启动应用的时候对代码做一次`eslint`规则检测\r\n\r\n> 后续我们为`cli`添加自定义的配置功能后此函数可以独立为一个命令\r\n\r\n```typescript\r\n// scripts/helpers.ts\r\nexport async function lintCode()\r\n```\r\n\r\n在`StartHandler`函数中添加\r\n\r\n```typescript\r\n// scripts/handlers/start.handler.ts\r\nexport async function StartHandler(args: yargs.Arguments&lt;StartCommandArgs&gt;) {\r\n    if (args.lint) await lintCode();\r\n    ...\r\n}\r\n```\r\n\r\n### 构建命令\r\n\r\n为了执行`ts`文件,需要在`cli.js`中引用前面编写的`runner`方法,并包含我们的命令行包\r\n\r\n```javascript\r\n// scripts/cli.js\r\nconst { runner } = require(&#039;./esbuild/tansfomer&#039;);\r\n\r\nrunner({\r\n    platform: &#039;node&#039;,\r\n    target: &#039;esnext&#039;,\r\n    sourcemap: false,\r\n});\r\nrequire(&#039;./commands&#039;);\r\n```\r\n\r\n构建`start`命令\r\n\r\n```typescript\r\n// scripts/commands/start.command.ts\r\nexport const StartCommand: CommandModule&lt;any, StartCommandArgs&gt; = {\r\n    command: [&#039;app:start&#039;, &#039;as&#039;], // 命令别名为 &#039;as&#039;\r\n    describe: &#039;Start app.&#039;,\r\n    builder: {\r\n        // 是否启用监控热重启,默认启用\r\n        watch\r\n       // 是否在启动时eslint一次,默认启用\r\n        lint\r\n      // 是否启用debug模式.默认不启用\r\n        debug\r\n       // 给编辑器和IDE用于debug的端口\r\n        debug_portdefault: 9999,\r\n        },\r\n    } as const,\r\n    handler: async (args: yargs.Arguments&lt;StartCommandArgs&gt;) =&gt;\r\n        StartHandler(args),\r\n};\r\n```\r\n\r\n然后直接在`index.ts`中构建[yargs][]命令即可\r\n\r\n```typescript\r\n// scripts/commands/index.tss\r\ncommands.forEach((command) =&gt; yargs.command(command));\r\nyargs\r\n    .usage(&#039;Usage: $0 &lt;command&gt; [options]&#039;)\r\n    .demandCommand(1)\r\n    .strict()\r\n    .scriptName(&#039;cli&#039;)\r\n    .fail((msg, err, y) =&gt; {\r\n        // 遇到错误命令时,如果无参数则直接显示帮助信息\r\n        if ((!msg &amp;&amp; !err) || args.length === 0) {\r\n            yargs.showHelp();\r\n            process.exit();\r\n        }\r\n        if (msg) console.error(chalk.red(msg));\r\n        if (err) console.error(chalk.red(err.message));\r\n        process.exit();\r\n    })\r\n    .alias(&#039;v&#039;, &#039;version&#039;)\r\n    .help(&#039;h&#039;)\r\n    .alias(&#039;h&#039;, &#039;help&#039;).argv;\r\n```\r\n\r\n## Debug模式\r\n\r\n原来我们直接使用[ts-node][]进行debug,现在尝试使用自己构建的`cli`进行debug,在debug模式时可以关闭`spinner`功能,然后作为`node`参数传入子进程即可\r\n\r\n>因为debug时,vscode等ide会自动监控文件与重启,所以如果是`watch`模式启动,则直接跳到非`watch`的普通模式启动\r\n\r\n```typescript\r\n// scripts/handlers/start.handler.ts\r\nconst execArgs: string[] = [];\r\nif (!args.debug) spinner.start();\r\nif (args.watch && !args.debug) {\r\n  ...\r\n}else {\r\n   if (args.debug) execArgs.push(`--inspect=${args.debug_port}`);\r\n   const subprocess = execa.node(script, undefined, {\r\n            ...\r\n            nodeOptions: execArgs,\r\n   });\r\n}\r\n```\r\n\r\n修改vscode的`launch.json`\r\n\r\n```json\r\n// .vscode/launch.json\r\n{\r\n    &quot;version&quot;: &quot;0.2.0&quot;,\r\n    &quot;configurations&quot;: [\r\n        {\r\n            &quot;name&quot;: &quot;NESTPLUS&quot;,\r\n            &quot;type&quot;: &quot;pwa-node&quot;,\r\n            &quot;request&quot;: &quot;attach&quot;,\r\n            &quot;restart&quot;: true,\r\n            &quot;cwd&quot;: &quot;${workspaceRoot}&quot;,\r\n            &quot;port&quot;: 9999,\r\n            &quot;sourceMaps&quot;: true,\r\n            &quot;resolveSourceMapLocations&quot;: [\r\n                &quot;${workspaceFolder}/**&quot;,\r\n                &quot;!**/node_modules/**&quot;\r\n            ]\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## 更改命令\r\n\r\n修改`package.json`中的启动命令\r\n\r\n```json\r\n// package.json\r\n    &quot;cli&quot;: &quot;node ./scripts/cli.js&quot;,\r\n    &quot;cli:prod&quot;: &quot;cross-env NODE_ENV=production node ./scripts/cli.js&quot;,\r\n    &quot;prebuild&quot;: &quot;cross-env rimraf dist&quot;,\r\n    &quot;build&quot;: &quot;nest build&quot;,\r\n    &quot;format&quot;: &quot;prettier --write \\&quot;src/**/*.ts\\&quot; \\&quot;test/**/*.ts\\&quot;&quot;,\r\n    &quot;start&quot;: &quot;node ./scripts/cli.js as --no-lint&quot;,\r\n    &quot;start:lint&quot;: &quot;node ./scripts/cli.js as&quot;,\r\n    &quot;start:nw&quot;: &quot;node ./scripts/cli.js as --no-w --no-lint&quot;,\r\n    &quot;start:debug&quot;: &quot;node ./scripts/cli.js as --no-lint --debug&quot;,\r\n    ...\r\n```\r\n\r\n\r\n\r\n', 47, 'https://jikexingkong.com/docs/nestjs-practices/%e5%ae%9a%e5%88%b6%e5%8c%96%e9%85%8d%e7%bd%ae%e7%b3%bb%e7%bb%9f/', 8, 'docs', '', 0),
(58, 1, '2021-10-29 14:13:10', '2021-10-29 06:13:10', '', '使用esbuild/swc快速启动', '', 'publish', 'open', 'closed', '', '%e4%bd%bf%e7%94%a8esbuild-swc%e5%bf%ab%e9%80%9f%e5%90%af%e5%8a%a8', '', '', '2021-10-29 14:13:10', '2021-10-29 06:13:10', '', 47, 'https://jikexingkong.com/docs/nestjs-practices/%e4%bd%bf%e7%94%a8esbuild-swc%e5%bf%ab%e9%80%9f%e5%90%af%e5%8a%a8/', 9, 'docs', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(59, 1, '2021-10-29 14:26:20', '2021-10-29 06:26:20', '[scode type=\"yellow\"]注意: 本教程在MacOS下讲解,Linux用户根据各自的发行版安装软件,windows用户请自行安装wsl2作为替代 [/scode]\n\n<h2>创建项目</h2>\n\n如果比较熟悉<a href=\"https://webpack.docschina.org/\" title=\"webpack\">webpack</a>也可以使用<a href=\"https://create-react-app.dev/\" title=\"create-react-app\">create-react-app</a>,<a href=\"https://umijs.org/zh-CN/docs\" title=\"umi\">umi</a>或自己手动写一个,为了有更加流畅的开发体验,本教程选择基于[esbuild][]的更加快速的[vite][]来构建开发环境\n\n<h3>安装与配置<a href=\"https://nodejs.org/zh-cn/\" title=\"node.js\">node.js</a></h3>\n\n<blockquote>\n  如果没有安装<a href=\"https://brew.sh/\" title=\"brew\">brew</a>请先安装\n</blockquote>\n\n<strong>建议:安装到GLOBAL里面的东西统一使用一个包管理器,我这里使用<a href=\"https://pnpm.io/\" title=\"pnpm\">pnpm</a></strong>\n\n安装<a href=\"https://nodejs.org/zh-cn/\" title=\"node.js\">node.js</a>\n\n<pre><code class=\"language-shell line-numbers\">~ brew install node\n</code></pre>\n\n配置<a href=\"https://www.npmjs.com/\" title=\"npm\">npm</a>淘宝镜像\n\n<pre><code class=\"language-shell line-numbers\">~ npm config set registry https://registry.npm.taobao.org\n</code></pre>\n\n安装<a href=\"https://pnpm.io/\" title=\"pnpm\">pnpm</a>\n\n<pre><code class=\"language-shell line-numbers\">~ npm install -g pnpm\n</code></pre>\n\n配置<a href=\"https://pnpm.io/\" title=\"pnpm\">pnpm</a>淘宝镜像\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm config set registry https://registry.npm.taobao.org\n</code></pre>\n\n安装镜像管理工具\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm add nrm -g\n</code></pre>\n\n建议安装一个<a href=\"https://nodejs.org/zh-cn/\" title=\"node.js\">node</a>版本管理工具比如<a href=\"https://github.com/tj/n\" title=\"n\">n</a>或者<a href=\"https://github.com/nvm-sh/nvm\" title=\"nvm\">nvm</a>\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm add n -g\n</code></pre>\n\n<h4>使用[Vite][]创建项目</h4>\n\n在你的编码目录下初始化一个项目\n\n<pre><code class=\"language-shell line-numbers\">~ pnpx create-vite\n</code></pre>\n\n提示<code>Install the following package: create-vite@latest?</code>,按<code>y</code>\n\n<code>Project name:</code>是你的项目目录和<code>package.json</code>中的项目名称,随意填\n\n<code>Select a framework</code>框架选择中按方向键选择<code>react</code>\n\n<code>Select a variant</code>选择<code>react-ts</code>\n\n<code>cd {你的Project name目录}</code>\n\n执行<code>pnpm i</code>安装依赖\n\n<h2>代码规范化</h2>\n\n具体代码与配置请自行查看源代码\n\n<h3>代码风格</h3>\n\n配置<a href=\"https://github.com/airbnb/javascript\" title=\"airbnb\">airbnb</a>的eslint规则并整合<a href=\"https://prettier.io/\" title=\"prettier\">prettier</a>,并且经过一定的客制化同时配合vscode可达到完美的编码体验\n\n<pre><code class=\"language-shell line-numbers\">pnpm add typescript \\\neslint \\\nprettier \\\n@typescript-eslint/parser \\\neslint-config-airbnb-typescript \\\neslint-plugin-import \\\neslint-plugin-jsx-a11y \\\neslint-plugin-react \\\neslint-plugin-react-hooks \\\n@typescript-eslint/eslint-plugin \\\njest \\\neslint-plugin-jest \\\neslint-config-prettier \\\neslint-plugin-prettier \\\neslint-plugin-unused-imports -D\n</code></pre>\n\n<h4>配置内容</h4>\n\n为了让<code>eslint</code>能规范化自定义的文件,比如<code>.eslintrc.js</code>本身,使用一个新建的继承自<code>tsconfig.json</code>的<code>tsconfig.eslint.json</code>作为<code>@typescript-eslint/parser</code>的配置文件\n\n<pre><code class=\"language-javascript line-numbers\">...\nplugins: [\'@typescript-eslint\', \'jest\', \'prettier\', \'import\', \'unused-imports\'],\nextends: [\n    // 兼容typescript的airbnb规范\n   \'airbnb-typescript\',\n    // react hooks的airbnb规范\n    \'airbnb/hooks\',\n\n    // typescript的eslint插件\n    \'plugin:@typescript-eslint/recommended\',\n    \'plugin:@typescript-eslint/recommended-requiring-type-checking\',\n\n    // 支持jest\n    \'plugin:jest/recommended\',\n\n    // 使用prettier格式化代码\n    // 整合typescript-eslint与prettier\n    \'prettier\',\n    \'plugin:prettier/recommended\',\n],\nparserOptions: {\n    ...\n    project: \'./tsconfig.eslint.json\',\n},\n</code></pre>\n\n<h4>一些重要的规则</h4>\n\n<blockquote>\n  其余配置自行查看代码\n</blockquote>\n\n<code>eslint-plugin-unused-imports</code>用于自动删除未使用的导入,对不是\'_\'前缀且未使用变量报错\n\n<pre><code class=\"language-javascript line-numbers\">...\n \'no-unused-vars\': 0,\n \'@typescript-eslint/no-unused-vars\': 0,\n \'unused-imports/no-unused-imports\': 1,\n \'unused-imports/no-unused-vars\': [\n    \'error\',\n    {\n        vars: \'all\',\n        args: \'none\',\n        ignoreRestSiblings: true,\n    },\n]\n</code></pre>\n\n<code>import</code>插件,<code>import/order</code>可以按照自己的需求配置\n\n<pre><code class=\"language-javascript line-numbers\">// 导入模块的顺序\n\'import/order\': [\n     \'error\',\n     {\n         pathGroups: [\n             {\n                 pattern: \'@/**\',\n                 group: \'external\',\n                 position: \'after\',\n             },\n         ],\n         alphabetize: { order: \'asc\', caseInsensitive: false },\n         \'newlines-between\': \'always-and-inside-groups\',\n         warnOnUnassignedImports: true,\n     },\n],\n// 导入的依赖不必一定要在dependencies的文件\n\'import/no-extraneous-dependencies\': [\n    \'error\',\n     {\n         devDependencies: [\n             \'**/*.test.{ts,js}\',\n             \'**/*.spec.{ts,js}\',\n             \'build/**/*.{ts,js}\',\n             \'vite.config.ts\',\n         ],\n     },\n],\n</code></pre>\n\n最后需要配置一下<code>.prettierrc</code>,和<code>.editorconfig</code>,并且把一些它们各自需要忽略的目录和文件分别添加到<code>.eslintignore</code>和<code>.prettierignore</code>,最后把<code>git</code>仓库需要忽略的目录和文件写入<code>.gitignore</code>\n\n<h3>Tsconfig配置</h3>\n\ntsconfig.json文件中添加一个<code>@</code>作为根目录映射符,其它的配置按需要更改\n\n<pre><code class=\"language-json line-numbers\">{\n    \"compilerOptions\": {\n        // ...\n        \"paths\": {\n            \"@/*\": [\"src/*\"]\n        }\n    },\n    \"include\": [\n        \"./src\",\n        \"./typings/**/*.d.ts\",\n    ]\n}\n</code></pre>\n\n<code>tsconfig.eslint.json</code>\n\n<pre><code class=\"language-json line-numbers\">{\n    \"extends\": \"./tsconfig.json\",\n    \"include\": [\"./src\", \"./test\", \"./typings\", \"./build\", \"**.js\", \"**.ts\"]\n}\n</code></pre>\n\n<h2>配置<a href=\"https://cn.vitejs.dev/\" title=\"vitejs\">vitejs</a></h2>\n\n<h3>基础配置</h3>\n\n安装<code>deepmerge</code>用于合并配置对象\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm add deepmerge -D\n</code></pre>\n\n创建一个<code>build</code>目录专门用于放置<a href=\"https://cn.vitejs.dev/\" title=\"vitejs\">vitejs</a>的配置文件\n\n<code>Configure</code>类型是外部<code>vite.config.ts</code>文件中自定义额外配置的回调函数的类型\n\n<pre><code class=\"language-typescript line-numbers\">// build/types.ts\nexport type Configure = (params: ConfigEnv, isBuild: boolean) =&gt; UserConfig;\n</code></pre>\n\n<code>getPlugins</code>函数用于设置插件\n\n<pre><code class=\"language-typescript line-numbers\">// build/plugins/index.ts\nexport function getPlugins(isBuild: boolean) {\n    const vitePlugins: (Plugin | Plugin[])[] = [reactRefresh()];\n\n    return vitePlugins;\n}\n</code></pre>\n\n<code>getConfig</code>函数用于生成最终配置\n\n<pre><code class=\"language-typescript line-numbers\">// build/config.ts\nexport const getConfig = (\n    params: ConfigEnv,\n    configure?: Configure,\n): UserConfig =&gt; {\n    const isBuild = params.command === \'build\';\n    return merge(\n        {\n            resolve: {\n                // 添加别名\n                alias: {\n                    \'/@\': pathResolve(\'src\'),\n                },\n            },\n            css: {},\n            plugins: getPlugins(isBuild),\n            // 启动端口\n            server: { port: 4000 },\n        },\n        typeof configure === \'function\' ? configure(params, isBuild) : {},\n        {\n            arrayMerge: (_d, s, _o) =&gt; Array.from(new Set([..._d, ...s])),\n        },\n    );\n};\n\n</code></pre>\n\n使用配置\n\n<pre><code class=\"language-typescript line-numbers\">// vite.config.ts\nexport default (params: ConfigEnv): UserConfig =&gt; getConfig(params);\n</code></pre>\n\n<h3>支持<code>react17</code>风格</h3>\n\n如果需要支持<code>react17</code>风格(即不需要在每个页面写<code>import React from \'react\'</code>)的话\n\n<blockquote>\n  一般情况下不需要\n</blockquote>\n\n先把<code>tsconfg.json</code>中的<code>\"jsx\": \"react\"</code>改为<code>\"jsx\": \"react-jsx\"</code>,然后添加如下配置\n\n<pre><code class=\"language-typescript line-numbers\">// build/config.ts\nexport const getConfig = (\n    params: ConfigEnv,\n    configure?: Configure,\n): UserConfig =&gt; {\n    const isBuild = params.command === \'build\';\n    return merge(\n        {\n            ...\n            esbuild: {\n                jsxInject: `import React from \'react\'`,\n            },\n        },\n      ...\n    );\n};\n</code></pre>\n\n<h3>支持<a href=\"https://ant-design.gitee.io/index-cn\" title=\"antd\">antd</a>与<a href=\"https://lesscss.org/\" title=\"less\">less</a></h3>\n\n安装<a href=\"https://lesscss.org/\" title=\"less\">less</a>与<a href=\"https://ant-design.gitee.io/index-cn\" title=\"antd\">antd</a>\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm add antd\n~ pnpm add less -D\n</code></pre>\n\n定制主题\n\n<blockquote>\n  <code>modules</code>配置用于转换<code>css</code>变量名称格式\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">// build/config.ts\nreturn merge(\n  {\n    ...\n    css: {\n        modules: {\n            localsConvention: \'camelCaseOnly\',\n        },\n        preprocessorOptions: {\n            less: {\n                javascriptEnabled: true,\n                javascriptEnabled: true,\n                modifyVars: {},\n            },\n        },\n    },\n  }\n)\n</code></pre>\n\n按需导入\n\n安装<code>vite-plugin-style-import</code>\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm add vite-plugin-style-import -D\n</code></pre>\n\n配置插件\n\n<pre><code class=\"language-typescript line-numbers\">// build/plugins/antd.ts\nexport function antdPlugin(isBuild: boolean) {\n    if (!isBuild) return [];\n    const antd = styleImport({\n        libs: [\n            {\n                libraryName: \'antd\',\n                esModule: true,\n                resolveStyle: (name) =&gt; {\n                    return `antd/es/${name}/style/index`;\n                },\n            },\n        ],\n    });\n    return antd;\n}\n</code></pre>\n\n加载该插件\n\n<pre><code class=\"language-typescript line-numbers\">// build/plugins/index.ts\nexport function getPlugins(isBuild: boolean) {\n    const vitePlugins: (Plugin | Plugin[])[] = [];\n    vitePlugins.push(reactRefresh());\n    vitePlugins.push(antdPlugin(isBuild));\n    return vitePlugins;\n}\n</code></pre>\n\n效果测试\n\n<pre><code class=\"language-typescript line-numbers\">// src/App.tsx\nconst App: FC = () =&gt; (\n    &lt;div className=\"App\"&gt;\n        &lt;Button type=\"primary\"&gt;Button&lt;/Button&gt;\n    &lt;/div&gt;\n);\n</code></pre>\n\n在<code>main.tsx</code>如下设置,这是为了在开发环境中使用<a href=\"https://ant-design.gitee.io/index-cn\" title=\"antd\">antd</a>样式\n\n<pre><code class=\"language-typescript line-numbers\">// src/main.tsx\nif (import.meta.env.DEV) {\n    import(\'antd/dist/antd.less\');\n}\n</code></pre>\n\n因为只在生产环境按需加载,所以执行以下命令在生产环境下测试\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm build &amp;&amp; pnpm serve\n</code></pre>\n\n<h3>支持<a href=\"https://tailwindcss.com/\" title=\"tailwindcss\">tailwindcss</a></h3>\n\n<blockquote>\n  <code>postcss</code>可以按自己需求配置,或者不配置也没关系\n</blockquote>\n\n安装[tailwincss][]与vite插件\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm add tailwindcss@latest postcss@latest autoprefixer@latest -D\n</code></pre>\n\n初始化<a href=\"https://tailwindcss.com/\" title=\"tailwindcss\">tailwindcss</a>\n\n<pre><code class=\"language-typescript line-numbers\">npx tailwindcss init -p\n</code></pre>\n\n配置<a href=\"https://tailwindcss.com/\" title=\"tailwindcss\">tailwindcss</a>\n\n<pre><code class=\"language-javascript line-numbers\">module.exports = {\n    // 在生产环境中清除未使用的样式\n    purge: {\n        enable: process.env.NODE_ENV === \'production\',\n        content: [\'./index.html\', \'./src/**/*.{ts,tsx}\'],\n    },\n    darkMode: \'class\',\n    theme: {\n        extend: {},\n    },\n    variants: {\n        extend: {},\n    },\n    plugins: [],\n};\n</code></pre>\n\n<h2>开发工具</h2>\n\n推荐使用<a href=\"https://code.visualstudio.com/\" title=\"vscode\">vscode</a>作为开发工具\n\n<blockquote>\n  VSCode已经自带同步配置和插件的功能,建议启用\n</blockquote>\n\n<h3><a href=\"https://code.visualstudio.com/\" title=\"vscode\">vscode</a></h3>\n\n安装<a href=\"https://code.visualstudio.com/\" title=\"vscode\">vscode</a>\n\n<pre><code class=\"language-shell line-numbers\">~ brew install vscode\n</code></pre>\n\n安装<a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\" title=\"vscode-eslint\">eslint插件</a>和<a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\" title=\"vscode-prettier\">prettier插件</a>\n\n<pre><code class=\"language-shell line-numbers\">~ code --install-extension dbaeumer.vscode-eslint \\\n  &amp;&amp; code esbenp.prettier-vscode\n</code></pre>\n\n按<code>cmd+,</code>选择偏好设置->工作空间,配置<a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\" title=\"vscode-eslint\">eslint插件</a>\n\n<pre><code class=\"language-json line-numbers\">{\n    \"editor.formatOnSave\": false,\n    \"editor.codeActionsOnSave\": {\n        \"source.fixAll.eslint\": true\n    }\n}\n\n</code></pre>\n\n为了确保<a href=\"https://pnpm.io/\" title=\"pnpm\">pnpm</a>安装的package可以拥有像npm,yarn一样的本地目录的提示效果,请在vscode底部选择工作区版本或者安装<a class=\"wp-editor-md-post-content-link\" href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next\">nighty</a>插件并选择vscode版本\n\n<h3>调试</h3>\n\n按<code>shift+cmd+d</code>创建<code>lanunch.json</code>,按如下配置即可通过浏览器调试\n\n<pre><code class=\"language-json line-numbers\">{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"chrome\",\n      \"request\": \"launch\",\n      \"name\": \"Launch Chrome\",\n      \"url\": \"http://localhost:3100\",\n      \"webRoot\": \"${workspaceFolder}/src\",\n      \"sourceMaps\": true\n    },\n  ]\n}\n\n</code></pre>', '开发环境构建', '', 'publish', 'open', 'closed', '', 'dev-environment', '', '', '2021-11-10 05:22:49', '2021-11-09 21:22:49', '[webpack]: https://webpack.docschina.org/ 	\"webpack\"\r\n[create-react-app]: https://create-react-app.dev/ \"create-react-app\"\r\n\r\n[umi]: 	https://umijs.org/zh-CN/docs \"umi\"\r\n\r\n[node.js]: https://nodejs.org/zh-cn/ \"node.js\"\r\n[pnpm]: https://pnpm.io/ \"pnpm\"\r\n[npm]: https://www.npmjs.com/	\"npm\"\r\n[n]:  https://github.com/tj/n		\"n\"\r\n[brew]: https://brew.sh/ \"brew\"\r\n[nvm]: https://github.com/nvm-sh/nvm	\"nvm\"\r\n[prettier]: https://prettier.io/ \"prettier\"\r\n[airbnb]: https://github.com/airbnb/javascript \"airbnb\"\r\n[vscode]: https://code.visualstudio.com/ \"vscode\"\r\n[vitejs]: https://cn.vitejs.dev/ \"vitejs\"\r\n[antd]: https://ant-design.gitee.io/index-cn \"antd\"\r\n[less]: https://lesscss.org/ \"less\"\r\n[tailwindcss]: https://tailwindcss.com/	\"tailwindcss\"\r\n[eslint]: https://eslint.org/ \"eslint\"\r\n[vscode-eslint]: https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint \"vscode-eslint\"\r\n[vscode-prettier]: https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode \"vscode-prettier\"\r\n\r\n[scode type=\"yellow\"]注意: 本教程在MacOS下讲解,Linux用户根据各自的发行版安装软件,windows用户请自行安装wsl2作为替代 [/scode]\r\n\r\n## 创建项目\r\n\r\n如果比较熟悉[webpack][]也可以使用[create-react-app][],[umi][]或自己手动写一个,为了有更加流畅的开发体验,本教程选择基于[esbuild][]的更加快速的[vite][]来构建开发环境\r\n\r\n### 安装与配置[node.js][]\r\n\r\n> 如果没有安装[brew][]请先安装\r\n\r\n**建议:安装到GLOBAL里面的东西统一使用一个包管理器,我这里使用[pnpm][]**\r\n\r\n安装[node.js][]\r\n\r\n```shell\r\n~ brew install node\r\n```\r\n\r\n配置[npm][]淘宝镜像\r\n\r\n```shell\r\n~ npm config set registry https://registry.npm.taobao.org\r\n```\r\n\r\n安装[pnpm][]\r\n\r\n```shell\r\n~ npm install -g pnpm\r\n```\r\n\r\n配置[pnpm][]淘宝镜像\r\n\r\n```shell\r\n~ pnpm config set registry https://registry.npm.taobao.org\r\n```\r\n\r\n安装镜像管理工具\r\n\r\n```shell\r\n~ pnpm add nrm -g\r\n```\r\n\r\n建议安装一个[node][node.js]版本管理工具比如[n][]或者[nvm][]\r\n\r\n```shell\r\n~ pnpm add n -g\r\n```\r\n\r\n#### 使用[Vite][]创建项目\r\n\r\n在你的编码目录下初始化一个项目\r\n\r\n```shell\r\n~ pnpx create-vite\r\n```\r\n\r\n提示`Install the following package: create-vite@latest?`,按`y`\r\n\r\n`Project name:`是你的项目目录和`package.json`中的项目名称,随意填\r\n\r\n`Select a framework`框架选择中按方向键选择`react`\r\n\r\n` Select a variant`选择`react-ts`\r\n\r\n`cd {你的Project name目录}`\r\n\r\n执行`pnpm i`安装依赖\r\n\r\n## 代码规范化\r\n\r\n具体代码与配置请自行查看源代码\r\n\r\n### 代码风格\r\n\r\n配置[airbnb][]的eslint规则并整合[prettier][],并且经过一定的客制化同时配合vscode可达到完美的编码体验\r\n\r\n```shell\r\npnpm add typescript \\\r\neslint \\\r\nprettier \\\r\n@typescript-eslint/parser \\\r\neslint-config-airbnb-typescript \\\r\neslint-plugin-import \\\r\neslint-plugin-jsx-a11y \\\r\neslint-plugin-react \\\r\neslint-plugin-react-hooks \\\r\n@typescript-eslint/eslint-plugin \\\r\njest \\\r\neslint-plugin-jest \\\r\neslint-config-prettier \\\r\neslint-plugin-prettier \\\r\neslint-plugin-unused-imports -D\r\n```\r\n\r\n#### 配置内容\r\n\r\n为了让`eslint`能规范化自定义的文件,比如`.eslintrc.js`本身,使用一个新建的继承自`tsconfig.json`的`tsconfig.eslint.json`作为`@typescript-eslint/parser`的配置文件\r\n\r\n```javascript\r\n...\r\nplugins: [&#039;@typescript-eslint&#039;, &#039;jest&#039;, &#039;prettier&#039;, &#039;import&#039;, &#039;unused-imports&#039;],\r\nextends: [\r\n    // 兼容typescript的airbnb规范\r\n   &#039;airbnb-typescript&#039;,\r\n    // react hooks的airbnb规范\r\n    &#039;airbnb/hooks&#039;,\r\n\r\n    // typescript的eslint插件\r\n    &#039;plugin:@typescript-eslint/recommended&#039;,\r\n    &#039;plugin:@typescript-eslint/recommended-requiring-type-checking&#039;,\r\n\r\n    // 支持jest\r\n    &#039;plugin:jest/recommended&#039;,\r\n\r\n    // 使用prettier格式化代码\r\n    // 整合typescript-eslint与prettier\r\n    &#039;prettier&#039;,\r\n    &#039;plugin:prettier/recommended&#039;,\r\n],\r\nparserOptions: {\r\n    ...\r\n    project: &#039;./tsconfig.eslint.json&#039;,\r\n},\r\n```\r\n\r\n#### 一些重要的规则\r\n\r\n> 其余配置自行查看代码\r\n\r\n`eslint-plugin-unused-imports`用于自动删除未使用的导入,对不是\'_\'前缀且未使用变量报错\r\n\r\n```javascript\r\n...\r\n &#039;no-unused-vars&#039;: 0,\r\n &#039;@typescript-eslint/no-unused-vars&#039;: 0,\r\n &#039;unused-imports/no-unused-imports&#039;: 1,\r\n &#039;unused-imports/no-unused-vars&#039;: [\r\n    &#039;error&#039;,\r\n    {\r\n        vars: &#039;all&#039;,\r\n        args: &#039;none&#039;,\r\n        ignoreRestSiblings: true,\r\n    },\r\n]\r\n```\r\n\r\n`import`插件,`import/order`可以按照自己的需求配置\r\n\r\n```javascript\r\n// 导入模块的顺序\r\n&#039;import/order&#039;: [\r\n     &#039;error&#039;,\r\n     {\r\n         pathGroups: [\r\n             {\r\n                 pattern: &#039;@/**&#039;,\r\n                 group: &#039;external&#039;,\r\n                 position: &#039;after&#039;,\r\n             },\r\n         ],\r\n         alphabetize: { order: &#039;asc&#039;, caseInsensitive: false },\r\n         &#039;newlines-between&#039;: &#039;always-and-inside-groups&#039;,\r\n         warnOnUnassignedImports: true,\r\n     },\r\n],\r\n// 导入的依赖不必一定要在dependencies的文件\r\n&#039;import/no-extraneous-dependencies&#039;: [\r\n    &#039;error&#039;,\r\n     {\r\n         devDependencies: [\r\n             &#039;**/*.test.{ts,js}&#039;,\r\n             &#039;**/*.spec.{ts,js}&#039;,\r\n             &#039;build/**/*.{ts,js}&#039;,\r\n             &#039;vite.config.ts&#039;,\r\n         ],\r\n     },\r\n],\r\n```\r\n\r\n最后需要配置一下`.prettierrc`,和`.editorconfig`,并且把一些它们各自需要忽略的目录和文件分别添加到`.eslintignore`和`.prettierignore`,最后把`git`仓库需要忽略的目录和文件写入`.gitignore`\r\n\r\n### Tsconfig配置\r\n\r\ntsconfig.json文件中添加一个`@`作为根目录映射符,其它的配置按需要更改\r\n\r\n```json\r\n{\r\n    &quot;compilerOptions&quot;: {\r\n        // ...\r\n        &quot;paths&quot;: {\r\n            &quot;@/*&quot;: [&quot;src/*&quot;]\r\n        }\r\n    },\r\n    &quot;include&quot;: [\r\n        &quot;./src&quot;,\r\n        &quot;./typings/**/*.d.ts&quot;,\r\n    ]\r\n}\r\n```\r\n\r\n`tsconfig.eslint.json`\r\n\r\n```json\r\n{\r\n    &quot;extends&quot;: &quot;./tsconfig.json&quot;,\r\n    &quot;include&quot;: [&quot;./src&quot;, &quot;./test&quot;, &quot;./typings&quot;, &quot;./build&quot;, &quot;**.js&quot;, &quot;**.ts&quot;]\r\n}\r\n```\r\n\r\n## 配置[vitejs][]\r\n\r\n### 基础配置\r\n\r\n安装`deepmerge`用于合并配置对象\r\n\r\n```shell\r\n~ pnpm add deepmerge -D\r\n```\r\n\r\n创建一个`build`目录专门用于放置[vitejs][]的配置文件\r\n\r\n`Configure`类型是外部`vite.config.ts`文件中自定义额外配置的回调函数的类型\r\n\r\n```typescript\r\n// build/types.ts\r\nexport type Configure = (params: ConfigEnv, isBuild: boolean) =&gt; UserConfig;\r\n```\r\n\r\n`getPlugins`函数用于设置插件\r\n\r\n```typescript\r\n// build/plugins/index.ts\r\nexport function getPlugins(isBuild: boolean) {\r\n    const vitePlugins: (Plugin | Plugin[])[] = [reactRefresh()];\r\n\r\n    return vitePlugins;\r\n}\r\n```\r\n\r\n`getConfig`函数用于生成最终配置\r\n\r\n```typescript\r\n// build/config.ts\r\nexport const getConfig = (\r\n    params: ConfigEnv,\r\n    configure?: Configure,\r\n): UserConfig =&gt; {\r\n    const isBuild = params.command === &#039;build&#039;;\r\n    return merge(\r\n        {\r\n            resolve: {\r\n                // 添加别名\r\n                alias: {\r\n                    &#039;/@&#039;: pathResolve(&#039;src&#039;),\r\n                },\r\n            },\r\n            css: {},\r\n            plugins: getPlugins(isBuild),\r\n            // 启动端口\r\n            server: { port: 4000 },\r\n        },\r\n        typeof configure === &#039;function&#039; ? configure(params, isBuild) : {},\r\n        {\r\n            arrayMerge: (_d, s, _o) =&gt; Array.from(new Set([..._d, ...s])),\r\n        },\r\n    );\r\n};\r\n\r\n```\r\n\r\n使用配置\r\n\r\n```typescript\r\n// vite.config.ts\r\nexport default (params: ConfigEnv): UserConfig =&gt; getConfig(params);\r\n```\r\n\r\n### 支持`react17`风格\r\n\r\n如果需要支持`react17`风格(即不需要在每个页面写`import React from \'react\'`)的话\r\n\r\n> 一般情况下不需要\r\n\r\n先把`tsconfg.json`中的`\"jsx\": \"react\"`改为`\"jsx\": \"react-jsx\"`,然后添加如下配置\r\n\r\n```typescript\r\n// build/config.ts\r\nexport const getConfig = (\r\n    params: ConfigEnv,\r\n    configure?: Configure,\r\n): UserConfig => {\r\n    const isBuild = params.command === \'build\';\r\n    return merge(\r\n        {\r\n            ...\r\n            esbuild: {\r\n                jsxInject: `import React from \'react\'`,\r\n            },\r\n        },\r\n      ...\r\n    );\r\n};\r\n```\r\n\r\n### 支持[antd][]与[less][]\r\n\r\n安装[less][]与[antd][]\r\n\r\n```shell\r\n~ pnpm add antd\r\n~ pnpm add less -D\r\n```\r\n\r\n定制主题\r\n\r\n> `modules`配置用于转换`css`变量名称格式\r\n\r\n```typescript\r\n// build/config.ts\r\nreturn merge(\r\n  {\r\n    ...\r\n    css: {\r\n        modules: {\r\n            localsConvention: &#039;camelCaseOnly&#039;,\r\n        },\r\n        preprocessorOptions: {\r\n            less: {\r\n                javascriptEnabled: true,\r\n                javascriptEnabled: true,\r\n                modifyVars: {},\r\n            },\r\n        },\r\n    },\r\n  }\r\n)\r\n```\r\n\r\n按需导入\r\n\r\n安装`vite-plugin-style-import`\r\n\r\n```shell\r\n~ pnpm add vite-plugin-style-import -D\r\n```\r\n\r\n配置插件\r\n\r\n```typescript\r\n// build/plugins/antd.ts\r\nexport function antdPlugin(isBuild: boolean) {\r\n    if (!isBuild) return [];\r\n    const antd = styleImport({\r\n        libs: [\r\n            {\r\n                libraryName: \'antd\',\r\n                esModule: true,\r\n                resolveStyle: (name) => {\r\n                    return `antd/es/${name}/style/index`;\r\n                },\r\n            },\r\n        ],\r\n    });\r\n    return antd;\r\n}\r\n```\r\n\r\n加载该插件\r\n\r\n```typescript\r\n// build/plugins/index.ts\r\nexport function getPlugins(isBuild: boolean) {\r\n    const vitePlugins: (Plugin | Plugin[])[] = [];\r\n    vitePlugins.push(reactRefresh());\r\n    vitePlugins.push(antdPlugin(isBuild));\r\n    return vitePlugins;\r\n}\r\n```\r\n\r\n效果测试\r\n\r\n```typescript\r\n// src/App.tsx\r\nconst App: FC = () => (\r\n    <div className=\"App\">\r\n        <Button type=\"primary\">Button</Button>\r\n    </div>\r\n);\r\n```\r\n\r\n在`main.tsx`如下设置,这是为了在开发环境中使用[antd][]样式\r\n\r\n```typescript\r\n// src/main.tsx\r\nif (import.meta.env.DEV) {\r\n    import(&#039;antd/dist/antd.less&#039;);\r\n}\r\n```\r\n\r\n因为只在生产环境按需加载,所以执行以下命令在生产环境下测试\r\n\r\n```shell\r\n~ pnpm build && pnpm serve\r\n```\r\n\r\n### 支持[tailwindcss][]\r\n\r\n> `postcss`可以按自己需求配置,或者不配置也没关系\r\n\r\n安装[tailwincss][]与vite插件\r\n\r\n```shell\r\n~ pnpm add tailwindcss@latest postcss@latest autoprefixer@latest -D\r\n```\r\n\r\n初始化[tailwindcss][]\r\n\r\n```typescript\r\nnpx tailwindcss init -p\r\n```\r\n\r\n配置[tailwindcss][]\r\n\r\n```javascript\r\nmodule.exports = {\r\n    // 在生产环境中清除未使用的样式\r\n    purge: {\r\n        enable: process.env.NODE_ENV === \'production\',\r\n        content: [\'./index.html\', \'./src/**/*.{ts,tsx}\'],\r\n    },\r\n    darkMode: \'class\',\r\n    theme: {\r\n        extend: {},\r\n    },\r\n    variants: {\r\n        extend: {},\r\n    },\r\n    plugins: [],\r\n};\r\n```\r\n\r\n## 开发工具\r\n\r\n推荐使用[vscode][]作为开发工具\r\n\r\n&gt; VSCode已经自带同步配置和插件的功能,建议启用\r\n\r\n### [vscode][]\r\n\r\n安装[vscode][]\r\n\r\n```shell\r\n~ brew install vscode\r\n```\r\n\r\n安装[eslint插件][vscode-eslint]和[prettier插件][vscode-prettier]\r\n\r\n```shell\r\n~ code --install-extension dbaeumer.vscode-eslint \\\r\n  && code esbenp.prettier-vscode\r\n```\r\n\r\n按`cmd+,`选择偏好设置->工作空间,配置[eslint插件][vscode-eslint]\r\n\r\n```json\r\n{\r\n    &quot;editor.formatOnSave&quot;: false,\r\n    &quot;editor.codeActionsOnSave&quot;: {\r\n        &quot;source.fixAll.eslint&quot;: true\r\n    }\r\n}\r\n\r\n```\r\n\r\n为了确保[pnpm][]安装的package可以拥有像npm,yarn一样的本地目录的提示效果,请在vscode底部选择工作区版本或者安装[nighty](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next)插件并选择vscode版本\r\n\r\n### 调试\r\n\r\n按`shift+cmd+d`创建`lanunch.json`,按如下配置即可通过浏览器调试\r\n\r\n```json\r\n{\r\n  &quot;version&quot;: &quot;0.2.0&quot;,\r\n  &quot;configurations&quot;: [\r\n    {\r\n      &quot;type&quot;: &quot;chrome&quot;,\r\n      &quot;request&quot;: &quot;launch&quot;,\r\n      &quot;name&quot;: &quot;Launch Chrome&quot;,\r\n      &quot;url&quot;: &quot;http://localhost:3100&quot;,\r\n      &quot;webRoot&quot;: &quot;${workspaceFolder}/src&quot;,\r\n      &quot;sourceMaps&quot;: true\r\n    },\r\n  ]\r\n}\r\n\r\n```', 48, 'https://jikexingkong.com/docs/react/%e4%bd%bf%e7%94%a8vitejs%e6%90%ad%e5%bb%ba%e7%bc%96%e7%a0%81%e7%8e%af%e5%a2%83/', 0, 'docs', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(60, 1, '2021-10-29 14:26:30', '2021-10-29 06:26:30', '[scode type=\"yellow\"]注意: 本教程在MacOS下讲解,Linux用户根据各自的发行版安装软件,windows用户请自行安装wsl2作为替代 [/scode][]\n\n<h2>状态与副作用</h2>\n\n<h3><code>useState</code></h3>\n\n用于改变组件内的状态,例\n\n<pre><code class=\"language-tsx line-numbers\">const StateDemo: FC = () =&gt; {\n    const [count, setCount] = useState(1);\n    const [isShow, toggleShow] = useState(true);\n\n    return (\n        &lt;div&gt;\n            &lt;p&gt;{count}&lt;/p&gt;\n            &lt;Button onClick={() =&gt; setCount(count + 1)}&gt;增加&lt;/Button&gt;\n            &lt;p className=\"pt-5\"&gt;{isShow ? &lt;span&gt; I\'m show now &lt;/span&gt; : null}&lt;/p&gt;\n            &lt;Button onClick={() =&gt; toggleShow(!isShow)}&gt;{isShow ? \'显示\' : \'隐藏\'}&lt;/Button&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default StateDemo;\n</code></pre>\n\n<h3><code>useEffect</code></h3>\n\n在状态不同的生命周期执行副作用\n\n<h4>简单用法</h4>\n\n每次状态更新都执行所有没有依赖的<code>useEffect</code>,以下代码\'toggle ghost\'这一条在<code>resize</code>浏览器时也会触发\n\n<pre><code class=\"language-tsx line-numbers\">const EffectDemo: FC = () =&gt; {\n    const [ghost, setGhost] = useState&lt;boolean&gt;(false);\n    const [width, setWidth] = useState(window.innerWidth);\n    const toggleGhostBtn = () =&gt; setGhost(!ghost);\n    const resizeHandle = () =&gt; setWidth(window.innerWidth);\n    useEffect(() =&gt; {\n        window.addEventListener(\'resize\', resizeHandle);\n    });\n    useEffect(() =&gt; {\n        console.log(\'toggle ghost\');\n    });\n    return (\n        &lt;div&gt;\n            &lt;p&gt;{ghost ? \'ghost\' : \'普通\'}按钮&lt;/p&gt;\n            &lt;Button type=\"primary\" onClick={toggleGhostBtn} ghost={ghost}&gt;\n                切换按钮样式\n            &lt;/Button&gt;\n            &lt;p className=\"pt-5\"&gt;宽度为: {width}&lt;/p&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre>\n\n<h4>依赖更新</h4>\n\n通过<code>useEffect</code>的第二个参数,可以指定其依赖的变量,只有此变量的状态更改时才会执行副作用函数,如果第二个参数为空,则只在第一次渲染和重新渲染时触发\n\n<pre><code class=\"language-tsx line-numbers\">const EffectDemo: FC = () =&gt; {\n    ...\n    useEffect(() =&gt; {\n        // changeWidth\n    }, [width]);\n    useEffect(() =&gt; {\n        console.log(\'toggle ghost\');\n    }, [ghost]);\n   useEffect(() =&gt; {\n        console.log(\'只在第一次或重新渲染组件时触发\');\n    }, []);\n};\n</code></pre>\n\n<h4>清理监听</h4>\n\n在监听<code>width</code>的<code>useEffect</code>中,每次改变<code>width</code>的状态,都会添加一个<code>resize</code>事件,这会极大的耗费浏览器占用的内存,通过一个返回值的方式,即可在下一次<code>width</code>状态改变后与添加新的<code>resize</code>监听前,取消上次添加的<code>resize</code>监听事件\n\n<pre><code class=\"language-tsx line-numbers\">const EffectDemo: FC = () =&gt; {\n    ...\n    useEffect(() =&gt; {\n        window.addEventListener(\'resize\', resizeHandle);\n        return () =&gt; {\n            window.removeEventListener(\'resize\', resizeHandle);\n        };\n    }, [width]);\n};\n</code></pre>\n\n<h4>异步执行</h4>\n\n在<code>useEffect</code>中执行异步函数的语法如下,其实就是在原函数里调用一个<code>async</code>打头的立即函数\n\n<pre><code class=\"language-typescript line-numbers\">useEffect(() =&gt; {\n    (async () =&gt; {})();\n});\n</code></pre>\n\n以下示例代码让按钮在变成<code>ghost</code>之后1s再变红色\n\n<pre><code class=\"language-tsx line-numbers\">const EffectDemo: FC = () =&gt; {\n    const [red, setRed] = useState&lt;boolean&gt;(false);\n    useEffect(() =&gt; {\n        (async () =&gt; {\n            await new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(true), 1000));\n            setRed(ghost);\n        })();\n    }, [ghost]);\n    return (\n        &lt;div&gt;\n            &lt;Button type=\"primary\" onClick={toggleGhostBtn} ghost={ghost} danger={red}&gt;\n                切换按钮样式\n            &lt;/Button&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre>\n\n<h3><code>useLayoutEffect</code></h3>\n\n与<code>useEffect</code>几乎一样,但是具有<strong>防闪烁</strong>作用,比如下面的代码\n\n<pre><code class=\"language-typescript line-numbers\">const StateDemo: FC = () =&gt; {\n    const [count, setCount] = useState(1);\n    const [isShow, toggleShow] = useState(true);\n    useLayoutEffect(() =&gt; {\n        if (count === 0) setCount(Math.floor(Math.random() * 100));\n    }, [count]);\n    return (\n        &lt;div&gt;\n            &lt;p&gt;{count}&lt;/p&gt;\n            &lt;Button onClick={() =&gt; setCount(0)}&gt;随机数&lt;/Button&gt;\n...\n        &lt;/div&gt;\n    );\n};\n\nexport default StateDemo;\n</code></pre>\n\n如果使用<code>useEffect</code>在点击按钮时,它会在渲染屏幕后异步调用,而<code>useLayoutEffect</code>则会把所有逻辑先计算完毕最后一次性渲染,所以它会阻塞渲染,所以除非必须要用,一般情况下基本用<code>useEffect</code>\n\n<h3><code>useContext</code></h3>\n\n用于向后代组件透传一个值,以创建一个语言选择器为例\n\n定义一个语言列表变量\n\n<pre><code class=\"language-typescript line-numbers\">const langs: LangType[] = [\n    { name: \'en\', label: \'english\' },\n    { name: \'zh-CN\', label: \'简体中文\' },\n];\n</code></pre>\n\n创建一个<code>context</code>\n\n<pre><code class=\"language-typescript line-numbers\">const localContext = createContext&lt;LangStateProps&gt;({\n    lang: langs[0],\n    setLang: (lang: LangType) =&gt; {},\n});\n</code></pre>\n\n创建<code>provider</code>包装器\n\n<pre><code class=\"language-tsx line-numbers\">const LocalProvider: FC&lt;LangStateProps&gt; = ({ lang, setLang, children }) =&gt; {\n    useEffect(() =&gt; {\n        setLang(lang);\n    }, [lang]);\n    return (\n        &lt;&gt;\n            &lt;localContext.Provider value={{ lang, setLang }}&gt;{children}&lt;/localContext.Provider&gt;\n        &lt;/&gt;\n    );\n};\n</code></pre>\n\n创建<code>Local</code>组件\n\n<pre><code class=\"language-tsx line-numbers\">const Local: FC = ({ children }) =&gt; {\n    const [lang, setLang] = useState(langs[0]);\n    return (\n        &lt;LocalProvider lang={lang} setLang={setLang}&gt;\n            {children}\n        &lt;/LocalProvider&gt;\n    );\n};\n</code></pre>\n\n把<code>App.tsx</code>中的所有节点包含于<code>Local</code>组件\n\n<pre><code class=\"language-tsx line-numbers\">const App: FC = () =&gt; {\n    return (\n        &lt;Local&gt;\n        ...\n        &lt;/Local&gt;\n    );\n};\nexport default App;\n</code></pre>\n\n语言选择组件\n\n<pre><code class=\"language-tsx line-numbers\">const Lang: FC = () =&gt; {\n    const { lang, setLang } = useContext(localContext);\n    const changeLang = (value: string) =&gt; {\n        const current = langs.find((item) =&gt; item.name === value);\n        current &amp;&amp; setLang(current);\n    };\n    return (\n        &lt;&gt;\n            &lt;Select defaultValue={lang.name} style={{ width: 120 }} onChange={changeLang}&gt;\n                {langs.map(({ name, label }) =&gt; (\n                    &lt;Option key={name} value={name}&gt;\n                        {label || name}\n                    &lt;/Option&gt;\n                ))}\n            &lt;/Select&gt;\n        &lt;/&gt;\n    );\n};\n</code></pre>\n\n显示当前语言\n\n<pre><code class=\"language-tsx line-numbers\">const CurrentLang: FC = () =&gt; {\n    const { lang } = useContext(localContext);\n    return &lt;div&gt;当前语言: {lang.label || lang.name}&lt;/div&gt;;\n};\n</code></pre>\n\n在<code>App.tsx</code>中使用以上两个组件\n\n<pre><code class=\"language-tsx line-numbers\">const App: FC = () =&gt; {\n    return (\n        &lt;Local&gt;\n                ...\n                &lt;LangSelector /&gt;\n                &lt;CurrentLang /&gt;\n        &lt;/Local&gt;\n    );\n};\nexport default App;\n</code></pre>\n\n<h3><code>useReducer</code></h3>\n\n使用<code>Context</code>+<code>useReducer</code>可以实现轻量级的全局状态管理\n\n以实现一个简单的应用配置功能为例(包含标题设置和暗黑模式切换)\n\n<h4>编写类型</h4>\n\n<pre><code class=\"language-typescript line-numbers\">// 可选择的主题模式\nexport type ThemeMode = \'light\' | \'dark\';\n// 初始化应用配置\nexport type ConfigType = {\n    title?: string;\n    theme?: ThemeMode;\n};\n// 合并默认配置后的最终应用配置状态\nexport type ConfigStateType = Required&lt;ConfigType&gt;;\n// 可用的reducer操作\nexport enum ConfigureActionType {\n    SET_TITLE = \'change_title\',\n    CHANGE_THEME = \'change_theme\',\n}\n// 传入给dispatch触发器的数据\nexport type ConfigureAction =\n    | { type: ConfigureActionType.SET_TITLE; value: string }\n    | { type: ConfigureActionType.CHANGE_THEME; value: ThemeMode };\n// 透传给子组件的context\nexport interface ConfigureContextType {\n    state: ConfigStateType;\n    dispatch: Dispatch&lt;ConfigureAction&gt;;\n}\n</code></pre>\n\n<h4>创建<code>Context</code></h4>\n\n<pre><code class=\"language-typescript line-numbers\">// 透传配置状态与dispatch\nexport const ConfigureContext = createContext&lt;ConfigureContextType | null&gt;(null);\n</code></pre>\n\n<h4>状态操作</h4>\n\n为了确保数据的唯一性不被污染,使用<a href=\"https://immerjs.github.io/immer/\" title=\"immer.js\">immer.js</a>操作数据\n\n<pre><code class=\"language-typescript line-numbers\">export const configReducer: Reducer&lt;ConfigStateType, ConfigureAction&gt; = produce((draft, action) =&gt; {\n    switch (action.type) {\n        // 设置标题\n        case ConfigureActionType.SET_TITLE:\n            draft.title = action.value;\n            break;\n        // 设置主题\n        case ConfigureActionType.CHANGE_THEME:\n            draft.theme = action.value;\n            break;\n        default:\n            break;\n    }\n});\n</code></pre>\n\n<h4>包装器组件</h4>\n\n<ul>\n<li>合并默认配置和初始化配置</li>\n<li>使用<code>useEffect</code>创建在标题或主题状态改变时引发的副作用钩子</li>\n<li>把配置状态和<code>dispatch</code>传给<code>ConfigureContext</code></li>\n</ul>\n\n<pre><code class=\"language-tsx line-numbers\">const Configure: FC&lt;{ config?: ConfigType }&gt; = ({ config = {}, children }) =&gt; {\n    const [state, dispatch] = useReducer(\n        configReducer,\n        config,\n        (c) =&gt;\n            ({\n                title: \'react app\',\n                theme: \'light\',\n                ...c,\n            } as ConfigStateType),\n    );\n    useEffect(() =&gt; {\n        const html = document.getElementsByTagName(\'html\')[0];\n        if (state.theme === \'dark\') {\n            html.classList.add(\'dark\');\n        } else {\n            html.classList.remove(\'dark\');\n        }\n    }, [state.theme]);\n    useEffect(() =&gt; {\n        document.title = state.title;\n    }, [state.title]);\n    return (\n        &lt;ConfigureContext.Provider value={{ state, dispatch }}&gt;\n            {children}\n        &lt;/ConfigureContext.Provider&gt;\n    );\n};\n</code></pre>\n\n<h4>主题选择组件</h4>\n\n<pre><code class=\"language-tsx line-numbers\">const Theme = () =&gt; {\n    const context = useContext(ConfigureContext);\n    if (!context) return null;\n    const { state, dispatch } = context;\n    const toggleTheme = () =&gt;\n        dispatch({\n            type: ConfigureActionType.CHANGE_THEME,\n            value: state.theme === \'light\' ? \'dark\' : \'light\',\n        });\n    return (\n        &lt;div&gt;\n            &lt;span&gt;切换主题&lt;/span&gt;\n            &lt;Switch\n                checkedChildren=\"🌛\"\n                unCheckedChildren=\"☀️\"\n                onChange={toggleTheme}\n                checked={state.theme === \'dark\'}\n                defaultChecked={state.theme === \'dark\'}\n            /&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre>\n\n<h4>标题设置组件</h4>\n\n<pre><code class=\"language-tsx line-numbers\">const Title: FC = () =&gt; {\n    const context = useContext(ConfigureContext);\n    if (!context) return null;\n    const { state, dispatch } = context;\n    const changeTitle = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt;\n        dispatch({\n            type: ConfigureActionType.SET_TITLE,\n            value: e.target.value,\n        });\n    return (\n        &lt;div&gt;\n            &lt;span&gt;设置标题&lt;/span&gt;\n            &lt;Input placeholder=\"标题\" value={state.title} onChange={changeTitle} /&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre>\n\n<h4>在<code>App.tsx</code>中使用</h4>\n\n<pre><code class=\"language-tsx line-numbers\">&lt;Configure&gt;\n  ...\n  &lt;Theme /&gt;\n  &lt;Title /&gt;\n&lt;/Configure&gt;\n</code></pre>\n\n<h2>自定义Hooks</h2>\n\n为了更加便捷的使用<code>dispatch</code>,可以通过自定义一个hooks的方式来封装一些方法\n\n<pre><code class=\"language-typescript line-numbers\">const useConfig = () =&gt; {\n    const context = useContext(ConfigureContext);\n    const { state = defaultConfig, dispatch } = context ?? {};\n    const toggleTheme = () =&gt;\n        dispatch &amp;&amp;\n        dispatch({\n            type: ConfigureActionType.CHANGE_THEME,\n            value: state.theme === \'light\' ? \'dark\' : \'light\',\n        });\n    const changeTitle = (value: string) =&gt;\n        dispatch &amp;&amp;\n        dispatch({\n            type: ConfigureActionType.SET_TITLE,\n            value,\n        });\n    return { config: state, toggleTheme, changeTitle };\n};\n</code></pre>\n\n有了自定的hooks之后就可以直接在组件中使用了\n\n<pre><code class=\"language-tsx line-numbers\">const Theme: FC = () =&gt; {\n    const {\n        config: { theme },\n        toggleTheme,\n    } = useConfig();\n    return (\n        &lt;div&gt;\n            &lt;span&gt;切换主题&lt;/span&gt;\n            &lt;Switch\n                checkedChildren=\"🌛\"\n                unCheckedChildren=\"☀️\"\n                onChange={toggleTheme}\n                checked={theme === \'dark\'}\n                defaultChecked={theme === \'dark\'}\n            /&gt;\n        &lt;/div&gt;\n    );\n};\nconst Title: FC = () =&gt; {\n    const {\n        config: { title },\n        changeTitle,\n    } = useConfig();\n    return (\n        &lt;div&gt;\n            &lt;span&gt;设置标题&lt;/span&gt;\n            &lt;Input placeholder=\"标题\" value={title} onChange={(e) =&gt; changeTitle(e.target.value)} /&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre>\n\n<h2>性能优化</h2>\n\n<h3><code>useMemo</code></h3>\n\n<code>useMemo</code>拥有个两个参数,一个回调函数和一个依赖项数组,回调函数必须返回一个值,只有在依赖项发生改变的时候,才会重新调用此函数,返回一个新的值.\n\n回调函数的返回值可以是一个<code>普通类型的值</code>(例如<code>字符串</code>,<code>布尔值</code>,<code>数组</code>,<code>对象</code>等)也可以是一个<code>函数</code>,甚至是一个<code>react组件</code>,如果返回值是一个函数,则其作用就与<code>useCallback</code>一样\n\n以下代码在每次<code>config</code>发生改变时,另一个组件的<code>console.log</code>也会调用\n\n<pre><code class=\"language-tsx line-numbers\">const Theme: FC = () =&gt; {\n    const {\n        config: { theme },\n        toggleTheme,\n    } = useConfig();\n    console.log(\'render theme component\');\n    return (...组件代码);\n};\nconst Title: FC = () =&gt; {\n    const {\n        config: { title },\n        changeTitle,\n    } = useConfig();\n    console.log(\'render title component\');\n   return (...组件代码);\n};\n</code></pre>\n\n这样会在每次的<code>input</code>敲入一个字符时就会导致<code>Theme</code>组件重新渲染,极大的浪费了性能,可以通过<code>useMemo</code>做一下优化\n\n<pre><code class=\"language-tsx line-numbers\">const Theme: FC = () =&gt; {\n    const {\n        config: { theme },\n        toggleTheme,\n    } = useConfig();\n    return useMemo(() =&gt; {\n        console.log(\'render theme component\');\n        return (...组件代码);\n    }, [theme]);\n};\nconst Title: FC = () =&gt; {\n    const {\n        config: { title },\n        changeTitle,\n    } = useConfig();\n    return useMemo(() =&gt; {\n        console.log(\'render title component\');\n        return (...组件代码);\n    }, [title]);\n};\n</code></pre>\n\n现在更改其中一个组件只会执行自己组件里的<code>console.log</code>了\n\n<h3><code>useCallback</code></h3>\n\n现在把<code>Theme</code>和<code>Title</code>两个组件放在一起作为<code>ConfigPanel</code>的子组件,并取消原来的<code>useMemo</code>包装,而改用<code>memo</code>包装\n\n<blockquote>\n  <code>React.memo</code>包装的组件,只有当<code>props</code>改变之后才会重新渲染,<code>memo</code>是浅对比\n</blockquote>\n\n<pre><code class=\"language-tsx line-numbers\">const Theme: FC&lt;{ theme: ThemeMode; toggleTheme: () =&gt; void }&gt; = memo(({ theme, toggleTheme }) =&gt; {\n    console.log(\'render theme component\');\n    return (...组件代码);\n});\nconst Title: FC&lt;{ title: string; changeTitle: (value: string) =&gt; void }&gt; = memo(\n    ({ title, changeTitle }) =&gt; {\n        console.log(\'render title component\');\n        return (...组件代码);\n    },\n);\nconst ConfigPanel: FC = () =&gt; {\n    const { config, toggleTheme, changeTitle } = useConfig();\n    return (\n        &lt;&gt;\n            &lt;Theme theme={config.theme} toggleTheme={toggleTheme} /&gt;\n            &lt;Title title={config.title} changeTitle={changeTitle} /&gt;\n        &lt;/&gt;\n    );\n};\n</code></pre>\n\n这时会发现<code>Theme</code>子组件中执行<code>toggleTheme</code>也会导致<code>Title</code>组件重新渲染,原因是<code>changeTitle</code>函数不是固定的,父组件重选渲染后会导致产生新的<code>changeTitle</code>变量,现在尝试使用<code>useCallback</code>包装,是其只在<code>title</code>改变时才产生新值,<code>toggleTheme</code>也一样\n\n<pre><code class=\"language-typescript line-numbers\">const useConfig = () =&gt; {\n    const context = useContext(ConfigureContext);\n    const { state = defaultConfig, dispatch } = context ?? {};\n    const toggleTheme = useCallback(\n        () =&gt;\n            dispatch &amp;&amp;\n            dispatch({\n                type: ConfigureActionType.CHANGE_THEME,\n                value: state.theme === \'light\' ? \'dark\' : \'light\',\n            }),\n        [state.theme],\n    );\n\n    const changeTitle = useCallback(\n        (value: string) =&gt;\n            dispatch &amp;&amp;\n            dispatch({\n                type: ConfigureActionType.SET_TITLE,\n                value,\n            }),\n        [state.title],\n    );\n    return { config: state, toggleTheme, changeTitle };\n};\n</code></pre>\n\n现在执行<code>toggleTheme</code>并不会导致<code>Title</code>组件重新渲染了,反之亦然\n\n<h2>组件引用</h2>\n\n<h3><code>useRef</code></h3>\n\n创建<code>ref</code>对象,其<code>.current</code>属性被初始化为传入的参数,其<code>current</code>属性是可以通过赋值主动改变,而 <code>ref</code> 对象本身在组件的整个生命周期内保持不变\n\n<h4>生命周期不变对象</h4>\n\n以下代码通过使用<code>useRef</code>保存上一次的变量,无论<code>count</code>如何改变都不会执行<code>console.log</code>,因为<code>ref</code>对象本身是不变的.而由于<code>useEffect</code>和<code>useLayoutEffect</code>都是生命周期钩子,与外部是异步的,所以<code>ref.current</code>虽然会在钩子中被赋值为最新值,而其外部则保持上一次的值.\n\n<pre><code class=\"language-tsx line-numbers\">const StateDemo: FC = () =&gt; {\n    ...\n    const ref = useRef(count);\n    useLayoutEffect(() =&gt; {\n        ref.current = count;\n        if (count === 0) setCount(Math.floor(Math.random() * 100));\n    }, [count]);\n    useEffect(() =&gt; {\n        console.log(\'ref has changed\');\n    }, [ref]);\n    return (\n        &lt;div&gt;\n            &lt;p&gt;{count}&lt;/p&gt;\n            &lt;p&gt;{ref.current}&lt;/p&gt;\n            &lt;Button onClick={() =&gt; setCount(count + 1)}&gt;增加&lt;/Button&gt;\n            ...\n        &lt;/div&gt;\n    );\n};\n\n</code></pre>\n\n<h4>与<code>forwardRef</code>结合</h4>\n\n通过<code>forwardRef</code>可以把<code>useRef</code>的值与<code>dom</code>节点绑定,从而可以操控原生的<code>dom</code>节点\n\n<pre><code class=\"language-tsx line-numbers\">const CustomInput = forwardRef((props = {}, ref: Ref&lt;any&gt;) =&gt; (\n    &lt;input ref={ref} type=\"text\" {...props} /&gt;\n));\nconst RefDemo: FC = () =&gt; {\n    const inputRef = useRef&lt;HTMLInputElement | null&gt;(null);\n\n    useEffect(() =&gt; {\n        if (inputRef.current) {\n            inputRef.current.focus();\n            inputRef.current.value = \'useRef\';\n        }\n    });\n    return (\n        &lt;&gt;\n            &lt;CustomInput ref={inputRef} /&gt;\n        &lt;/&gt;\n    );\n};\nexport default RefDemo;\n</code></pre>\n\n<h3><code>useImperativeHandle</code></h3>', 'React基础知识', '', 'publish', 'open', 'closed', '', 'base-use', '', '', '2021-11-10 05:23:17', '2021-11-09 21:23:17', '[immer.js]: https://immerjs.github.io/immer/	\"immer.js\"\r\n\r\n[scode type=\"yellow\"]注意: 本教程在MacOS下讲解,Linux用户根据各自的发行版安装软件,windows用户请自行安装wsl2作为替代 [/scode][]\r\n\r\n## 状态与副作用\r\n\r\n### `useState`\r\n\r\n用于改变组件内的状态,例\r\n\r\n```tsx\r\nconst StateDemo: FC = () =&gt; {\r\n    const [count, setCount] = useState(1);\r\n    const [isShow, toggleShow] = useState(true);\r\n\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;p&gt;{count}&lt;/p&gt;\r\n            &lt;Button onClick={() =&gt; setCount(count + 1)}&gt;增加&lt;/Button&gt;\r\n            &lt;p className=&quot;pt-5&quot;&gt;{isShow ? &lt;span&gt; I&#039;m show now &lt;/span&gt; : null}&lt;/p&gt;\r\n            &lt;Button onClick={() =&gt; toggleShow(!isShow)}&gt;{isShow ? &#039;显示&#039; : &#039;隐藏&#039;}&lt;/Button&gt;\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n\r\nexport default StateDemo;\r\n```\r\n\r\n### `useEffect`\r\n\r\n在状态不同的生命周期执行副作用\r\n\r\n#### 简单用法\r\n\r\n每次状态更新都执行所有没有依赖的`useEffect`,以下代码\'toggle ghost\'这一条在`resize`浏览器时也会触发\r\n\r\n```tsx\r\nconst EffectDemo: FC = () =&gt; {\r\n    const [ghost, setGhost] = useState&lt;boolean&gt;(false);\r\n    const [width, setWidth] = useState(window.innerWidth);\r\n    const toggleGhostBtn = () =&gt; setGhost(!ghost);\r\n    const resizeHandle = () =&gt; setWidth(window.innerWidth);\r\n    useEffect(() =&gt; {\r\n        window.addEventListener(&#039;resize&#039;, resizeHandle);\r\n    });\r\n    useEffect(() =&gt; {\r\n        console.log(&#039;toggle ghost&#039;);\r\n    });\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;p&gt;{ghost ? &#039;ghost&#039; : &#039;普通&#039;}按钮&lt;/p&gt;\r\n            &lt;Button type=&quot;primary&quot; onClick={toggleGhostBtn} ghost={ghost}&gt;\r\n                切换按钮样式\r\n            &lt;/Button&gt;\r\n            &lt;p className=&quot;pt-5&quot;&gt;宽度为: {width}&lt;/p&gt;\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n```\r\n\r\n#### 依赖更新\r\n\r\n通过`useEffect`的第二个参数,可以指定其依赖的变量,只有此变量的状态更改时才会执行副作用函数,如果第二个参数为空,则只在第一次渲染和重新渲染时触发\r\n\r\n```tsx\r\nconst EffectDemo: FC = () =&gt; {\r\n    ...\r\n    useEffect(() =&gt; {\r\n        // changeWidth\r\n    }, [width]);\r\n    useEffect(() =&gt; {\r\n        console.log(&#039;toggle ghost&#039;);\r\n    }, [ghost]);\r\n   useEffect(() =&gt; {\r\n        console.log(&#039;只在第一次或重新渲染组件时触发&#039;);\r\n    }, []);\r\n};\r\n```\r\n\r\n#### 清理监听\r\n\r\n在监听`width`的`useEffect`中,每次改变`width`的状态,都会添加一个`resize`事件,这会极大的耗费浏览器占用的内存,通过一个返回值的方式,即可在下一次`width`状态改变后与添加新的`resize`监听前,取消上次添加的`resize`监听事件\r\n\r\n````tsx\r\nconst EffectDemo: FC = () => {\r\n    ...\r\n    useEffect(() => {\r\n        window.addEventListener(\'resize\', resizeHandle);\r\n        return () => {\r\n            window.removeEventListener(\'resize\', resizeHandle);\r\n        };\r\n    }, [width]);\r\n};\r\n````\r\n\r\n#### 异步执行\r\n\r\n在`useEffect`中执行异步函数的语法如下,其实就是在原函数里调用一个`async`打头的立即函数\r\n\r\n```typescript\r\nuseEffect(() =&gt; {\r\n    (async () =&gt; {})();\r\n});\r\n```\r\n\r\n以下示例代码让按钮在变成`ghost`之后1s再变红色\r\n\r\n```tsx\r\n\r\nconst EffectDemo: FC = () =&gt; {\r\n    const [red, setRed] = useState&lt;boolean&gt;(false);\r\n    useEffect(() =&gt; {\r\n        (async () =&gt; {\r\n            await new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(true), 1000));\r\n            setRed(ghost);\r\n        })();\r\n    }, [ghost]);\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;Button type=&quot;primary&quot; onClick={toggleGhostBtn} ghost={ghost} danger={red}&gt;\r\n                切换按钮样式\r\n            &lt;/Button&gt;\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n```\r\n\r\n### `useLayoutEffect`\r\n\r\n与`useEffect`几乎一样,但是具有**防闪烁**作用,比如下面的代码\r\n\r\n```typescript\r\nconst StateDemo: FC = () =&gt; {\r\n    const [count, setCount] = useState(1);\r\n    const [isShow, toggleShow] = useState(true);\r\n    useLayoutEffect(() =&gt; {\r\n        if (count === 0) setCount(Math.floor(Math.random() * 100));\r\n    }, [count]);\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;p&gt;{count}&lt;/p&gt;\r\n            &lt;Button onClick={() =&gt; setCount(0)}&gt;随机数&lt;/Button&gt;\r\n...\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n\r\nexport default StateDemo;\r\n```\r\n\r\n如果使用`useEffect`在点击按钮时,它会在渲染屏幕后异步调用,而`useLayoutEffect`则会把所有逻辑先计算完毕最后一次性渲染,所以它会阻塞渲染,所以除非必须要用,一般情况下基本用`useEffect`\r\n\r\n### `useContext`\r\n\r\n用于向后代组件透传一个值,以创建一个语言选择器为例\r\n\r\n定义一个语言列表变量\r\n\r\n```typescript\r\nconst langs: LangType[] = [\r\n    { name: &#039;en&#039;, label: &#039;english&#039; },\r\n    { name: &#039;zh-CN&#039;, label: &#039;简体中文&#039; },\r\n];\r\n```\r\n\r\n创建一个`context`\r\n\r\n```typescript\r\nconst localContext = createContext&lt;LangStateProps&gt;({\r\n    lang: langs[0],\r\n    setLang: (lang: LangType) =&gt; {},\r\n});\r\n```\r\n\r\n创建`provider`包装器\r\n\r\n```tsx\r\nconst LocalProvider: FC&lt;LangStateProps&gt; = ({ lang, setLang, children }) =&gt; {\r\n    useEffect(() =&gt; {\r\n        setLang(lang);\r\n    }, [lang]);\r\n    return (\r\n        &lt;&gt;\r\n            &lt;localContext.Provider value={{ lang, setLang }}&gt;{children}&lt;/localContext.Provider&gt;\r\n        &lt;/&gt;\r\n    );\r\n};\r\n```\r\n\r\n创建`Local`组件\r\n\r\n```tsx\r\nconst Local: FC = ({ children }) =&gt; {\r\n    const [lang, setLang] = useState(langs[0]);\r\n    return (\r\n        &lt;LocalProvider lang={lang} setLang={setLang}&gt;\r\n            {children}\r\n        &lt;/LocalProvider&gt;\r\n    );\r\n};\r\n```\r\n\r\n把`App.tsx`中的所有节点包含于`Local`组件\r\n\r\n```tsx\r\nconst App: FC = () =&gt; {\r\n    return (\r\n        &lt;Local&gt;\r\n        ...\r\n        &lt;/Local&gt;\r\n    );\r\n};\r\nexport default App;\r\n```\r\n\r\n语言选择组件\r\n\r\n```tsx\r\nconst Lang: FC = () =&gt; {\r\n    const { lang, setLang } = useContext(localContext);\r\n    const changeLang = (value: string) =&gt; {\r\n        const current = langs.find((item) =&gt; item.name === value);\r\n        current &amp;&amp; setLang(current);\r\n    };\r\n    return (\r\n        &lt;&gt;\r\n            &lt;Select defaultValue={lang.name} style={{ width: 120 }} onChange={changeLang}&gt;\r\n                {langs.map(({ name, label }) =&gt; (\r\n                    &lt;Option key={name} value={name}&gt;\r\n                        {label || name}\r\n                    &lt;/Option&gt;\r\n                ))}\r\n            &lt;/Select&gt;\r\n        &lt;/&gt;\r\n    );\r\n};\r\n```\r\n\r\n显示当前语言\r\n\r\n```tsx\r\nconst CurrentLang: FC = () =&gt; {\r\n    const { lang } = useContext(localContext);\r\n    return &lt;div&gt;当前语言: {lang.label || lang.name}&lt;/div&gt;;\r\n};\r\n```\r\n\r\n在`App.tsx`中使用以上两个组件\r\n\r\n```tsx\r\nconst App: FC = () =&gt; {\r\n    return (\r\n        &lt;Local&gt;\r\n                ...\r\n                &lt;LangSelector /&gt;\r\n                &lt;CurrentLang /&gt;\r\n        &lt;/Local&gt;\r\n    );\r\n};\r\nexport default App;\r\n```\r\n\r\n### `useReducer`\r\n\r\n使用`Context`+`useReducer`可以实现轻量级的全局状态管理\r\n\r\n以实现一个简单的应用配置功能为例(包含标题设置和暗黑模式切换)\r\n\r\n#### 编写类型\r\n\r\n```typescript\r\n// 可选择的主题模式\r\nexport type ThemeMode = &#039;light&#039; | &#039;dark&#039;;\r\n// 初始化应用配置\r\nexport type ConfigType = {\r\n    title?: string;\r\n    theme?: ThemeMode;\r\n};\r\n// 合并默认配置后的最终应用配置状态\r\nexport type ConfigStateType = Required&lt;ConfigType&gt;;\r\n// 可用的reducer操作\r\nexport enum ConfigureActionType {\r\n    SET_TITLE = &#039;change_title&#039;,\r\n    CHANGE_THEME = &#039;change_theme&#039;,\r\n}\r\n// 传入给dispatch触发器的数据\r\nexport type ConfigureAction =\r\n    | { type: ConfigureActionType.SET_TITLE; value: string }\r\n    | { type: ConfigureActionType.CHANGE_THEME; value: ThemeMode };\r\n// 透传给子组件的context\r\nexport interface ConfigureContextType {\r\n    state: ConfigStateType;\r\n    dispatch: Dispatch&lt;ConfigureAction&gt;;\r\n}\r\n```\r\n\r\n#### 创建`Context`\r\n\r\n```typescript\r\n// 透传配置状态与dispatch\r\nexport const ConfigureContext = createContext&lt;ConfigureContextType | null&gt;(null);\r\n```\r\n\r\n#### 状态操作\r\n\r\n为了确保数据的唯一性不被污染,使用[immer.js][]操作数据\r\n\r\n```typescript\r\nexport const configReducer: Reducer&lt;ConfigStateType, ConfigureAction&gt; = produce((draft, action) =&gt; {\r\n    switch (action.type) {\r\n        // 设置标题\r\n        case ConfigureActionType.SET_TITLE:\r\n            draft.title = action.value;\r\n            break;\r\n        // 设置主题\r\n        case ConfigureActionType.CHANGE_THEME:\r\n            draft.theme = action.value;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n});\r\n```\r\n\r\n#### 包装器组件\r\n\r\n- 合并默认配置和初始化配置\r\n- 使用`useEffect`创建在标题或主题状态改变时引发的副作用钩子\r\n- 把配置状态和`dispatch`传给`ConfigureContext`\r\n\r\n```tsx\r\nconst Configure: FC&lt;{ config?: ConfigType }&gt; = ({ config = {}, children }) =&gt; {\r\n    const [state, dispatch] = useReducer(\r\n        configReducer,\r\n        config,\r\n        (c) =&gt;\r\n            ({\r\n                title: &#039;react app&#039;,\r\n                theme: &#039;light&#039;,\r\n                ...c,\r\n            } as ConfigStateType),\r\n    );\r\n    useEffect(() =&gt; {\r\n        const html = document.getElementsByTagName(&#039;html&#039;)[0];\r\n        if (state.theme === &#039;dark&#039;) {\r\n            html.classList.add(&#039;dark&#039;);\r\n        } else {\r\n            html.classList.remove(&#039;dark&#039;);\r\n        }\r\n    }, [state.theme]);\r\n    useEffect(() =&gt; {\r\n        document.title = state.title;\r\n    }, [state.title]);\r\n    return (\r\n        &lt;ConfigureContext.Provider value={{ state, dispatch }}&gt;\r\n            {children}\r\n        &lt;/ConfigureContext.Provider&gt;\r\n    );\r\n};\r\n```\r\n\r\n#### 主题选择组件\r\n\r\n```tsx\r\nconst Theme = () =&gt; {\r\n    const context = useContext(ConfigureContext);\r\n    if (!context) return null;\r\n    const { state, dispatch } = context;\r\n    const toggleTheme = () =&gt;\r\n        dispatch({\r\n            type: ConfigureActionType.CHANGE_THEME,\r\n            value: state.theme === &#039;light&#039; ? &#039;dark&#039; : &#039;light&#039;,\r\n        });\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;span&gt;切换主题&lt;/span&gt;\r\n            &lt;Switch\r\n                checkedChildren=&quot;🌛&quot;\r\n                unCheckedChildren=&quot;☀️&quot;\r\n                onChange={toggleTheme}\r\n                checked={state.theme === &#039;dark&#039;}\r\n                defaultChecked={state.theme === &#039;dark&#039;}\r\n            /&gt;\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n```\r\n\r\n#### 标题设置组件\r\n\r\n```tsx\r\nconst Title: FC = () =&gt; {\r\n    const context = useContext(ConfigureContext);\r\n    if (!context) return null;\r\n    const { state, dispatch } = context;\r\n    const changeTitle = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt;\r\n        dispatch({\r\n            type: ConfigureActionType.SET_TITLE,\r\n            value: e.target.value,\r\n        });\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;span&gt;设置标题&lt;/span&gt;\r\n            &lt;Input placeholder=&quot;标题&quot; value={state.title} onChange={changeTitle} /&gt;\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n```\r\n\r\n#### 在`App.tsx`中使用\r\n\r\n```tsx\r\n&lt;Configure&gt;\r\n  ...\r\n  &lt;Theme /&gt;\r\n  &lt;Title /&gt;\r\n&lt;/Configure&gt;\r\n```\r\n\r\n## 自定义Hooks\r\n\r\n为了更加便捷的使用`dispatch`,可以通过自定义一个hooks的方式来封装一些方法\r\n\r\n```typescript\r\nconst useConfig = () =&gt; {\r\n    const context = useContext(ConfigureContext);\r\n    const { state = defaultConfig, dispatch } = context ?? {};\r\n    const toggleTheme = () =&gt;\r\n        dispatch &amp;&amp;\r\n        dispatch({\r\n            type: ConfigureActionType.CHANGE_THEME,\r\n            value: state.theme === &#039;light&#039; ? &#039;dark&#039; : &#039;light&#039;,\r\n        });\r\n    const changeTitle = (value: string) =&gt;\r\n        dispatch &amp;&amp;\r\n        dispatch({\r\n            type: ConfigureActionType.SET_TITLE,\r\n            value,\r\n        });\r\n    return { config: state, toggleTheme, changeTitle };\r\n};\r\n```\r\n\r\n有了自定的hooks之后就可以直接在组件中使用了\r\n\r\n```tsx\r\nconst Theme: FC = () =&gt; {\r\n    const {\r\n        config: { theme },\r\n        toggleTheme,\r\n    } = useConfig();\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;span&gt;切换主题&lt;/span&gt;\r\n            &lt;Switch\r\n                checkedChildren=&quot;🌛&quot;\r\n                unCheckedChildren=&quot;☀️&quot;\r\n                onChange={toggleTheme}\r\n                checked={theme === &#039;dark&#039;}\r\n                defaultChecked={theme === &#039;dark&#039;}\r\n            /&gt;\r\n        &lt;/div&gt;\r\n    );\r\n};\r\nconst Title: FC = () =&gt; {\r\n    const {\r\n        config: { title },\r\n        changeTitle,\r\n    } = useConfig();\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;span&gt;设置标题&lt;/span&gt;\r\n            &lt;Input placeholder=&quot;标题&quot; value={title} onChange={(e) =&gt; changeTitle(e.target.value)} /&gt;\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n```\r\n\r\n## 性能优化\r\n\r\n### `useMemo`\r\n\r\n`useMemo`拥有个两个参数,一个回调函数和一个依赖项数组,回调函数必须返回一个值,只有在依赖项发生改变的时候,才会重新调用此函数,返回一个新的值.\r\n\r\n回调函数的返回值可以是一个`普通类型的值`(例如`字符串`,`布尔值`,`数组`,`对象`等)也可以是一个`函数`,甚至是一个`react组件`,如果返回值是一个函数,则其作用就与`useCallback`一样\r\n\r\n以下代码在每次`config`发生改变时,另一个组件的`console.log`也会调用\r\n\r\n```tsx\r\nconst Theme: FC = () =&gt; {\r\n    const {\r\n        config: { theme },\r\n        toggleTheme,\r\n    } = useConfig();\r\n    console.log(&#039;render theme component&#039;);\r\n    return (...组件代码);\r\n};\r\nconst Title: FC = () =&gt; {\r\n    const {\r\n        config: { title },\r\n        changeTitle,\r\n    } = useConfig();\r\n    console.log(&#039;render title component&#039;);\r\n   return (...组件代码);\r\n};\r\n```\r\n\r\n这样会在每次的`input`敲入一个字符时就会导致`Theme`组件重新渲染,极大的浪费了性能,可以通过`useMemo`做一下优化\r\n\r\n```tsx\r\nconst Theme: FC = () =&gt; {\r\n    const {\r\n        config: { theme },\r\n        toggleTheme,\r\n    } = useConfig();\r\n    return useMemo(() =&gt; {\r\n        console.log(&#039;render theme component&#039;);\r\n        return (...组件代码);\r\n    }, [theme]);\r\n};\r\nconst Title: FC = () =&gt; {\r\n    const {\r\n        config: { title },\r\n        changeTitle,\r\n    } = useConfig();\r\n    return useMemo(() =&gt; {\r\n        console.log(&#039;render title component&#039;);\r\n        return (...组件代码);\r\n    }, [title]);\r\n};\r\n```\r\n\r\n现在更改其中一个组件只会执行自己组件里的`console.log`了\r\n\r\n### `useCallback`\r\n\r\n现在把`Theme`和`Title`两个组件放在一起作为`ConfigPanel`的子组件,并取消原来的`useMemo`包装,而改用`memo`包装\r\n\r\n> `React.memo`包装的组件,只有当`props`改变之后才会重新渲染,`memo`是浅对比\r\n\r\n```tsx\r\nconst Theme: FC&lt;{ theme: ThemeMode; toggleTheme: () =&gt; void }&gt; = memo(({ theme, toggleTheme }) =&gt; {\r\n    console.log(&#039;render theme component&#039;);\r\n    return (...组件代码);\r\n});\r\nconst Title: FC&lt;{ title: string; changeTitle: (value: string) =&gt; void }&gt; = memo(\r\n    ({ title, changeTitle }) =&gt; {\r\n        console.log(&#039;render title component&#039;);\r\n        return (...组件代码);\r\n    },\r\n);\r\nconst ConfigPanel: FC = () =&gt; {\r\n    const { config, toggleTheme, changeTitle } = useConfig();\r\n    return (\r\n        &lt;&gt;\r\n            &lt;Theme theme={config.theme} toggleTheme={toggleTheme} /&gt;\r\n            &lt;Title title={config.title} changeTitle={changeTitle} /&gt;\r\n        &lt;/&gt;\r\n    );\r\n};\r\n```\r\n\r\n这时会发现`Theme`子组件中执行`toggleTheme`也会导致`Title`组件重新渲染,原因是`changeTitle`函数不是固定的,父组件重选渲染后会导致产生新的`changeTitle`变量,现在尝试使用`useCallback`包装,是其只在`title`改变时才产生新值,`toggleTheme`也一样\r\n\r\n```typescript\r\nconst useConfig = () =&gt; {\r\n    const context = useContext(ConfigureContext);\r\n    const { state = defaultConfig, dispatch } = context ?? {};\r\n    const toggleTheme = useCallback(\r\n        () =&gt;\r\n            dispatch &amp;&amp;\r\n            dispatch({\r\n                type: ConfigureActionType.CHANGE_THEME,\r\n                value: state.theme === &#039;light&#039; ? &#039;dark&#039; : &#039;light&#039;,\r\n            }),\r\n        [state.theme],\r\n    );\r\n\r\n    const changeTitle = useCallback(\r\n        (value: string) =&gt;\r\n            dispatch &amp;&amp;\r\n            dispatch({\r\n                type: ConfigureActionType.SET_TITLE,\r\n                value,\r\n            }),\r\n        [state.title],\r\n    );\r\n    return { config: state, toggleTheme, changeTitle };\r\n};\r\n```\r\n\r\n现在执行`toggleTheme`并不会导致`Title`组件重新渲染了,反之亦然\r\n\r\n## 组件引用\r\n\r\n### `useRef`\r\n\r\n创建`ref`对象,其`.current`属性被初始化为传入的参数,其`current`属性是可以通过赋值主动改变,而 `ref` 对象本身在组件的整个生命周期内保持不变\r\n\r\n#### 生命周期不变对象\r\n\r\n以下代码通过使用`useRef`保存上一次的变量,无论`count`如何改变都不会执行`console.log`,因为`ref`对象本身是不变的.而由于`useEffect`和`useLayoutEffect`都是生命周期钩子,与外部是异步的,所以`ref.current`虽然会在钩子中被赋值为最新值,而其外部则保持上一次的值.\r\n\r\n```tsx\r\nconst StateDemo: FC = () =&gt; {\r\n    ...\r\n    const ref = useRef(count);\r\n    useLayoutEffect(() =&gt; {\r\n        ref.current = count;\r\n        if (count === 0) setCount(Math.floor(Math.random() * 100));\r\n    }, [count]);\r\n    useEffect(() =&gt; {\r\n        console.log(&#039;ref has changed&#039;);\r\n    }, [ref]);\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;p&gt;{count}&lt;/p&gt;\r\n            &lt;p&gt;{ref.current}&lt;/p&gt;\r\n            &lt;Button onClick={() =&gt; setCount(count + 1)}&gt;增加&lt;/Button&gt;\r\n            ...\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n\r\n```\r\n\r\n#### 与`forwardRef`结合\r\n\r\n通过`forwardRef`可以把`useRef`的值与`dom`节点绑定,从而可以操控原生的`dom`节点\r\n\r\n```tsx\r\nconst CustomInput = forwardRef((props = {}, ref: Ref&lt;any&gt;) =&gt; (\r\n    &lt;input ref={ref} type=&quot;text&quot; {...props} /&gt;\r\n));\r\nconst RefDemo: FC = () =&gt; {\r\n    const inputRef = useRef&lt;HTMLInputElement | null&gt;(null);\r\n\r\n    useEffect(() =&gt; {\r\n        if (inputRef.current) {\r\n            inputRef.current.focus();\r\n            inputRef.current.value = &#039;useRef&#039;;\r\n        }\r\n    });\r\n    return (\r\n        &lt;&gt;\r\n            &lt;CustomInput ref={inputRef} /&gt;\r\n        &lt;/&gt;\r\n    );\r\n};\r\nexport default RefDemo;\r\n```\r\n\r\n### `useImperativeHandle`\r\n\r\n\r\n', 48, 'https://jikexingkong.com/docs/react/react%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86/', 1, 'docs', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(61, 1, '2021-10-29 14:27:28', '2021-10-29 06:27:28', '[scode type=\"yellow\"]注意: 本教程在MacOS下讲解,Linux用户根据各自的发行版安装软件,windows用户请自行安装wsl2作为替代 [/scode][]\n\n<h2>状态与副作用</h2>\n\n<h3><code>useState</code></h3>\n\n用于改变组件内的状态,例\n\n<pre><code class=\"language-tsx line-numbers\">const StateDemo: FC = () =&gt; {\n    const [count, setCount] = useState(1);\n    const [isShow, toggleShow] = useState(true);\n\n    return (\n        &lt;div&gt;\n            &lt;p&gt;{count}&lt;/p&gt;\n            &lt;Button onClick={() =&gt; setCount(count + 1)}&gt;增加&lt;/Button&gt;\n            &lt;p className=\"pt-5\"&gt;{isShow ? &lt;span&gt; I\'m show now &lt;/span&gt; : null}&lt;/p&gt;\n            &lt;Button onClick={() =&gt; toggleShow(!isShow)}&gt;{isShow ? \'显示\' : \'隐藏\'}&lt;/Button&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default StateDemo;\n</code></pre>\n\n<h3><code>useEffect</code></h3>\n\n在状态不同的生命周期执行副作用\n\n<h4>简单用法</h4>\n\n每次状态更新都执行所有没有依赖的<code>useEffect</code>,以下代码\'toggle ghost\'这一条在<code>resize</code>浏览器时也会触发\n\n<pre><code class=\"language-tsx line-numbers\">const EffectDemo: FC = () =&gt; {\n    const [ghost, setGhost] = useState&lt;boolean&gt;(false);\n    const [width, setWidth] = useState(window.innerWidth);\n    const toggleGhostBtn = () =&gt; setGhost(!ghost);\n    const resizeHandle = () =&gt; setWidth(window.innerWidth);\n    useEffect(() =&gt; {\n        window.addEventListener(\'resize\', resizeHandle);\n    });\n    useEffect(() =&gt; {\n        console.log(\'toggle ghost\');\n    });\n    return (\n        &lt;div&gt;\n            &lt;p&gt;{ghost ? \'ghost\' : \'普通\'}按钮&lt;/p&gt;\n            &lt;Button type=\"primary\" onClick={toggleGhostBtn} ghost={ghost}&gt;\n                切换按钮样式\n            &lt;/Button&gt;\n            &lt;p className=\"pt-5\"&gt;宽度为: {width}&lt;/p&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre>\n\n<h4>依赖更新</h4>\n\n通过<code>useEffect</code>的第二个参数,可以指定其依赖的变量,只有此变量的状态更改时才会执行副作用函数,如果第二个参数为空,则只在第一次渲染和重新渲染时触发\n\n<pre><code class=\"language-tsx line-numbers\">const EffectDemo: FC = () =&gt; {\n    ...\n    useEffect(() =&gt; {\n        // changeWidth\n    }, [width]);\n    useEffect(() =&gt; {\n        console.log(\'toggle ghost\');\n    }, [ghost]);\n   useEffect(() =&gt; {\n        console.log(\'只在第一次或重新渲染组件时触发\');\n    }, []);\n};\n</code></pre>\n\n<h4>清理监听</h4>\n\n在监听<code>width</code>的<code>useEffect</code>中,每次改变<code>width</code>的状态,都会添加一个<code>resize</code>事件,这会极大的耗费浏览器占用的内存,通过一个返回值的方式,即可在下一次<code>width</code>状态改变后与添加新的<code>resize</code>监听前,取消上次添加的<code>resize</code>监听事件\n\n<pre><code class=\"language-tsx line-numbers\">const EffectDemo: FC = () =&gt; {\n    ...\n    useEffect(() =&gt; {\n        window.addEventListener(\'resize\', resizeHandle);\n        return () =&gt; {\n            window.removeEventListener(\'resize\', resizeHandle);\n        };\n    }, [width]);\n};\n</code></pre>\n\n<h4>异步执行</h4>\n\n在<code>useEffect</code>中执行异步函数的语法如下,其实就是在原函数里调用一个<code>async</code>打头的立即函数\n\n<pre><code class=\"language-typescript line-numbers\">useEffect(() =&gt; {\n    (async () =&gt; {})();\n});\n</code></pre>\n\n以下示例代码让按钮在变成<code>ghost</code>之后1s再变红色\n\n<pre><code class=\"language-tsx line-numbers\">const EffectDemo: FC = () =&gt; {\n    const [red, setRed] = useState&lt;boolean&gt;(false);\n    useEffect(() =&gt; {\n        (async () =&gt; {\n            await new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(true), 1000));\n            setRed(ghost);\n        })();\n    }, [ghost]);\n    return (\n        &lt;div&gt;\n            &lt;Button type=\"primary\" onClick={toggleGhostBtn} ghost={ghost} danger={red}&gt;\n                切换按钮样式\n            &lt;/Button&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre>\n\n<h3><code>useLayoutEffect</code></h3>\n\n与<code>useEffect</code>几乎一样,但是具有<strong>防闪烁</strong>作用,比如下面的代码\n\n<pre><code class=\"language-typescript line-numbers\">const StateDemo: FC = () =&gt; {\n    const [count, setCount] = useState(1);\n    const [isShow, toggleShow] = useState(true);\n    useLayoutEffect(() =&gt; {\n        if (count === 0) setCount(Math.floor(Math.random() * 100));\n    }, [count]);\n    return (\n        &lt;div&gt;\n            &lt;p&gt;{count}&lt;/p&gt;\n            &lt;Button onClick={() =&gt; setCount(0)}&gt;随机数&lt;/Button&gt;\n...\n        &lt;/div&gt;\n    );\n};\n\nexport default StateDemo;\n</code></pre>\n\n如果使用<code>useEffect</code>在点击按钮时,它会在渲染屏幕后异步调用,而<code>useLayoutEffect</code>则会把所有逻辑先计算完毕最后一次性渲染,所以它会阻塞渲染,所以除非必须要用,一般情况下基本用<code>useEffect</code>\n\n<h3><code>useContext</code></h3>\n\n用于向后代组件透传一个值,以创建一个语言选择器为例\n\n定义一个语言列表变量\n\n<pre><code class=\"language-typescript line-numbers\">const langs: LangType[] = [\n    { name: \'en\', label: \'english\' },\n    { name: \'zh-CN\', label: \'简体中文\' },\n];\n</code></pre>\n\n创建一个<code>context</code>\n\n<pre><code class=\"language-typescript line-numbers\">const localContext = createContext&lt;LangStateProps&gt;({\n    lang: langs[0],\n    setLang: (lang: LangType) =&gt; {},\n});\n</code></pre>\n\n创建<code>provider</code>包装器\n\n<pre><code class=\"language-tsx line-numbers\">const LocalProvider: FC&lt;LangStateProps&gt; = ({ lang, setLang, children }) =&gt; {\n    useEffect(() =&gt; {\n        setLang(lang);\n    }, [lang]);\n    return (\n        &lt;&gt;\n            &lt;localContext.Provider value={{ lang, setLang }}&gt;{children}&lt;/localContext.Provider&gt;\n        &lt;/&gt;\n    );\n};\n</code></pre>\n\n创建<code>Local</code>组件\n\n<pre><code class=\"language-tsx line-numbers\">const Local: FC = ({ children }) =&gt; {\n    const [lang, setLang] = useState(langs[0]);\n    return (\n        &lt;LocalProvider lang={lang} setLang={setLang}&gt;\n            {children}\n        &lt;/LocalProvider&gt;\n    );\n};\n</code></pre>\n\n把<code>App.tsx</code>中的所有节点包含于<code>Local</code>组件\n\n<pre><code class=\"language-tsx line-numbers\">const App: FC = () =&gt; {\n    return (\n        &lt;Local&gt;\n        ...\n        &lt;/Local&gt;\n    );\n};\nexport default App;\n</code></pre>\n\n语言选择组件\n\n<pre><code class=\"language-tsx line-numbers\">const Lang: FC = () =&gt; {\n    const { lang, setLang } = useContext(localContext);\n    const changeLang = (value: string) =&gt; {\n        const current = langs.find((item) =&gt; item.name === value);\n        current &amp;&amp; setLang(current);\n    };\n    return (\n        &lt;&gt;\n            &lt;Select defaultValue={lang.name} style={{ width: 120 }} onChange={changeLang}&gt;\n                {langs.map(({ name, label }) =&gt; (\n                    &lt;Option key={name} value={name}&gt;\n                        {label || name}\n                    &lt;/Option&gt;\n                ))}\n            &lt;/Select&gt;\n        &lt;/&gt;\n    );\n};\n</code></pre>\n\n显示当前语言\n\n<pre><code class=\"language-tsx line-numbers\">const CurrentLang: FC = () =&gt; {\n    const { lang } = useContext(localContext);\n    return &lt;div&gt;当前语言: {lang.label || lang.name}&lt;/div&gt;;\n};\n</code></pre>\n\n在<code>App.tsx</code>中使用以上两个组件\n\n<pre><code class=\"language-tsx line-numbers\">const App: FC = () =&gt; {\n    return (\n        &lt;Local&gt;\n                ...\n                &lt;LangSelector /&gt;\n                &lt;CurrentLang /&gt;\n        &lt;/Local&gt;\n    );\n};\nexport default App;\n</code></pre>\n\n<h3><code>useReducer</code></h3>\n\n使用<code>Context</code>+<code>useReducer</code>可以实现轻量级的全局状态管理\n\n以实现一个简单的应用配置功能为例(包含标题设置和暗黑模式切换)\n\n<h4>编写类型</h4>\n\n<pre><code class=\"language-typescript line-numbers\">// 可选择的主题模式\nexport type ThemeMode = \'light\' | \'dark\';\n// 初始化应用配置\nexport type ConfigType = {\n    title?: string;\n    theme?: ThemeMode;\n};\n// 合并默认配置后的最终应用配置状态\nexport type ConfigStateType = Required&lt;ConfigType&gt;;\n// 可用的reducer操作\nexport enum ConfigureActionType {\n    SET_TITLE = \'change_title\',\n    CHANGE_THEME = \'change_theme\',\n}\n// 传入给dispatch触发器的数据\nexport type ConfigureAction =\n    | { type: ConfigureActionType.SET_TITLE; value: string }\n    | { type: ConfigureActionType.CHANGE_THEME; value: ThemeMode };\n// 透传给子组件的context\nexport interface ConfigureContextType {\n    state: ConfigStateType;\n    dispatch: Dispatch&lt;ConfigureAction&gt;;\n}\n</code></pre>\n\n<h4>创建<code>Context</code></h4>\n\n<pre><code class=\"language-typescript line-numbers\">// 透传配置状态与dispatch\nexport const ConfigureContext = createContext&lt;ConfigureContextType | null&gt;(null);\n</code></pre>\n\n<h4>状态操作</h4>\n\n为了确保数据的唯一性不被污染,使用<a href=\"https://immerjs.github.io/immer/\" title=\"immer.js\">immer.js</a>操作数据\n\n<pre><code class=\"language-typescript line-numbers\">export const configReducer: Reducer&lt;ConfigStateType, ConfigureAction&gt; = produce((draft, action) =&gt; {\n    switch (action.type) {\n        // 设置标题\n        case ConfigureActionType.SET_TITLE:\n            draft.title = action.value;\n            break;\n        // 设置主题\n        case ConfigureActionType.CHANGE_THEME:\n            draft.theme = action.value;\n            break;\n        default:\n            break;\n    }\n});\n</code></pre>\n\n<h4>包装器组件</h4>\n\n<ul>\n<li>合并默认配置和初始化配置</li>\n<li>使用<code>useEffect</code>创建在标题或主题状态改变时引发的副作用钩子</li>\n<li>把配置状态和<code>dispatch</code>传给<code>ConfigureContext</code></li>\n</ul>\n\n<pre><code class=\"language-tsx line-numbers\">const Configure: FC&lt;{ config?: ConfigType }&gt; = ({ config = {}, children }) =&gt; {\n    const [state, dispatch] = useReducer(\n        configReducer,\n        config,\n        (c) =&gt;\n            ({\n                title: \'react app\',\n                theme: \'light\',\n                ...c,\n            } as ConfigStateType),\n    );\n    useEffect(() =&gt; {\n        const html = document.getElementsByTagName(\'html\')[0];\n        if (state.theme === \'dark\') {\n            html.classList.add(\'dark\');\n        } else {\n            html.classList.remove(\'dark\');\n        }\n    }, [state.theme]);\n    useEffect(() =&gt; {\n        document.title = state.title;\n    }, [state.title]);\n    return (\n        &lt;ConfigureContext.Provider value={{ state, dispatch }}&gt;\n            {children}\n        &lt;/ConfigureContext.Provider&gt;\n    );\n};\n</code></pre>\n\n<h4>主题选择组件</h4>\n\n<pre><code class=\"language-tsx line-numbers\">const Theme = () =&gt; {\n    const context = useContext(ConfigureContext);\n    if (!context) return null;\n    const { state, dispatch } = context;\n    const toggleTheme = () =&gt;\n        dispatch({\n            type: ConfigureActionType.CHANGE_THEME,\n            value: state.theme === \'light\' ? \'dark\' : \'light\',\n        });\n    return (\n        &lt;div&gt;\n            &lt;span&gt;切换主题&lt;/span&gt;\n            &lt;Switch\n                checkedChildren=\"🌛\"\n                unCheckedChildren=\"☀️\"\n                onChange={toggleTheme}\n                checked={state.theme === \'dark\'}\n                defaultChecked={state.theme === \'dark\'}\n            /&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre>\n\n<h4>标题设置组件</h4>\n\n<pre><code class=\"language-tsx line-numbers\">const Title: FC = () =&gt; {\n    const context = useContext(ConfigureContext);\n    if (!context) return null;\n    const { state, dispatch } = context;\n    const changeTitle = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt;\n        dispatch({\n            type: ConfigureActionType.SET_TITLE,\n            value: e.target.value,\n        });\n    return (\n        &lt;div&gt;\n            &lt;span&gt;设置标题&lt;/span&gt;\n            &lt;Input placeholder=\"标题\" value={state.title} onChange={changeTitle} /&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre>\n\n<h4>在<code>App.tsx</code>中使用</h4>\n\n<pre><code class=\"language-tsx line-numbers\">&lt;Configure&gt;\n  ...\n  &lt;Theme /&gt;\n  &lt;Title /&gt;\n&lt;/Configure&gt;\n</code></pre>\n\n<h2>自定义Hooks</h2>\n\n为了更加便捷的使用<code>dispatch</code>,可以通过自定义一个hooks的方式来封装一些方法\n\n<pre><code class=\"language-typescript line-numbers\">const useConfig = () =&gt; {\n    const context = useContext(ConfigureContext);\n    const { state = defaultConfig, dispatch } = context ?? {};\n    const toggleTheme = () =&gt;\n        dispatch &amp;&amp;\n        dispatch({\n            type: ConfigureActionType.CHANGE_THEME,\n            value: state.theme === \'light\' ? \'dark\' : \'light\',\n        });\n    const changeTitle = (value: string) =&gt;\n        dispatch &amp;&amp;\n        dispatch({\n            type: ConfigureActionType.SET_TITLE,\n            value,\n        });\n    return { config: state, toggleTheme, changeTitle };\n};\n</code></pre>\n\n有了自定的hooks之后就可以直接在组件中使用了\n\n<pre><code class=\"language-tsx line-numbers\">const Theme: FC = () =&gt; {\n    const {\n        config: { theme },\n        toggleTheme,\n    } = useConfig();\n    return (\n        &lt;div&gt;\n            &lt;span&gt;切换主题&lt;/span&gt;\n            &lt;Switch\n                checkedChildren=\"🌛\"\n                unCheckedChildren=\"☀️\"\n                onChange={toggleTheme}\n                checked={theme === \'dark\'}\n                defaultChecked={theme === \'dark\'}\n            /&gt;\n        &lt;/div&gt;\n    );\n};\nconst Title: FC = () =&gt; {\n    const {\n        config: { title },\n        changeTitle,\n    } = useConfig();\n    return (\n        &lt;div&gt;\n            &lt;span&gt;设置标题&lt;/span&gt;\n            &lt;Input placeholder=\"标题\" value={title} onChange={(e) =&gt; changeTitle(e.target.value)} /&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre>\n\n<h2>性能优化</h2>\n\n<h3><code>useMemo</code></h3>\n\n<code>useMemo</code>拥有个两个参数,一个回调函数和一个依赖项数组,回调函数必须返回一个值,只有在依赖项发生改变的时候,才会重新调用此函数,返回一个新的值.\n\n回调函数的返回值可以是一个<code>普通类型的值</code>(例如<code>字符串</code>,<code>布尔值</code>,<code>数组</code>,<code>对象</code>等)也可以是一个<code>函数</code>,甚至是一个<code>react组件</code>,如果返回值是一个函数,则其作用就与<code>useCallback</code>一样\n\n以下代码在每次<code>config</code>发生改变时,另一个组件的<code>console.log</code>也会调用\n\n<pre><code class=\"language-tsx line-numbers\">const Theme: FC = () =&gt; {\n    const {\n        config: { theme },\n        toggleTheme,\n    } = useConfig();\n    console.log(\'render theme component\');\n    return (...组件代码);\n};\nconst Title: FC = () =&gt; {\n    const {\n        config: { title },\n        changeTitle,\n    } = useConfig();\n    console.log(\'render title component\');\n   return (...组件代码);\n};\n</code></pre>\n\n这样会在每次的<code>input</code>敲入一个字符时就会导致<code>Theme</code>组件重新渲染,极大的浪费了性能,可以通过<code>useMemo</code>做一下优化\n\n<pre><code class=\"language-tsx line-numbers\">const Theme: FC = () =&gt; {\n    const {\n        config: { theme },\n        toggleTheme,\n    } = useConfig();\n    return useMemo(() =&gt; {\n        console.log(\'render theme component\');\n        return (...组件代码);\n    }, [theme]);\n};\nconst Title: FC = () =&gt; {\n    const {\n        config: { title },\n        changeTitle,\n    } = useConfig();\n    return useMemo(() =&gt; {\n        console.log(\'render title component\');\n        return (...组件代码);\n    }, [title]);\n};\n</code></pre>\n\n现在更改其中一个组件只会执行自己组件里的<code>console.log</code>了\n\n<h3><code>useCallback</code></h3>\n\n现在把<code>Theme</code>和<code>Title</code>两个组件放在一起作为<code>ConfigPanel</code>的子组件,并取消原来的<code>useMemo</code>包装,而改用<code>memo</code>包装\n\n<blockquote>\n  <code>React.memo</code>包装的组件,只有当<code>props</code>改变之后才会重新渲染,<code>memo</code>是浅对比\n</blockquote>\n\n<pre><code class=\"language-tsx line-numbers\">const Theme: FC&lt;{ theme: ThemeMode; toggleTheme: () =&gt; void }&gt; = memo(({ theme, toggleTheme }) =&gt; {\n    console.log(\'render theme component\');\n    return (...组件代码);\n});\nconst Title: FC&lt;{ title: string; changeTitle: (value: string) =&gt; void }&gt; = memo(\n    ({ title, changeTitle }) =&gt; {\n        console.log(\'render title component\');\n        return (...组件代码);\n    },\n);\nconst ConfigPanel: FC = () =&gt; {\n    const { config, toggleTheme, changeTitle } = useConfig();\n    return (\n        &lt;&gt;\n            &lt;Theme theme={config.theme} toggleTheme={toggleTheme} /&gt;\n            &lt;Title title={config.title} changeTitle={changeTitle} /&gt;\n        &lt;/&gt;\n    );\n};\n</code></pre>\n\n这时会发现<code>Theme</code>子组件中执行<code>toggleTheme</code>也会导致<code>Title</code>组件重新渲染,原因是<code>changeTitle</code>函数不是固定的,父组件重选渲染后会导致产生新的<code>changeTitle</code>变量,现在尝试使用<code>useCallback</code>包装,是其只在<code>title</code>改变时才产生新值,<code>toggleTheme</code>也一样\n\n<pre><code class=\"language-typescript line-numbers\">const useConfig = () =&gt; {\n    const context = useContext(ConfigureContext);\n    const { state = defaultConfig, dispatch } = context ?? {};\n    const toggleTheme = useCallback(\n        () =&gt;\n            dispatch &amp;&amp;\n            dispatch({\n                type: ConfigureActionType.CHANGE_THEME,\n                value: state.theme === \'light\' ? \'dark\' : \'light\',\n            }),\n        [state.theme],\n    );\n\n    const changeTitle = useCallback(\n        (value: string) =&gt;\n            dispatch &amp;&amp;\n            dispatch({\n                type: ConfigureActionType.SET_TITLE,\n                value,\n            }),\n        [state.title],\n    );\n    return { config: state, toggleTheme, changeTitle };\n};\n</code></pre>\n\n现在执行<code>toggleTheme</code>并不会导致<code>Title</code>组件重新渲染了,反之亦然\n\n<h2>组件引用</h2>\n\n<h3><code>useRef</code></h3>\n\n创建<code>ref</code>对象,其<code>.current</code>属性被初始化为传入的参数,其<code>current</code>属性是可以通过赋值主动改变,而 <code>ref</code> 对象本身在组件的整个生命周期内保持不变\n\n<h4>生命周期不变对象</h4>\n\n以下代码通过使用<code>useRef</code>保存上一次的变量,无论<code>count</code>如何改变都不会执行<code>console.log</code>,因为<code>ref</code>对象本身是不变的.而由于<code>useEffect</code>和<code>useLayoutEffect</code>都是生命周期钩子,与外部是异步的,所以<code>ref.current</code>虽然会在钩子中被赋值为最新值,而其外部则保持上一次的值.\n\n<pre><code class=\"language-tsx line-numbers\">const StateDemo: FC = () =&gt; {\n    ...\n    const ref = useRef(count);\n    useLayoutEffect(() =&gt; {\n        ref.current = count;\n        if (count === 0) setCount(Math.floor(Math.random() * 100));\n    }, [count]);\n    useEffect(() =&gt; {\n        console.log(\'ref has changed\');\n    }, [ref]);\n    return (\n        &lt;div&gt;\n            &lt;p&gt;{count}&lt;/p&gt;\n            &lt;p&gt;{ref.current}&lt;/p&gt;\n            &lt;Button onClick={() =&gt; setCount(count + 1)}&gt;增加&lt;/Button&gt;\n            ...\n        &lt;/div&gt;\n    );\n};\n\n</code></pre>\n\n<h4>与<code>forwardRef</code>结合</h4>\n\n通过<code>forwardRef</code>可以把<code>useRef</code>的值与<code>dom</code>节点绑定,从而可以操控原生的<code>dom</code>节点\n\n<pre><code class=\"language-tsx line-numbers\">const CustomInput = forwardRef((props = {}, ref: Ref&lt;any&gt;) =&gt; (\n    &lt;input ref={ref} type=\"text\" {...props} /&gt;\n));\nconst RefDemo: FC = () =&gt; {\n    const inputRef = useRef&lt;HTMLInputElement | null&gt;(null);\n\n    useEffect(() =&gt; {\n        if (inputRef.current) {\n            inputRef.current.focus();\n            inputRef.current.value = \'useRef\';\n        }\n    });\n    return (\n        &lt;&gt;\n            &lt;CustomInput ref={inputRef} /&gt;\n        &lt;/&gt;\n    );\n};\nexport default RefDemo;\n</code></pre>\n\n<h3><code>useImperativeHandle</code></h3>', 'Hooks使用详解', '', 'publish', 'open', 'closed', '', 'hooks', '', '', '2021-11-11 01:11:04', '2021-11-10 17:11:04', '[immer.js]: https://immerjs.github.io/immer/	\"immer.js\"\r\n\r\n[scode type=\"yellow\"]注意: 本教程在MacOS下讲解,Linux用户根据各自的发行版安装软件,windows用户请自行安装wsl2作为替代 [/scode][]\r\n\r\n## 状态与副作用\r\n\r\n### `useState`\r\n\r\n用于改变组件内的状态,例\r\n\r\n```tsx\r\nconst StateDemo: FC = () =&gt; {\r\n    const [count, setCount] = useState(1);\r\n    const [isShow, toggleShow] = useState(true);\r\n\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;p&gt;{count}&lt;/p&gt;\r\n            &lt;Button onClick={() =&gt; setCount(count + 1)}&gt;增加&lt;/Button&gt;\r\n            &lt;p className=&quot;pt-5&quot;&gt;{isShow ? &lt;span&gt; I&#039;m show now &lt;/span&gt; : null}&lt;/p&gt;\r\n            &lt;Button onClick={() =&gt; toggleShow(!isShow)}&gt;{isShow ? &#039;显示&#039; : &#039;隐藏&#039;}&lt;/Button&gt;\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n\r\nexport default StateDemo;\r\n```\r\n\r\n### `useEffect`\r\n\r\n在状态不同的生命周期执行副作用\r\n\r\n#### 简单用法\r\n\r\n每次状态更新都执行所有没有依赖的`useEffect`,以下代码\'toggle ghost\'这一条在`resize`浏览器时也会触发\r\n\r\n```tsx\r\nconst EffectDemo: FC = () =&gt; {\r\n    const [ghost, setGhost] = useState&lt;boolean&gt;(false);\r\n    const [width, setWidth] = useState(window.innerWidth);\r\n    const toggleGhostBtn = () =&gt; setGhost(!ghost);\r\n    const resizeHandle = () =&gt; setWidth(window.innerWidth);\r\n    useEffect(() =&gt; {\r\n        window.addEventListener(&#039;resize&#039;, resizeHandle);\r\n    });\r\n    useEffect(() =&gt; {\r\n        console.log(&#039;toggle ghost&#039;);\r\n    });\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;p&gt;{ghost ? &#039;ghost&#039; : &#039;普通&#039;}按钮&lt;/p&gt;\r\n            &lt;Button type=&quot;primary&quot; onClick={toggleGhostBtn} ghost={ghost}&gt;\r\n                切换按钮样式\r\n            &lt;/Button&gt;\r\n            &lt;p className=&quot;pt-5&quot;&gt;宽度为: {width}&lt;/p&gt;\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n```\r\n\r\n#### 依赖更新\r\n\r\n通过`useEffect`的第二个参数,可以指定其依赖的变量,只有此变量的状态更改时才会执行副作用函数,如果第二个参数为空,则只在第一次渲染和重新渲染时触发\r\n\r\n```tsx\r\nconst EffectDemo: FC = () =&gt; {\r\n    ...\r\n    useEffect(() =&gt; {\r\n        // changeWidth\r\n    }, [width]);\r\n    useEffect(() =&gt; {\r\n        console.log(&#039;toggle ghost&#039;);\r\n    }, [ghost]);\r\n   useEffect(() =&gt; {\r\n        console.log(&#039;只在第一次或重新渲染组件时触发&#039;);\r\n    }, []);\r\n};\r\n```\r\n\r\n#### 清理监听\r\n\r\n在监听`width`的`useEffect`中,每次改变`width`的状态,都会添加一个`resize`事件,这会极大的耗费浏览器占用的内存,通过一个返回值的方式,即可在下一次`width`状态改变后与添加新的`resize`监听前,取消上次添加的`resize`监听事件\r\n\r\n````tsx\r\nconst EffectDemo: FC = () => {\r\n    ...\r\n    useEffect(() => {\r\n        window.addEventListener(\'resize\', resizeHandle);\r\n        return () => {\r\n            window.removeEventListener(\'resize\', resizeHandle);\r\n        };\r\n    }, [width]);\r\n};\r\n````\r\n\r\n#### 异步执行\r\n\r\n在`useEffect`中执行异步函数的语法如下,其实就是在原函数里调用一个`async`打头的立即函数\r\n\r\n```typescript\r\nuseEffect(() =&gt; {\r\n    (async () =&gt; {})();\r\n});\r\n```\r\n\r\n以下示例代码让按钮在变成`ghost`之后1s再变红色\r\n\r\n```tsx\r\n\r\nconst EffectDemo: FC = () =&gt; {\r\n    const [red, setRed] = useState&lt;boolean&gt;(false);\r\n    useEffect(() =&gt; {\r\n        (async () =&gt; {\r\n            await new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(true), 1000));\r\n            setRed(ghost);\r\n        })();\r\n    }, [ghost]);\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;Button type=&quot;primary&quot; onClick={toggleGhostBtn} ghost={ghost} danger={red}&gt;\r\n                切换按钮样式\r\n            &lt;/Button&gt;\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n```\r\n\r\n### `useLayoutEffect`\r\n\r\n与`useEffect`几乎一样,但是具有**防闪烁**作用,比如下面的代码\r\n\r\n```typescript\r\nconst StateDemo: FC = () =&gt; {\r\n    const [count, setCount] = useState(1);\r\n    const [isShow, toggleShow] = useState(true);\r\n    useLayoutEffect(() =&gt; {\r\n        if (count === 0) setCount(Math.floor(Math.random() * 100));\r\n    }, [count]);\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;p&gt;{count}&lt;/p&gt;\r\n            &lt;Button onClick={() =&gt; setCount(0)}&gt;随机数&lt;/Button&gt;\r\n...\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n\r\nexport default StateDemo;\r\n```\r\n\r\n如果使用`useEffect`在点击按钮时,它会在渲染屏幕后异步调用,而`useLayoutEffect`则会把所有逻辑先计算完毕最后一次性渲染,所以它会阻塞渲染,所以除非必须要用,一般情况下基本用`useEffect`\r\n\r\n### `useContext`\r\n\r\n用于向后代组件透传一个值,以创建一个语言选择器为例\r\n\r\n定义一个语言列表变量\r\n\r\n```typescript\r\nconst langs: LangType[] = [\r\n    { name: &#039;en&#039;, label: &#039;english&#039; },\r\n    { name: &#039;zh-CN&#039;, label: &#039;简体中文&#039; },\r\n];\r\n```\r\n\r\n创建一个`context`\r\n\r\n```typescript\r\nconst localContext = createContext&lt;LangStateProps&gt;({\r\n    lang: langs[0],\r\n    setLang: (lang: LangType) =&gt; {},\r\n});\r\n```\r\n\r\n创建`provider`包装器\r\n\r\n```tsx\r\nconst LocalProvider: FC&lt;LangStateProps&gt; = ({ lang, setLang, children }) =&gt; {\r\n    useEffect(() =&gt; {\r\n        setLang(lang);\r\n    }, [lang]);\r\n    return (\r\n        &lt;&gt;\r\n            &lt;localContext.Provider value={{ lang, setLang }}&gt;{children}&lt;/localContext.Provider&gt;\r\n        &lt;/&gt;\r\n    );\r\n};\r\n```\r\n\r\n创建`Local`组件\r\n\r\n```tsx\r\nconst Local: FC = ({ children }) =&gt; {\r\n    const [lang, setLang] = useState(langs[0]);\r\n    return (\r\n        &lt;LocalProvider lang={lang} setLang={setLang}&gt;\r\n            {children}\r\n        &lt;/LocalProvider&gt;\r\n    );\r\n};\r\n```\r\n\r\n把`App.tsx`中的所有节点包含于`Local`组件\r\n\r\n```tsx\r\nconst App: FC = () =&gt; {\r\n    return (\r\n        &lt;Local&gt;\r\n        ...\r\n        &lt;/Local&gt;\r\n    );\r\n};\r\nexport default App;\r\n```\r\n\r\n语言选择组件\r\n\r\n```tsx\r\nconst Lang: FC = () =&gt; {\r\n    const { lang, setLang } = useContext(localContext);\r\n    const changeLang = (value: string) =&gt; {\r\n        const current = langs.find((item) =&gt; item.name === value);\r\n        current &amp;&amp; setLang(current);\r\n    };\r\n    return (\r\n        &lt;&gt;\r\n            &lt;Select defaultValue={lang.name} style={{ width: 120 }} onChange={changeLang}&gt;\r\n                {langs.map(({ name, label }) =&gt; (\r\n                    &lt;Option key={name} value={name}&gt;\r\n                        {label || name}\r\n                    &lt;/Option&gt;\r\n                ))}\r\n            &lt;/Select&gt;\r\n        &lt;/&gt;\r\n    );\r\n};\r\n```\r\n\r\n显示当前语言\r\n\r\n```tsx\r\nconst CurrentLang: FC = () =&gt; {\r\n    const { lang } = useContext(localContext);\r\n    return &lt;div&gt;当前语言: {lang.label || lang.name}&lt;/div&gt;;\r\n};\r\n```\r\n\r\n在`App.tsx`中使用以上两个组件\r\n\r\n```tsx\r\nconst App: FC = () =&gt; {\r\n    return (\r\n        &lt;Local&gt;\r\n                ...\r\n                &lt;LangSelector /&gt;\r\n                &lt;CurrentLang /&gt;\r\n        &lt;/Local&gt;\r\n    );\r\n};\r\nexport default App;\r\n```\r\n\r\n### `useReducer`\r\n\r\n使用`Context`+`useReducer`可以实现轻量级的全局状态管理\r\n\r\n以实现一个简单的应用配置功能为例(包含标题设置和暗黑模式切换)\r\n\r\n#### 编写类型\r\n\r\n```typescript\r\n// 可选择的主题模式\r\nexport type ThemeMode = &#039;light&#039; | &#039;dark&#039;;\r\n// 初始化应用配置\r\nexport type ConfigType = {\r\n    title?: string;\r\n    theme?: ThemeMode;\r\n};\r\n// 合并默认配置后的最终应用配置状态\r\nexport type ConfigStateType = Required&lt;ConfigType&gt;;\r\n// 可用的reducer操作\r\nexport enum ConfigureActionType {\r\n    SET_TITLE = &#039;change_title&#039;,\r\n    CHANGE_THEME = &#039;change_theme&#039;,\r\n}\r\n// 传入给dispatch触发器的数据\r\nexport type ConfigureAction =\r\n    | { type: ConfigureActionType.SET_TITLE; value: string }\r\n    | { type: ConfigureActionType.CHANGE_THEME; value: ThemeMode };\r\n// 透传给子组件的context\r\nexport interface ConfigureContextType {\r\n    state: ConfigStateType;\r\n    dispatch: Dispatch&lt;ConfigureAction&gt;;\r\n}\r\n```\r\n\r\n#### 创建`Context`\r\n\r\n```typescript\r\n// 透传配置状态与dispatch\r\nexport const ConfigureContext = createContext&lt;ConfigureContextType | null&gt;(null);\r\n```\r\n\r\n#### 状态操作\r\n\r\n为了确保数据的唯一性不被污染,使用[immer.js][]操作数据\r\n\r\n```typescript\r\nexport const configReducer: Reducer&lt;ConfigStateType, ConfigureAction&gt; = produce((draft, action) =&gt; {\r\n    switch (action.type) {\r\n        // 设置标题\r\n        case ConfigureActionType.SET_TITLE:\r\n            draft.title = action.value;\r\n            break;\r\n        // 设置主题\r\n        case ConfigureActionType.CHANGE_THEME:\r\n            draft.theme = action.value;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n});\r\n```\r\n\r\n#### 包装器组件\r\n\r\n- 合并默认配置和初始化配置\r\n- 使用`useEffect`创建在标题或主题状态改变时引发的副作用钩子\r\n- 把配置状态和`dispatch`传给`ConfigureContext`\r\n\r\n```tsx\r\nconst Configure: FC&lt;{ config?: ConfigType }&gt; = ({ config = {}, children }) =&gt; {\r\n    const [state, dispatch] = useReducer(\r\n        configReducer,\r\n        config,\r\n        (c) =&gt;\r\n            ({\r\n                title: &#039;react app&#039;,\r\n                theme: &#039;light&#039;,\r\n                ...c,\r\n            } as ConfigStateType),\r\n    );\r\n    useEffect(() =&gt; {\r\n        const html = document.getElementsByTagName(&#039;html&#039;)[0];\r\n        if (state.theme === &#039;dark&#039;) {\r\n            html.classList.add(&#039;dark&#039;);\r\n        } else {\r\n            html.classList.remove(&#039;dark&#039;);\r\n        }\r\n    }, [state.theme]);\r\n    useEffect(() =&gt; {\r\n        document.title = state.title;\r\n    }, [state.title]);\r\n    return (\r\n        &lt;ConfigureContext.Provider value={{ state, dispatch }}&gt;\r\n            {children}\r\n        &lt;/ConfigureContext.Provider&gt;\r\n    );\r\n};\r\n```\r\n\r\n#### 主题选择组件\r\n\r\n```tsx\r\nconst Theme = () =&gt; {\r\n    const context = useContext(ConfigureContext);\r\n    if (!context) return null;\r\n    const { state, dispatch } = context;\r\n    const toggleTheme = () =&gt;\r\n        dispatch({\r\n            type: ConfigureActionType.CHANGE_THEME,\r\n            value: state.theme === &#039;light&#039; ? &#039;dark&#039; : &#039;light&#039;,\r\n        });\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;span&gt;切换主题&lt;/span&gt;\r\n            &lt;Switch\r\n                checkedChildren=&quot;🌛&quot;\r\n                unCheckedChildren=&quot;☀️&quot;\r\n                onChange={toggleTheme}\r\n                checked={state.theme === &#039;dark&#039;}\r\n                defaultChecked={state.theme === &#039;dark&#039;}\r\n            /&gt;\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n```\r\n\r\n#### 标题设置组件\r\n\r\n```tsx\r\nconst Title: FC = () =&gt; {\r\n    const context = useContext(ConfigureContext);\r\n    if (!context) return null;\r\n    const { state, dispatch } = context;\r\n    const changeTitle = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt;\r\n        dispatch({\r\n            type: ConfigureActionType.SET_TITLE,\r\n            value: e.target.value,\r\n        });\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;span&gt;设置标题&lt;/span&gt;\r\n            &lt;Input placeholder=&quot;标题&quot; value={state.title} onChange={changeTitle} /&gt;\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n```\r\n\r\n#### 在`App.tsx`中使用\r\n\r\n```tsx\r\n&lt;Configure&gt;\r\n  ...\r\n  &lt;Theme /&gt;\r\n  &lt;Title /&gt;\r\n&lt;/Configure&gt;\r\n```\r\n\r\n## 自定义Hooks\r\n\r\n为了更加便捷的使用`dispatch`,可以通过自定义一个hooks的方式来封装一些方法\r\n\r\n```typescript\r\nconst useConfig = () =&gt; {\r\n    const context = useContext(ConfigureContext);\r\n    const { state = defaultConfig, dispatch } = context ?? {};\r\n    const toggleTheme = () =&gt;\r\n        dispatch &amp;&amp;\r\n        dispatch({\r\n            type: ConfigureActionType.CHANGE_THEME,\r\n            value: state.theme === &#039;light&#039; ? &#039;dark&#039; : &#039;light&#039;,\r\n        });\r\n    const changeTitle = (value: string) =&gt;\r\n        dispatch &amp;&amp;\r\n        dispatch({\r\n            type: ConfigureActionType.SET_TITLE,\r\n            value,\r\n        });\r\n    return { config: state, toggleTheme, changeTitle };\r\n};\r\n```\r\n\r\n有了自定的hooks之后就可以直接在组件中使用了\r\n\r\n```tsx\r\nconst Theme: FC = () =&gt; {\r\n    const {\r\n        config: { theme },\r\n        toggleTheme,\r\n    } = useConfig();\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;span&gt;切换主题&lt;/span&gt;\r\n            &lt;Switch\r\n                checkedChildren=&quot;🌛&quot;\r\n                unCheckedChildren=&quot;☀️&quot;\r\n                onChange={toggleTheme}\r\n                checked={theme === &#039;dark&#039;}\r\n                defaultChecked={theme === &#039;dark&#039;}\r\n            /&gt;\r\n        &lt;/div&gt;\r\n    );\r\n};\r\nconst Title: FC = () =&gt; {\r\n    const {\r\n        config: { title },\r\n        changeTitle,\r\n    } = useConfig();\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;span&gt;设置标题&lt;/span&gt;\r\n            &lt;Input placeholder=&quot;标题&quot; value={title} onChange={(e) =&gt; changeTitle(e.target.value)} /&gt;\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n```\r\n\r\n## 性能优化\r\n\r\n### `useMemo`\r\n\r\n`useMemo`拥有个两个参数,一个回调函数和一个依赖项数组,回调函数必须返回一个值,只有在依赖项发生改变的时候,才会重新调用此函数,返回一个新的值.\r\n\r\n回调函数的返回值可以是一个`普通类型的值`(例如`字符串`,`布尔值`,`数组`,`对象`等)也可以是一个`函数`,甚至是一个`react组件`,如果返回值是一个函数,则其作用就与`useCallback`一样\r\n\r\n以下代码在每次`config`发生改变时,另一个组件的`console.log`也会调用\r\n\r\n```tsx\r\nconst Theme: FC = () =&gt; {\r\n    const {\r\n        config: { theme },\r\n        toggleTheme,\r\n    } = useConfig();\r\n    console.log(&#039;render theme component&#039;);\r\n    return (...组件代码);\r\n};\r\nconst Title: FC = () =&gt; {\r\n    const {\r\n        config: { title },\r\n        changeTitle,\r\n    } = useConfig();\r\n    console.log(&#039;render title component&#039;);\r\n   return (...组件代码);\r\n};\r\n```\r\n\r\n这样会在每次的`input`敲入一个字符时就会导致`Theme`组件重新渲染,极大的浪费了性能,可以通过`useMemo`做一下优化\r\n\r\n```tsx\r\nconst Theme: FC = () =&gt; {\r\n    const {\r\n        config: { theme },\r\n        toggleTheme,\r\n    } = useConfig();\r\n    return useMemo(() =&gt; {\r\n        console.log(&#039;render theme component&#039;);\r\n        return (...组件代码);\r\n    }, [theme]);\r\n};\r\nconst Title: FC = () =&gt; {\r\n    const {\r\n        config: { title },\r\n        changeTitle,\r\n    } = useConfig();\r\n    return useMemo(() =&gt; {\r\n        console.log(&#039;render title component&#039;);\r\n        return (...组件代码);\r\n    }, [title]);\r\n};\r\n```\r\n\r\n现在更改其中一个组件只会执行自己组件里的`console.log`了\r\n\r\n### `useCallback`\r\n\r\n现在把`Theme`和`Title`两个组件放在一起作为`ConfigPanel`的子组件,并取消原来的`useMemo`包装,而改用`memo`包装\r\n\r\n> `React.memo`包装的组件,只有当`props`改变之后才会重新渲染,`memo`是浅对比\r\n\r\n```tsx\r\nconst Theme: FC&lt;{ theme: ThemeMode; toggleTheme: () =&gt; void }&gt; = memo(({ theme, toggleTheme }) =&gt; {\r\n    console.log(&#039;render theme component&#039;);\r\n    return (...组件代码);\r\n});\r\nconst Title: FC&lt;{ title: string; changeTitle: (value: string) =&gt; void }&gt; = memo(\r\n    ({ title, changeTitle }) =&gt; {\r\n        console.log(&#039;render title component&#039;);\r\n        return (...组件代码);\r\n    },\r\n);\r\nconst ConfigPanel: FC = () =&gt; {\r\n    const { config, toggleTheme, changeTitle } = useConfig();\r\n    return (\r\n        &lt;&gt;\r\n            &lt;Theme theme={config.theme} toggleTheme={toggleTheme} /&gt;\r\n            &lt;Title title={config.title} changeTitle={changeTitle} /&gt;\r\n        &lt;/&gt;\r\n    );\r\n};\r\n```\r\n\r\n这时会发现`Theme`子组件中执行`toggleTheme`也会导致`Title`组件重新渲染,原因是`changeTitle`函数不是固定的,父组件重选渲染后会导致产生新的`changeTitle`变量,现在尝试使用`useCallback`包装,是其只在`title`改变时才产生新值,`toggleTheme`也一样\r\n\r\n```typescript\r\nconst useConfig = () =&gt; {\r\n    const context = useContext(ConfigureContext);\r\n    const { state = defaultConfig, dispatch } = context ?? {};\r\n    const toggleTheme = useCallback(\r\n        () =&gt;\r\n            dispatch &amp;&amp;\r\n            dispatch({\r\n                type: ConfigureActionType.CHANGE_THEME,\r\n                value: state.theme === &#039;light&#039; ? &#039;dark&#039; : &#039;light&#039;,\r\n            }),\r\n        [state.theme],\r\n    );\r\n\r\n    const changeTitle = useCallback(\r\n        (value: string) =&gt;\r\n            dispatch &amp;&amp;\r\n            dispatch({\r\n                type: ConfigureActionType.SET_TITLE,\r\n                value,\r\n            }),\r\n        [state.title],\r\n    );\r\n    return { config: state, toggleTheme, changeTitle };\r\n};\r\n```\r\n\r\n现在执行`toggleTheme`并不会导致`Title`组件重新渲染了,反之亦然\r\n\r\n## 组件引用\r\n\r\n### `useRef`\r\n\r\n创建`ref`对象,其`.current`属性被初始化为传入的参数,其`current`属性是可以通过赋值主动改变,而 `ref` 对象本身在组件的整个生命周期内保持不变\r\n\r\n#### 生命周期不变对象\r\n\r\n以下代码通过使用`useRef`保存上一次的变量,无论`count`如何改变都不会执行`console.log`,因为`ref`对象本身是不变的.而由于`useEffect`和`useLayoutEffect`都是生命周期钩子,与外部是异步的,所以`ref.current`虽然会在钩子中被赋值为最新值,而其外部则保持上一次的值.\r\n\r\n```tsx\r\nconst StateDemo: FC = () =&gt; {\r\n    ...\r\n    const ref = useRef(count);\r\n    useLayoutEffect(() =&gt; {\r\n        ref.current = count;\r\n        if (count === 0) setCount(Math.floor(Math.random() * 100));\r\n    }, [count]);\r\n    useEffect(() =&gt; {\r\n        console.log(&#039;ref has changed&#039;);\r\n    }, [ref]);\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;p&gt;{count}&lt;/p&gt;\r\n            &lt;p&gt;{ref.current}&lt;/p&gt;\r\n            &lt;Button onClick={() =&gt; setCount(count + 1)}&gt;增加&lt;/Button&gt;\r\n            ...\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n\r\n```\r\n\r\n#### 与`forwardRef`结合\r\n\r\n通过`forwardRef`可以把`useRef`的值与`dom`节点绑定,从而可以操控原生的`dom`节点\r\n\r\n```tsx\r\nconst CustomInput = forwardRef((props = {}, ref: Ref&lt;any&gt;) =&gt; (\r\n    &lt;input ref={ref} type=&quot;text&quot; {...props} /&gt;\r\n));\r\nconst RefDemo: FC = () =&gt; {\r\n    const inputRef = useRef&lt;HTMLInputElement | null&gt;(null);\r\n\r\n    useEffect(() =&gt; {\r\n        if (inputRef.current) {\r\n            inputRef.current.focus();\r\n            inputRef.current.value = &#039;useRef&#039;;\r\n        }\r\n    });\r\n    return (\r\n        &lt;&gt;\r\n            &lt;CustomInput ref={inputRef} /&gt;\r\n        &lt;/&gt;\r\n    );\r\n};\r\nexport default RefDemo;\r\n```\r\n\r\n### `useImperativeHandle`\r\n\r\n\r\n', 48, 'https://jikexingkong.com/docs/react/hooks%e4%bd%bf%e7%94%a8%e8%af%a6%e8%a7%a3/', 2, 'docs', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(62, 1, '2021-10-29 14:29:03', '2021-10-29 06:29:03', '[scode type=\"yellow\"]注意: 本教程在MacOS下讲解,Linux用户根据各自的发行版安装软件,windows用户请自行安装wsl2作为替代 [/scode][]\n\n<h2>基本使用</h2>\n\n安装<a href=\"https://reactrouter.com/\" title=\"react-router\">react-router</a>\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm add react-router-dom\n~ pnpm add @types/react-router-dom -D\n</code></pre>\n\n路由页面\n\n<pre><code class=\"language-tsx line-numbers\">// src/pages/Home.tsx\nconst Home: FC = () =&gt; &lt;div&gt;Home Page&lt;/div&gt;;\nexport default Home;\n// src/pages/About.tsx\nconst About: FC = () =&gt; &lt;div&gt;About Page&lt;/div&gt;;\nexport default About;\n</code></pre>\n\n嵌套路由\n\n<pre><code class=\"language-tsx line-numbers\">// src/pages/User.tsx\ntype UserParams = { username: string };\nconst User: FC = () =&gt; {\n    const { username } = useParams&lt;UserParams&gt;();\n    return &lt;div&gt;current user is {username}&lt;/div&gt;;\n};\n\nconst UsersIndex: FC = () =&gt; {\n    const match = useRouteMatch();\n    return (\n        &lt;div&gt;\n            &lt;ul&gt;\n                &lt;li&gt;\n                    &lt;Link to={`${match.url}`}&gt;User List&lt;/Link&gt;\n                &lt;/li&gt;\n                &lt;li&gt;\n                    &lt;Link to={`${match.url}/pincman`}&gt;Pincman&lt;/Link&gt;\n                &lt;/li&gt;\n            &lt;/ul&gt;\n            &lt;Switch&gt;\n                &lt;Route path={`${match.path}/:username`}&gt;\n                    &lt;User /&gt;\n                &lt;/Route&gt;\n                &lt;Route path={match.path}&gt;\n                    &lt;h3&gt;Please select a user.&lt;/h3&gt;\n                &lt;/Route&gt;\n            &lt;/Switch&gt;\n        &lt;/div&gt;\n    );\n};\nexport default UsersIndex;\n</code></pre>\n\n链接菜单\n\n<pre><code class=\"language-tsx line-numbers\">// src/components/Menu.tsx\nconst Menu: FC = () =&gt; (\n    &lt;div&gt;\n        &lt;ul&gt;\n            &lt;li&gt;\n                &lt;Link to=\"/\"&gt;Home&lt;/Link&gt;\n            &lt;/li&gt;\n            &lt;li&gt;\n                &lt;Link to=\"/about\"&gt;About&lt;/Link&gt;\n            &lt;/li&gt;\n            &lt;li&gt;\n                &lt;Link to=\"/users\"&gt;Users&lt;/Link&gt;\n            &lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n);\nexport default Menu;\n</code></pre>\n\n构建路由\n\n<pre><code class=\"language-tsx line-numbers\">// src/App.tsx\n...\nimport { BrowserRouter as Router, Route, Switch } from \'react-router-dom\';\nconst App: FC = () =&gt; {\n    return (\n        &lt;Router&gt;\n            &lt;div className=\"app flex items-center bg-white dark:bg-gray-800 flex-col place-content-between dark:text-white\"&gt;\n                &lt;Menu /&gt;\n                &lt;div className=\"flex justify-center\"&gt;\n                    &lt;Switch&gt;\n                        &lt;Route path=\"/about\"&gt;\n                            &lt;About /&gt;\n                        &lt;/Route&gt;\n                        &lt;Route path=\"/users\"&gt;\n                            &lt;UsersIndex /&gt;\n                        &lt;/Route&gt;\n                        &lt;Route path=\"/\"&gt;\n                            &lt;Home /&gt;\n                        &lt;/Route&gt;\n                    &lt;/Switch&gt;\n                &lt;/div&gt;\n                &lt;footer&gt;footer&lt;/footer&gt;\n            &lt;/div&gt;\n        &lt;/Router&gt;\n    );\n};\nexport default App;\n</code></pre>\n\n<h2>路由模式</h2>\n\n路由模式有<code>真实地址</code>和<code>hash</code>两种,<code>真实地址</code>在生产环境下需要服务器软件URL重写(如: <a href=\"https://nginx.org/en/\" title=\"nginx\">nginx</a>)的支持,其生成的<code>url</code>是<code>example.com/some/path</code>这样的格式.而<code>hash</code>则不需要,只要有CDN的地方扔上去就可以,其<code>url</code>看上去是这样<code>example.com/#/your/page</code>\n\n<code>真实地址</code>通过<code>BrowserRouter</code>组件生成,<code>hash</code>模式通过<code>HashRouter</code>生成,他们可以通过使用<code>Router</code>这个底层组件自由切换,如下\n\n安装<code>history</code>\n\n<blockquote>\n  <code>history</code>版本必须为4.x.x,因为<a href=\"https://reactrouter.com/\" title=\"react-router\">react-router</a> v5版本还不支持<code>history</code> v5\n</blockquote>\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm add history@\"&lt;5.0.0\"\n</code></pre>\n\n<pre><code class=\"language-tsx line-numbers\">// src/App.tsx\nconst App: FC&lt;{ hash?: boolean }&gt; = ({ hash }) =&gt; {\n    const historyCreator = hash ? createHashHistory() : createBrowserHistory();\n    return (\n        &lt;Router history={historyCreator}&gt;\n        ...\n        &lt;/Router&gt;\n    );\n};\n</code></pre>\n\n现在如果需要<code>hash</code>模式,可以这样\n\n<pre><code class=\"language-tsx line-numbers\">// src/main.tsx\nReactDOM.render(\n    &lt;React.StrictMode&gt;\n        &lt;App hash /&gt;\n    &lt;/React.StrictMode&gt;,\n    document.getElementById(\'root\'),\n);\n</code></pre>\n\n当然也可以把<code>hash</code>选项放到状态管理(比如我们前面讲得<code>context</code>+<code>userReducer</code>或者后续将会讲到的<a href=\"http://cn.redux.js.org/\" title=\"redux\">redux</a>,[mobx][]等)中手动更换,这样会更灵活方便,甚至还可以把这个配置放到<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage\" title=\"localstorage\">localstorage</a>中储存!\n\n<h2>精确匹配</h2>\n\n<code>Route</code>组件用于根据URL路径来匹配路由,<code>Switch</code>组件则用于匹配第一个路由,如果在<code>Route</code>列表外部不包装<code>Switch</code>则会匹配所有符合条件的路由,试一下把<code>App.tsx</code>中的<code>Switch</code>组件去除,然后访问<code>/about</code>,这时<code>Home</code>页面也会呈现,因为<code>/about</code>同时匹配了<code>/</code>\n\n由于<code>Switch</code>总是匹配第一个符合的路由,那么如果我们把<code>Home</code>放到最前面会发生什么？这将导致我们访问任何其它路由都只会显示<code>Home</code>页面,这时候就需要为<code>/</code>路由添加添加一个<code>exact</code>参数来设置精确匹配了\n\n<pre><code class=\"language-tsx line-numbers\">// src/App.tsx\nconst App: FC&lt;{ hash?: boolean }&gt; = ({ hash }) =&gt; {\n  ...\n                &lt;div className=\"flex justify-center\"&gt;\n                    &lt;Switch&gt;\n                        &lt;Route exact path=\"/\"&gt;\n                            &lt;Home /&gt;\n                        &lt;/Route&gt;\n                        &lt;Route path=\"/about\"&gt;\n                            &lt;About /&gt;\n                        &lt;/Route&gt;\n                        &lt;Route path=\"/users\"&gt;\n                            &lt;UsersIndex /&gt;\n                        &lt;/Route&gt;\n                    &lt;/Switch&gt;\n                &lt;/div&gt;\n};\n</code></pre>\n\n这时访问<code>/</code>则只会匹配<code>Home</code>页面了\n\n<h2>路由导航</h2>\n\n<h3>导航组件</h3>\n\n一般导航用<code>Link</code>就可以了,但是在需要对匹配的链接添加一个CSS类的时候可以使用<code>NavLink</code>(如导航栏),具体使用如下\n\n<pre><code class=\"language-tsx line-numbers\">&lt;NavLink to=\"/react\" activeClassName=\"actived\"&gt;\n  React\n&lt;/NavLink&gt;\n</code></pre>\n\n<h3>路由跳转</h3>\n\n<code>Redirect</code>组件用于设置跳转路由,如下\n\n<pre><code class=\"language-tsx line-numbers\">// src/App.tsx\n&lt;Switch&gt;\n  ...\n    &lt;Route path=\"/users\"&gt;\n        &lt;UsersIndex /&gt;\n    &lt;/Route&gt;\n    &lt;Redirect path=\"/test\" to=\"/\" /&gt;\n&lt;/Switch&gt;\n</code></pre>\n\n在导航链接上添加<code>/test</code>\n\n<pre><code class=\"language-tsx line-numbers\">// src/components/Menu.tsx\n...\n&lt;ul&gt;\n    &lt;li&gt;\n        &lt;Link to=\"/test\"&gt;redirect to home&lt;/Link&gt;\n    &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<h3>编程式导航</h3>\n\n通过<code>useHistory</code>这个hook可以获得<code>history</code>对象,通过这个对象可以实现<code>push</code>,<code>replace</code>等方式的手动跳转\n\n<pre><code class=\"language-tsx line-numbers\">const Menu: FC = () =&gt; {\n    const history = useHistory();\n    return (\n        &lt;div&gt;\n            &lt;Button onClick={() =&gt; history.push(\'/about\')}&gt;跳转到About&lt;/Button&gt;\n            ...\n        &lt;/div&gt;\n    );\n};\nexport default Menu;\n</code></pre>\n\n<h2>代码分割</h2>\n\n<h4>动态导入</h4>\n\n通过动态导入的方式实现代码分割,可以使每个组件和页面只在需要的时候加载\n\n动态导入需要安装<code>@loadable/component</code>这个库\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm add @loadable/component\n~ pnpm add @types/loadable__component -D\n</code></pre>\n\n现在可以尝试一下动态导入<code>About</code>页面\n\n<pre><code class=\"language-tsx line-numbers\">// src/App.tsx\nconst About = loadable(() =&gt; import(\'./pages/About\'));\n</code></pre>\n\n当我们从<code>http://localhost:4000</code>导航到<code>/about</code>时,<code>开发者工具</code>-><code>networks</code>中会显示一个异步加载的<code>About.tsx</code>页面,表示已经异步加载\n\n对于每个页面都进行一次<code>loadable</code>的HOC包装是一件非常繁琐的事情,为了简单,可以一次性把所有需要的页面进行代码分割出去,并通过页面名称的字符串来动态加载页面,在<a href=\"https://cn.vitejs.dev/\" title=\"vitejs\">vitejs</a>下使用<code>glob</code>的方式实现,而<a href=\"https://create-react-app.dev/\" title=\"cra\">cra</a>或者<a href=\"https://webpack.docschina.org/\" title=\"webpack\">webpack</a>等可以直接使用<code>import(</code>./${props.page}<code>)</code>的方式\n\n<a href=\"https://cn.vitejs.dev/\" title=\"vitejs\">vitejs</a>通过<code>const pages = import.meta.glob(\'../../pages/**/*.{tsx,jsx}\')</code>这样的语法可加载<code>pages</code>目录下的所有页面并最终生成如下代码\n\n<pre><code class=\"language-typescript line-numbers\">const modules = {\n  \'./dir/foo.js\': () =&gt; import(\'./dir/foo.js\'),\n  \'./dir/bar.js\': () =&gt; import(\'./dir/bar.js\')\n}\n</code></pre>\n\n我们在添加一个函数,作用是通过正则去除前缀路径,比如<code>../../pages/</code>和后缀,比如<code>.tsx</code>,<code>.jsx</code>等,就获得最终的动态导入对象\n\n<pre><code class=\"language-typescript line-numbers\">// src/components/Router/view.tsx\nconst getAsyncImports = (imports: Record&lt;string, () =&gt; Promise&lt;any&gt;&gt;, reg: RegExp) =&gt; {\n    return Object.keys(imports)\n        .map((key) =&gt; {\n            const names = reg.exec(key);\n            return Array.isArray(names) &amp;&amp; names.length &gt;= 2\n                ? { [names[1]]: imports[key] }\n                : undefined;\n        })\n        .filter((m) =&gt; !!m)\n        .reduce((o, n) =&gt; ({ ...o, ...n }), []) as unknown as Record&lt;string, () =&gt; Promise&lt;any&gt;&gt;;\n};\nconst pages = getAsyncImports(\n    import.meta.glob(\'../../pages/**/*.{tsx,jsx}\'),\n    /..\\/..\\/pages\\/([\\w+.?/?]+).tsx|.jsx/i,\n);\n</code></pre>\n\n最终<code>pages</code>对象会像这样\n\n<blockquote>\n  如果生产环境下,后缀会是<code>jsx</code>\n</blockquote>\n\n<pre><code class=\"language-javascript line-numbers\">const modules = {\n  Home: () =&gt; import(\'../../pages/Home.tsx\')\n  About: () =&gt; import(\'../../pages/About.tsx\'),\n  \'users/Index\': () =&gt; import(\'../../pages/users/Index.tsx\')\n}\n</code></pre>\n\n现在<code>loadable(\'Home\')</code>就会异步加载<code>Home</code>页面了\n\n<pre><code class=\"language-tsx line-numbers\">export const AsyncPage = ({ page }: { page: string }) =&gt; {\n    const View = loadable(pages[page], {\n        cacheKey: () =&gt; page.replaceAll(\'/\', \'-\'),\n    });\n    return &lt;View /&gt;;\n};\n</code></pre>\n\n修改<code>App.tsx</code>试一下\n\n<pre><code class=\"language-tsx line-numbers\">&lt;Switch&gt;\n&lt;Route exact path=\"/\"&gt;\n    &lt;AsyncPage page=\"Home\" /&gt;\n&lt;/Route&gt;\n&lt;Route path=\"/about\"&gt;\n    &lt;AsyncPage page=\"About\" /&gt;\n&lt;/Route&gt;\n&lt;Route path=\"/users\"&gt;\n    &lt;AsyncPage page=\"users/Index\" /&gt;\n&lt;/Route&gt;\n    &lt;Redirect path=\"/test\" to=\"/\" /&gt;\n&lt;/Switch&gt;\n</code></pre>\n\n添加\"加载中\"组件\n\n<blockquote>\n  为了保证不会因为<code>loadding</code>组件的每次计算而导致页面总是被重新渲染,使用<code>useMemo</code>缓存\n</blockquote>\n\n<pre><code class=\"language-tsx line-numbers\">const Loading: FC = () =&gt; (\n    &lt;div className=\"fixed w-full h-full top-0 left-0 dark:bg-white bg-gray-800 bg-opacity-25 flex items-center justify-center\"&gt;\n        &lt;span&gt;加载中&lt;/span&gt;\n    &lt;/div&gt;\n);\n\nexport const AsyncPage: FC&lt;{ page: string; loading?: JSX.Element }&gt; = ({ page, loading }) =&gt; {\n    const fallback = useMemo(() =&gt; loading ?? &lt;Loading /&gt;, []);\n    const View = loadable(pages[page], {\n        cacheKey: () =&gt; page.replaceAll(\'/\', \'-\'),\n        fallback,\n    });\n    return &lt;View /&gt;;\n};\n</code></pre>\n\n以上代码看不出效果,可以使用<code>p-min-delay</code>来做一下延迟测试(<strong>请注意: 生产环境中不要添加延迟</strong>),并且需要设置一下超时\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm add p-min-delay promise-timeout\n~ pnpm add @types/promise-timeout -D\n</code></pre>\n\n代码\n\n<pre><code class=\"language-tsx line-numbers\">const ViewHoc = loadable(() =&gt; timeout(pMinDelay(pages[page](), 500), 12000), {\n    cacheKey: () =&gt; page.replaceAll(\'/\', \'-\'),\n    fallback,\n});\n</code></pre>\n\n<h4>render函数</h4>\n\n[react router][]加载组件页面有三种方案\n\n<ul>\n<li><code>component</code>加载,如<code>&lt;Route path=\"/home\" component={Home} /&gt;</code></li>\n<li><code>children</code>方式加载,如<code>&lt;Route path=\"/home\"&gt;&lt;Home /&gt;&lt;/Route&gt;</code></li>\n<li><code>render</code>加载,如<code>&lt;Route path=\"/home\" render={Home} /&gt;</code></li>\n</ul>\n\n通过<code>component</code>和<code>render</code>加载,可像页面传递<code>route props</code>,而<code>component</code>每次都会创建新的渲染实例,所以一般会选择<code>render</code>函数来加载页面\n\n首先定义一下类型\n\n<pre><code class=\"language-typescript line-numbers\">export interface PageOptions {\n    page: string;\n    loading?: JSX.Element;\n}\n\nexport type PageProps&lt;\n    // 传递给Page的额外参数\n    T extends Record&lt;string, any&gt; = Record&lt;string, any&gt;,\n    Path extends string = string,\n    Params extends { [K: string]: string | undefined } = ExtractRouteParams&lt;Path, string&gt;,\n&gt; = PageOptions &amp;\n    T &amp; {\n        route: RouteComponentProps&lt;Params&gt;;\n    };\n\nexport interface RouteProps\n    extends PageOptions,\n        Omit&lt;BaseRouterProps, \'children\' | \'component\' | \'render\'&gt; {\n    // 传递给Page的额外参数\n    params?: Record&lt;string, any&gt;;\n\n</code></pre>\n\n改造<code>AsyncPage</code>\n\n<pre><code class=\"language-tsx line-numbers\">export const AsyncPage: FC&lt;PageProps&gt; = ({ page, loading, ...rest }) =&gt; {\n    ...\n    return &lt;View {...rest} /&gt;;\n};\n</code></pre>\n\n定义一个<code>AsyncRoute</code>作为异步路由组件\n\n<pre><code class=\"language-tsx line-numbers\">export const AsyncRoute: FC&lt;RouteProps&gt; = (props) =&gt; {\n    const { page, loading, params = {}, ...rest } = props;\n    return (\n        &lt;Route\n            {...rest}\n            render={(route) =&gt; (\n                &lt;AsyncPage route={route} page={page} loading={loading} {...params} /&gt;\n            )}\n        /&gt;\n    );\n};\n</code></pre>\n\n在<code>App.tsx</code>中使用\n\n<pre><code class=\"language-tsx line-numbers\">&lt;Switch&gt;\n    &lt;AsyncRoute page=\"Home\" path=\"/\" exact /&gt;\n    &lt;AsyncRoute page=\"About\" path=\"/about\" /&gt;\n    &lt;AsyncRoute page=\"users/Index\" path=\"/users\" /&gt;\n    &lt;Redirect path=\"/test\" to=\"/\" /&gt;\n&lt;/Switch&gt;\n</code></pre>\n\n同时也可以在<code>User/Index</code>页面中使用\n\n提取单个用户详情组件为独立页面\n\n<pre><code class=\"language-tsx line-numbers\">// src/pages/users/Detail.tsx\ntype UserParams = { username: string };\nconst UserDetail: FC = () =&gt; {\n    const { username } = useParams&lt;UserParams&gt;();\n    return &lt;div&gt;current user is {username}&lt;/div&gt;;\n};\nexport default UserDetail;\n</code></pre>\n\n提取用户列表组件为独立页面\n\n<pre><code class=\"language-tsx line-numbers\">// src/pages/users/List.tsx\nconst UserList: FC = () =&gt; {\n    return &lt;div&gt;User List&lt;/div&gt;;\n};\nexport default UserList;\n</code></pre>\n\n原来的用户页面修改为用户布局页面\n\n<pre><code class=\"language-tsx line-numbers\">// src/pages/users/Index.tsx\nconst UsersIndex: FC = () =&gt; {\n    const match = useRouteMatch();\n    const [count, setCount] = useState(0);\n    return (\n        &lt;div&gt;\n            &lt;Button onClick={() =&gt; setCount(count + 1)}&gt;增数&lt;/Button&gt;\n            &lt;span&gt;{count}&lt;/span&gt;\n            &lt;ul&gt;\n                &lt;li&gt;\n                    &lt;Link to={`${match.url}`}&gt;User List&lt;/Link&gt;\n                &lt;/li&gt;\n                &lt;li&gt;\n                    &lt;Link to={`${match.url}/pincman`}&gt;Pincman&lt;/Link&gt;\n                &lt;/li&gt;\n            &lt;/ul&gt;\n            &lt;Switch&gt;\n                &lt;AsyncRoute path={match.path} page=\"users/List\" exact /&gt;\n                &lt;AsyncRoute path={`${match.path}/:username`} page=\"users/Detail\" /&gt;\n            &lt;/Switch&gt;\n        &lt;/div&gt;\n    );\n};\nexport default UsersIndex;\n</code></pre>\n\n<h4>缓存布局</h4>\n\n运行上面的代码会发现每次在访问子页面时会造成<code>Index</code>重新渲染,表现为点击\"增数\"按钮<code>count</code>变成<code>1</code>,在点击<code>User list</code>或者<code>Pincman</code>链接,<code>count</code>重置为<code>0</code>,造成以上问题的原因是<code>loadable</code>会在每次访问时生成一个新的实例,解决办法就是上一节讲到的缓存hook-<code>useMemo</code>\n\n单独使用<code>useMemo</code>会导致页面一直缓存无法渲染,所以需要一个判断重新渲染页面时机的变量,此变量可以是<code>match.url</code>,因为切换子页面时,父级布局页的<code>match.url</code>是不会变动的\n\n<pre><code class=\"language-tsx line-numbers\">export const AsyncPage: FC&lt;PageProps&gt; = ({ page, loading, ...rest }) =&gt; {\n    const { url } = rest.route.match;\n    const View = useMemo(\n        () =&gt;\n            loadable(() =&gt; timeout(pMinDelay(pages[page](), 500), 12000), {\n                cacheKey: () =&gt; page.replaceAll(\'/\', \'-\'),\n                fallback,\n            }),\n        [url],\n    );\n    ...\n};\n</code></pre>\n\n现在试试点击\"增数\"再切换子页面,已经不会再重新渲染父级了\n\n为了后续的<strong>配置式路由</strong>可以更简便地实现,我们还可以为<code>AsyncRoute</code>和<code>AsyncRoute</code>添加一个<code>children</code>\n\n<pre><code class=\"language-tsx line-numbers\">export const AsyncPage: FC&lt;PageProps&gt; = ({ page, loading, children, ...rest }) =&gt; {\n    return &lt;View {...rest}&gt;{children}&lt;/View&gt;;\n};\n\n\nexport const AsyncRoute: FC&lt;RouteProps&gt; = (props) =&gt; {\n...\n        render={(route) =&gt; (\n            &lt;AsyncPage route={route} page={page} loading={loading} {...params}&gt;\n                {children}\n            &lt;/AsyncPage&gt;\n        )}\n};\n\nconst UserIndex: FC = ({ children }) =&gt; {\n    ...\n    return (\n        &lt;div&gt;\n            &lt;ul&gt;...&lt;/ul&gt;\n            {children}\n        &lt;/div&gt;\n    );\n};\nexport default UserIndex;\n</code></pre>\n\n现在可以在<code>App.tsx</code>中添加所有路由配置了\n\n<pre><code class=\"language-tsx line-numbers\">&lt;Switch&gt;\n    &lt;AsyncRoute page=\"Home\" path=\"/\" exact /&gt;\n    &lt;AsyncRoute page=\"About\" path=\"/about\" /&gt;\n    &lt;AsyncRoute page=\"users/Index\" path=\"/users\"&gt;\n        &lt;Switch&gt;\n            &lt;AsyncRoute path=\"/users\" page=\"users/List\" exact /&gt;\n            &lt;AsyncRoute path=\"/users/:username\" page=\"users/Detail\" /&gt;\n        &lt;/Switch&gt;\n    &lt;/AsyncRoute&gt;\n    &lt;Redirect path=\"/test\" to=\"/\" /&gt;\n&lt;/Switch&gt;\n</code></pre>\n\n<h2>可用API</h2>\n\n这部分介绍一些常用的[react router][]的API\n\n<blockquote>\n  因为本教程是Typescript编码,所以不必把所有的API参数和属性列出来,大家可以点开类型文件自己查看\n</blockquote>\n\n<h3>Hooks及函数</h3>\n\n<h4>修改render</h4>\n\n有了<code>Hooks</code>之后不必要再往<code>render</code>里的组件传递<code>route</code>参数\n\n<pre><code class=\"language-tsx line-numbers\">// src/components/Router/types.ts\nexport type PageProps&lt;\n    // 传递给Page的额外参数\n    T extends Record&lt;string, any&gt; = Record&lt;string, any&gt;,\n&gt; = PageOptions &amp; T;\nexport const AsyncPage: FC&lt;PageProps&gt; = ({ page, loading, children, ...rest }) =&gt; {\n    const { url } = useRouteMatch();\n    ...\n};\n\n// src/components/Router/view.tsx\nexport const AsyncRoute: FC&lt;RouteProps&gt; = (props) =&gt; {\n    const { page, loading, params = {}, children, ...rest } = props;\n    ...\n                &lt;AsyncPage page={page} loading={loading} {...params}&gt;\n                    {children}\n                &lt;/AsyncPage&gt;\n};\n</code></pre>\n\n<h4>useHistory</h4>\n\n用于编程化导航,比如<code>history.push(\"/home\");</code>\n\n<h4>useLocation</h4>\n\n获取当前URL的<code>location</code>对象,比如<code>location.pathname</code>\n\n<h4>useRouteMatch</h4>\n\n通过<code>path</code>参数与某个<code>Route</code>的<code>path</code>匹配,如果不传入参数,则与当前导航到的<code>Route</code>匹配,匹配后即可获取其被导航后的信息,比如<code>match.url</code>\n\n<h4>matchPath</h4>\n\n在组件渲染的生命周期之前获取<code>match</code>对象,其结果与渲染后使用<code>useRouteMatch</code>一样,用法如下\n\n<pre><code class=\"language-typescript line-numbers\">matchPath(\"/users/2\", {\n  path: \"/users/:id\",\n  exact: true,\n  strict: true\n});\n// 结果\n//  {\n//    isExact: true\n//    params: {\n//        id: \"2\"\n//    }\n//    path: \"/users/:id\"\n//    url: \"/users/2\"\n//  }\n</code></pre>\n\n<h3>组件</h3>\n\n<ul>\n<li><code>Router</code>: 底层路由构建器</li>\n<li><code>BrowserRouter</code>: html5 history api路由构建器</li>\n<li><code>HashRouter</code>: hash路由构建器</li>\n<li><code>MemoryRouter</code>: 不把URL写入浏览器地址栏而把历史记录保存在内存中的路由构建器,适用于测试或[react native][]等</li>\n<li><code>Switch</code>: 在路由列表中只渲染第一个与当前地址匹配的路由</li>\n<li><code>Route</code>: 定义路由,参数包含<code>path</code>(可以是个数组,对应多个地址),<code>extra</code>(精确匹配),<code>render</code>/<code>component</code>等</li>\n<li><code>Redirect</code>: 跳转路由,部分参数与<code>Route</code>一样</li>\n<li><code>Link</code>: 通过组件模式导航路由</li>\n<li><code>NavLink</code>: 比<code>Link</code>多了个可以为当前链接激活时添加的CSS类</li>\n<li><code>Prompt</code>: 在用户离开页面之前跳出\"是否离开\"提示</li>\n</ul>\n\n<h2>其它知识</h2>\n\n以下知识后续教程会讲解\n\n<ul>\n<li>配置式路由</li>\n<li>认证和权限路由</li>\n<li>基于<code>context</code>的独立路由组件</li>\n<li>路由切换时的转场动画</li>\n</ul>\n\n以下知识自行查看官网示例\n\n<ul>\n<li>query: 通过<code>Link</code>组件中的<code>query</code>参数可指定<code>query</code>,如要获取<code>query</code>看[这里][https://reactrouter.com/web/example/query-parameters]</li>\n<li>弹出框: 想要点击一个路由可弹出一个modal,看[这里][https://reactrouter.com/web/example/modal-gallery]</li>\n</ul>', 'React Router构建路由', '', 'publish', 'open', 'closed', '', 'react-router', '', '', '2021-11-10 05:23:50', '2021-11-09 21:23:50', '[react-router]: https://reactrouter.com/  \"react-router\"\r\n\r\n[nginx]: https://nginx.org/en/ \"nginx\"\r\n[redux]: http://cn.redux.js.org/ \"redux\"\r\n[localstorage]: https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage \"localstorage\"\r\n[vitejs]: https://cn.vitejs.dev/ \"vitejs\"\r\n[cra]: https://create-react-app.dev/ \"cra\"\r\n[webpack]: https://webpack.docschina.org/ \"webpack\"\r\n[ react native ]: https://reactnative.dev/ \"react native\"\r\n\r\n[scode type=\"yellow\"]注意: 本教程在MacOS下讲解,Linux用户根据各自的发行版安装软件,windows用户请自行安装wsl2作为替代 [/scode][]\r\n\r\n## 基本使用\r\n\r\n安装[react-router][]\r\n\r\n```shell\r\n~ pnpm add react-router-dom\r\n~ pnpm add @types/react-router-dom -D\r\n```\r\n\r\n路由页面\r\n\r\n```tsx\r\n// src/pages/Home.tsx\r\nconst Home: FC = () => <div>Home Page</div>;\r\nexport default Home;\r\n// src/pages/About.tsx\r\nconst About: FC = () => <div>About Page</div>;\r\nexport default About;\r\n```\r\n\r\n嵌套路由\r\n\r\n```tsx\r\n// src/pages/User.tsx\r\ntype UserParams = { username: string };\r\nconst User: FC = () => {\r\n    const { username } = useParams<UserParams>();\r\n    return <div>current user is {username}</div>;\r\n};\r\n\r\nconst UsersIndex: FC = () => {\r\n    const match = useRouteMatch();\r\n    return (\r\n        <div>\r\n            <ul>\r\n                <li>\r\n                    <Link to={`${match.url}`}>User List</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to={`${match.url}/pincman`}>Pincman</Link>\r\n                </li>\r\n            </ul>\r\n            <Switch>\r\n                <Route path={`${match.path}/:username`}>\r\n                    <User />\r\n                </Route>\r\n                <Route path={match.path}>\r\n                    <h3>Please select a user.</h3>\r\n                </Route>\r\n            </Switch>\r\n        </div>\r\n    );\r\n};\r\nexport default UsersIndex;\r\n```\r\n\r\n链接菜单\r\n\r\n```tsx\r\n// src/components/Menu.tsx\r\nconst Menu: FC = () => (\r\n    <div>\r\n        <ul>\r\n            <li>\r\n                <Link to=\"/\">Home</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/about\">About</Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/users\">Users</Link>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n);\r\nexport default Menu;\r\n```\r\n\r\n构建路由\r\n\r\n```tsx\r\n// src/App.tsx\r\n...\r\nimport { BrowserRouter as Router, Route, Switch } from \'react-router-dom\';\r\nconst App: FC = () => {\r\n    return (\r\n        <Router>\r\n            <div className=\"app flex items-center bg-white dark:bg-gray-800 flex-col place-content-between dark:text-white\">\r\n                <Menu />\r\n                <div className=\"flex justify-center\">\r\n                    <Switch>\r\n                        <Route path=\"/about\">\r\n                            <About />\r\n                        </Route>\r\n                        <Route path=\"/users\">\r\n                            <UsersIndex />\r\n                        </Route>\r\n                        <Route path=\"/\">\r\n                            <Home />\r\n                        </Route>\r\n                    </Switch>\r\n                </div>\r\n                <footer>footer</footer>\r\n            </div>\r\n        </Router>\r\n    );\r\n};\r\nexport default App;\r\n```\r\n\r\n## 路由模式\r\n\r\n路由模式有`真实地址`和`hash`两种,`真实地址`在生产环境下需要服务器软件URL重写(如: [nginx][])的支持,其生成的`url`是`example.com/some/path`这样的格式.而`hash`则不需要,只要有CDN的地方扔上去就可以,其`url`看上去是这样`example.com/#/your/page`\r\n\r\n`真实地址`通过`BrowserRouter`组件生成,`hash`模式通过`HashRouter`生成,他们可以通过使用`Router`这个底层组件自由切换,如下\r\n\r\n安装`history`\r\n\r\n> `history`版本必须为4.x.x,因为[react-router][] v5版本还不支持`history` v5\r\n\r\n```shell\r\n~ pnpm add history@\"<5.0.0\"\r\n```\r\n\r\n```tsx\r\n// src/App.tsx\r\nconst App: FC<{ hash?: boolean }> = ({ hash }) => {\r\n    const historyCreator = hash ? createHashHistory() : createBrowserHistory();\r\n    return (\r\n        <Router history={historyCreator}>\r\n        ...\r\n        </Router>\r\n    );\r\n};\r\n```\r\n\r\n现在如果需要`hash`模式,可以这样\r\n\r\n```tsx\r\n// src/main.tsx\r\nReactDOM.render(\r\n    &lt;React.StrictMode&gt;\r\n        &lt;App hash /&gt;\r\n    &lt;/React.StrictMode&gt;,\r\n    document.getElementById(&#039;root&#039;),\r\n);\r\n```\r\n\r\n当然也可以把`hash`选项放到状态管理(比如我们前面讲得`context`+`userReducer`或者后续将会讲到的[redux][],[mobx][]等)中手动更换,这样会更灵活方便,甚至还可以把这个配置放到[localstorage][]中储存!\r\n\r\n## 精确匹配\r\n\r\n`Route`组件用于根据URL路径来匹配路由,`Switch`组件则用于匹配第一个路由,如果在`Route`列表外部不包装`Switch`则会匹配所有符合条件的路由,试一下把`App.tsx`中的`Switch`组件去除,然后访问`/about`,这时`Home`页面也会呈现,因为`/about`同时匹配了`/`\r\n\r\n由于`Switch`总是匹配第一个符合的路由,那么如果我们把`Home`放到最前面会发生什么？这将导致我们访问任何其它路由都只会显示`Home`页面,这时候就需要为`/`路由添加添加一个`exact`参数来设置精确匹配了\r\n\r\n```tsx\r\n// src/App.tsx\r\nconst App: FC&lt;{ hash?: boolean }&gt; = ({ hash }) =&gt; {\r\n  ...\r\n                &lt;div className=&quot;flex justify-center&quot;&gt;\r\n                    &lt;Switch&gt;\r\n                        &lt;Route exact path=&quot;/&quot;&gt;\r\n                            &lt;Home /&gt;\r\n                        &lt;/Route&gt;\r\n                        &lt;Route path=&quot;/about&quot;&gt;\r\n                            &lt;About /&gt;\r\n                        &lt;/Route&gt;\r\n                        &lt;Route path=&quot;/users&quot;&gt;\r\n                            &lt;UsersIndex /&gt;\r\n                        &lt;/Route&gt;\r\n                    &lt;/Switch&gt;\r\n                &lt;/div&gt;\r\n};\r\n```\r\n\r\n这时访问`/`则只会匹配`Home`页面了\r\n\r\n## 路由导航\r\n\r\n### 导航组件\r\n\r\n一般导航用`Link`就可以了,但是在需要对匹配的链接添加一个CSS类的时候可以使用`NavLink`(如导航栏),具体使用如下\r\n\r\n```tsx\r\n&lt;NavLink to=&quot;/react&quot; activeClassName=&quot;actived&quot;&gt;\r\n  React\r\n&lt;/NavLink&gt;\r\n```\r\n\r\n### 路由跳转\r\n\r\n`Redirect`组件用于设置跳转路由,如下\r\n\r\n```tsx\r\n// src/App.tsx\r\n&lt;Switch&gt;\r\n  ...\r\n    &lt;Route path=&quot;/users&quot;&gt;\r\n        &lt;UsersIndex /&gt;\r\n    &lt;/Route&gt;\r\n    &lt;Redirect path=&quot;/test&quot; to=&quot;/&quot; /&gt;\r\n&lt;/Switch&gt;\r\n```\r\n\r\n在导航链接上添加`/test`\r\n\r\n```tsx\r\n// src/components/Menu.tsx\r\n...\r\n&lt;ul&gt;\r\n    &lt;li&gt;\r\n        &lt;Link to=&quot;/test&quot;&gt;redirect to home&lt;/Link&gt;\r\n    &lt;/li&gt;\r\n&lt;/ul&gt;\r\n```\r\n\r\n### 编程式导航\r\n\r\n通过`useHistory`这个hook可以获得`history`对象,通过这个对象可以实现`push`,`replace`等方式的手动跳转\r\n\r\n```tsx\r\nconst Menu: FC = () =&gt; {\r\n    const history = useHistory();\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;Button onClick={() =&gt; history.push(&#039;/about&#039;)}&gt;跳转到About&lt;/Button&gt;\r\n            ...\r\n        &lt;/div&gt;\r\n    );\r\n};\r\nexport default Menu;\r\n```\r\n\r\n## 代码分割\r\n\r\n#### 动态导入\r\n\r\n通过动态导入的方式实现代码分割,可以使每个组件和页面只在需要的时候加载\r\n\r\n动态导入需要安装`@loadable/component`这个库\r\n\r\n```shell\r\n~ pnpm add @loadable/component\r\n~ pnpm add @types/loadable__component -D\r\n```\r\n\r\n现在可以尝试一下动态导入`About`页面\r\n\r\n```tsx\r\n// src/App.tsx\r\nconst About = loadable(() =&gt; import(&#039;./pages/About&#039;));\r\n```\r\n\r\n当我们从`http://localhost:4000`导航到`/about`时,`开发者工具`->`networks`中会显示一个异步加载的`About.tsx`页面,表示已经异步加载\r\n\r\n对于每个页面都进行一次`loadable`的HOC包装是一件非常繁琐的事情,为了简单,可以一次性把所有需要的页面进行代码分割出去,并通过页面名称的字符串来动态加载页面,在[vitejs][]下使用`glob`的方式实现,而[cra][]或者[webpack][]等可以直接使用`import(`./${props.page}`)`的方式\r\n\r\n[vitejs][]通过`const pages = import.meta.glob(\'../../pages/**/*.{tsx,jsx}\')`这样的语法可加载`pages`目录下的所有页面并最终生成如下代码\r\n\r\n```typescript\r\nconst modules = {\r\n  &#039;./dir/foo.js&#039;: () =&gt; import(&#039;./dir/foo.js&#039;),\r\n  &#039;./dir/bar.js&#039;: () =&gt; import(&#039;./dir/bar.js&#039;)\r\n}\r\n```\r\n\r\n我们在添加一个函数,作用是通过正则去除前缀路径,比如`../../pages/`和后缀,比如`.tsx`,`.jsx`等,就获得最终的动态导入对象\r\n\r\n```typescript\r\n// src/components/Router/view.tsx\r\nconst getAsyncImports = (imports: Record&lt;string, () =&gt; Promise&lt;any&gt;&gt;, reg: RegExp) =&gt; {\r\n    return Object.keys(imports)\r\n        .map((key) =&gt; {\r\n            const names = reg.exec(key);\r\n            return Array.isArray(names) &amp;&amp; names.length &gt;= 2\r\n                ? { [names[1]]: imports[key] }\r\n                : undefined;\r\n        })\r\n        .filter((m) =&gt; !!m)\r\n        .reduce((o, n) =&gt; ({ ...o, ...n }), []) as unknown as Record&lt;string, () =&gt; Promise&lt;any&gt;&gt;;\r\n};\r\nconst pages = getAsyncImports(\r\n    import.meta.glob(&#039;../../pages/**/*.{tsx,jsx}&#039;),\r\n    /..\\/..\\/pages\\/([\\w+.?/?]+).tsx|.jsx/i,\r\n);\r\n```\r\n\r\n最终`pages`对象会像这样\r\n\r\n> 如果生产环境下,后缀会是`jsx`\r\n\r\n```javascript\r\nconst modules = {\r\n  Home: () =&gt; import(&#039;../../pages/Home.tsx&#039;)\r\n  About: () =&gt; import(&#039;../../pages/About.tsx&#039;),\r\n  &#039;users/Index&#039;: () =&gt; import(&#039;../../pages/users/Index.tsx&#039;)\r\n}\r\n```\r\n\r\n现在`loadable(\'Home\')`就会异步加载`Home`页面了\r\n\r\n```tsx\r\nexport const AsyncPage = ({ page }: { page: string }) =&gt; {\r\n    const View = loadable(pages[page], {\r\n        cacheKey: () =&gt; page.replaceAll(&#039;/&#039;, &#039;-&#039;),\r\n    });\r\n    return &lt;View /&gt;;\r\n};\r\n```\r\n\r\n修改`App.tsx`试一下\r\n\r\n```tsx\r\n&lt;Switch&gt;\r\n&lt;Route exact path=&quot;/&quot;&gt;\r\n    &lt;AsyncPage page=&quot;Home&quot; /&gt;\r\n&lt;/Route&gt;\r\n&lt;Route path=&quot;/about&quot;&gt;\r\n    &lt;AsyncPage page=&quot;About&quot; /&gt;\r\n&lt;/Route&gt;\r\n&lt;Route path=&quot;/users&quot;&gt;\r\n    &lt;AsyncPage page=&quot;users/Index&quot; /&gt;\r\n&lt;/Route&gt;\r\n    &lt;Redirect path=&quot;/test&quot; to=&quot;/&quot; /&gt;\r\n&lt;/Switch&gt;\r\n```\r\n\r\n添加\"加载中\"组件\r\n\r\n> 为了保证不会因为`loadding`组件的每次计算而导致页面总是被重新渲染,使用`useMemo`缓存\r\n\r\n```tsx\r\nconst Loading: FC = () =&gt; (\r\n    &lt;div className=&quot;fixed w-full h-full top-0 left-0 dark:bg-white bg-gray-800 bg-opacity-25 flex items-center justify-center&quot;&gt;\r\n        &lt;span&gt;加载中&lt;/span&gt;\r\n    &lt;/div&gt;\r\n);\r\n\r\nexport const AsyncPage: FC&lt;{ page: string; loading?: JSX.Element }&gt; = ({ page, loading }) =&gt; {\r\n    const fallback = useMemo(() =&gt; loading ?? &lt;Loading /&gt;, []);\r\n    const View = loadable(pages[page], {\r\n        cacheKey: () =&gt; page.replaceAll(&#039;/&#039;, &#039;-&#039;),\r\n        fallback,\r\n    });\r\n    return &lt;View /&gt;;\r\n};\r\n```\r\n\r\n以上代码看不出效果,可以使用`p-min-delay`来做一下延迟测试(**请注意: 生产环境中不要添加延迟**),并且需要设置一下超时\r\n\r\n```shell\r\n~ pnpm add p-min-delay promise-timeout\r\n~ pnpm add @types/promise-timeout -D\r\n```\r\n\r\n代码\r\n\r\n```tsx\r\nconst ViewHoc = loadable(() => timeout(pMinDelay(pages[page](), 500), 12000), {\r\n    cacheKey: () => page.replaceAll(\'/\', \'-\'),\r\n    fallback,\r\n});\r\n```\r\n\r\n#### render函数\r\n\r\n[react router][]加载组件页面有三种方案\r\n\r\n- `component`加载,如` <Route path=\"/home\" component={Home} />`\r\n- `children`方式加载,如` <Route path=\"/home\"><Home /></Route>`\r\n- `render`加载,如` <Route path=\"/home\" render={Home} />`\r\n\r\n通过`component`和`render`加载,可像页面传递`route props`,而`component`每次都会创建新的渲染实例,所以一般会选择`render`函数来加载页面\r\n\r\n首先定义一下类型\r\n\r\n```typescript\r\nexport interface PageOptions {\r\n    page: string;\r\n    loading?: JSX.Element;\r\n}\r\n\r\nexport type PageProps&lt;\r\n    // 传递给Page的额外参数\r\n    T extends Record&lt;string, any&gt; = Record&lt;string, any&gt;,\r\n    Path extends string = string,\r\n    Params extends { [K: string]: string | undefined } = ExtractRouteParams&lt;Path, string&gt;,\r\n&gt; = PageOptions &amp;\r\n    T &amp; {\r\n        route: RouteComponentProps&lt;Params&gt;;\r\n    };\r\n\r\nexport interface RouteProps\r\n    extends PageOptions,\r\n        Omit&lt;BaseRouterProps, &#039;children&#039; | &#039;component&#039; | &#039;render&#039;&gt; {\r\n    // 传递给Page的额外参数\r\n    params?: Record&lt;string, any&gt;;\r\n\r\n```\r\n\r\n改造`AsyncPage`\r\n\r\n```tsx\r\nexport const AsyncPage: FC&lt;PageProps&gt; = ({ page, loading, ...rest }) =&gt; {\r\n    ...\r\n    return &lt;View {...rest} /&gt;;\r\n};\r\n```\r\n\r\n定义一个`AsyncRoute`作为异步路由组件\r\n\r\n```tsx\r\nexport const AsyncRoute: FC&lt;RouteProps&gt; = (props) =&gt; {\r\n    const { page, loading, params = {}, ...rest } = props;\r\n    return (\r\n        &lt;Route\r\n            {...rest}\r\n            render={(route) =&gt; (\r\n                &lt;AsyncPage route={route} page={page} loading={loading} {...params} /&gt;\r\n            )}\r\n        /&gt;\r\n    );\r\n};\r\n```\r\n\r\n在`App.tsx`中使用\r\n\r\n```tsx\r\n&lt;Switch&gt;\r\n    &lt;AsyncRoute page=&quot;Home&quot; path=&quot;/&quot; exact /&gt;\r\n    &lt;AsyncRoute page=&quot;About&quot; path=&quot;/about&quot; /&gt;\r\n    &lt;AsyncRoute page=&quot;users/Index&quot; path=&quot;/users&quot; /&gt;\r\n    &lt;Redirect path=&quot;/test&quot; to=&quot;/&quot; /&gt;\r\n&lt;/Switch&gt;\r\n```\r\n\r\n同时也可以在`User/Index`页面中使用\r\n\r\n提取单个用户详情组件为独立页面\r\n\r\n```tsx\r\n// src/pages/users/Detail.tsx\r\ntype UserParams = { username: string };\r\nconst UserDetail: FC = () =&gt; {\r\n    const { username } = useParams&lt;UserParams&gt;();\r\n    return &lt;div&gt;current user is {username}&lt;/div&gt;;\r\n};\r\nexport default UserDetail;\r\n```\r\n\r\n提取用户列表组件为独立页面\r\n\r\n```tsx\r\n// src/pages/users/List.tsx\r\nconst UserList: FC = () =&gt; {\r\n    return &lt;div&gt;User List&lt;/div&gt;;\r\n};\r\nexport default UserList;\r\n```\r\n\r\n原来的用户页面修改为用户布局页面\r\n\r\n```tsx\r\n// src/pages/users/Index.tsx\r\nconst UsersIndex: FC = () => {\r\n    const match = useRouteMatch();\r\n    const [count, setCount] = useState(0);\r\n    return (\r\n        <div>\r\n            <Button onClick={() => setCount(count + 1)}>增数</Button>\r\n            <span>{count}</span>\r\n            <ul>\r\n                <li>\r\n                    <Link to={`${match.url}`}>User List</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to={`${match.url}/pincman`}>Pincman</Link>\r\n                </li>\r\n            </ul>\r\n            <Switch>\r\n                <AsyncRoute path={match.path} page=\"users/List\" exact />\r\n                <AsyncRoute path={`${match.path}/:username`} page=\"users/Detail\" />\r\n            </Switch>\r\n        </div>\r\n    );\r\n};\r\nexport default UsersIndex;\r\n```\r\n\r\n#### 缓存布局\r\n\r\n运行上面的代码会发现每次在访问子页面时会造成`Index`重新渲染,表现为点击\"增数\"按钮`count`变成`1`,在点击`User list`或者`Pincman`链接,`count`重置为`0`,造成以上问题的原因是`loadable`会在每次访问时生成一个新的实例,解决办法就是上一节讲到的缓存hook-`useMemo`\r\n\r\n单独使用`useMemo`会导致页面一直缓存无法渲染,所以需要一个判断重新渲染页面时机的变量,此变量可以是`match.url`,因为切换子页面时,父级布局页的`match.url`是不会变动的\r\n\r\n```tsx\r\nexport const AsyncPage: FC&lt;PageProps&gt; = ({ page, loading, ...rest }) =&gt; {\r\n    const { url } = rest.route.match;\r\n    const View = useMemo(\r\n        () =&gt;\r\n            loadable(() =&gt; timeout(pMinDelay(pages[page](), 500), 12000), {\r\n                cacheKey: () =&gt; page.replaceAll(&#039;/&#039;, &#039;-&#039;),\r\n                fallback,\r\n            }),\r\n        [url],\r\n    );\r\n    ...\r\n};\r\n```\r\n\r\n现在试试点击\"增数\"再切换子页面,已经不会再重新渲染父级了\r\n\r\n为了后续的**配置式路由**可以更简便地实现,我们还可以为`AsyncRoute`和`AsyncRoute`添加一个`children`\r\n\r\n```tsx\r\nexport const AsyncPage: FC&lt;PageProps&gt; = ({ page, loading, children, ...rest }) =&gt; {\r\n    return &lt;View {...rest}&gt;{children}&lt;/View&gt;;\r\n};\r\n\r\n\r\nexport const AsyncRoute: FC&lt;RouteProps&gt; = (props) =&gt; {\r\n...\r\n        render={(route) =&gt; (\r\n            &lt;AsyncPage route={route} page={page} loading={loading} {...params}&gt;\r\n                {children}\r\n            &lt;/AsyncPage&gt;\r\n        )}\r\n};\r\n\r\nconst UserIndex: FC = ({ children }) =&gt; {\r\n    ...\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;ul&gt;...&lt;/ul&gt;\r\n            {children}\r\n        &lt;/div&gt;\r\n    );\r\n};\r\nexport default UserIndex;\r\n```\r\n\r\n现在可以在`App.tsx`中添加所有路由配置了\r\n\r\n```tsx\r\n&lt;Switch&gt;\r\n    &lt;AsyncRoute page=&quot;Home&quot; path=&quot;/&quot; exact /&gt;\r\n    &lt;AsyncRoute page=&quot;About&quot; path=&quot;/about&quot; /&gt;\r\n    &lt;AsyncRoute page=&quot;users/Index&quot; path=&quot;/users&quot;&gt;\r\n        &lt;Switch&gt;\r\n            &lt;AsyncRoute path=&quot;/users&quot; page=&quot;users/List&quot; exact /&gt;\r\n            &lt;AsyncRoute path=&quot;/users/:username&quot; page=&quot;users/Detail&quot; /&gt;\r\n        &lt;/Switch&gt;\r\n    &lt;/AsyncRoute&gt;\r\n    &lt;Redirect path=&quot;/test&quot; to=&quot;/&quot; /&gt;\r\n&lt;/Switch&gt;\r\n```\r\n\r\n## 可用API\r\n\r\n这部分介绍一些常用的[react router][]的API\r\n\r\n> 因为本教程是Typescript编码,所以不必把所有的API参数和属性列出来,大家可以点开类型文件自己查看\r\n\r\n###  Hooks及函数\r\n\r\n#### 修改render\r\n\r\n有了`Hooks`之后不必要再往`render`里的组件传递`route`参数\r\n\r\n```tsx\r\n// src/components/Router/types.ts\r\nexport type PageProps&lt;\r\n    // 传递给Page的额外参数\r\n    T extends Record&lt;string, any&gt; = Record&lt;string, any&gt;,\r\n&gt; = PageOptions &amp; T;\r\nexport const AsyncPage: FC&lt;PageProps&gt; = ({ page, loading, children, ...rest }) =&gt; {\r\n    const { url } = useRouteMatch();\r\n    ...\r\n};\r\n\r\n// src/components/Router/view.tsx\r\nexport const AsyncRoute: FC&lt;RouteProps&gt; = (props) =&gt; {\r\n    const { page, loading, params = {}, children, ...rest } = props;\r\n    ...\r\n                &lt;AsyncPage page={page} loading={loading} {...params}&gt;\r\n                    {children}\r\n                &lt;/AsyncPage&gt;\r\n};\r\n```\r\n\r\n#### useHistory\r\n\r\n用于编程化导航,比如`history.push(\"/home\");`\r\n\r\n#### useLocation\r\n\r\n获取当前URL的`location`对象,比如` location.pathname`\r\n\r\n#### useRouteMatch\r\n\r\n通过`path`参数与某个`Route`的`path`匹配,如果不传入参数,则与当前导航到的`Route`匹配,匹配后即可获取其被导航后的信息,比如`match.url`\r\n\r\n#### matchPath\r\n\r\n在组件渲染的生命周期之前获取`match`对象,其结果与渲染后使用`useRouteMatch`一样,用法如下\r\n\r\n```typescript\r\nmatchPath(&quot;/users/2&quot;, {\r\n  path: &quot;/users/:id&quot;,\r\n  exact: true,\r\n  strict: true\r\n});\r\n// 结果\r\n//  {\r\n//    isExact: true\r\n//    params: {\r\n//        id: &quot;2&quot;\r\n//    }\r\n//    path: &quot;/users/:id&quot;\r\n//    url: &quot;/users/2&quot;\r\n//  }\r\n```\r\n\r\n### 组件\r\n\r\n- `Router`: 底层路由构建器\r\n- `BrowserRouter`: html5 history api路由构建器\r\n- `HashRouter`: hash路由构建器\r\n- `MemoryRouter`: 不把URL写入浏览器地址栏而把历史记录保存在内存中的路由构建器,适用于测试或[react native][]等\r\n- `Switch`: 在路由列表中只渲染第一个与当前地址匹配的路由\r\n- `Route`: 定义路由,参数包含`path`(可以是个数组,对应多个地址),`extra`(精确匹配),`render`/`component`等\r\n- `Redirect`: 跳转路由,部分参数与`Route`一样\r\n- `Link`: 通过组件模式导航路由\r\n- `NavLink`: 比`Link`多了个可以为当前链接激活时添加的CSS类\r\n- `Prompt`: 在用户离开页面之前跳出\"是否离开\"提示\r\n\r\n## 其它知识\r\n\r\n以下知识后续教程会讲解\r\n\r\n- 配置式路由\r\n- 认证和权限路由\r\n- 基于`context`的独立路由组件\r\n- 路由切换时的转场动画\r\n\r\n以下知识自行查看官网示例\r\n\r\n- query: 通过`Link`组件中的`query`参数可指定`query`,如要获取`query`看[这里][https://reactrouter.com/web/example/query-parameters]\r\n- 弹出框: 想要点击一个路由可弹出一个modal,看[这里][https://reactrouter.com/web/example/modal-gallery]\r\n\r\n', 48, 'https://jikexingkong.com/docs/react/react-router%e6%9e%84%e5%bb%ba%e8%b7%af%e7%94%b1/', 3, 'docs', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(63, 1, '2021-10-29 14:29:34', '2021-10-29 06:29:34', '继续上一讲的路由知识,这一集我们构建一个类似<a href=\"https://next.router.vuejs.org/zh/index.html\" title=\"vue-router\">vue-router</a>,<a href=\"https://umijs.org/zh-CN/docs\" title=\"umi\">umi</a>那样的配置式路由组件.仿照一个<a href=\"https://angular.cn/\" title=\"angular\">angular</a>文档中的<a class=\"wp-editor-md-post-content-link\" href=\"https://angular.cn/generated/live-examples/toh-pt6/stackblitz.html\">英雄之旅</a>编写一个类似的应用\n\n<h2>手动路由</h2>\n\n建立一些演示数据和页面\n\n<pre><code class=\"language-shell line-numbers\">├── data\n│   ├── heros.ts\n│   ├── index.ts\n│   └── types.ts\n├── pages\n│   ├── auth\n│   │   └── login.tsx\n│   ├── errors\n│   │   └── 404.tsx\n│   └── heros\n│       ├── components\n│       ├── dashboard.tsx\n│       ├── detail.tsx\n│       ├── layout.tsx\n│       ├── list.tsx\n│       └── style.css\n</code></pre>\n\n其中<code>layout.tsx</code>为布局页面,<code>&lt;Nav /&gt;</code>组件用于导航的连接\n\n<pre><code class=\"language-tsx line-numbers\">// src/pages/heros/components/Nav.tsx\nconst Nav: FC = () =&gt; {\n    return (\n        &lt;nav className=\"text-center flex-none\"&gt;\n            &lt;Link to=\"/\"&gt;Dashboard&lt;/Link&gt;\n            &lt;Link to=\"/list\"&gt;Heroes&lt;/Link&gt;\n        &lt;/nav&gt;\n    );\n};\n// src/pages/heros/layout.tsx\nconst MasterLayout: FC = ({ children }) =&gt; {\n    const {\n        config: { title },\n    } = useConfig();\n    return (\n        &lt;&gt;\n            &lt;h1 className=\"text-center\"&gt;{title}&lt;/h1&gt;\n            &lt;Nav /&gt;\n            &lt;div className=\"w-2/3 mx-auto\"&gt;{children}&lt;/div&gt;\n        &lt;/&gt;\n    );\n};\n</code></pre>\n\n其它的页面自行查看代码,它们的作用如下\n\n<ul>\n<li><code>dashboard</code>: 首页,用于展示一部分\"英雄名称\"</li>\n<li><code>list</code>: 英雄列表,用于展示所有英雄</li>\n<li><code>detail</code>: 英雄资料,用于显示单个英雄的详细资料</li>\n</ul>\n\n数据暂时直接采用内部读取的硬数据\n\n<pre><code class=\"language-typescript line-numbers\">// src/data\nconst heroes: Hero[] = [\n   ...\n];\nexport const getHeros: () =&gt; Hero[] = () =&gt; heroes;\nexport const getHero: (id: number) =&gt; Hero | undefined = (id) =&gt; heroes.find((h) =&gt; h.id === id);\n</code></pre>\n\n先采用上一集的手动方式来配置路由\n\n<pre><code class=\"language-tsx line-numbers\">// src/App.tsx\n    &lt;Configure config={{ title: \'英雄联盟\' }}&gt;\n            &lt;Router history={historyCreator}&gt;\n                &lt;div className=\"flex-auto\"&gt;\n                    &lt;Switch&gt;\n                        &lt;AsyncRoute page=\"heros/layout\" path={[\'/\', \'/list\', \'/detail/:id\']} exact&gt;\n                            &lt;Switch&gt;\n                                &lt;AsyncRoute path=\"/\" page=\"heros/dashboard\" exact /&gt;\n                                &lt;AsyncRoute path=\"/list\" page=\"heros/list\" /&gt;\n                                &lt;AsyncRoute path=\"/detail/:id\" page=\"heros/detail\" /&gt;\n                            &lt;/Switch&gt;\n                        &lt;/AsyncRoute&gt;\n                        &lt;AsyncRoute page=\"auth/login\" path=\"/login\" /&gt;\n                        &lt;AsyncRoute page=\"errors/404\" path=\"*\" /&gt;\n                    &lt;/Switch&gt;\n                &lt;/div&gt;\n                &lt;footer className=\"flex-none\"&gt;footer&lt;/footer&gt;\n            &lt;/Router&gt;\n        &lt;/Configure&gt;\n</code></pre>\n\n<h2>自动路由</h2>\n\n接下来修改上一集的路由组件,以保证可以通过配置的方式来自动生成路由\n\n<h3>配置接口</h3>\n\n<ul>\n<li><code>RouteConfig</code>类型的配置由用户传入</li>\n<li>通过<code>generatePaths</code>函数处理后生成<code>RouterContextProps</code>类型的准确路径的路由配置</li>\n</ul>\n\n<pre><code class=\"language-typescript line-numbers\">// generatePaths处理后的准确路由\nexport type IRoute&lt;P extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt; = Omit&lt;\n    BaseRouterProps,\n    \'children\' | \'component\' | \'render\' | \'path\'\n&gt; &amp; {\n    // 页面可以是一个组件或者字符串,如果是字符串则异步加载pages目录下的页面\n    page?: FC&lt;P&gt; | string;\n    ...\n};\n// 跳转路由配置项\nexport interface RedirectOption extends LocationDescriptorObject {\n    from?: string;\n}\n// 路由配置项\nexport type RouteOption&lt;P extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt; = Omit&lt;\n    IRoute&lt;P&gt;,\n    \'path\' | \'redirect\' | \'children\'\n&gt; &amp; {\n    path?: string;\n    redirect?: string | RedirectOption;\n    children?: RouteOption&lt;P&gt;[];\n};\n// 路由配置\nexport interface RouteConfig {\n    basePath?: string; // 基础url路径\n    hash?: boolean; // 是否hash\n    routes?: RouteOptions[]; // 路由列表\n}\n// generatePaths处理后的最终路由配置\nexport interface RouterContextProps {\n    basePath: string;\n    routes: IRoute[];\n}\n</code></pre>\n\n<h3>函数解析</h3>\n\n<h4>formatPath</h4>\n\n用于格式化路径,实现了以下规则\n\n<ul>\n<li>一个页面的路由路径等于其{父路由路径}/{当前路由路径},比如布局下的子路由</li>\n<li>如果没有父路由则为配置中的{basePath}/{当前路由路径}</li>\n<li>如果路由的路径以\"*\"开头并且是顶级路由,比如404页面,则直接返回当前路径</li>\n</ul>\n\n<h4>generatePaths</h4>\n\n使用<code>formatPath</code>递归处理路由的路径以及跳转路由的<code>from</code>和<code>to.pathname</code>,最终生成<code>IRoute</code>类型的路由数组\n\n<blockquote>\n  无论配置中传入的<code>redirect</code>配置是字符串还是对象,最终会生成一个带<code>from</code>的用于<code>Redirect</code>组件的<code>RedirectOption</code>类型对象\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">function generatePaths(routes: RouteOption[], basePath: string, parentPath?: string): IRoute[] {\n    return (routes.filter((route) =&gt; route.path !== undefined) as IRoute[]).map((route) =&gt; {\n        ...\n        return item;\n    });\n}\n</code></pre>\n\n<h4>getLayoutPaths</h4>\n\n在生成路由组件时,把布局路由(有children选项的路由)下的子路由的路径提取出来合并到布局路由中\n\n<blockquote>\n  通过<code>includes</code>函数自动剔除已包含的路由\n</blockquote>\n\n比如\n\n<pre><code class=\"language-typescript line-numbers\"> {\n            path: \'/heros\',\n            page: \'heros/layout\',\n            children: [\n                {\n                    exact: true,\n                    path: \'\',\n                    page: \'heros/dashboard\',\n                },\n                {\n                    path: \'list\',\n                    page: \'heros/list\',\n                },\n                {\n                    path: \'detail/:id\',\n                    page: \'heros/detail\',\n                },\n            ],\n}\n</code></pre>\n\n会生成<code>[\'/heros\',\'/heros/list\',\'/heros/detail/:id\']</code>作为<code>/heros/layout</code>的路由路径\n\n原因在于动态配置的异步加载页面是无法预知其内部的路由的,所以把所有访问其子组件的URL先定位到父路由然后才能定位到其子路由\n\n<h4>getRoute</h4>\n\n生成页面路由和跳转路由组件\n\n<ul>\n<li>跳转路由: 用于生成<code>Redirect</code>组件路由</li>\n<li>页面路由: 页面路由如果<code>page</code>是字符串则使用<code>AsyncPage</code>加载异步页面,如果有子路由则使用<code>getRoutes</code>嵌套</li>\n<li>空路由: 如果没有<code>redirect</code>与<code>page</code>字段,那么如果有<code>children</code>,且<code>children</code>不是空数组则此路由只是用于路径拼接,直接提取其下的子路由列表,否则就是空路由</li>\n</ul>\n\n<pre><code class=\"language-tsx line-numbers\">function getRoute(route: IRoute) {\n    const { page: Page, redirect, loading, children, params, ...rest } = route;\n    const isLayout = (children ?? []).length &gt; 0;\n    if (redirect) {...}\n    if (Page) {\n        return (\n            &lt;Route\n                {...rest}\n                key={uuidv4()}\n                path={isLayout ? getLayoutPaths(route) : route.path}\n                render={() =&gt;\n                    typeof Page === \'string\' ? (\n                        &lt;AsyncPage page={Page} {...params}&gt;\n                            {getRoutes(children ?? [])}\n                        &lt;/AsyncPage&gt;\n                    ) : (\n                        &lt;Page {...params}&gt;{getRoutes(children ?? [])}&lt;/Page&gt;\n                    )\n                }\n            /&gt;\n        );\n    }\n    return isLayout ? getRoutes(children ?? [], false) : null;\n}\n</code></pre>\n\n<h4>getRoutes</h4>\n\n循环递归路由列表,并通过<code>getRoute</code>生成最终路由组件列表\n\n<h3>Hooks</h3>\n\n<h4>useRouteHistory</h4>\n\n为默认的<code>useHistory</code>生成的<code>history</code>对象的<code>push</code>,<code>replace</code>,<code>createHref</code>方法的<code>pathname</code>参数添加上<code>basePath</code>\n\n<pre><code class=\"language-typescript line-numbers\">export const useRouteHistory = &lt;S = LocationState&gt;() =&gt; {\n    const { basePath } = useRouter();\n    const history = useHistory&lt;S&gt;();\n    const push = useCallback(\n        (location: LocationDescriptor&lt;S&gt;, state?: S) =&gt;\n            history.push(getHistoryOption(basePath, location, state)),\n        [basePath, history],\n    );\n    ...\n    return { ...history, push, replace, createHref };\n};\n</code></pre>\n\n<h4>useRouter</h4>\n\n获取<code>generatePaths</code>处理后的路由配置\n\n<h3>路由组件</h3>\n\n<h4>RouteLink与RouteNavLink</h4>\n\n对<code>to</code>参数使用<code>formatPath</code>函数处理,为<code>to.pathname</code>添加上<code>basePath</code>前缀\n\n<h4>Router</h4>\n\n根据传入的路由配置生成最终的路由组件列表\n\n<h4>AsyncPage</h4>\n\n现在的路由组件列表已经是动态生成,所以原来<code>useMemo</code>中的<code>url</code>依赖需要去除才能保证页面不会被重复渲染\n\n<pre><code class=\"language-tsx line-numbers\">export const AsyncPage = ({ page, loading, children, ...rest }: PageProps) =&gt; {\n    const fallback = useMemo(() =&gt; loading ?? &lt;Loading /&gt;, []);\n    const View = useMemo(\n        () =&gt;\n            loadable(() =&gt; timeout(pMinDelay(pages[page](), 500), 12000), {\n                cacheKey: () =&gt; page.replaceAll(\'/\', \'-\'),\n                fallback,\n            }),\n        [],\n    );\n    return &lt;View {...rest}&gt;{children}&lt;/View&gt;;\n};\n</code></pre>\n\n<h2>路由配置</h2>\n\n修改原来页面中的<code>Link</code>为<code>RouteLink</code>,并为需要编程式导航的按钮添加上通过<code>useRouteHistory()</code>获取的<code>history</code>的<code>push</code>,最后添加测试配置\n\n<pre><code class=\"language-typescript line-numbers\">import { RouteConfig } from \'../components/Router\';\nimport List from \'../pages/heros/list\';\n\nexport const router: RouteConfig = {\n    routes: [\n        {\n            path: \'/\',\n            exact: true,\n            page: \'home\',\n        },\n        {\n            path: \'/heros\',\n            page: \'heros/layout\',\n            children: [\n                {\n                    exact: true,\n                    path: \'\',\n                    page: \'heros/dashboard\',\n                },\n                {\n                    path: \'list\',\n                    // 测试组件路由\n                    page: List,\n                },\n                {\n                    path: \'detail/:id\',\n                    page: \'heros/detail\',\n                },\n            ],\n        },\n        {\n            path: \'/redirect\',\n            redirect: \'/\',\n        },\n        {\n            path: \'/login\',\n            page: \'auth/login\',\n        },\n        {\n            path: \'*\',\n            page: \'errors/404\',\n        },\n    ],\n};\n\n</code></pre>', '配置式路由实现', '', 'publish', 'open', 'closed', '', 'router-configure', '', '', '2021-11-10 05:24:12', '2021-11-09 21:24:12', '[vue-router]: https://next.router.vuejs.org/zh/index.html \"vue-router\"\r\n[umi]: 	https://umijs.org/zh-CN/docs \"umi\"\r\n[angular]: 	https://angular.cn/ \"angular\"\r\n\r\n继续上一讲的路由知识,这一集我们构建一个类似[vue-router][],[umi][]那样的配置式路由组件.仿照一个[angular][]文档中的[英雄之旅](https://angular.cn/generated/live-examples/toh-pt6/stackblitz.html)编写一个类似的应用\r\n\r\n## 手动路由\r\n\r\n建立一些演示数据和页面\r\n\r\n```shell\r\n├── data\r\n│   ├── heros.ts\r\n│   ├── index.ts\r\n│   └── types.ts\r\n├── pages\r\n│   ├── auth\r\n│   │   └── login.tsx\r\n│   ├── errors\r\n│   │   └── 404.tsx\r\n│   └── heros\r\n│       ├── components\r\n│       ├── dashboard.tsx\r\n│       ├── detail.tsx\r\n│       ├── layout.tsx\r\n│       ├── list.tsx\r\n│       └── style.css\r\n```\r\n\r\n其中`layout.tsx`为布局页面,` <Nav />`组件用于导航的连接\r\n\r\n```tsx\r\n// src/pages/heros/components/Nav.tsx\r\nconst Nav: FC = () =&gt; {\r\n    return (\r\n        &lt;nav className=&quot;text-center flex-none&quot;&gt;\r\n            &lt;Link to=&quot;/&quot;&gt;Dashboard&lt;/Link&gt;\r\n            &lt;Link to=&quot;/list&quot;&gt;Heroes&lt;/Link&gt;\r\n        &lt;/nav&gt;\r\n    );\r\n};\r\n// src/pages/heros/layout.tsx\r\nconst MasterLayout: FC = ({ children }) =&gt; {\r\n    const {\r\n        config: { title },\r\n    } = useConfig();\r\n    return (\r\n        &lt;&gt;\r\n            &lt;h1 className=&quot;text-center&quot;&gt;{title}&lt;/h1&gt;\r\n            &lt;Nav /&gt;\r\n            &lt;div className=&quot;w-2/3 mx-auto&quot;&gt;{children}&lt;/div&gt;\r\n        &lt;/&gt;\r\n    );\r\n};\r\n```\r\n\r\n其它的页面自行查看代码,它们的作用如下\r\n\r\n- `dashboard`: 首页,用于展示一部分\"英雄名称\"\r\n- `list`: 英雄列表,用于展示所有英雄\r\n- `detail`: 英雄资料,用于显示单个英雄的详细资料\r\n\r\n数据暂时直接采用内部读取的硬数据\r\n\r\n```typescript\r\n// src/data\r\nconst heroes: Hero[] = [\r\n   ...\r\n];\r\nexport const getHeros: () =&gt; Hero[] = () =&gt; heroes;\r\nexport const getHero: (id: number) =&gt; Hero | undefined = (id) =&gt; heroes.find((h) =&gt; h.id === id);\r\n```\r\n\r\n先采用上一集的手动方式来配置路由\r\n\r\n```tsx\r\n// src/App.tsx\r\n    &lt;Configure config={{ title: &#039;英雄联盟&#039; }}&gt;\r\n            &lt;Router history={historyCreator}&gt;\r\n                &lt;div className=&quot;flex-auto&quot;&gt;\r\n                    &lt;Switch&gt;\r\n                        &lt;AsyncRoute page=&quot;heros/layout&quot; path={[&#039;/&#039;, &#039;/list&#039;, &#039;/detail/:id&#039;]} exact&gt;\r\n                            &lt;Switch&gt;\r\n                                &lt;AsyncRoute path=&quot;/&quot; page=&quot;heros/dashboard&quot; exact /&gt;\r\n                                &lt;AsyncRoute path=&quot;/list&quot; page=&quot;heros/list&quot; /&gt;\r\n                                &lt;AsyncRoute path=&quot;/detail/:id&quot; page=&quot;heros/detail&quot; /&gt;\r\n                            &lt;/Switch&gt;\r\n                        &lt;/AsyncRoute&gt;\r\n                        &lt;AsyncRoute page=&quot;auth/login&quot; path=&quot;/login&quot; /&gt;\r\n                        &lt;AsyncRoute page=&quot;errors/404&quot; path=&quot;*&quot; /&gt;\r\n                    &lt;/Switch&gt;\r\n                &lt;/div&gt;\r\n                &lt;footer className=&quot;flex-none&quot;&gt;footer&lt;/footer&gt;\r\n            &lt;/Router&gt;\r\n        &lt;/Configure&gt;\r\n```\r\n\r\n## 自动路由\r\n\r\n接下来修改上一集的路由组件,以保证可以通过配置的方式来自动生成路由\r\n\r\n### 配置接口\r\n\r\n- `RouteConfig`类型的配置由用户传入\r\n- 通过`generatePaths`函数处理后生成`RouterContextProps`类型的准确路径的路由配置\r\n\r\n```typescript\r\n// generatePaths处理后的准确路由\r\nexport type IRoute&lt;P extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt; = Omit&lt;\r\n    BaseRouterProps,\r\n    &#039;children&#039; | &#039;component&#039; | &#039;render&#039; | &#039;path&#039;\r\n&gt; &amp; {\r\n    // 页面可以是一个组件或者字符串,如果是字符串则异步加载pages目录下的页面\r\n    page?: FC&lt;P&gt; | string;\r\n    ...\r\n};\r\n// 跳转路由配置项\r\nexport interface RedirectOption extends LocationDescriptorObject {\r\n    from?: string;\r\n}\r\n// 路由配置项\r\nexport type RouteOption&lt;P extends Record&lt;string, any&gt; = Record&lt;string, any&gt;&gt; = Omit&lt;\r\n    IRoute&lt;P&gt;,\r\n    &#039;path&#039; | &#039;redirect&#039; | &#039;children&#039;\r\n&gt; &amp; {\r\n    path?: string;\r\n    redirect?: string | RedirectOption;\r\n    children?: RouteOption&lt;P&gt;[];\r\n};\r\n// 路由配置\r\nexport interface RouteConfig {\r\n    basePath?: string; // 基础url路径\r\n    hash?: boolean; // 是否hash\r\n    routes?: RouteOptions[]; // 路由列表\r\n}\r\n// generatePaths处理后的最终路由配置\r\nexport interface RouterContextProps {\r\n    basePath: string;\r\n    routes: IRoute[];\r\n}\r\n```\r\n\r\n### 函数解析\r\n\r\n#### formatPath\r\n\r\n用于格式化路径,实现了以下规则\r\n\r\n- 一个页面的路由路径等于其{父路由路径}/{当前路由路径},比如布局下的子路由\r\n- 如果没有父路由则为配置中的{basePath}/{当前路由路径}\r\n- 如果路由的路径以\"*\"开头并且是顶级路由,比如404页面,则直接返回当前路径\r\n\r\n#### generatePaths\r\n\r\n使用`formatPath`递归处理路由的路径以及跳转路由的`from`和`to.pathname`,最终生成`IRoute`类型的路由数组\r\n\r\n> 无论配置中传入的`redirect`配置是字符串还是对象,最终会生成一个带`from`的用于`Redirect`组件的`RedirectOption`类型对象\r\n\r\n```typescript\r\nfunction generatePaths(routes: RouteOption[], basePath: string, parentPath?: string): IRoute[] {\r\n    return (routes.filter((route) =&gt; route.path !== undefined) as IRoute[]).map((route) =&gt; {\r\n        ...\r\n        return item;\r\n    });\r\n}\r\n```\r\n\r\n#### getLayoutPaths\r\n\r\n在生成路由组件时,把布局路由(有children选项的路由)下的子路由的路径提取出来合并到布局路由中\r\n\r\n> 通过`includes`函数自动剔除已包含的路由\r\n\r\n比如\r\n\r\n```typescript\r\n {\r\n            path: &#039;/heros&#039;,\r\n            page: &#039;heros/layout&#039;,\r\n            children: [\r\n                {\r\n                    exact: true,\r\n                    path: &#039;&#039;,\r\n                    page: &#039;heros/dashboard&#039;,\r\n                },\r\n                {\r\n                    path: &#039;list&#039;,\r\n                    page: &#039;heros/list&#039;,\r\n                },\r\n                {\r\n                    path: &#039;detail/:id&#039;,\r\n                    page: &#039;heros/detail&#039;,\r\n                },\r\n            ],\r\n}\r\n```\r\n\r\n会生成`[\'/heros\',\'/heros/list\',\'/heros/detail/:id\']`作为`/heros/layout`的路由路径\r\n\r\n原因在于动态配置的异步加载页面是无法预知其内部的路由的,所以把所有访问其子组件的URL先定位到父路由然后才能定位到其子路由\r\n\r\n#### getRoute\r\n\r\n生成页面路由和跳转路由组件\r\n\r\n- 跳转路由: 用于生成`Redirect`组件路由\r\n- 页面路由: 页面路由如果`page`是字符串则使用`AsyncPage`加载异步页面,如果有子路由则使用`getRoutes`嵌套\r\n- 空路由: 如果没有`redirect`与`page`字段,那么如果有`children`,且`children`不是空数组则此路由只是用于路径拼接,直接提取其下的子路由列表,否则就是空路由\r\n\r\n```tsx\r\nfunction getRoute(route: IRoute) {\r\n    const { page: Page, redirect, loading, children, params, ...rest } = route;\r\n    const isLayout = (children ?? []).length &gt; 0;\r\n    if (redirect) {...}\r\n    if (Page) {\r\n        return (\r\n            &lt;Route\r\n                {...rest}\r\n                key={uuidv4()}\r\n                path={isLayout ? getLayoutPaths(route) : route.path}\r\n                render={() =&gt;\r\n                    typeof Page === &#039;string&#039; ? (\r\n                        &lt;AsyncPage page={Page} {...params}&gt;\r\n                            {getRoutes(children ?? [])}\r\n                        &lt;/AsyncPage&gt;\r\n                    ) : (\r\n                        &lt;Page {...params}&gt;{getRoutes(children ?? [])}&lt;/Page&gt;\r\n                    )\r\n                }\r\n            /&gt;\r\n        );\r\n    }\r\n    return isLayout ? getRoutes(children ?? [], false) : null;\r\n}\r\n```\r\n\r\n#### getRoutes\r\n\r\n循环递归路由列表,并通过`getRoute`生成最终路由组件列表\r\n\r\n### Hooks\r\n\r\n#### useRouteHistory\r\n\r\n为默认的`useHistory`生成的`history`对象的`push`,`replace`,`createHref`方法的`pathname`参数添加上`basePath`\r\n\r\n```typescript\r\nexport const useRouteHistory = &lt;S = LocationState&gt;() =&gt; {\r\n    const { basePath } = useRouter();\r\n    const history = useHistory&lt;S&gt;();\r\n    const push = useCallback(\r\n        (location: LocationDescriptor&lt;S&gt;, state?: S) =&gt;\r\n            history.push(getHistoryOption(basePath, location, state)),\r\n        [basePath, history],\r\n    );\r\n    ...\r\n    return { ...history, push, replace, createHref };\r\n};\r\n```\r\n\r\n#### useRouter\r\n\r\n获取`generatePaths`处理后的路由配置\r\n\r\n### 路由组件\r\n\r\n#### RouteLink与RouteNavLink\r\n\r\n对`to`参数使用`formatPath`函数处理,为`to.pathname`添加上`basePath`前缀\r\n\r\n#### Router\r\n\r\n根据传入的路由配置生成最终的路由组件列表\r\n\r\n#### AsyncPage\r\n\r\n现在的路由组件列表已经是动态生成,所以原来`useMemo`中的`url`依赖需要去除才能保证页面不会被重复渲染\r\n\r\n```tsx\r\nexport const AsyncPage = ({ page, loading, children, ...rest }: PageProps) =&gt; {\r\n    const fallback = useMemo(() =&gt; loading ?? &lt;Loading /&gt;, []);\r\n    const View = useMemo(\r\n        () =&gt;\r\n            loadable(() =&gt; timeout(pMinDelay(pages[page](), 500), 12000), {\r\n                cacheKey: () =&gt; page.replaceAll(&#039;/&#039;, &#039;-&#039;),\r\n                fallback,\r\n            }),\r\n        [],\r\n    );\r\n    return &lt;View {...rest}&gt;{children}&lt;/View&gt;;\r\n};\r\n```\r\n\r\n## 路由配置\r\n\r\n修改原来页面中的`Link`为`RouteLink`,并为需要编程式导航的按钮添加上通过`useRouteHistory()`获取的`history`的`push`,最后添加测试配置\r\n\r\n```typescript\r\nimport { RouteConfig } from &#039;../components/Router&#039;;\r\nimport List from &#039;../pages/heros/list&#039;;\r\n\r\nexport const router: RouteConfig = {\r\n    routes: [\r\n        {\r\n            path: &#039;/&#039;,\r\n            exact: true,\r\n            page: &#039;home&#039;,\r\n        },\r\n        {\r\n            path: &#039;/heros&#039;,\r\n            page: &#039;heros/layout&#039;,\r\n            children: [\r\n                {\r\n                    exact: true,\r\n                    path: &#039;&#039;,\r\n                    page: &#039;heros/dashboard&#039;,\r\n                },\r\n                {\r\n                    path: &#039;list&#039;,\r\n                    // 测试组件路由\r\n                    page: List,\r\n                },\r\n                {\r\n                    path: &#039;detail/:id&#039;,\r\n                    page: &#039;heros/detail&#039;,\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            path: &#039;/redirect&#039;,\r\n            redirect: &#039;/&#039;,\r\n        },\r\n        {\r\n            path: &#039;/login&#039;,\r\n            page: &#039;auth/login&#039;,\r\n        },\r\n        {\r\n            path: &#039;*&#039;,\r\n            page: &#039;errors/404&#039;,\r\n        },\r\n    ],\r\n};\r\n\r\n```', 48, 'https://jikexingkong.com/docs/react/%e9%85%8d%e7%bd%ae%e5%bc%8f%e8%b7%af%e7%94%b1%e5%ae%9e%e7%8e%b0/', 4, 'docs', '', 0),
(64, 1, '2021-10-29 14:40:31', '2021-10-29 06:40:31', '[scode type=\"share\"]本教程为《Nestjs实战》系列教程的第一季 [/scode]\n\n[scode type=\"yellow\"]注意: 学习本教程前请先学会TS和ES6基础以及基本的开发环境配置 [/scode]\n\n[scode type=\"lblue\"]不会基础ES6和TS基础知识的朋友请先查询<a class=\"wp-editor-md-post-content-link\" href=\"https://ts.xcatliu.com/\">《Typescript入门教程》</a>[/scode]\n\n[scode type=\"lblue\"]不会配置开发环境的朋友请先学习教程<a class=\"wp-editor-md-post-content-link\" href=\"https://jikexingkong.com/series/nestplus\">《无懈可击的*nix编码环境》</a>[/scode]\n\n<h3>✍️目标学者</h3>\n\n本教程适合以下几类童鞋学习\n\n<ul>\n<li>👉 学了TS和ES6,想先从Node.js入手后端再学前端的小白</li>\n<li>👉 跟我一样三级没过看不懂各种英文文档,需要谷歌翻译加持,却想加快学习进度的土鳖</li>\n<li>👉 职业前端转全栈,想用Node做个后端学习的跳板,后面可以继续学习go等</li>\n<li>👉 PHPer(大家都懂得原因),学习一下node顺带学习ts和前端可以获得更多的求职及跳槽的资本</li>\n<li>👉 Javaer,跟PHP相反的是Java招的人多,但是学的人更多,多学一门技术抵消部分竞争力</li>\n<li>👉 Gopher,想学习一下传统的企业级框架拓展知识面</li>\n<li>👉 企业技术栈转型急需</li>\n<li>😜吃饱撑得没事做的码农...</li>\n</ul>\n\n<h2>👀教程内容</h2>\n\n本教程分为五个篇章由浅入深的讲解Nestjs应用的开发.教程中通过循序渐进的方式全方位的讲解Nestjs框架的应用开发和魔改Hack,使大家能快速,高效的掌握Nestjs并且加深对TS和node.js的熟练度.\n[tabs]\n[tab name=🚲第一季:最佳实践 active]\n\n本篇以掌握Nestjs框架的基本开发原理和流程为目标,旨在掌握框架本身自带的基本功能,来实现一个带验证,序列化,异常处理等功能的简单CRUD模块\n\n<h4>🌒知识点</h4>\n\n<ul>\n<li>基本掌握Nestjs框架的依赖注入,模块,提供者,生命周期等概念</li>\n<li>掌握DTO数据验证,响应序列化,异常过滤器等常用功能</li>\n<li>学会编写一些常用的class-validator验证约束</li>\n<li>熟练掌握Typeorm以及Nestjs与Typeorm结合开发</li>\n<li>学会整合Swagger输出Open API文档</li>\n</ul>\n\n[/tab]\n\n[tab name=🏍第二季:造轮子]\n\n本篇从更深入的角度去定制化Nestjs,教大家用Nestjs造一个更适合自己习惯的轮子,从而对Node和TS开发整体有一个直观的体验\n\n[scode type=yellow]魔改框架后可以在编写应用时灵活很多,比如写个Dbutil就可以自动配置多数据库,又比如可以通过约定式配置编写嵌套多版本的Restful API,还可以编写自定义命令等[/scode]\n\n<h4>🌒知识点</h4>\n\n<ul>\n<li>掌握TS装饰器以及反射元数据的定义和使用</li>\n<li>编写一些数据库相关的数据验证约束(比如树形表的同级别某字段唯一验证等)</li>\n<li>学会通过继承并魔改Nestjs源码编写自定义的全局验证器</li>\n<li>可以编写自定义的配置系统以及核心功能包</li>\n<li>学会自定义的代码组织方式(比如教程中我把默认的Nestjs应用改成Util+PluginModule模式)</li>\n<li>掌握编写一些常用的Util仓库(比如数据库,Redis,Restful)</li>\n<li>利用Yargs结合魔改后的框架可以编写一些自定义CLI命令(比如数据迁移,数据填充等)</li>\n</ul>\n\n[/tab]\n\n[tab name=🚘第三季:安全]\n\n从这一季开始我们将进一步学习如何构建一个完善的用户和角色的权鉴插件\n\n<h4>🌒知识点</h4>\n\n<ul>\n<li>掌握如何利用阿里云/腾讯云推送邮件和短信</li>\n<li>掌握使用消息列队(MQ)的方式异步推送邮件和短信</li>\n<li>掌握守卫原理以及编写一些用户验证的守卫</li>\n<li>编写一个完善的用户系统(JWT认证,短信/邮件登录,短信/邮件注册,找回密码,绑定手机和邮箱等)</li>\n<li>熟练地通过编写装饰器去实现一些常用的功能(比如一个可直接通过配置一键关闭某个控制器的装饰器又或者通过配置来实现Entity的动态关联,多态多对多,以及资源所属判断等)</li>\n<li>通过WebSockets实现用户的上线,下线以及消息实时推送,消息广播等</li>\n<li>学会使用云存储来上传文件</li>\n<li>实现RBAC的权限系统</li>\n</ul>\n\n[/tab]\n\n[tab name=🚄第四季:杂项与技能]\n\n通过前面的篇章,我们已经熟练地掌握了绝大多数的Nestjs应用开发知识,但是仍然有一些前面教程没涉及到去比较常用的技能和替代方案,在这一季我们就来讲解这些知识\n\n<h4>🌒知识点</h4>\n\n<ul>\n<li>理解请求范围概念以及性能方便的考量</li>\n<li>完善配置系统,实现配置验证以及通过YAML或数据库来进行动态配置</li>\n<li>通过适用Vscode进行Debug以及编写Jest测试来提升开发效率与程序的可用性</li>\n<li>编写一些程序外部的CLI命令(比如使用webpack打包,热更新以及通过stub文件创建util或者plugin等)</li>\n<li>利用NestCURD进行快速开发</li>\n<li>学会Graphql替代Restful写API</li>\n<li>学会Prism.js替代Typeorm进行数据操作</li>\n<li>使用Mongodb替代关系型数据库</li>\n<li>使用HTTP客户端开发爬虫</li>\n<li>微服务应用开发和K8S</li>\n<li>其它的一些常用功能</li>\n<li>掌握一些常用的打包工具,比如通过ncc打包成单文件,通过pack打包成二进制等</li>\n<li>学会一些常用的部署方式,比如通过nginx+pm2反向代理部署,devops自动化CI,CD等</li>\n</ul>\n\n[/tab]\n\n[tab name=✈️第五季:同构与部署]\n\n到目前为止我们讲解的内容一直局限于后端范围.但是TS/Node开发后端最大的优势并不在于生态多完善,性能有多高,而在于前后端同构和faas的完美支持这些软实力,这一篇就带童鞋们开始全栈开发之旅\n\n<h4>🌒知识点</h4>\n\n<ul>\n<li>学会把Util,Plugin以及其它的库抽出来做成单独的Monorepo子包</li>\n<li>学会Lerna.js+yarn+monreopo来组织代码</li>\n<li>掌握使用Vite+React+Nestjs开发中后台</li>\n<li>掌握Next.js+Nestjs开发SSR同构应用</li>\n<li>整合腾讯云Cloudbase+Nestjs开发Faas应用</li>\n<li>整合Nestjs与微信SDK开发微信平台应用</li>\n<li>第三方社会化登录以及统一支付接口开发等</li>\n</ul>\n\n[/tab]\n\n[/tabs]', 'Nestjs最佳实践', '', 'publish', 'closed', 'closed', '', 'nestjs%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5', '', '', '2022-08-16 22:44:08', '2022-08-16 14:44:08', '[scode type=\"share\"]本教程为《Nestjs实战》系列教程的第一季 [/scode]\r\n\r\n[scode type=\"yellow\"]注意: 学习本教程前请先学会TS和ES6基础以及基本的开发环境配置 [/scode]\r\n\r\n[scode type=\"lblue\"]不会基础ES6和TS基础知识的朋友请先查询<a class=\"wp-editor-md-post-content-link\" href=\"https://ts.xcatliu.com/\">《Typescript入门教程》</a>[/scode]\r\n\r\n[scode type=\"lblue\"]不会配置开发环境的朋友请先学习教程<a class=\"wp-editor-md-post-content-link\" href=\"https://jikexingkong.com/series/nestplus\">《无懈可击的*nix编码环境》</a>[/scode]\r\n\r\n<h3>✍️目标学者</h3>\r\n\r\n本教程适合以下几类童鞋学习\r\n\r\n<ul>\r\n<li>👉 学了TS和ES6,想先从Node.js入手后端再学前端的小白</li>\r\n<li>👉 跟我一样三级没过看不懂各种英文文档,需要谷歌翻译加持,却想加快学习进度的土鳖</li>\r\n<li>👉 职业前端转全栈,想用Node做个后端学习的跳板,后面可以继续学习go等</li>\r\n<li>👉 PHPer(大家都懂得原因),学习一下node顺带学习ts和前端可以获得更多的求职及跳槽的资本</li>\r\n<li>👉 Javaer,跟PHP相反的是Java招的人多,但是学的人更多,多学一门技术抵消部分竞争力</li>\r\n<li>👉 Gopher,想学习一下传统的企业级框架拓展知识面</li>\r\n<li>👉 企业技术栈转型急需</li>\r\n<li>😜吃饱撑得没事做的码农...</li>\r\n</ul>\r\n\r\n<h2>👀教程内容</h2>\r\n\r\n本教程分为五个篇章由浅入深的讲解Nestjs应用的开发.教程中通过循序渐进的方式全方位的讲解Nestjs框架的应用开发和魔改Hack,使大家能快速,高效的掌握Nestjs并且加深对TS和node.js的熟练度.\r\n[tabs]\r\n[tab name=🚲第一季:最佳实践 active]\r\n\r\n本篇以掌握Nestjs框架的基本开发原理和流程为目标,旨在掌握框架本身自带的基本功能,来实现一个带验证,序列化,异常处理等功能的简单CRUD模块\r\n\r\n<h4>🌒知识点</h4>\r\n\r\n<ul>\r\n<li>基本掌握Nestjs框架的依赖注入,模块,提供者,生命周期等概念</li>\r\n<li>掌握DTO数据验证,响应序列化,异常过滤器等常用功能</li>\r\n<li>学会编写一些常用的class-validator验证约束</li>\r\n<li>熟练掌握Typeorm以及Nestjs与Typeorm结合开发</li>\r\n<li>学会整合Swagger输出Open API文档</li>\r\n</ul>\r\n\r\n[/tab]\r\n\r\n[tab name=🏍第二季:造轮子]\r\n\r\n本篇从更深入的角度去定制化Nestjs,教大家用Nestjs造一个更适合自己习惯的轮子,从而对Node和TS开发整体有一个直观的体验\r\n\r\n[scode type=yellow]魔改框架后可以在编写应用时灵活很多,比如写个Dbutil就可以自动配置多数据库,又比如可以通过约定式配置编写嵌套多版本的Restful API,还可以编写自定义命令等[/scode]\r\n\r\n<h4>🌒知识点</h4>\r\n\r\n<ul>\r\n<li>掌握TS装饰器以及反射元数据的定义和使用</li>\r\n<li>编写一些数据库相关的数据验证约束(比如树形表的同级别某字段唯一验证等)</li>\r\n<li>学会通过继承并魔改Nestjs源码编写自定义的全局验证器</li>\r\n<li>可以编写自定义的配置系统以及核心功能包</li>\r\n<li>学会自定义的代码组织方式(比如教程中我把默认的Nestjs应用改成Util+PluginModule模式)</li>\r\n<li>掌握编写一些常用的Util仓库(比如数据库,Redis,Restful)</li>\r\n<li>利用Yargs结合魔改后的框架可以编写一些自定义CLI命令(比如数据迁移,数据填充等)</li>\r\n</ul>\r\n\r\n[/tab]\r\n\r\n[tab name=🚘第三季:安全]\r\n\r\n从这一季开始我们将进一步学习如何构建一个完善的用户和角色的权鉴插件\r\n\r\n<h4>🌒知识点</h4>\r\n\r\n<ul>\r\n<li>掌握如何利用阿里云/腾讯云推送邮件和短信</li>\r\n<li>掌握使用消息列队(MQ)的方式异步推送邮件和短信</li>\r\n<li>掌握守卫原理以及编写一些用户验证的守卫</li>\r\n<li>编写一个完善的用户系统(JWT认证,短信/邮件登录,短信/邮件注册,找回密码,绑定手机和邮箱等)</li>\r\n<li>熟练地通过编写装饰器去实现一些常用的功能(比如一个可直接通过配置一键关闭某个控制器的装饰器又或者通过配置来实现Entity的动态关联,多态多对多,以及资源所属判断等)</li>\r\n<li>通过WebSockets实现用户的上线,下线以及消息实时推送,消息广播等</li>\r\n<li>学会使用云存储来上传文件</li>\r\n<li>实现RBAC的权限系统</li>\r\n</ul>\r\n\r\n[/tab]\r\n\r\n[tab name=🚄第四季:杂项与技能]\r\n\r\n通过前面的篇章,我们已经熟练地掌握了绝大多数的Nestjs应用开发知识,但是仍然有一些前面教程没涉及到去比较常用的技能和替代方案,在这一季我们就来讲解这些知识\r\n\r\n<h4>🌒知识点</h4>\r\n\r\n<ul>\r\n<li>理解请求范围概念以及性能方便的考量</li>\r\n<li>完善配置系统,实现配置验证以及通过YAML或数据库来进行动态配置</li>\r\n<li>通过适用Vscode进行Debug以及编写Jest测试来提升开发效率与程序的可用性</li>\r\n<li>编写一些程序外部的CLI命令(比如使用webpack打包,热更新以及通过stub文件创建util或者plugin等)</li>\r\n<li>利用NestCURD进行快速开发</li>\r\n<li>学会Graphql替代Restful写API</li>\r\n<li>学会Prism.js替代Typeorm进行数据操作</li>\r\n<li>使用Mongodb替代关系型数据库</li>\r\n<li>使用HTTP客户端开发爬虫</li>\r\n<li>微服务应用开发和K8S</li>\r\n<li>其它的一些常用功能</li>\r\n<li>掌握一些常用的打包工具,比如通过ncc打包成单文件,通过pack打包成二进制等</li>\r\n<li>学会一些常用的部署方式,比如通过nginx+pm2反向代理部署,devops自动化CI,CD等</li>\r\n</ul>\r\n\r\n[/tab]\r\n\r\n[tab name=✈️第五季:同构与部署]\r\n\r\n到目前为止我们讲解的内容一直局限于后端范围.但是TS/Node开发后端最大的优势并不在于生态多完善,性能有多高,而在于前后端同构和faas的完美支持这些软实力,这一篇就带童鞋们开始全栈开发之旅\r\n\r\n<h4>🌒知识点</h4>\r\n\r\n<ul>\r\n<li>学会把Util,Plugin以及其它的库抽出来做成单独的Monorepo子包</li>\r\n<li>学会Lerna.js+yarn+monreopo来组织代码</li>\r\n<li>掌握使用Vite+React+Nestjs开发中后台</li>\r\n<li>掌握Next.js+Nestjs开发SSR同构应用</li>\r\n<li>整合腾讯云Cloudbase+Nestjs开发Faas应用</li>\r\n<li>整合Nestjs与微信SDK开发微信平台应用</li>\r\n<li>第三方社会化登录以及统一支付接口开发等</li>\r\n</ul>\r\n\r\n[/tab]\r\n\r\n[/tabs]', 0, 'https://jikexingkong.com/?post_type=course&#038;p=64', 0, 'course', '', 0),
(91, 1, '2021-10-29 16:06:02', '2021-10-29 08:06:02', '', '模块化首页', '', 'publish', 'closed', 'closed', '', 'home-2', '', '', '2021-10-29 16:06:02', '2021-10-29 08:06:02', '', 0, 'https://jikexingkong.com/home-2/', 0, 'page', '', 0),
(92, 1, '2021-11-03 19:07:05', '2021-10-29 08:07:23', ' ', '', '', 'publish', 'closed', 'closed', '', '92', '', '', '2021-11-03 19:07:05', '2021-11-03 11:07:05', '', 0, 'https://jikexingkong.com/?p=92', 2, 'nav_menu_item', '', 0),
(93, 1, '2021-11-03 19:07:05', '2021-10-29 08:07:23', ' ', '', '', 'publish', 'closed', 'closed', '', '93', '', '', '2021-11-03 19:07:05', '2021-11-03 11:07:05', '', 0, 'https://jikexingkong.com/?p=93', 4, 'nav_menu_item', '', 0),
(95, 1, '2021-11-03 19:07:05', '2021-10-29 08:07:23', ' ', '', '', 'publish', 'closed', 'closed', '', '95', '', '', '2021-11-03 19:07:05', '2021-11-03 11:07:05', '', 0, 'https://jikexingkong.com/?p=95', 1, 'nav_menu_item', '', 0),
(96, 1, '2021-11-03 19:07:05', '2021-10-29 08:13:24', ' ', '', '', 'publish', 'closed', 'closed', '', '96', '', '', '2021-11-03 19:07:05', '2021-11-03 11:07:05', '', 0, 'https://jikexingkong.com/?p=96', 3, 'nav_menu_item', '', 0),
(97, 1, '2021-11-03 19:07:05', '2021-10-29 08:15:23', '', '代码仓库', '', 'publish', 'closed', 'closed', '', '%e4%bb%a3%e7%a0%81%e4%bb%93%e5%ba%93', '', '', '2021-11-03 19:07:05', '2021-11-03 11:07:05', '', 0, 'https://jikexingkong.com/?p=97', 6, 'nav_menu_item', '', 0),
(99, 1, '2021-11-03 19:07:05', '2021-10-30 01:08:35', ' ', '', '', 'publish', 'closed', 'closed', '', '99', '', '', '2021-11-03 19:07:05', '2021-11-03 11:07:05', '', 0, 'https://jikexingkong.com/?p=99', 5, 'nav_menu_item', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(100, 1, '2021-10-30 15:49:28', '2021-10-30 07:49:28', '[scode type=\"yellow\"]注意: 本教程在MacOS下讲解,Linux用户根据各自的发行版安装软件,windows用户请自行安装wsl2作为替代 [/scode]\n\n<h2>创建项目</h2>\n\n如果比较熟悉<a href=\"https://webpack.docschina.org/\" title=\"webpack\">webpack</a>也可以使用<a href=\"https://create-react-app.dev/\" title=\"create-react-app\">create-react-app</a>,<a href=\"https://umijs.org/zh-CN/docs\" title=\"umi\">umi</a>或自己手动写一个,为了有更加流畅的开发体验,本教程选择基于[esbuild][]的更加快速的[vite][]来构建开发环境\n\n<h3>安装与配置<a href=\"https://nodejs.org/zh-cn/\" title=\"node.js\">node.js</a></h3>\n\n<blockquote>\n  如果没有安装<a href=\"https://brew.sh/\" title=\"brew\">brew</a>请先安装\n</blockquote>\n\n<strong>建议:安装到GLOBAL里面的东西统一使用一个包管理器,我这里使用<a href=\"https://pnpm.io/\" title=\"pnpm\">pnpm</a></strong>\n\n安装<a href=\"https://nodejs.org/zh-cn/\" title=\"node.js\">node.js</a>\n\n<pre><code class=\"language-shell line-numbers\">~ brew install node\n</code></pre>\n\n配置<a href=\"https://www.npmjs.com/\" title=\"npm\">npm</a>淘宝镜像\n\n<pre><code class=\"language-shell line-numbers\">~ npm config set registry https://registry.npm.taobao.org\n</code></pre>\n\n安装<a href=\"https://pnpm.io/\" title=\"pnpm\">pnpm</a>\n\n<pre><code class=\"language-shell line-numbers\">~ npm install -g pnpm\n</code></pre>\n\n配置<a href=\"https://pnpm.io/\" title=\"pnpm\">pnpm</a>淘宝镜像\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm config set registry https://registry.npm.taobao.org\n</code></pre>\n\n安装镜像管理工具\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm add nrm -g\n</code></pre>\n\n建议安装一个<a href=\"https://nodejs.org/zh-cn/\" title=\"node.js\">node</a>版本管理工具比如<a href=\"https://github.com/tj/n\" title=\"n\">n</a>或者<a href=\"https://github.com/nvm-sh/nvm\" title=\"nvm\">nvm</a>\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm add n -g\n</code></pre>\n\n<h4>使用[Vite][]创建项目</h4>\n\n在你的编码目录下初始化一个项目\n\n<pre><code class=\"language-shell line-numbers\">~ pnpx create-vite\n</code></pre>\n\n提示<code>Install the following package: create-vite@latest?</code>,按<code>y</code>\n\n<code>Project name:</code>是你的项目目录和<code>package.json</code>中的项目名称,随意填\n\n<code>Select a framework</code>框架选择中按方向键选择<code>react</code>\n\n<code>Select a variant</code>选择<code>react-ts</code>\n\n<code>cd {你的Project name目录}</code>\n\n执行<code>pnpm i</code>安装依赖\n\n<h2>代码规范化</h2>\n\n具体代码与配置请自行查看源代码\n\n<h3>代码风格</h3>\n\n配置<a href=\"https://github.com/airbnb/javascript\" title=\"airbnb\">airbnb</a>的eslint规则并整合<a href=\"https://prettier.io/\" title=\"prettier\">prettier</a>,并且经过一定的客制化同时配合vscode可达到完美的编码体验\n\n<pre><code class=\"language-shell line-numbers\">pnpm add typescript \\\neslint \\\nprettier \\\n@typescript-eslint/parser \\\neslint-config-airbnb-typescript \\\neslint-plugin-import \\\neslint-plugin-jsx-a11y \\\neslint-plugin-react \\\neslint-plugin-react-hooks \\\n@typescript-eslint/eslint-plugin \\\njest \\\neslint-plugin-jest \\\neslint-config-prettier \\\neslint-plugin-prettier \\\neslint-plugin-unused-imports -D\n</code></pre>\n\n<h4>配置内容</h4>\n\n为了让<code>eslint</code>能规范化自定义的文件,比如<code>.eslintrc.js</code>本身,使用一个新建的继承自<code>tsconfig.json</code>的<code>tsconfig.eslint.json</code>作为<code>@typescript-eslint/parser</code>的配置文件\n\n<pre><code class=\"language-javascript line-numbers\">...\nplugins: [\'@typescript-eslint\', \'jest\', \'prettier\', \'import\', \'unused-imports\'],\nextends: [\n    // 兼容typescript的airbnb规范\n   \'airbnb-typescript\',\n    // react hooks的airbnb规范\n    \'airbnb/hooks\',\n\n    // typescript的eslint插件\n    \'plugin:@typescript-eslint/recommended\',\n    \'plugin:@typescript-eslint/recommended-requiring-type-checking\',\n\n    // 支持jest\n    \'plugin:jest/recommended\',\n\n    // 使用prettier格式化代码\n    // 整合typescript-eslint与prettier\n    \'prettier\',\n    \'plugin:prettier/recommended\',\n],\nparserOptions: {\n    ...\n    project: \'./tsconfig.eslint.json\',\n},\n</code></pre>\n\n<h4>一些重要的规则</h4>\n\n<blockquote>\n  其余配置自行查看代码\n</blockquote>\n\n<code>eslint-plugin-unused-imports</code>用于自动删除未使用的导入,对不是\'_\'前缀且未使用变量报错\n\n<pre><code class=\"language-javascript line-numbers\">...\n \'no-unused-vars\': 0,\n \'@typescript-eslint/no-unused-vars\': 0,\n \'unused-imports/no-unused-imports\': 1,\n \'unused-imports/no-unused-vars\': [\n    \'error\',\n    {\n        vars: \'all\',\n        args: \'none\',\n        ignoreRestSiblings: true,\n    },\n]\n</code></pre>\n\n<code>import</code>插件,<code>import/order</code>可以按照自己的需求配置\n\n<pre><code class=\"language-javascript line-numbers\">// 导入模块的顺序\n\'import/order\': [\n     \'error\',\n     {\n         pathGroups: [\n             {\n                 pattern: \'@/**\',\n                 group: \'external\',\n                 position: \'after\',\n             },\n         ],\n         alphabetize: { order: \'asc\', caseInsensitive: false },\n         \'newlines-between\': \'always-and-inside-groups\',\n         warnOnUnassignedImports: true,\n     },\n],\n// 导入的依赖不必一定要在dependencies的文件\n\'import/no-extraneous-dependencies\': [\n    \'error\',\n     {\n         devDependencies: [\n             \'**/*.test.{ts,js}\',\n             \'**/*.spec.{ts,js}\',\n             \'build/**/*.{ts,js}\',\n             \'vite.config.ts\',\n         ],\n     },\n],\n</code></pre>\n\n最后需要配置一下<code>.prettierrc</code>,和<code>.editorconfig</code>,并且把一些它们各自需要忽略的目录和文件分别添加到<code>.eslintignore</code>和<code>.prettierignore</code>,最后把<code>git</code>仓库需要忽略的目录和文件写入<code>.gitignore</code>\n\n<h3>Tsconfig配置</h3>\n\ntsconfig.json文件中添加一个<code>@</code>作为根目录映射符,其它的配置按需要更改\n\n<pre><code class=\"language-json line-numbers\">{\n    \"compilerOptions\": {\n        // ...\n        \"paths\": {\n            \"@/*\": [\"src/*\"]\n        }\n    },\n    \"include\": [\n        \"./src\",\n        \"./typings/**/*.d.ts\",\n    ]\n}\n</code></pre>\n\n<code>tsconfig.eslint.json</code>\n\n<pre><code class=\"language-json line-numbers\">{\n    \"extends\": \"./tsconfig.json\",\n    \"include\": [\"./src\", \"./test\", \"./typings\", \"./build\", \"**.js\", \"**.ts\"]\n}\n</code></pre>\n\n<h2>配置<a href=\"https://cn.vitejs.dev/\" title=\"vitejs\">vitejs</a></h2>\n\n<h3>基础配置</h3>\n\n安装<code>deepmerge</code>用于合并配置对象\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm add deepmerge -D\n</code></pre>\n\n创建一个<code>build</code>目录专门用于放置<a href=\"https://cn.vitejs.dev/\" title=\"vitejs\">vitejs</a>的配置文件\n\n<code>Configure</code>类型是外部<code>vite.config.ts</code>文件中自定义额外配置的回调函数的类型\n\n<pre><code class=\"language-typescript line-numbers\">// build/types.ts\nexport type Configure = (params: ConfigEnv, isBuild: boolean) =&gt; UserConfig;\n</code></pre>\n\n<code>getPlugins</code>函数用于设置插件\n\n<pre><code class=\"language-typescript line-numbers\">// build/plugins/index.ts\nexport function getPlugins(isBuild: boolean) {\n    const vitePlugins: (Plugin | Plugin[])[] = [reactRefresh()];\n\n    return vitePlugins;\n}\n</code></pre>\n\n<code>getConfig</code>函数用于生成最终配置\n\n<pre><code class=\"language-typescript line-numbers\">// build/config.ts\nexport const getConfig = (\n    params: ConfigEnv,\n    configure?: Configure,\n): UserConfig =&gt; {\n    const isBuild = params.command === \'build\';\n    return merge(\n        {\n            resolve: {\n                // 添加别名\n                alias: {\n                    \'/@\': pathResolve(\'src\'),\n                },\n            },\n            css: {},\n            plugins: getPlugins(isBuild),\n            // 启动端口\n            server: { port: 4000 },\n        },\n        typeof configure === \'function\' ? configure(params, isBuild) : {},\n        {\n            arrayMerge: (_d, s, _o) =&gt; Array.from(new Set([..._d, ...s])),\n        },\n    );\n};\n\n</code></pre>\n\n使用配置\n\n<pre><code class=\"language-typescript line-numbers\">// vite.config.ts\nexport default (params: ConfigEnv): UserConfig =&gt; getConfig(params);\n</code></pre>\n\n<h3>支持<code>react17</code>风格</h3>\n\n如果需要支持<code>react17</code>风格(即不需要在每个页面写<code>import React from \'react\'</code>)的话\n\n<blockquote>\n  一般情况下不需要\n</blockquote>\n\n先把<code>tsconfg.json</code>中的<code>\"jsx\": \"react\"</code>改为<code>\"jsx\": \"react-jsx\"</code>,然后添加如下配置\n\n<pre><code class=\"language-typescript line-numbers\">// build/config.ts\nexport const getConfig = (\n    params: ConfigEnv,\n    configure?: Configure,\n): UserConfig =&gt; {\n    const isBuild = params.command === \'build\';\n    return merge(\n        {\n            ...\n            esbuild: {\n                jsxInject: `import React from \'react\'`,\n            },\n        },\n      ...\n    );\n};\n</code></pre>\n\n<h3>支持<a href=\"https://ant-design.gitee.io/index-cn\" title=\"antd\">antd</a>与<a href=\"https://lesscss.org/\" title=\"less\">less</a></h3>\n\n安装<a href=\"https://lesscss.org/\" title=\"less\">less</a>与<a href=\"https://ant-design.gitee.io/index-cn\" title=\"antd\">antd</a>\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm add antd\n~ pnpm add less -D\n</code></pre>\n\n定制主题\n\n<blockquote>\n  <code>modules</code>配置用于转换<code>css</code>变量名称格式\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">// build/config.ts\nreturn merge(\n  {\n    ...\n    css: {\n        modules: {\n            localsConvention: \'camelCaseOnly\',\n        },\n        preprocessorOptions: {\n            less: {\n                javascriptEnabled: true,\n                javascriptEnabled: true,\n                modifyVars: {},\n            },\n        },\n    },\n  }\n)\n</code></pre>\n\n按需导入\n\n安装<code>vite-plugin-style-import</code>\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm add vite-plugin-style-import -D\n</code></pre>\n\n[rihide] \n配置插件\n\n<pre><code class=\"language-typescript line-numbers\">// build/plugins/antd.ts\nexport function antdPlugin(isBuild: boolean) {\n    if (!isBuild) return [];\n    const antd = styleImport({\n        libs: [\n            {\n                libraryName: \'antd\',\n                esModule: true,\n                resolveStyle: (name) =&gt; {\n                    return `antd/es/${name}/style/index`;\n                },\n            },\n        ],\n    });\n    return antd;\n}\n</code></pre>\n\n加载该插件\n\n<pre><code class=\"language-typescript line-numbers\">// build/plugins/index.ts\nexport function getPlugins(isBuild: boolean) {\n    const vitePlugins: (Plugin | Plugin[])[] = [];\n    vitePlugins.push(reactRefresh());\n    vitePlugins.push(antdPlugin(isBuild));\n    return vitePlugins;\n}\n</code></pre>\n\n效果测试\n\n<pre><code class=\"language-typescript line-numbers\">// src/App.tsx\nconst App: FC = () =&gt; (\n    &lt;div className=\"App\"&gt;\n        &lt;Button type=\"primary\"&gt;Button&lt;/Button&gt;\n    &lt;/div&gt;\n);\n</code></pre>\n\n在<code>main.tsx</code>如下设置,这是为了在开发环境中使用<a href=\"https://ant-design.gitee.io/index-cn\" title=\"antd\">antd</a>样式\n\n<pre><code class=\"language-typescript line-numbers\">// src/main.tsx\nif (import.meta.env.DEV) {\n    import(\'antd/dist/antd.less\');\n}\n</code></pre>\n\n因为只在生产环境按需加载,所以执行以下命令在生产环境下测试\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm build &amp;&amp; pnpm serve\n</code></pre>\n\n<h3>支持<a href=\"https://tailwindcss.com/\" title=\"tailwindcss\">tailwindcss</a></h3>\n\n<blockquote>\n  <code>postcss</code>可以按自己需求配置,或者不配置也没关系\n</blockquote>\n\n安装[tailwincss][]与vite插件\n\n<pre><code class=\"language-shell line-numbers\">~ pnpm add tailwindcss@latest postcss@latest autoprefixer@latest -D\n</code></pre>\n\n初始化<a href=\"https://tailwindcss.com/\" title=\"tailwindcss\">tailwindcss</a>\n\n<pre><code class=\"language-typescript line-numbers\">npx tailwindcss init -p\n</code></pre>\n\n配置<a href=\"https://tailwindcss.com/\" title=\"tailwindcss\">tailwindcss</a>\n\n<pre><code class=\"language-javascript line-numbers\">module.exports = {\n    // 在生产环境中清除未使用的样式\n    purge: {\n        enable: process.env.NODE_ENV === \'production\',\n        content: [\'./index.html\', \'./src/**/*.{ts,tsx}\'],\n    },\n    darkMode: \'class\',\n    theme: {\n        extend: {},\n    },\n    variants: {\n        extend: {},\n    },\n    plugins: [],\n};\n</code></pre>\n\n<h2>开发工具</h2>\n\n推荐使用<a href=\"https://code.visualstudio.com/\" title=\"vscode\">vscode</a>作为开发工具\n\n<blockquote>\n  VSCode已经自带同步配置和插件的功能,建议启用\n</blockquote>\n\n<h3><a href=\"https://code.visualstudio.com/\" title=\"vscode\">vscode</a></h3>\n\n安装<a href=\"https://code.visualstudio.com/\" title=\"vscode\">vscode</a>\n\n<pre><code class=\"language-shell line-numbers\">~ brew install vscode\n</code></pre>\n\n安装<a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\" title=\"vscode-eslint\">eslint插件</a>和<a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\" title=\"vscode-prettier\">prettier插件</a>\n\n<pre><code class=\"language-shell line-numbers\">~ code --install-extension dbaeumer.vscode-eslint \\\n  &amp;&amp; code esbenp.prettier-vscode\n</code></pre>\n\n按<code>cmd+,</code>选择偏好设置->工作空间,配置<a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\" title=\"vscode-eslint\">eslint插件</a>\n\n<pre><code class=\"language-json line-numbers\">{\n    \"editor.formatOnSave\": false,\n    \"editor.codeActionsOnSave\": {\n        \"source.fixAll.eslint\": true\n    }\n}\n\n</code></pre>\n\n为了确保<a href=\"https://pnpm.io/\" title=\"pnpm\">pnpm</a>安装的package可以拥有像npm,yarn一样的本地目录的提示效果,请在vscode底部选择工作区版本或者安装<a class=\"wp-editor-md-post-content-link\" href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next\">nighty</a>插件并选择vscode版本\n\n<h3>调试</h3>\n\n按<code>shift+cmd+d</code>创建<code>lanunch.json</code>,按如下配置即可通过浏览器调试\n\n<pre><code class=\"language-json line-numbers\">{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"chrome\",\n      \"request\": \"launch\",\n      \"name\": \"Launch Chrome\",\n      \"url\": \"http://localhost:3100\",\n      \"webRoot\": \"${workspaceFolder}/src\",\n      \"sourceMaps\": true\n    },\n  ]\n}\n\n</code></pre>\n\n[/rihide]', 'react+ts环境搭建-vite.js', '', 'publish', 'open', 'closed', '', 'reactts%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba-vite-js', '', '', '2021-11-13 05:59:35', '2021-11-12 21:59:35', '[webpack]: https://webpack.docschina.org/ 	\"webpack\"\r\n[create-react-app]: https://create-react-app.dev/ \"create-react-app\"\r\n\r\n[umi]: 	https://umijs.org/zh-CN/docs \"umi\"\r\n\r\n[node.js]: https://nodejs.org/zh-cn/ \"node.js\"\r\n[pnpm]: https://pnpm.io/ \"pnpm\"\r\n[npm]: https://www.npmjs.com/	\"npm\"\r\n[n]:  https://github.com/tj/n		\"n\"\r\n[brew]: https://brew.sh/ \"brew\"\r\n[nvm]: https://github.com/nvm-sh/nvm	\"nvm\"\r\n[prettier]: https://prettier.io/ \"prettier\"\r\n[airbnb]: https://github.com/airbnb/javascript \"airbnb\"\r\n[vscode]: https://code.visualstudio.com/ \"vscode\"\r\n[vitejs]: https://cn.vitejs.dev/ \"vitejs\"\r\n[antd]: https://ant-design.gitee.io/index-cn \"antd\"\r\n[less]: https://lesscss.org/ \"less\"\r\n[tailwindcss]: https://tailwindcss.com/	\"tailwindcss\"\r\n[eslint]: https://eslint.org/ \"eslint\"\r\n[vscode-eslint]: https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint \"vscode-eslint\"\r\n[vscode-prettier]: https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode \"vscode-prettier\"\r\n\r\n[scode type=\"yellow\"]注意: 本教程在MacOS下讲解,Linux用户根据各自的发行版安装软件,windows用户请自行安装wsl2作为替代 [/scode]\r\n\r\n## 创建项目\r\n\r\n如果比较熟悉[webpack][]也可以使用[create-react-app][],[umi][]或自己手动写一个,为了有更加流畅的开发体验,本教程选择基于[esbuild][]的更加快速的[vite][]来构建开发环境\r\n\r\n### 安装与配置[node.js][]\r\n\r\n> 如果没有安装[brew][]请先安装\r\n\r\n**建议:安装到GLOBAL里面的东西统一使用一个包管理器,我这里使用[pnpm][]**\r\n\r\n安装[node.js][]\r\n\r\n```shell\r\n~ brew install node\r\n```\r\n\r\n配置[npm][]淘宝镜像\r\n\r\n```shell\r\n~ npm config set registry https://registry.npm.taobao.org\r\n```\r\n\r\n安装[pnpm][]\r\n\r\n```shell\r\n~ npm install -g pnpm\r\n```\r\n\r\n配置[pnpm][]淘宝镜像\r\n\r\n```shell\r\n~ pnpm config set registry https://registry.npm.taobao.org\r\n```\r\n\r\n安装镜像管理工具\r\n\r\n```shell\r\n~ pnpm add nrm -g\r\n```\r\n\r\n建议安装一个[node][node.js]版本管理工具比如[n][]或者[nvm][]\r\n\r\n```shell\r\n~ pnpm add n -g\r\n```\r\n\r\n#### 使用[Vite][]创建项目\r\n\r\n在你的编码目录下初始化一个项目\r\n\r\n```shell\r\n~ pnpx create-vite\r\n```\r\n\r\n提示`Install the following package: create-vite@latest?`,按`y`\r\n\r\n`Project name:`是你的项目目录和`package.json`中的项目名称,随意填\r\n\r\n`Select a framework`框架选择中按方向键选择`react`\r\n\r\n` Select a variant`选择`react-ts`\r\n\r\n`cd {你的Project name目录}`\r\n\r\n执行`pnpm i`安装依赖\r\n\r\n## 代码规范化\r\n\r\n具体代码与配置请自行查看源代码\r\n\r\n### 代码风格\r\n\r\n配置[airbnb][]的eslint规则并整合[prettier][],并且经过一定的客制化同时配合vscode可达到完美的编码体验\r\n\r\n```shell\r\npnpm add typescript \\\r\neslint \\\r\nprettier \\\r\n@typescript-eslint/parser \\\r\neslint-config-airbnb-typescript \\\r\neslint-plugin-import \\\r\neslint-plugin-jsx-a11y \\\r\neslint-plugin-react \\\r\neslint-plugin-react-hooks \\\r\n@typescript-eslint/eslint-plugin \\\r\njest \\\r\neslint-plugin-jest \\\r\neslint-config-prettier \\\r\neslint-plugin-prettier \\\r\neslint-plugin-unused-imports -D\r\n```\r\n\r\n#### 配置内容\r\n\r\n为了让`eslint`能规范化自定义的文件,比如`.eslintrc.js`本身,使用一个新建的继承自`tsconfig.json`的`tsconfig.eslint.json`作为`@typescript-eslint/parser`的配置文件\r\n\r\n```javascript\r\n...\r\nplugins: [&#039;@typescript-eslint&#039;, &#039;jest&#039;, &#039;prettier&#039;, &#039;import&#039;, &#039;unused-imports&#039;],\r\nextends: [\r\n    // 兼容typescript的airbnb规范\r\n   &#039;airbnb-typescript&#039;,\r\n    // react hooks的airbnb规范\r\n    &#039;airbnb/hooks&#039;,\r\n\r\n    // typescript的eslint插件\r\n    &#039;plugin:@typescript-eslint/recommended&#039;,\r\n    &#039;plugin:@typescript-eslint/recommended-requiring-type-checking&#039;,\r\n\r\n    // 支持jest\r\n    &#039;plugin:jest/recommended&#039;,\r\n\r\n    // 使用prettier格式化代码\r\n    // 整合typescript-eslint与prettier\r\n    &#039;prettier&#039;,\r\n    &#039;plugin:prettier/recommended&#039;,\r\n],\r\nparserOptions: {\r\n    ...\r\n    project: &#039;./tsconfig.eslint.json&#039;,\r\n},\r\n```\r\n\r\n#### 一些重要的规则\r\n\r\n> 其余配置自行查看代码\r\n\r\n`eslint-plugin-unused-imports`用于自动删除未使用的导入,对不是\'_\'前缀且未使用变量报错\r\n\r\n```javascript\r\n...\r\n &#039;no-unused-vars&#039;: 0,\r\n &#039;@typescript-eslint/no-unused-vars&#039;: 0,\r\n &#039;unused-imports/no-unused-imports&#039;: 1,\r\n &#039;unused-imports/no-unused-vars&#039;: [\r\n    &#039;error&#039;,\r\n    {\r\n        vars: &#039;all&#039;,\r\n        args: &#039;none&#039;,\r\n        ignoreRestSiblings: true,\r\n    },\r\n]\r\n```\r\n\r\n`import`插件,`import/order`可以按照自己的需求配置\r\n\r\n```javascript\r\n// 导入模块的顺序\r\n&#039;import/order&#039;: [\r\n     &#039;error&#039;,\r\n     {\r\n         pathGroups: [\r\n             {\r\n                 pattern: &#039;@/**&#039;,\r\n                 group: &#039;external&#039;,\r\n                 position: &#039;after&#039;,\r\n             },\r\n         ],\r\n         alphabetize: { order: &#039;asc&#039;, caseInsensitive: false },\r\n         &#039;newlines-between&#039;: &#039;always-and-inside-groups&#039;,\r\n         warnOnUnassignedImports: true,\r\n     },\r\n],\r\n// 导入的依赖不必一定要在dependencies的文件\r\n&#039;import/no-extraneous-dependencies&#039;: [\r\n    &#039;error&#039;,\r\n     {\r\n         devDependencies: [\r\n             &#039;**/*.test.{ts,js}&#039;,\r\n             &#039;**/*.spec.{ts,js}&#039;,\r\n             &#039;build/**/*.{ts,js}&#039;,\r\n             &#039;vite.config.ts&#039;,\r\n         ],\r\n     },\r\n],\r\n```\r\n\r\n最后需要配置一下`.prettierrc`,和`.editorconfig`,并且把一些它们各自需要忽略的目录和文件分别添加到`.eslintignore`和`.prettierignore`,最后把`git`仓库需要忽略的目录和文件写入`.gitignore`\r\n\r\n### Tsconfig配置\r\n\r\ntsconfig.json文件中添加一个`@`作为根目录映射符,其它的配置按需要更改\r\n\r\n```json\r\n{\r\n    &quot;compilerOptions&quot;: {\r\n        // ...\r\n        &quot;paths&quot;: {\r\n            &quot;@/*&quot;: [&quot;src/*&quot;]\r\n        }\r\n    },\r\n    &quot;include&quot;: [\r\n        &quot;./src&quot;,\r\n        &quot;./typings/**/*.d.ts&quot;,\r\n    ]\r\n}\r\n```\r\n\r\n`tsconfig.eslint.json`\r\n\r\n```json\r\n{\r\n    &quot;extends&quot;: &quot;./tsconfig.json&quot;,\r\n    &quot;include&quot;: [&quot;./src&quot;, &quot;./test&quot;, &quot;./typings&quot;, &quot;./build&quot;, &quot;**.js&quot;, &quot;**.ts&quot;]\r\n}\r\n```\r\n\r\n## 配置[vitejs][]\r\n\r\n### 基础配置\r\n\r\n安装`deepmerge`用于合并配置对象\r\n\r\n```shell\r\n~ pnpm add deepmerge -D\r\n```\r\n\r\n创建一个`build`目录专门用于放置[vitejs][]的配置文件\r\n\r\n`Configure`类型是外部`vite.config.ts`文件中自定义额外配置的回调函数的类型\r\n\r\n```typescript\r\n// build/types.ts\r\nexport type Configure = (params: ConfigEnv, isBuild: boolean) =&gt; UserConfig;\r\n```\r\n\r\n`getPlugins`函数用于设置插件\r\n\r\n```typescript\r\n// build/plugins/index.ts\r\nexport function getPlugins(isBuild: boolean) {\r\n    const vitePlugins: (Plugin | Plugin[])[] = [reactRefresh()];\r\n\r\n    return vitePlugins;\r\n}\r\n```\r\n\r\n`getConfig`函数用于生成最终配置\r\n\r\n```typescript\r\n// build/config.ts\r\nexport const getConfig = (\r\n    params: ConfigEnv,\r\n    configure?: Configure,\r\n): UserConfig =&gt; {\r\n    const isBuild = params.command === &#039;build&#039;;\r\n    return merge(\r\n        {\r\n            resolve: {\r\n                // 添加别名\r\n                alias: {\r\n                    &#039;/@&#039;: pathResolve(&#039;src&#039;),\r\n                },\r\n            },\r\n            css: {},\r\n            plugins: getPlugins(isBuild),\r\n            // 启动端口\r\n            server: { port: 4000 },\r\n        },\r\n        typeof configure === &#039;function&#039; ? configure(params, isBuild) : {},\r\n        {\r\n            arrayMerge: (_d, s, _o) =&gt; Array.from(new Set([..._d, ...s])),\r\n        },\r\n    );\r\n};\r\n\r\n```\r\n\r\n使用配置\r\n\r\n```typescript\r\n// vite.config.ts\r\nexport default (params: ConfigEnv): UserConfig =&gt; getConfig(params);\r\n```\r\n\r\n### 支持`react17`风格\r\n\r\n如果需要支持`react17`风格(即不需要在每个页面写`import React from \'react\'`)的话\r\n\r\n> 一般情况下不需要\r\n\r\n先把`tsconfg.json`中的`\"jsx\": \"react\"`改为`\"jsx\": \"react-jsx\"`,然后添加如下配置\r\n\r\n```typescript\r\n// build/config.ts\r\nexport const getConfig = (\r\n    params: ConfigEnv,\r\n    configure?: Configure,\r\n): UserConfig => {\r\n    const isBuild = params.command === \'build\';\r\n    return merge(\r\n        {\r\n            ...\r\n            esbuild: {\r\n                jsxInject: `import React from \'react\'`,\r\n            },\r\n        },\r\n      ...\r\n    );\r\n};\r\n```\r\n\r\n### 支持[antd][]与[less][]\r\n\r\n安装[less][]与[antd][]\r\n\r\n```shell\r\n~ pnpm add antd\r\n~ pnpm add less -D\r\n```\r\n\r\n定制主题\r\n\r\n> `modules`配置用于转换`css`变量名称格式\r\n\r\n```typescript\r\n// build/config.ts\r\nreturn merge(\r\n  {\r\n    ...\r\n    css: {\r\n        modules: {\r\n            localsConvention: &#039;camelCaseOnly&#039;,\r\n        },\r\n        preprocessorOptions: {\r\n            less: {\r\n                javascriptEnabled: true,\r\n                javascriptEnabled: true,\r\n                modifyVars: {},\r\n            },\r\n        },\r\n    },\r\n  }\r\n)\r\n```\r\n\r\n按需导入\r\n\r\n安装`vite-plugin-style-import`\r\n\r\n```shell\r\n~ pnpm add vite-plugin-style-import -D\r\n```\r\n[rihide] \r\n配置插件\r\n\r\n```typescript\r\n// build/plugins/antd.ts\r\nexport function antdPlugin(isBuild: boolean) {\r\n    if (!isBuild) return [];\r\n    const antd = styleImport({\r\n        libs: [\r\n            {\r\n                libraryName: \'antd\',\r\n                esModule: true,\r\n                resolveStyle: (name) => {\r\n                    return `antd/es/${name}/style/index`;\r\n                },\r\n            },\r\n        ],\r\n    });\r\n    return antd;\r\n}\r\n```\r\n\r\n加载该插件\r\n\r\n```typescript\r\n// build/plugins/index.ts\r\nexport function getPlugins(isBuild: boolean) {\r\n    const vitePlugins: (Plugin | Plugin[])[] = [];\r\n    vitePlugins.push(reactRefresh());\r\n    vitePlugins.push(antdPlugin(isBuild));\r\n    return vitePlugins;\r\n}\r\n```\r\n\r\n效果测试\r\n\r\n```typescript\r\n// src/App.tsx\r\nconst App: FC = () => (\r\n    <div className=\"App\">\r\n        <Button type=\"primary\">Button</Button>\r\n    </div>\r\n);\r\n```\r\n\r\n在`main.tsx`如下设置,这是为了在开发环境中使用[antd][]样式\r\n\r\n```typescript\r\n// src/main.tsx\r\nif (import.meta.env.DEV) {\r\n    import(&#039;antd/dist/antd.less&#039;);\r\n}\r\n```\r\n\r\n因为只在生产环境按需加载,所以执行以下命令在生产环境下测试\r\n\r\n```shell\r\n~ pnpm build && pnpm serve\r\n```\r\n\r\n### 支持[tailwindcss][]\r\n\r\n> `postcss`可以按自己需求配置,或者不配置也没关系\r\n\r\n安装[tailwincss][]与vite插件\r\n\r\n```shell\r\n~ pnpm add tailwindcss@latest postcss@latest autoprefixer@latest -D\r\n```\r\n\r\n初始化[tailwindcss][]\r\n\r\n```typescript\r\nnpx tailwindcss init -p\r\n```\r\n\r\n配置[tailwindcss][]\r\n\r\n```javascript\r\nmodule.exports = {\r\n    // 在生产环境中清除未使用的样式\r\n    purge: {\r\n        enable: process.env.NODE_ENV === \'production\',\r\n        content: [\'./index.html\', \'./src/**/*.{ts,tsx}\'],\r\n    },\r\n    darkMode: \'class\',\r\n    theme: {\r\n        extend: {},\r\n    },\r\n    variants: {\r\n        extend: {},\r\n    },\r\n    plugins: [],\r\n};\r\n```\r\n\r\n## 开发工具\r\n\r\n推荐使用[vscode][]作为开发工具\r\n\r\n&gt; VSCode已经自带同步配置和插件的功能,建议启用\r\n\r\n### [vscode][]\r\n\r\n安装[vscode][]\r\n\r\n```shell\r\n~ brew install vscode\r\n```\r\n\r\n安装[eslint插件][vscode-eslint]和[prettier插件][vscode-prettier]\r\n\r\n```shell\r\n~ code --install-extension dbaeumer.vscode-eslint \\\r\n  && code esbenp.prettier-vscode\r\n```\r\n\r\n按`cmd+,`选择偏好设置->工作空间,配置[eslint插件][vscode-eslint]\r\n\r\n```json\r\n{\r\n    &quot;editor.formatOnSave&quot;: false,\r\n    &quot;editor.codeActionsOnSave&quot;: {\r\n        &quot;source.fixAll.eslint&quot;: true\r\n    }\r\n}\r\n\r\n```\r\n\r\n为了确保[pnpm][]安装的package可以拥有像npm,yarn一样的本地目录的提示效果,请在vscode底部选择工作区版本或者安装[nighty](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next)插件并选择vscode版本\r\n\r\n### 调试\r\n\r\n按`shift+cmd+d`创建`lanunch.json`,按如下配置即可通过浏览器调试\r\n\r\n```json\r\n{\r\n  &quot;version&quot;: &quot;0.2.0&quot;,\r\n  &quot;configurations&quot;: [\r\n    {\r\n      &quot;type&quot;: &quot;chrome&quot;,\r\n      &quot;request&quot;: &quot;launch&quot;,\r\n      &quot;name&quot;: &quot;Launch Chrome&quot;,\r\n      &quot;url&quot;: &quot;http://localhost:3100&quot;,\r\n      &quot;webRoot&quot;: &quot;${workspaceFolder}/src&quot;,\r\n      &quot;sourceMaps&quot;: true\r\n    },\r\n  ]\r\n}\r\n\r\n```\r\n[/rihide]\r\n\r\n', 0, 'https://jikexingkong.com/?p=100', 0, 'post', '', 1);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(101, 1, '2021-10-30 15:49:49', '2021-10-30 07:49:49', '[scode type=\"yellow\"]注意: 本教程在MacOS下讲解,Linux用户根据各自的发行版安装软件,windows用户请自行安装wsl2作为替代 [/scode][]\n\n<h2>状态与副作用</h2>\n\n<h3><code>useState</code></h3>\n\n用于改变组件内的状态,例\n\n<pre><code class=\"language-tsx line-numbers\">const StateDemo: FC = () =&gt; {\n    const [count, setCount] = useState(1);\n    const [isShow, toggleShow] = useState(true);\n\n    return (\n        &lt;div&gt;\n            &lt;p&gt;{count}&lt;/p&gt;\n            &lt;Button onClick={() =&gt; setCount(count + 1)}&gt;增加&lt;/Button&gt;\n            &lt;p className=\"pt-5\"&gt;{isShow ? &lt;span&gt; I\'m show now &lt;/span&gt; : null}&lt;/p&gt;\n            &lt;Button onClick={() =&gt; toggleShow(!isShow)}&gt;{isShow ? \'显示\' : \'隐藏\'}&lt;/Button&gt;\n        &lt;/div&gt;\n    );\n};\n\nexport default StateDemo;\n</code></pre>\n\n<h3><code>useEffect</code></h3>\n\n在状态不同的生命周期执行副作用\n\n<h4>简单用法</h4>\n\n每次状态更新都执行所有没有依赖的<code>useEffect</code>,以下代码\'toggle ghost\'这一条在<code>resize</code>浏览器时也会触发\n\n<pre><code class=\"language-tsx line-numbers\">const EffectDemo: FC = () =&gt; {\n    const [ghost, setGhost] = useState&lt;boolean&gt;(false);\n    const [width, setWidth] = useState(window.innerWidth);\n    const toggleGhostBtn = () =&gt; setGhost(!ghost);\n    const resizeHandle = () =&gt; setWidth(window.innerWidth);\n    useEffect(() =&gt; {\n        window.addEventListener(\'resize\', resizeHandle);\n    });\n    useEffect(() =&gt; {\n        console.log(\'toggle ghost\');\n    });\n    return (\n        &lt;div&gt;\n            &lt;p&gt;{ghost ? \'ghost\' : \'普通\'}按钮&lt;/p&gt;\n            &lt;Button type=\"primary\" onClick={toggleGhostBtn} ghost={ghost}&gt;\n                切换按钮样式\n            &lt;/Button&gt;\n            &lt;p className=\"pt-5\"&gt;宽度为: {width}&lt;/p&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre>\n\n<h4>依赖更新</h4>\n\n通过<code>useEffect</code>的第二个参数,可以指定其依赖的变量,只有此变量的状态更改时才会执行副作用函数,如果第二个参数为空,则只在第一次渲染和重新渲染时触发\n\n<pre><code class=\"language-tsx line-numbers\">const EffectDemo: FC = () =&gt; {\n    ...\n    useEffect(() =&gt; {\n        // changeWidth\n    }, [width]);\n    useEffect(() =&gt; {\n        console.log(\'toggle ghost\');\n    }, [ghost]);\n   useEffect(() =&gt; {\n        console.log(\'只在第一次或重新渲染组件时触发\');\n    }, []);\n};\n</code></pre>\n\n<h4>清理监听</h4>\n\n在监听<code>width</code>的<code>useEffect</code>中,每次改变<code>width</code>的状态,都会添加一个<code>resize</code>事件,这会极大的耗费浏览器占用的内存,通过一个返回值的方式,即可在下一次<code>width</code>状态改变后与添加新的<code>resize</code>监听前,取消上次添加的<code>resize</code>监听事件\n\n<pre><code class=\"language-tsx line-numbers\">const EffectDemo: FC = () =&gt; {\n    ...\n    useEffect(() =&gt; {\n        window.addEventListener(\'resize\', resizeHandle);\n        return () =&gt; {\n            window.removeEventListener(\'resize\', resizeHandle);\n        };\n    }, [width]);\n};\n</code></pre>\n\n<h4>异步执行</h4>\n\n在<code>useEffect</code>中执行异步函数的语法如下,其实就是在原函数里调用一个<code>async</code>打头的立即函数\n\n<pre><code class=\"language-typescript line-numbers\">useEffect(() =&gt; {\n    (async () =&gt; {})();\n});\n</code></pre>\n\n以下示例代码让按钮在变成<code>ghost</code>之后1s再变红色\n\n<pre><code class=\"language-tsx line-numbers\">const EffectDemo: FC = () =&gt; {\n    const [red, setRed] = useState&lt;boolean&gt;(false);\n    useEffect(() =&gt; {\n        (async () =&gt; {\n            await new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(true), 1000));\n            setRed(ghost);\n        })();\n    }, [ghost]);\n    return (\n        &lt;div&gt;\n            &lt;Button type=\"primary\" onClick={toggleGhostBtn} ghost={ghost} danger={red}&gt;\n                切换按钮样式\n            &lt;/Button&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre>\n\n<h3><code>useLayoutEffect</code></h3>\n\n与<code>useEffect</code>几乎一样,但是具有<strong>防闪烁</strong>作用,比如下面的代码\n\n<pre><code class=\"language-typescript line-numbers\">const StateDemo: FC = () =&gt; {\n    const [count, setCount] = useState(1);\n    const [isShow, toggleShow] = useState(true);\n    useLayoutEffect(() =&gt; {\n        if (count === 0) setCount(Math.floor(Math.random() * 100));\n    }, [count]);\n    return (\n        &lt;div&gt;\n            &lt;p&gt;{count}&lt;/p&gt;\n            &lt;Button onClick={() =&gt; setCount(0)}&gt;随机数&lt;/Button&gt;\n...\n        &lt;/div&gt;\n    );\n};\n\nexport default StateDemo;\n</code></pre>\n\n如果使用<code>useEffect</code>在点击按钮时,它会在渲染屏幕后异步调用,而<code>useLayoutEffect</code>则会把所有逻辑先计算完毕最后一次性渲染,所以它会阻塞渲染,所以除非必须要用,一般情况下基本用<code>useEffect</code>\n\n<h3><code>useContext</code></h3>\n\n用于向后代组件透传一个值,以创建一个语言选择器为例\n\n定义一个语言列表变量\n\n<pre><code class=\"language-typescript line-numbers\">const langs: LangType[] = [\n    { name: \'en\', label: \'english\' },\n    { name: \'zh-CN\', label: \'简体中文\' },\n];\n</code></pre>\n\n创建一个<code>context</code>\n\n<pre><code class=\"language-typescript line-numbers\">const localContext = createContext&lt;LangStateProps&gt;({\n    lang: langs[0],\n    setLang: (lang: LangType) =&gt; {},\n});\n</code></pre>\n\n创建<code>provider</code>包装器\n\n<pre><code class=\"language-tsx line-numbers\">const LocalProvider: FC&lt;LangStateProps&gt; = ({ lang, setLang, children }) =&gt; {\n    useEffect(() =&gt; {\n        setLang(lang);\n    }, [lang]);\n    return (\n        &lt;&gt;\n            &lt;localContext.Provider value={{ lang, setLang }}&gt;{children}&lt;/localContext.Provider&gt;\n        &lt;/&gt;\n    );\n};\n</code></pre>\n\n创建<code>Local</code>组件\n\n<pre><code class=\"language-tsx line-numbers\">const Local: FC = ({ children }) =&gt; {\n    const [lang, setLang] = useState(langs[0]);\n    return (\n        &lt;LocalProvider lang={lang} setLang={setLang}&gt;\n            {children}\n        &lt;/LocalProvider&gt;\n    );\n};\n</code></pre>\n\n把<code>App.tsx</code>中的所有节点包含于<code>Local</code>组件\n\n<pre><code class=\"language-tsx line-numbers\">const App: FC = () =&gt; {\n    return (\n        &lt;Local&gt;\n        ...\n        &lt;/Local&gt;\n    );\n};\nexport default App;\n</code></pre>\n\n语言选择组件\n\n<pre><code class=\"language-tsx line-numbers\">const Lang: FC = () =&gt; {\n    const { lang, setLang } = useContext(localContext);\n    const changeLang = (value: string) =&gt; {\n        const current = langs.find((item) =&gt; item.name === value);\n        current &amp;&amp; setLang(current);\n    };\n    return (\n        &lt;&gt;\n            &lt;Select defaultValue={lang.name} style={{ width: 120 }} onChange={changeLang}&gt;\n                {langs.map(({ name, label }) =&gt; (\n                    &lt;Option key={name} value={name}&gt;\n                        {label || name}\n                    &lt;/Option&gt;\n                ))}\n            &lt;/Select&gt;\n        &lt;/&gt;\n    );\n};\n</code></pre>\n\n显示当前语言\n\n<pre><code class=\"language-tsx line-numbers\">const CurrentLang: FC = () =&gt; {\n    const { lang } = useContext(localContext);\n    return &lt;div&gt;当前语言: {lang.label || lang.name}&lt;/div&gt;;\n};\n</code></pre>\n\n在<code>App.tsx</code>中使用以上两个组件\n\n<pre><code class=\"language-tsx line-numbers\">const App: FC = () =&gt; {\n    return (\n        &lt;Local&gt;\n                ...\n                &lt;LangSelector /&gt;\n                &lt;CurrentLang /&gt;\n        &lt;/Local&gt;\n    );\n};\nexport default App;\n</code></pre>\n\n<h3><code>useReducer</code></h3>\n\n使用<code>Context</code>+<code>useReducer</code>可以实现轻量级的全局状态管理\n\n以实现一个简单的应用配置功能为例(包含标题设置和暗黑模式切换)\n\n<h4>编写类型</h4>\n\n<pre><code class=\"language-typescript line-numbers\">// 可选择的主题模式\nexport type ThemeMode = \'light\' | \'dark\';\n// 初始化应用配置\nexport type ConfigType = {\n    title?: string;\n    theme?: ThemeMode;\n};\n// 合并默认配置后的最终应用配置状态\nexport type ConfigStateType = Required&lt;ConfigType&gt;;\n// 可用的reducer操作\nexport enum ConfigureActionType {\n    SET_TITLE = \'change_title\',\n    CHANGE_THEME = \'change_theme\',\n}\n// 传入给dispatch触发器的数据\nexport type ConfigureAction =\n    | { type: ConfigureActionType.SET_TITLE; value: string }\n    | { type: ConfigureActionType.CHANGE_THEME; value: ThemeMode };\n// 透传给子组件的context\nexport interface ConfigureContextType {\n    state: ConfigStateType;\n    dispatch: Dispatch&lt;ConfigureAction&gt;;\n}\n</code></pre>\n\n<h4>创建<code>Context</code></h4>\n\n<pre><code class=\"language-typescript line-numbers\">// 透传配置状态与dispatch\nexport const ConfigureContext = createContext&lt;ConfigureContextType | null&gt;(null);\n</code></pre>\n\n<h4>状态操作</h4>\n\n为了确保数据的唯一性不被污染,使用<a href=\"https://immerjs.github.io/immer/\" title=\"immer.js\">immer.js</a>操作数据\n\n<pre><code class=\"language-typescript line-numbers\">export const configReducer: Reducer&lt;ConfigStateType, ConfigureAction&gt; = produce((draft, action) =&gt; {\n    switch (action.type) {\n        // 设置标题\n        case ConfigureActionType.SET_TITLE:\n            draft.title = action.value;\n            break;\n        // 设置主题\n        case ConfigureActionType.CHANGE_THEME:\n            draft.theme = action.value;\n            break;\n        default:\n            break;\n    }\n});\n</code></pre>\n\n<h4>包装器组件</h4>\n\n<ul>\n<li>合并默认配置和初始化配置</li>\n<li>使用<code>useEffect</code>创建在标题或主题状态改变时引发的副作用钩子</li>\n<li>把配置状态和<code>dispatch</code>传给<code>ConfigureContext</code></li>\n</ul>\n\n<pre><code class=\"language-tsx line-numbers\">const Configure: FC&lt;{ config?: ConfigType }&gt; = ({ config = {}, children }) =&gt; {\n    const [state, dispatch] = useReducer(\n        configReducer,\n        config,\n        (c) =&gt;\n            ({\n                title: \'react app\',\n                theme: \'light\',\n                ...c,\n            } as ConfigStateType),\n    );\n    useEffect(() =&gt; {\n        const html = document.getElementsByTagName(\'html\')[0];\n        if (state.theme === \'dark\') {\n            html.classList.add(\'dark\');\n        } else {\n            html.classList.remove(\'dark\');\n        }\n    }, [state.theme]);\n    useEffect(() =&gt; {\n        document.title = state.title;\n    }, [state.title]);\n    return (\n        &lt;ConfigureContext.Provider value={{ state, dispatch }}&gt;\n            {children}\n        &lt;/ConfigureContext.Provider&gt;\n    );\n};\n</code></pre>\n\n<h4>主题选择组件</h4>\n\n<pre><code class=\"language-tsx line-numbers\">const Theme = () =&gt; {\n    const context = useContext(ConfigureContext);\n    if (!context) return null;\n    const { state, dispatch } = context;\n    const toggleTheme = () =&gt;\n        dispatch({\n            type: ConfigureActionType.CHANGE_THEME,\n            value: state.theme === \'light\' ? \'dark\' : \'light\',\n        });\n    return (\n        &lt;div&gt;\n            &lt;span&gt;切换主题&lt;/span&gt;\n            &lt;Switch\n                checkedChildren=\"🌛\"\n                unCheckedChildren=\"☀️\"\n                onChange={toggleTheme}\n                checked={state.theme === \'dark\'}\n                defaultChecked={state.theme === \'dark\'}\n            /&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre>\n\n<h4>标题设置组件</h4>\n\n<pre><code class=\"language-tsx line-numbers\">const Title: FC = () =&gt; {\n    const context = useContext(ConfigureContext);\n    if (!context) return null;\n    const { state, dispatch } = context;\n    const changeTitle = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt;\n        dispatch({\n            type: ConfigureActionType.SET_TITLE,\n            value: e.target.value,\n        });\n    return (\n        &lt;div&gt;\n            &lt;span&gt;设置标题&lt;/span&gt;\n            &lt;Input placeholder=\"标题\" value={state.title} onChange={changeTitle} /&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre>\n\n<h4>在<code>App.tsx</code>中使用</h4>\n\n<pre><code class=\"language-tsx line-numbers\">&lt;Configure&gt;\n  ...\n  &lt;Theme /&gt;\n  &lt;Title /&gt;\n&lt;/Configure&gt;\n</code></pre>\n\n<h2>自定义Hooks</h2>\n\n为了更加便捷的使用<code>dispatch</code>,可以通过自定义一个hooks的方式来封装一些方法\n\n<pre><code class=\"language-typescript line-numbers\">const useConfig = () =&gt; {\n    const context = useContext(ConfigureContext);\n    const { state = defaultConfig, dispatch } = context ?? {};\n    const toggleTheme = () =&gt;\n        dispatch &amp;&amp;\n        dispatch({\n            type: ConfigureActionType.CHANGE_THEME,\n            value: state.theme === \'light\' ? \'dark\' : \'light\',\n        });\n    const changeTitle = (value: string) =&gt;\n        dispatch &amp;&amp;\n        dispatch({\n            type: ConfigureActionType.SET_TITLE,\n            value,\n        });\n    return { config: state, toggleTheme, changeTitle };\n};\n</code></pre>\n\n有了自定的hooks之后就可以直接在组件中使用了\n\n<pre><code class=\"language-tsx line-numbers\">const Theme: FC = () =&gt; {\n    const {\n        config: { theme },\n        toggleTheme,\n    } = useConfig();\n    return (\n        &lt;div&gt;\n            &lt;span&gt;切换主题&lt;/span&gt;\n            &lt;Switch\n                checkedChildren=\"🌛\"\n                unCheckedChildren=\"☀️\"\n                onChange={toggleTheme}\n                checked={theme === \'dark\'}\n                defaultChecked={theme === \'dark\'}\n            /&gt;\n        &lt;/div&gt;\n    );\n};\nconst Title: FC = () =&gt; {\n    const {\n        config: { title },\n        changeTitle,\n    } = useConfig();\n    return (\n        &lt;div&gt;\n            &lt;span&gt;设置标题&lt;/span&gt;\n            &lt;Input placeholder=\"标题\" value={title} onChange={(e) =&gt; changeTitle(e.target.value)} /&gt;\n        &lt;/div&gt;\n    );\n};\n</code></pre>\n\n<h2>性能优化</h2>\n\n<h3><code>useMemo</code></h3>\n\n<code>useMemo</code>拥有个两个参数,一个回调函数和一个依赖项数组,回调函数必须返回一个值,只有在依赖项发生改变的时候,才会重新调用此函数,返回一个新的值.\n\n回调函数的返回值可以是一个<code>普通类型的值</code>(例如<code>字符串</code>,<code>布尔值</code>,<code>数组</code>,<code>对象</code>等)也可以是一个<code>函数</code>,甚至是一个<code>react组件</code>,如果返回值是一个函数,则其作用就与<code>useCallback</code>一样\n\n以下代码在每次<code>config</code>发生改变时,另一个组件的<code>console.log</code>也会调用\n\n<pre><code class=\"language-tsx line-numbers\">const Theme: FC = () =&gt; {\n    const {\n        config: { theme },\n        toggleTheme,\n    } = useConfig();\n    console.log(\'render theme component\');\n    return (...组件代码);\n};\nconst Title: FC = () =&gt; {\n    const {\n        config: { title },\n        changeTitle,\n    } = useConfig();\n    console.log(\'render title component\');\n   return (...组件代码);\n};\n</code></pre>\n\n这样会在每次的<code>input</code>敲入一个字符时就会导致<code>Theme</code>组件重新渲染,极大的浪费了性能,可以通过<code>useMemo</code>做一下优化\n\n<pre><code class=\"language-tsx line-numbers\">const Theme: FC = () =&gt; {\n    const {\n        config: { theme },\n        toggleTheme,\n    } = useConfig();\n    return useMemo(() =&gt; {\n        console.log(\'render theme component\');\n        return (...组件代码);\n    }, [theme]);\n};\nconst Title: FC = () =&gt; {\n    const {\n        config: { title },\n        changeTitle,\n    } = useConfig();\n    return useMemo(() =&gt; {\n        console.log(\'render title component\');\n        return (...组件代码);\n    }, [title]);\n};\n</code></pre>\n\n现在更改其中一个组件只会执行自己组件里的<code>console.log</code>了\n\n<h3><code>useCallback</code></h3>\n\n现在把<code>Theme</code>和<code>Title</code>两个组件放在一起作为<code>ConfigPanel</code>的子组件,并取消原来的<code>useMemo</code>包装,而改用<code>memo</code>包装\n\n<blockquote>\n  <code>React.memo</code>包装的组件,只有当<code>props</code>改变之后才会重新渲染,<code>memo</code>是浅对比\n</blockquote>\n\n<pre><code class=\"language-tsx line-numbers\">const Theme: FC&lt;{ theme: ThemeMode; toggleTheme: () =&gt; void }&gt; = memo(({ theme, toggleTheme }) =&gt; {\n    console.log(\'render theme component\');\n    return (...组件代码);\n});\nconst Title: FC&lt;{ title: string; changeTitle: (value: string) =&gt; void }&gt; = memo(\n    ({ title, changeTitle }) =&gt; {\n        console.log(\'render title component\');\n        return (...组件代码);\n    },\n);\nconst ConfigPanel: FC = () =&gt; {\n    const { config, toggleTheme, changeTitle } = useConfig();\n    return (\n        &lt;&gt;\n            &lt;Theme theme={config.theme} toggleTheme={toggleTheme} /&gt;\n            &lt;Title title={config.title} changeTitle={changeTitle} /&gt;\n        &lt;/&gt;\n    );\n};\n</code></pre>\n\n这时会发现<code>Theme</code>子组件中执行<code>toggleTheme</code>也会导致<code>Title</code>组件重新渲染,原因是<code>changeTitle</code>函数不是固定的,父组件重选渲染后会导致产生新的<code>changeTitle</code>变量,现在尝试使用<code>useCallback</code>包装,是其只在<code>title</code>改变时才产生新值,<code>toggleTheme</code>也一样\n\n<pre><code class=\"language-typescript line-numbers\">const useConfig = () =&gt; {\n    const context = useContext(ConfigureContext);\n    const { state = defaultConfig, dispatch } = context ?? {};\n    const toggleTheme = useCallback(\n        () =&gt;\n            dispatch &amp;&amp;\n            dispatch({\n                type: ConfigureActionType.CHANGE_THEME,\n                value: state.theme === \'light\' ? \'dark\' : \'light\',\n            }),\n        [state.theme],\n    );\n\n    const changeTitle = useCallback(\n        (value: string) =&gt;\n            dispatch &amp;&amp;\n            dispatch({\n                type: ConfigureActionType.SET_TITLE,\n                value,\n            }),\n        [state.title],\n    );\n    return { config: state, toggleTheme, changeTitle };\n};\n</code></pre>\n\n现在执行<code>toggleTheme</code>并不会导致<code>Title</code>组件重新渲染了,反之亦然\n\n<h2>组件引用</h2>\n\n<h3><code>useRef</code></h3>\n\n创建<code>ref</code>对象,其<code>.current</code>属性被初始化为传入的参数,其<code>current</code>属性是可以通过赋值主动改变,而 <code>ref</code> 对象本身在组件的整个生命周期内保持不变\n\n<h4>生命周期不变对象</h4>\n\n以下代码通过使用<code>useRef</code>保存上一次的变量,无论<code>count</code>如何改变都不会执行<code>console.log</code>,因为<code>ref</code>对象本身是不变的.而由于<code>useEffect</code>和<code>useLayoutEffect</code>都是生命周期钩子,与外部是异步的,所以<code>ref.current</code>虽然会在钩子中被赋值为最新值,而其外部则保持上一次的值.\n\n<pre><code class=\"language-tsx line-numbers\">const StateDemo: FC = () =&gt; {\n    ...\n    const ref = useRef(count);\n    useLayoutEffect(() =&gt; {\n        ref.current = count;\n        if (count === 0) setCount(Math.floor(Math.random() * 100));\n    }, [count]);\n    useEffect(() =&gt; {\n        console.log(\'ref has changed\');\n    }, [ref]);\n    return (\n        &lt;div&gt;\n            &lt;p&gt;{count}&lt;/p&gt;\n            &lt;p&gt;{ref.current}&lt;/p&gt;\n            &lt;Button onClick={() =&gt; setCount(count + 1)}&gt;增加&lt;/Button&gt;\n            ...\n        &lt;/div&gt;\n    );\n};\n\n</code></pre>\n\n<h4>与<code>forwardRef</code>结合</h4>\n\n通过<code>forwardRef</code>可以把<code>useRef</code>的值与<code>dom</code>节点绑定,从而可以操控原生的<code>dom</code>节点\n\n<pre><code class=\"language-tsx line-numbers\">const CustomInput = forwardRef((props = {}, ref: Ref&lt;any&gt;) =&gt; (\n    &lt;input ref={ref} type=\"text\" {...props} /&gt;\n));\nconst RefDemo: FC = () =&gt; {\n    const inputRef = useRef&lt;HTMLInputElement | null&gt;(null);\n\n    useEffect(() =&gt; {\n        if (inputRef.current) {\n            inputRef.current.focus();\n            inputRef.current.value = \'useRef\';\n        }\n    });\n    return (\n        &lt;&gt;\n            &lt;CustomInput ref={inputRef} /&gt;\n        &lt;/&gt;\n    );\n};\nexport default RefDemo;\n</code></pre>\n\n<h3><code>useImperativeHandle</code></h3>', 'react hooks详解', '', 'publish', 'open', 'closed', '', 'react-hooks%e8%af%a6%e8%a7%a3', '', '', '2021-10-30 15:49:49', '2021-10-30 07:49:49', '[immer.js]: https://immerjs.github.io/immer/	\"immer.js\"\r\n\r\n[scode type=\"yellow\"]注意: 本教程在MacOS下讲解,Linux用户根据各自的发行版安装软件,windows用户请自行安装wsl2作为替代 [/scode][]\r\n\r\n## 状态与副作用\r\n\r\n### `useState`\r\n\r\n用于改变组件内的状态,例\r\n\r\n```tsx\r\nconst StateDemo: FC = () =&gt; {\r\n    const [count, setCount] = useState(1);\r\n    const [isShow, toggleShow] = useState(true);\r\n\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;p&gt;{count}&lt;/p&gt;\r\n            &lt;Button onClick={() =&gt; setCount(count + 1)}&gt;增加&lt;/Button&gt;\r\n            &lt;p className=&quot;pt-5&quot;&gt;{isShow ? &lt;span&gt; I&#039;m show now &lt;/span&gt; : null}&lt;/p&gt;\r\n            &lt;Button onClick={() =&gt; toggleShow(!isShow)}&gt;{isShow ? &#039;显示&#039; : &#039;隐藏&#039;}&lt;/Button&gt;\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n\r\nexport default StateDemo;\r\n```\r\n\r\n### `useEffect`\r\n\r\n在状态不同的生命周期执行副作用\r\n\r\n#### 简单用法\r\n\r\n每次状态更新都执行所有没有依赖的`useEffect`,以下代码\'toggle ghost\'这一条在`resize`浏览器时也会触发\r\n\r\n```tsx\r\nconst EffectDemo: FC = () =&gt; {\r\n    const [ghost, setGhost] = useState&lt;boolean&gt;(false);\r\n    const [width, setWidth] = useState(window.innerWidth);\r\n    const toggleGhostBtn = () =&gt; setGhost(!ghost);\r\n    const resizeHandle = () =&gt; setWidth(window.innerWidth);\r\n    useEffect(() =&gt; {\r\n        window.addEventListener(&#039;resize&#039;, resizeHandle);\r\n    });\r\n    useEffect(() =&gt; {\r\n        console.log(&#039;toggle ghost&#039;);\r\n    });\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;p&gt;{ghost ? &#039;ghost&#039; : &#039;普通&#039;}按钮&lt;/p&gt;\r\n            &lt;Button type=&quot;primary&quot; onClick={toggleGhostBtn} ghost={ghost}&gt;\r\n                切换按钮样式\r\n            &lt;/Button&gt;\r\n            &lt;p className=&quot;pt-5&quot;&gt;宽度为: {width}&lt;/p&gt;\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n```\r\n\r\n#### 依赖更新\r\n\r\n通过`useEffect`的第二个参数,可以指定其依赖的变量,只有此变量的状态更改时才会执行副作用函数,如果第二个参数为空,则只在第一次渲染和重新渲染时触发\r\n\r\n```tsx\r\nconst EffectDemo: FC = () =&gt; {\r\n    ...\r\n    useEffect(() =&gt; {\r\n        // changeWidth\r\n    }, [width]);\r\n    useEffect(() =&gt; {\r\n        console.log(&#039;toggle ghost&#039;);\r\n    }, [ghost]);\r\n   useEffect(() =&gt; {\r\n        console.log(&#039;只在第一次或重新渲染组件时触发&#039;);\r\n    }, []);\r\n};\r\n```\r\n\r\n#### 清理监听\r\n\r\n在监听`width`的`useEffect`中,每次改变`width`的状态,都会添加一个`resize`事件,这会极大的耗费浏览器占用的内存,通过一个返回值的方式,即可在下一次`width`状态改变后与添加新的`resize`监听前,取消上次添加的`resize`监听事件\r\n\r\n````tsx\r\nconst EffectDemo: FC = () => {\r\n    ...\r\n    useEffect(() => {\r\n        window.addEventListener(\'resize\', resizeHandle);\r\n        return () => {\r\n            window.removeEventListener(\'resize\', resizeHandle);\r\n        };\r\n    }, [width]);\r\n};\r\n````\r\n\r\n#### 异步执行\r\n\r\n在`useEffect`中执行异步函数的语法如下,其实就是在原函数里调用一个`async`打头的立即函数\r\n\r\n```typescript\r\nuseEffect(() =&gt; {\r\n    (async () =&gt; {})();\r\n});\r\n```\r\n\r\n以下示例代码让按钮在变成`ghost`之后1s再变红色\r\n\r\n```tsx\r\n\r\nconst EffectDemo: FC = () =&gt; {\r\n    const [red, setRed] = useState&lt;boolean&gt;(false);\r\n    useEffect(() =&gt; {\r\n        (async () =&gt; {\r\n            await new Promise((resolve, reject) =&gt; setTimeout(() =&gt; resolve(true), 1000));\r\n            setRed(ghost);\r\n        })();\r\n    }, [ghost]);\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;Button type=&quot;primary&quot; onClick={toggleGhostBtn} ghost={ghost} danger={red}&gt;\r\n                切换按钮样式\r\n            &lt;/Button&gt;\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n```\r\n\r\n### `useLayoutEffect`\r\n\r\n与`useEffect`几乎一样,但是具有**防闪烁**作用,比如下面的代码\r\n\r\n```typescript\r\nconst StateDemo: FC = () =&gt; {\r\n    const [count, setCount] = useState(1);\r\n    const [isShow, toggleShow] = useState(true);\r\n    useLayoutEffect(() =&gt; {\r\n        if (count === 0) setCount(Math.floor(Math.random() * 100));\r\n    }, [count]);\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;p&gt;{count}&lt;/p&gt;\r\n            &lt;Button onClick={() =&gt; setCount(0)}&gt;随机数&lt;/Button&gt;\r\n...\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n\r\nexport default StateDemo;\r\n```\r\n\r\n如果使用`useEffect`在点击按钮时,它会在渲染屏幕后异步调用,而`useLayoutEffect`则会把所有逻辑先计算完毕最后一次性渲染,所以它会阻塞渲染,所以除非必须要用,一般情况下基本用`useEffect`\r\n\r\n### `useContext`\r\n\r\n用于向后代组件透传一个值,以创建一个语言选择器为例\r\n\r\n定义一个语言列表变量\r\n\r\n```typescript\r\nconst langs: LangType[] = [\r\n    { name: &#039;en&#039;, label: &#039;english&#039; },\r\n    { name: &#039;zh-CN&#039;, label: &#039;简体中文&#039; },\r\n];\r\n```\r\n\r\n创建一个`context`\r\n\r\n```typescript\r\nconst localContext = createContext&lt;LangStateProps&gt;({\r\n    lang: langs[0],\r\n    setLang: (lang: LangType) =&gt; {},\r\n});\r\n```\r\n\r\n创建`provider`包装器\r\n\r\n```tsx\r\nconst LocalProvider: FC&lt;LangStateProps&gt; = ({ lang, setLang, children }) =&gt; {\r\n    useEffect(() =&gt; {\r\n        setLang(lang);\r\n    }, [lang]);\r\n    return (\r\n        &lt;&gt;\r\n            &lt;localContext.Provider value={{ lang, setLang }}&gt;{children}&lt;/localContext.Provider&gt;\r\n        &lt;/&gt;\r\n    );\r\n};\r\n```\r\n\r\n创建`Local`组件\r\n\r\n```tsx\r\nconst Local: FC = ({ children }) =&gt; {\r\n    const [lang, setLang] = useState(langs[0]);\r\n    return (\r\n        &lt;LocalProvider lang={lang} setLang={setLang}&gt;\r\n            {children}\r\n        &lt;/LocalProvider&gt;\r\n    );\r\n};\r\n```\r\n\r\n把`App.tsx`中的所有节点包含于`Local`组件\r\n\r\n```tsx\r\nconst App: FC = () =&gt; {\r\n    return (\r\n        &lt;Local&gt;\r\n        ...\r\n        &lt;/Local&gt;\r\n    );\r\n};\r\nexport default App;\r\n```\r\n\r\n语言选择组件\r\n\r\n```tsx\r\nconst Lang: FC = () =&gt; {\r\n    const { lang, setLang } = useContext(localContext);\r\n    const changeLang = (value: string) =&gt; {\r\n        const current = langs.find((item) =&gt; item.name === value);\r\n        current &amp;&amp; setLang(current);\r\n    };\r\n    return (\r\n        &lt;&gt;\r\n            &lt;Select defaultValue={lang.name} style={{ width: 120 }} onChange={changeLang}&gt;\r\n                {langs.map(({ name, label }) =&gt; (\r\n                    &lt;Option key={name} value={name}&gt;\r\n                        {label || name}\r\n                    &lt;/Option&gt;\r\n                ))}\r\n            &lt;/Select&gt;\r\n        &lt;/&gt;\r\n    );\r\n};\r\n```\r\n\r\n显示当前语言\r\n\r\n```tsx\r\nconst CurrentLang: FC = () =&gt; {\r\n    const { lang } = useContext(localContext);\r\n    return &lt;div&gt;当前语言: {lang.label || lang.name}&lt;/div&gt;;\r\n};\r\n```\r\n\r\n在`App.tsx`中使用以上两个组件\r\n\r\n```tsx\r\nconst App: FC = () =&gt; {\r\n    return (\r\n        &lt;Local&gt;\r\n                ...\r\n                &lt;LangSelector /&gt;\r\n                &lt;CurrentLang /&gt;\r\n        &lt;/Local&gt;\r\n    );\r\n};\r\nexport default App;\r\n```\r\n\r\n### `useReducer`\r\n\r\n使用`Context`+`useReducer`可以实现轻量级的全局状态管理\r\n\r\n以实现一个简单的应用配置功能为例(包含标题设置和暗黑模式切换)\r\n\r\n#### 编写类型\r\n\r\n```typescript\r\n// 可选择的主题模式\r\nexport type ThemeMode = &#039;light&#039; | &#039;dark&#039;;\r\n// 初始化应用配置\r\nexport type ConfigType = {\r\n    title?: string;\r\n    theme?: ThemeMode;\r\n};\r\n// 合并默认配置后的最终应用配置状态\r\nexport type ConfigStateType = Required&lt;ConfigType&gt;;\r\n// 可用的reducer操作\r\nexport enum ConfigureActionType {\r\n    SET_TITLE = &#039;change_title&#039;,\r\n    CHANGE_THEME = &#039;change_theme&#039;,\r\n}\r\n// 传入给dispatch触发器的数据\r\nexport type ConfigureAction =\r\n    | { type: ConfigureActionType.SET_TITLE; value: string }\r\n    | { type: ConfigureActionType.CHANGE_THEME; value: ThemeMode };\r\n// 透传给子组件的context\r\nexport interface ConfigureContextType {\r\n    state: ConfigStateType;\r\n    dispatch: Dispatch&lt;ConfigureAction&gt;;\r\n}\r\n```\r\n\r\n#### 创建`Context`\r\n\r\n```typescript\r\n// 透传配置状态与dispatch\r\nexport const ConfigureContext = createContext&lt;ConfigureContextType | null&gt;(null);\r\n```\r\n\r\n#### 状态操作\r\n\r\n为了确保数据的唯一性不被污染,使用[immer.js][]操作数据\r\n\r\n```typescript\r\nexport const configReducer: Reducer&lt;ConfigStateType, ConfigureAction&gt; = produce((draft, action) =&gt; {\r\n    switch (action.type) {\r\n        // 设置标题\r\n        case ConfigureActionType.SET_TITLE:\r\n            draft.title = action.value;\r\n            break;\r\n        // 设置主题\r\n        case ConfigureActionType.CHANGE_THEME:\r\n            draft.theme = action.value;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n});\r\n```\r\n\r\n#### 包装器组件\r\n\r\n- 合并默认配置和初始化配置\r\n- 使用`useEffect`创建在标题或主题状态改变时引发的副作用钩子\r\n- 把配置状态和`dispatch`传给`ConfigureContext`\r\n\r\n```tsx\r\nconst Configure: FC&lt;{ config?: ConfigType }&gt; = ({ config = {}, children }) =&gt; {\r\n    const [state, dispatch] = useReducer(\r\n        configReducer,\r\n        config,\r\n        (c) =&gt;\r\n            ({\r\n                title: &#039;react app&#039;,\r\n                theme: &#039;light&#039;,\r\n                ...c,\r\n            } as ConfigStateType),\r\n    );\r\n    useEffect(() =&gt; {\r\n        const html = document.getElementsByTagName(&#039;html&#039;)[0];\r\n        if (state.theme === &#039;dark&#039;) {\r\n            html.classList.add(&#039;dark&#039;);\r\n        } else {\r\n            html.classList.remove(&#039;dark&#039;);\r\n        }\r\n    }, [state.theme]);\r\n    useEffect(() =&gt; {\r\n        document.title = state.title;\r\n    }, [state.title]);\r\n    return (\r\n        &lt;ConfigureContext.Provider value={{ state, dispatch }}&gt;\r\n            {children}\r\n        &lt;/ConfigureContext.Provider&gt;\r\n    );\r\n};\r\n```\r\n\r\n#### 主题选择组件\r\n\r\n```tsx\r\nconst Theme = () =&gt; {\r\n    const context = useContext(ConfigureContext);\r\n    if (!context) return null;\r\n    const { state, dispatch } = context;\r\n    const toggleTheme = () =&gt;\r\n        dispatch({\r\n            type: ConfigureActionType.CHANGE_THEME,\r\n            value: state.theme === &#039;light&#039; ? &#039;dark&#039; : &#039;light&#039;,\r\n        });\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;span&gt;切换主题&lt;/span&gt;\r\n            &lt;Switch\r\n                checkedChildren=&quot;🌛&quot;\r\n                unCheckedChildren=&quot;☀️&quot;\r\n                onChange={toggleTheme}\r\n                checked={state.theme === &#039;dark&#039;}\r\n                defaultChecked={state.theme === &#039;dark&#039;}\r\n            /&gt;\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n```\r\n\r\n#### 标题设置组件\r\n\r\n```tsx\r\nconst Title: FC = () =&gt; {\r\n    const context = useContext(ConfigureContext);\r\n    if (!context) return null;\r\n    const { state, dispatch } = context;\r\n    const changeTitle = (e: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt;\r\n        dispatch({\r\n            type: ConfigureActionType.SET_TITLE,\r\n            value: e.target.value,\r\n        });\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;span&gt;设置标题&lt;/span&gt;\r\n            &lt;Input placeholder=&quot;标题&quot; value={state.title} onChange={changeTitle} /&gt;\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n```\r\n\r\n#### 在`App.tsx`中使用\r\n\r\n```tsx\r\n&lt;Configure&gt;\r\n  ...\r\n  &lt;Theme /&gt;\r\n  &lt;Title /&gt;\r\n&lt;/Configure&gt;\r\n```\r\n\r\n## 自定义Hooks\r\n\r\n为了更加便捷的使用`dispatch`,可以通过自定义一个hooks的方式来封装一些方法\r\n\r\n```typescript\r\nconst useConfig = () =&gt; {\r\n    const context = useContext(ConfigureContext);\r\n    const { state = defaultConfig, dispatch } = context ?? {};\r\n    const toggleTheme = () =&gt;\r\n        dispatch &amp;&amp;\r\n        dispatch({\r\n            type: ConfigureActionType.CHANGE_THEME,\r\n            value: state.theme === &#039;light&#039; ? &#039;dark&#039; : &#039;light&#039;,\r\n        });\r\n    const changeTitle = (value: string) =&gt;\r\n        dispatch &amp;&amp;\r\n        dispatch({\r\n            type: ConfigureActionType.SET_TITLE,\r\n            value,\r\n        });\r\n    return { config: state, toggleTheme, changeTitle };\r\n};\r\n```\r\n\r\n有了自定的hooks之后就可以直接在组件中使用了\r\n\r\n```tsx\r\nconst Theme: FC = () =&gt; {\r\n    const {\r\n        config: { theme },\r\n        toggleTheme,\r\n    } = useConfig();\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;span&gt;切换主题&lt;/span&gt;\r\n            &lt;Switch\r\n                checkedChildren=&quot;🌛&quot;\r\n                unCheckedChildren=&quot;☀️&quot;\r\n                onChange={toggleTheme}\r\n                checked={theme === &#039;dark&#039;}\r\n                defaultChecked={theme === &#039;dark&#039;}\r\n            /&gt;\r\n        &lt;/div&gt;\r\n    );\r\n};\r\nconst Title: FC = () =&gt; {\r\n    const {\r\n        config: { title },\r\n        changeTitle,\r\n    } = useConfig();\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;span&gt;设置标题&lt;/span&gt;\r\n            &lt;Input placeholder=&quot;标题&quot; value={title} onChange={(e) =&gt; changeTitle(e.target.value)} /&gt;\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n```\r\n\r\n## 性能优化\r\n\r\n### `useMemo`\r\n\r\n`useMemo`拥有个两个参数,一个回调函数和一个依赖项数组,回调函数必须返回一个值,只有在依赖项发生改变的时候,才会重新调用此函数,返回一个新的值.\r\n\r\n回调函数的返回值可以是一个`普通类型的值`(例如`字符串`,`布尔值`,`数组`,`对象`等)也可以是一个`函数`,甚至是一个`react组件`,如果返回值是一个函数,则其作用就与`useCallback`一样\r\n\r\n以下代码在每次`config`发生改变时,另一个组件的`console.log`也会调用\r\n\r\n```tsx\r\nconst Theme: FC = () =&gt; {\r\n    const {\r\n        config: { theme },\r\n        toggleTheme,\r\n    } = useConfig();\r\n    console.log(&#039;render theme component&#039;);\r\n    return (...组件代码);\r\n};\r\nconst Title: FC = () =&gt; {\r\n    const {\r\n        config: { title },\r\n        changeTitle,\r\n    } = useConfig();\r\n    console.log(&#039;render title component&#039;);\r\n   return (...组件代码);\r\n};\r\n```\r\n\r\n这样会在每次的`input`敲入一个字符时就会导致`Theme`组件重新渲染,极大的浪费了性能,可以通过`useMemo`做一下优化\r\n\r\n```tsx\r\nconst Theme: FC = () =&gt; {\r\n    const {\r\n        config: { theme },\r\n        toggleTheme,\r\n    } = useConfig();\r\n    return useMemo(() =&gt; {\r\n        console.log(&#039;render theme component&#039;);\r\n        return (...组件代码);\r\n    }, [theme]);\r\n};\r\nconst Title: FC = () =&gt; {\r\n    const {\r\n        config: { title },\r\n        changeTitle,\r\n    } = useConfig();\r\n    return useMemo(() =&gt; {\r\n        console.log(&#039;render title component&#039;);\r\n        return (...组件代码);\r\n    }, [title]);\r\n};\r\n```\r\n\r\n现在更改其中一个组件只会执行自己组件里的`console.log`了\r\n\r\n### `useCallback`\r\n\r\n现在把`Theme`和`Title`两个组件放在一起作为`ConfigPanel`的子组件,并取消原来的`useMemo`包装,而改用`memo`包装\r\n\r\n> `React.memo`包装的组件,只有当`props`改变之后才会重新渲染,`memo`是浅对比\r\n\r\n```tsx\r\nconst Theme: FC&lt;{ theme: ThemeMode; toggleTheme: () =&gt; void }&gt; = memo(({ theme, toggleTheme }) =&gt; {\r\n    console.log(&#039;render theme component&#039;);\r\n    return (...组件代码);\r\n});\r\nconst Title: FC&lt;{ title: string; changeTitle: (value: string) =&gt; void }&gt; = memo(\r\n    ({ title, changeTitle }) =&gt; {\r\n        console.log(&#039;render title component&#039;);\r\n        return (...组件代码);\r\n    },\r\n);\r\nconst ConfigPanel: FC = () =&gt; {\r\n    const { config, toggleTheme, changeTitle } = useConfig();\r\n    return (\r\n        &lt;&gt;\r\n            &lt;Theme theme={config.theme} toggleTheme={toggleTheme} /&gt;\r\n            &lt;Title title={config.title} changeTitle={changeTitle} /&gt;\r\n        &lt;/&gt;\r\n    );\r\n};\r\n```\r\n\r\n这时会发现`Theme`子组件中执行`toggleTheme`也会导致`Title`组件重新渲染,原因是`changeTitle`函数不是固定的,父组件重选渲染后会导致产生新的`changeTitle`变量,现在尝试使用`useCallback`包装,是其只在`title`改变时才产生新值,`toggleTheme`也一样\r\n\r\n```typescript\r\nconst useConfig = () =&gt; {\r\n    const context = useContext(ConfigureContext);\r\n    const { state = defaultConfig, dispatch } = context ?? {};\r\n    const toggleTheme = useCallback(\r\n        () =&gt;\r\n            dispatch &amp;&amp;\r\n            dispatch({\r\n                type: ConfigureActionType.CHANGE_THEME,\r\n                value: state.theme === &#039;light&#039; ? &#039;dark&#039; : &#039;light&#039;,\r\n            }),\r\n        [state.theme],\r\n    );\r\n\r\n    const changeTitle = useCallback(\r\n        (value: string) =&gt;\r\n            dispatch &amp;&amp;\r\n            dispatch({\r\n                type: ConfigureActionType.SET_TITLE,\r\n                value,\r\n            }),\r\n        [state.title],\r\n    );\r\n    return { config: state, toggleTheme, changeTitle };\r\n};\r\n```\r\n\r\n现在执行`toggleTheme`并不会导致`Title`组件重新渲染了,反之亦然\r\n\r\n## 组件引用\r\n\r\n### `useRef`\r\n\r\n创建`ref`对象,其`.current`属性被初始化为传入的参数,其`current`属性是可以通过赋值主动改变,而 `ref` 对象本身在组件的整个生命周期内保持不变\r\n\r\n#### 生命周期不变对象\r\n\r\n以下代码通过使用`useRef`保存上一次的变量,无论`count`如何改变都不会执行`console.log`,因为`ref`对象本身是不变的.而由于`useEffect`和`useLayoutEffect`都是生命周期钩子,与外部是异步的,所以`ref.current`虽然会在钩子中被赋值为最新值,而其外部则保持上一次的值.\r\n\r\n```tsx\r\nconst StateDemo: FC = () =&gt; {\r\n    ...\r\n    const ref = useRef(count);\r\n    useLayoutEffect(() =&gt; {\r\n        ref.current = count;\r\n        if (count === 0) setCount(Math.floor(Math.random() * 100));\r\n    }, [count]);\r\n    useEffect(() =&gt; {\r\n        console.log(&#039;ref has changed&#039;);\r\n    }, [ref]);\r\n    return (\r\n        &lt;div&gt;\r\n            &lt;p&gt;{count}&lt;/p&gt;\r\n            &lt;p&gt;{ref.current}&lt;/p&gt;\r\n            &lt;Button onClick={() =&gt; setCount(count + 1)}&gt;增加&lt;/Button&gt;\r\n            ...\r\n        &lt;/div&gt;\r\n    );\r\n};\r\n\r\n```\r\n\r\n#### 与`forwardRef`结合\r\n\r\n通过`forwardRef`可以把`useRef`的值与`dom`节点绑定,从而可以操控原生的`dom`节点\r\n\r\n```tsx\r\nconst CustomInput = forwardRef((props = {}, ref: Ref&lt;any&gt;) =&gt; (\r\n    &lt;input ref={ref} type=&quot;text&quot; {...props} /&gt;\r\n));\r\nconst RefDemo: FC = () =&gt; {\r\n    const inputRef = useRef&lt;HTMLInputElement | null&gt;(null);\r\n\r\n    useEffect(() =&gt; {\r\n        if (inputRef.current) {\r\n            inputRef.current.focus();\r\n            inputRef.current.value = &#039;useRef&#039;;\r\n        }\r\n    });\r\n    return (\r\n        &lt;&gt;\r\n            &lt;CustomInput ref={inputRef} /&gt;\r\n        &lt;/&gt;\r\n    );\r\n};\r\nexport default RefDemo;\r\n```\r\n\r\n### `useImperativeHandle`\r\n\r\n\r\n', 0, 'https://jikexingkong.com/?p=101', 0, 'post', '', 0),
(102, 1, '2021-10-30 15:50:11', '2021-10-30 07:50:11', '', 'react+ts环境搭建-umi.js', '', 'publish', 'open', 'closed', '', 'reactts%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba-umi-js', '', '', '2021-10-30 15:50:11', '2021-10-30 07:50:11', '', 0, 'https://jikexingkong.com/?p=102', 0, 'post', '', 0),
(103, 1, '2021-10-30 15:50:26', '2021-10-30 07:50:26', '', 'react+ts环境搭建-webpack5', '', 'publish', 'open', 'closed', '', 'reactts%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba-webpack5', '', '', '2021-10-30 15:50:26', '2021-10-30 07:50:26', '', 0, 'https://jikexingkong.com/?p=103', 0, 'post', '', 1),
(104, 1, '2021-10-30 15:50:45', '2021-10-30 07:50:45', '', 'react+ts环境搭建-CRA', '', 'publish', 'open', 'closed', '', 'reactts%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba-cra', '', '', '2021-11-13 05:58:14', '2021-11-12 21:58:14', '', 0, 'https://jikexingkong.com/?p=104', 0, 'post', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(105, 1, '2021-10-30 15:51:03', '2021-10-30 07:51:03', '<p align=\"center\">\n  <img width=\"320\" src=\"https://jikexingkong.com/wp-content/uploads/2021/05/1621062107-bf0acc4b622953b.svg\">\n</p>\n\n<h5>基于Gin + Vue + Element UI的前后端分离权限管理系统</h5>\n\n系统初始化极度简单，只需要配置文件中，修改数据库连接，系统启动后会自动初始化数据库信息以及必须的基础数据\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://wenjianzhang.github.io/go-admin-site\">在线文档国际</a>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"http://mydearzwj.gitee.io/go-admin-site/\">在线文档国内</a>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/go-admin-team/go-admin-ui\">前端项目</a>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://space.bilibili.com/565616721/channel/detail?cid=125737\">视频教程</a>\n\n<h2>✨ 特性</h2>\n\n<ul>\n<li>遵循 RESTful API 设计规范</p></li>\n<li><p>基于 GIN WEB API 框架，提供了丰富的中间件支持（用户认证、跨域、访问日志、追踪ID等）</p></li>\n<li><p>基于Casbin的 RBAC 访问控制模型</p></li>\n<li><p>JWT 认证</p></li>\n<li><p>支持 Swagger 文档(基于swaggo)</p></li>\n<li><p>基于 GORM 的数据库存储，可扩展多种类型数据库</p></li>\n<li><p>配置文件简单的模型映射，快速能够得到想要的配置</p></li>\n<li><p>代码生成工具</p></li>\n<li><p>表单构建工具</p></li>\n<li><p>多命令模式</p></li>\n<li><p>TODO: 单元测试</p></li>\n</ul>\n\n<h2>🎁 内置</h2>\n\n<ol>\n<li>用户管理：用户是系统操作者，该功能主要完成系统用户配置。</li>\n<li>部门管理：配置系统组织机构（公司、部门、小组），树结构展现支持数据权限。</li>\n<li>岗位管理：配置系统用户所属担任职务。</li>\n<li>菜单管理：配置系统菜单，操作权限，按钮权限标识等。</li>\n<li>角色管理：角色菜单权限分配、设置角色按机构进行数据范围权限划分。</li>\n<li>字典管理：对系统中经常使用的一些较为固定的数据进行维护。</li>\n<li>参数管理：对系统动态配置常用参数。</li>\n<li>操作日志：系统正常操作日志记录和查询；系统异常信息日志记录和查询。</li>\n<li>登录日志：系统登录日志记录查询包含登录异常。</li>\n<li>系统接口：根据业务代码自动生成相关的api接口文档。</li>\n<li>代码生成：根据数据表结构生成对应的增删改查相对应业务，全部可视化编程，基本业务可以0代码实现。</li>\n<li>表单构建：自定义页面样式，拖拉拽实现页面布局。</li>\n<li>服务监控：查看一些服务器的基本信息。</li>\n</ol>\n\n<h2>准备工作</h2>\n\n<p>你需要在本地安装 [go] [gin] <a class=\"wp-editor-md-post-content-link\" href=\"http://nodejs.org/\">node</a> 和 <a class=\"wp-editor-md-post-content-link\" href=\"https://git-scm.com/\">git</a>\n\n同时配套了系列教程包含视频和文档，如何从下载完成到熟练使用，强烈建议大家先看完这些教程再来实践本项目！！！\n\n<h3>轻松实现go-admin写出第一个应用 - 文档教程</h3>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"http://doc.zhangwj.com/go-admin-site/guide/intro/tutorial01.html\">步骤一 - 基础内容介绍</a>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"http://doc.zhangwj.com/go-admin-site/guide/intro/tutorial02.html\">步骤二 - 实际应用 - 编写增删改查</a>\n\n<h3>手把手教你从入门到放弃 - 视频教程</h3>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.bilibili.com/video/BV1z5411x7JG\">如何启动go-admin</a>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.bilibili.com/video/BV1Dg4y1i79D\">使用生成工具轻松实现业务</a>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.bilibili.com/video/BV1N54y1i71P\">v1.1.0版本代码生成工具-释放双手</a> [进阶]\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.bilibili.com/video/BV1Fg4y1q7ph\">多命令启动方式讲解以及IDE配置</a>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.bilibili.com/video/BV1Wp4y1D715\">go-admin菜单的配置说明</a> [必看]\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.bilibili.com/video/BV1zv411B7nG\">如何配置菜单信息以及接口信息</a> [必看]\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.bilibili.com/video/BV1rt4y197d3\">go-admin权限配置使用说明</a> [必看]\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://www.bilibili.com/video/BV1LK4y1s71e\">go-admin数据权限使用说明</a> [必看]\n\n<strong>如有问题请先看上述使用文档和文章，若不能满足，欢迎 issue 和 pr ，视频教程和文档持续更新中</strong>\n\n<h2>🗞 系统架构</h2>\n\n<p align=\"center\">\n  <img  src=\"https://gitee.com/mydearzwj/image/raw/d9f59ea603e3c8a3977491a1bfa8f122e1a80824/img/go-admin-system.png\" width=\"936px\" height=\"491px\">\n</p>\n\n<h2>📦 本地开发</h2>\n\n<h3>开发目录创建</h3>\n\n<pre><code class=\"language-bash line-numbers\"># 创建开发目录\nmkdir goadmin\ncd goadmin\n</code></pre>\n\n<h3>获取代码</h3>\n\n<blockquote>\n  重点注意：两个项目必须放在同一文件夹下；\n</blockquote>\n\n<pre><code class=\"language-bash line-numbers\"># 获取后端代码\ngit clone https://github.com/go-admin-team/go-admin.git\n\n# 获取前端代码\ngit clone https://github.com/go-admin-team/go-admin-ui.git\n\n</code></pre>\n\n<h3>启动说明</h3>\n\n<h4>服务端启动说明</h4>\n\n<pre><code class=\"language-bash line-numbers\"># 进入 go-admin 后端项目\ncd ./go-admin\n\n# 编译项目\ngo build\n\n# 修改配置 \n# 文件路径  go-admin/config/settings.yml\nvi ./config/setting.yml \n\n# 1. 配置文件中修改数据库信息 \n# 注意: settings.database 下对应的配置数据\n# 2. 确认log路径\n</code></pre>\n\n:::tip ⚠️注意 在windows环境如果没有安装中CGO，会出现这个问题；\n\n<pre><code class=\"language-bash line-numbers\">E:\\go-admin&gt;go build\n# github.com/mattn/go-sqlite3\ncgo: exec /missing-cc: exec: \"/missing-cc\": file does not exist\n</code></pre>\n\nor\n\n<pre><code class=\"language-bash line-numbers\">D:\\Code\\go-admin&gt;go build\n# github.com/mattn/go-sqlite3\ncgo: exec gcc: exec: \"gcc\": executable file not found in %PATH%\n</code></pre>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://doc.go-admin.dev/guide/other/faq.html#_5-cgo-exec-missing-cc-exec-missing-cc-file-does-not-exist\">解决cgo问题进入</a>\n\n:::\n\n<h4>初始化数据库，以及服务启动</h4>\n\n<pre><code class=\"language-bash line-numbers\"># 首次配置需要初始化数据库资源信息\n# macOS or linux 下使用\n$ ./go-admin migrate -c=config/settings.dev.yml\n\n# ⚠️注意:windows 下使用\n$ go-admin.exe migrate -c=config/settings.dev.yml\n\n\n# 启动项目，也可以用IDE进行调试\n# macOS or linux 下使用\n$ ./go-admin server -c config/settings.yml\n\n\n# ⚠️注意:windows 下使用\n$ go-admin.exe server -c config/settings.yml\n</code></pre>\n\n<h4>使用docker 编译启动</h4>\n\n<pre><code class=\"language-shell line-numbers\"># 编译镜像\ndocker build -t go-admin .\n\n# 启动容器，第一个go-admin是容器名字，第二个go-admin是镜像名称\n# -v 映射配置文件 本地路径：容器路径\ndocker run --name go-admin -p 8000:8000 -v /config/settings.yml:/config/settings.yml -d go-admin-server\n</code></pre>\n\n<h4>文档生成</h4>\n\n<pre><code class=\"language-bash line-numbers\">go generate\n</code></pre>\n\n<h4>交叉编译</h4>\n\n<pre><code class=\"language-bash line-numbers\"># windows\nenv GOOS=windows GOARCH=amd64 go build main.go\n\n# or\n# linux\nenv GOOS=linux GOARCH=amd64 go build main.go\n</code></pre>\n\n<h3>UI交互端启动说明</h3>\n\n<pre><code class=\"language-bash line-numbers\"># 安装依赖\nnpm install\n\n# 建议不要直接使用 cnpm 安装依赖，会有各种诡异的 bug。可以通过如下操作解决 npm 下载速度慢的问题\nnpm install --registry=https://registry.npm.taobao.org\n\n# 启动服务\nnpm run dev\n</code></pre>\n\n<h2>🎬 在线体验</h2>\n\n<blockquote>\n  admin  /  123456\n</blockquote>\n\n演示地址：<a class=\"wp-editor-md-post-content-link\" href=\"http://www.go-admin.dev/#/login\">http://www.go-admin.dev</a>', 'go-admin', '', 'publish', 'open', 'closed', '', 'go-admin', '', '', '2021-11-17 00:25:06', '2021-11-16 16:25:06', '<p align=\"center\">\r\n  <img width=\"320\" src=\"https://jikexingkong.com/wp-content/uploads/2021/05/1621062107-bf0acc4b622953b.svg\">\r\n</p>\r\n\r\n##### 基于Gin + Vue + Element UI的前后端分离权限管理系统 \r\n\r\n系统初始化极度简单，只需要配置文件中，修改数据库连接，系统启动后会自动初始化数据库信息以及必须的基础数据\r\n\r\n[在线文档国际](https://wenjianzhang.github.io/go-admin-site)\r\n\r\n[在线文档国内](http://mydearzwj.gitee.io/go-admin-site/)\r\n\r\n[前端项目](https://github.com/go-admin-team/go-admin-ui)\r\n\r\n[视频教程](https://space.bilibili.com/565616721/channel/detail?cid=125737)\r\n\r\n## ✨ 特性\r\n\r\n- 遵循 RESTful API 设计规范\r\n\r\n- 基于 GIN WEB API 框架，提供了丰富的中间件支持（用户认证、跨域、访问日志、追踪ID等）\r\n\r\n- 基于Casbin的 RBAC 访问控制模型\r\n\r\n- JWT 认证\r\n\r\n- 支持 Swagger 文档(基于swaggo)\r\n\r\n- 基于 GORM 的数据库存储，可扩展多种类型数据库 \r\n\r\n- 配置文件简单的模型映射，快速能够得到想要的配置\r\n\r\n- 代码生成工具\r\n\r\n- 表单构建工具\r\n\r\n- 多命令模式\r\n\r\n- TODO: 单元测试\r\n\r\n\r\n## 🎁 内置\r\n\r\n1.  用户管理：用户是系统操作者，该功能主要完成系统用户配置。\r\n2.  部门管理：配置系统组织机构（公司、部门、小组），树结构展现支持数据权限。\r\n3.  岗位管理：配置系统用户所属担任职务。\r\n4.  菜单管理：配置系统菜单，操作权限，按钮权限标识等。\r\n5.  角色管理：角色菜单权限分配、设置角色按机构进行数据范围权限划分。\r\n6.  字典管理：对系统中经常使用的一些较为固定的数据进行维护。\r\n7.  参数管理：对系统动态配置常用参数。\r\n8.  操作日志：系统正常操作日志记录和查询；系统异常信息日志记录和查询。\r\n9.  登录日志：系统登录日志记录查询包含登录异常。\r\n10. 系统接口：根据业务代码自动生成相关的api接口文档。\r\n11. 代码生成：根据数据表结构生成对应的增删改查相对应业务，全部可视化编程，基本业务可以0代码实现。\r\n12. 表单构建：自定义页面样式，拖拉拽实现页面布局。\r\n13. 服务监控：查看一些服务器的基本信息。\r\n\r\n## 准备工作\r\n\r\n你需要在本地安装 [go] [gin] [node](http://nodejs.org/) 和 [git](https://git-scm.com/) \r\n\r\n同时配套了系列教程包含视频和文档，如何从下载完成到熟练使用，强烈建议大家先看完这些教程再来实践本项目！！！\r\n\r\n### 轻松实现go-admin写出第一个应用 - 文档教程\r\n\r\n[步骤一 - 基础内容介绍](http://doc.zhangwj.com/go-admin-site/guide/intro/tutorial01.html)\r\n\r\n[步骤二 - 实际应用 - 编写增删改查](http://doc.zhangwj.com/go-admin-site/guide/intro/tutorial02.html) \r\n\r\n### 手把手教你从入门到放弃 - 视频教程 \r\n\r\n[如何启动go-admin](https://www.bilibili.com/video/BV1z5411x7JG)\r\n\r\n[使用生成工具轻松实现业务](https://www.bilibili.com/video/BV1Dg4y1i79D)\r\n\r\n[v1.1.0版本代码生成工具-释放双手](https://www.bilibili.com/video/BV1N54y1i71P) [进阶]\r\n\r\n[多命令启动方式讲解以及IDE配置](https://www.bilibili.com/video/BV1Fg4y1q7ph)\r\n\r\n[go-admin菜单的配置说明](https://www.bilibili.com/video/BV1Wp4y1D715) [必看]\r\n\r\n[如何配置菜单信息以及接口信息](https://www.bilibili.com/video/BV1zv411B7nG) [必看]\r\n\r\n[go-admin权限配置使用说明](https://www.bilibili.com/video/BV1rt4y197d3) [必看]\r\n\r\n[go-admin数据权限使用说明](https://www.bilibili.com/video/BV1LK4y1s71e) [必看]\r\n\r\n\r\n**如有问题请先看上述使用文档和文章，若不能满足，欢迎 issue 和 pr ，视频教程和文档持续更新中**\r\n\r\n## 🗞 系统架构\r\n\r\n<p align=\"center\">\r\n  <img  src=\"https://gitee.com/mydearzwj/image/raw/d9f59ea603e3c8a3977491a1bfa8f122e1a80824/img/go-admin-system.png\" width=\"936px\" height=\"491px\">\r\n</p>\r\n\r\n## 📦 本地开发\r\n\r\n### 开发目录创建\r\n\r\n```bash\r\n\r\n# 创建开发目录\r\nmkdir goadmin\r\ncd goadmin\r\n```\r\n\r\n### 获取代码\r\n\r\n> 重点注意：两个项目必须放在同一文件夹下；\r\n\r\n```bash\r\n# 获取后端代码\r\ngit clone https://github.com/go-admin-team/go-admin.git\r\n\r\n# 获取前端代码\r\ngit clone https://github.com/go-admin-team/go-admin-ui.git\r\n\r\n```\r\n\r\n\r\n### 启动说明\r\n\r\n#### 服务端启动说明\r\n\r\n```bash\r\n# 进入 go-admin 后端项目\r\ncd ./go-admin\r\n\r\n# 编译项目\r\ngo build\r\n\r\n# 修改配置 \r\n# 文件路径  go-admin/config/settings.yml\r\nvi ./config/setting.yml \r\n\r\n# 1. 配置文件中修改数据库信息 \r\n# 注意: settings.database 下对应的配置数据\r\n# 2. 确认log路径\r\n```\r\n\r\n:::tip ⚠️注意 在windows环境如果没有安装中CGO，会出现这个问题；\r\n\r\n```bash\r\nE:\\go-admin&gt;go build\r\n# github.com/mattn/go-sqlite3\r\ncgo: exec /missing-cc: exec: &quot;/missing-cc&quot;: file does not exist\r\n```\r\n\r\nor\r\n\r\n```bash\r\nD:\\Code\\go-admin&gt;go build\r\n# github.com/mattn/go-sqlite3\r\ncgo: exec gcc: exec: &quot;gcc&quot;: executable file not found in %PATH%\r\n```\r\n\r\n[解决cgo问题进入](https://doc.go-admin.dev/guide/other/faq.html#_5-cgo-exec-missing-cc-exec-missing-cc-file-does-not-exist)\r\n\r\n:::\r\n\r\n#### 初始化数据库，以及服务启动\r\n\r\n``` bash\r\n# 首次配置需要初始化数据库资源信息\r\n# macOS or linux 下使用\r\n$ ./go-admin migrate -c=config/settings.dev.yml\r\n\r\n# ⚠️注意:windows 下使用\r\n$ go-admin.exe migrate -c=config/settings.dev.yml\r\n\r\n\r\n# 启动项目，也可以用IDE进行调试\r\n# macOS or linux 下使用\r\n$ ./go-admin server -c config/settings.yml\r\n\r\n\r\n# ⚠️注意:windows 下使用\r\n$ go-admin.exe server -c config/settings.yml\r\n```\r\n\r\n#### 使用docker 编译启动\r\n\r\n```shell\r\n# 编译镜像\r\ndocker build -t go-admin .\r\n\r\n# 启动容器，第一个go-admin是容器名字，第二个go-admin是镜像名称\r\n# -v 映射配置文件 本地路径：容器路径\r\ndocker run --name go-admin -p 8000:8000 -v /config/settings.yml:/config/settings.yml -d go-admin-server\r\n```\r\n\r\n\r\n\r\n#### 文档生成\r\n\r\n```bash\r\ngo generate\r\n```\r\n\r\n#### 交叉编译\r\n```bash\r\n# windows\r\nenv GOOS=windows GOARCH=amd64 go build main.go\r\n\r\n# or\r\n# linux\r\nenv GOOS=linux GOARCH=amd64 go build main.go\r\n```\r\n\r\n### UI交互端启动说明\r\n\r\n```bash\r\n# 安装依赖\r\nnpm install\r\n\r\n# 建议不要直接使用 cnpm 安装依赖，会有各种诡异的 bug。可以通过如下操作解决 npm 下载速度慢的问题\r\nnpm install --registry=https://registry.npm.taobao.org\r\n\r\n# 启动服务\r\nnpm run dev\r\n```\r\n\r\n## 🎬 在线体验\r\n> admin  /  123456\r\n\r\n演示地址：[http://www.go-admin.dev](http://www.go-admin.dev/#/login)\r\n\r\n', 0, 'https://jikexingkong.com/?p=105', 0, 'post', '', 1),
(106, 1, '2021-10-30 15:51:26', '2021-10-30 07:51:26', '<div align=\"center\"> <a href=\"https://github.com/anncwb/vue-vben-admin\"> <img alt=\"VbenAdmin Logo\" width=\"200\" height=\"200\" src=\"https://anncwb.github.io/anncwb/images/logo.png\"> </a> <br> <br>\n\n<h1>Vue vben admin</h1>\n</div>\n\n<h2>简介</h2>\n\nVue Vben Admin 是一个免费开源的中后台模版。使用了最新的<code>vue3</code>,<code>vite2</code>,<code>TypeScript</code>等主流技术开发，开箱即用的中后台前端解决方案，也可用于学习参考。\n\n<h2>特性</h2>\n\n<ul>\n<li><strong>最新技术栈</strong>：使用 Vue3/vite2 等前端前沿技术开发</li>\n<li><strong>TypeScript</strong>: 应用程序级 JavaScript 的语言</li>\n<li><strong>主题</strong>：可配置的主题</li>\n<li><strong>国际化</strong>：内置完善的国际化方案</li>\n<li><strong>Mock 数据</strong> 内置 Mock 数据方案</li>\n<li><strong>权限</strong> 内置完善的动态路由权限生成方案</li>\n<li><strong>组件</strong> 二次封装了多个常用的组件</li>\n</ul>\n\n<h2>预览</h2>\n\n<ul>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://vvbin.cn/next/\">vue-vben-admin</a> - 完整版中文站点</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://anncwb.github.io/vue-vben-admin/\">vue-vben-admin-gh-pages</a> - 完整版 github 站点</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://vvbin.cn/thin/next/\">vben-admin-thin-next</a> - 简化版中文站点</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://anncwb.github.io/vben-admin-thin-next/\">vben-admin-thin-gh-pages</a> - 简化版 github 站点</li>\n</ul>\n\n测试账号: vben/123456\n\n<p align=\"center\">\n    <img alt=\"VbenAdmin Logo\" width=\"100%\" src=\"https://anncwb.github.io/anncwb/images/preview1.png\">\n    <img alt=\"VbenAdmin Logo\" width=\"100%\" src=\"https://anncwb.github.io/anncwb/images/preview2.png\">\n    <img alt=\"VbenAdmin Logo\" width=\"100%\" src=\"https://anncwb.github.io/anncwb/images/preview3.png\">\n</p>\n\n<h3>使用 Gitpod</h3>\n\n在 Gitpod（适用于 GitHub 的免费在线开发环境）中打开项目，并立即开始编码.\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://gitpod.io/#https://github.com/anncwb/vue-vben-admin\"><img src=\"https://gitpod.io/button/open-in-gitpod.svg\" alt=\"Open in Gitpod\" /></a>\n\n<h2>文档</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://vvbin.cn/doc-next/\">文档地址</a>\n\n<h2>准备</h2>\n\n<ul>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"http://nodejs.org/\">node</a> 和 <a class=\"wp-editor-md-post-content-link\" href=\"https://git-scm.com/\">git</a> -项目开发环境</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://vitejs.dev/\">Vite</a> - 熟悉 vite 特性</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://v3.vuejs.org/\">Vue3</a> - 熟悉 Vue 基础语法</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://www.typescriptlang.org/\">TypeScript</a> - 熟悉<code>TypeScript</code>基本语法</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"http://es6.ruanyifeng.com/\">Es6+</a> - 熟悉 es6 基本语法</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://next.router.vuejs.org/\">Vue-Router-Next</a> - 熟悉 vue-router 基本使用</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://2x.antdv.com/docs/vue/introduce-cn/\">Ant-Design-Vue</a> - ui 基本使用</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/nuysoft/Mock\">Mock.js</a> - mockjs 基本语法</li>\n</ul>\n\n<h2>安装使用</h2>\n\n<ul>\n<li>获取项目代码</li>\n</ul>\n\n<pre><code class=\"language-bash line-numbers\">git clone https://github.com/anncwb/vue-vben-admin.git\n</code></pre>\n\n<ul>\n<li>安装依赖</li>\n</ul>\n\n<pre><code class=\"language-bash line-numbers\">cd vue-vben-admin\n\nyarn install\n\n</code></pre>\n\n<ul>\n<li>运行</li>\n</ul>\n\n<pre><code class=\"language-bash line-numbers\">yarn serve\n</code></pre>\n\n<ul>\n<li>打包</li>\n</ul>\n\n<pre><code class=\"language-bash line-numbers\">yarn build\n</code></pre>\n\n<h2>更新日志</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"./CHANGELOG.zh_CN.md\">CHANGELOG</a>\n\n<h2>项目地址</h2>\n\n<ul>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/anncwb/vue-vben-admin\">vue-vben-admin</a> - 完整版</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/anncwb/vben-admin-thin-next\">vue-vben-admin-thin-next</a> - 简化版</li>\n</ul>\n\n<h2>如何贡献</h2>\n\n非常欢迎你的加入！<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/anncwb/vue-vben-admin/issues/new/choose\">提一个 Issue</a> 或者提交一个 Pull Request。\n\n<strong>Pull Request:</strong>\n\n<ol>\n<li>Fork 代码!</li>\n<li>创建自己的分支: <code>git checkout -b feat/xxxx</code></li>\n<li>提交你的修改: <code>git commit -am \'feat(function): add xxxxx\'</code></li>\n<li>推送您的分支: <code>git push origin feat/xxxx</code></li>\n<li>提交<code>pull request</code></li>\n</ol>\n\n<h2>Git 贡献提交规范</h2>\n\n<ul>\n<li>参考 <a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/vuejs/vue/blob/dev/.github/COMMIT_CONVENTION.md\">vue</a> 规范 (<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-angular\">Angular</a>)\n\n<ul>\n<li><code>feat</code> 增加新功能</li>\n<li><code>fix</code> 修复问题/BUG</li>\n<li><code>style</code> 代码风格相关无影响运行结果的</li>\n<li><code>perf</code> 优化/性能提升</li>\n<li><code>refactor</code> 重构</li>\n<li><code>revert</code> 撤销修改</li>\n<li><code>test</code> 测试相关</li>\n<li><code>docs</code> 文档/注释</li>\n<li><code>chore</code> 依赖更新/脚手架配置修改等</li>\n<li><code>workflow</code> 工作流改进</li>\n<li><code>ci</code> 持续集成</li>\n<li><code>types</code> 类型定义文件更改</li>\n<li><code>wip</code> 开发中</li>\n</ul></li>\n</ul>\n\n<h2>浏览器支持</h2>\n\n本地开发推荐使用<code>Chrome 80+</code> 浏览器\n\n支持现代浏览器, 不支持 IE\n\n<table>\n<thead>\n<tr>\n  <th align=\"center\"><a class=\"wp-editor-md-post-content-link\" href=\"http://godban.github.io/browsers-support-badges/\"><img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/edge/edge_48x48.png\" alt=\" Edge\" width=\"24px\" height=\"24px\" /></a></br>IE</th>\n  <th align=\"center\"><a class=\"wp-editor-md-post-content-link\" href=\"http://godban.github.io/browsers-support-badges/\"><img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/edge/edge_48x48.png\" alt=\" Edge\" width=\"24px\" height=\"24px\" /></a></br>Edge</th>\n  <th align=\"center\"><a class=\"wp-editor-md-post-content-link\" href=\"http://godban.github.io/browsers-support-badges/\"><img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png\" alt=\"Firefox\" width=\"24px\" height=\"24px\" /></a></br>Firefox</th>\n  <th align=\"center\"><a class=\"wp-editor-md-post-content-link\" href=\"http://godban.github.io/browsers-support-badges/\"><img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png\" alt=\"Chrome\" width=\"24px\" height=\"24px\" /></a></br>Chrome</th>\n  <th align=\"center\"><a class=\"wp-editor-md-post-content-link\" href=\"http://godban.github.io/browsers-support-badges/\"><img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/safari/safari_48x48.png\" alt=\"Safari\" width=\"24px\" height=\"24px\" /></a></br>Safari</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td align=\"center\">not support</td>\n  <td align=\"center\">last 2 versions</td>\n  <td align=\"center\">last 2 versions</td>\n  <td align=\"center\">last 2 versions</td>\n  <td align=\"center\">last 2 versions</td>\n</tr>\n</tbody>\n</table>\n\n<h2>相关仓库</h2>\n\n如果这些插件对你有帮助，可以给一个 star 支持下\n\n<ul>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/anncwb/vite-plugin-mock\">vite-plugin-mock</a> - 用于本地及开发环境数据 mock</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/anncwb/vite-plugin-html\">vite-plugin-html</a> - 用于 html 模版转换及压缩</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/anncwb/vite-plugin-style-import\">vite-plugin-style-import</a> - 用于组件库样式按需引入</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/anncwb/vite-plugin-theme\">vite-plugin-theme</a> - 用于在线切换主题色等颜色相关配置</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/anncwb/vite-plugin-imagemin\">vite-plugin-imagemin</a> - 用于打包压缩图片资源</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/anncwb/vite-plugin-compression\">vite-plugin-compression</a> - 用于打包输出.gz|.brotil 文件</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/anncwb/vite-plugin-svg-icons\">vite-plugin-svg-icons</a> - 用于快速生成 svg 雪碧图</li>\n</ul>\n\n<h2>后台整合示例</h2>\n\n<ul>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/zuihou/lamp-cloud\">lamp-cloud</a> - 基于 SpringCloud Alibaba 的微服务中后台快速开发平台</li>\n</ul>', 'Vben Admin', '', 'publish', 'open', 'closed', '', 'vben-admin', '', '', '2021-11-14 06:12:50', '2021-11-13 22:12:50', '<div align=\"center\"> <a href=\"https://github.com/anncwb/vue-vben-admin\"> <img alt=\"VbenAdmin Logo\" width=\"200\" height=\"200\" src=\"https://anncwb.github.io/anncwb/images/logo.png\"> </a> <br> <br>\r\n\r\n<h1>Vue vben admin</h1>\r\n</div>\r\n\r\n## 简介\r\n\r\nVue Vben Admin 是一个免费开源的中后台模版。使用了最新的`vue3`,`vite2`,`TypeScript`等主流技术开发，开箱即用的中后台前端解决方案，也可用于学习参考。\r\n\r\n## 特性\r\n\r\n- **最新技术栈**：使用 Vue3/vite2 等前端前沿技术开发\r\n- **TypeScript**: 应用程序级 JavaScript 的语言\r\n- **主题**：可配置的主题\r\n- **国际化**：内置完善的国际化方案\r\n- **Mock 数据** 内置 Mock 数据方案\r\n- **权限** 内置完善的动态路由权限生成方案\r\n- **组件** 二次封装了多个常用的组件\r\n\r\n## 预览\r\n\r\n- [vue-vben-admin](https://vvbin.cn/next/) - 完整版中文站点\r\n- [vue-vben-admin-gh-pages](https://anncwb.github.io/vue-vben-admin/) - 完整版 github 站点\r\n- [vben-admin-thin-next](https://vvbin.cn/thin/next/) - 简化版中文站点\r\n- [vben-admin-thin-gh-pages](https://anncwb.github.io/vben-admin-thin-next/) - 简化版 github 站点\r\n\r\n测试账号: vben/123456\r\n\r\n<p align=\"center\">\r\n    <img alt=\"VbenAdmin Logo\" width=\"100%\" src=\"https://anncwb.github.io/anncwb/images/preview1.png\">\r\n    <img alt=\"VbenAdmin Logo\" width=\"100%\" src=\"https://anncwb.github.io/anncwb/images/preview2.png\">\r\n    <img alt=\"VbenAdmin Logo\" width=\"100%\" src=\"https://anncwb.github.io/anncwb/images/preview3.png\">\r\n</p>\r\n\r\n### 使用 Gitpod\r\n\r\n在 Gitpod（适用于 GitHub 的免费在线开发环境）中打开项目，并立即开始编码.\r\n\r\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/anncwb/vue-vben-admin)\r\n\r\n## 文档\r\n\r\n[文档地址](https://vvbin.cn/doc-next/)\r\n\r\n## 准备\r\n\r\n- [node](http://nodejs.org/) 和 [git](https://git-scm.com/) -项目开发环境\r\n- [Vite](https://vitejs.dev/) - 熟悉 vite 特性\r\n- [Vue3](https://v3.vuejs.org/) - 熟悉 Vue 基础语法\r\n- [TypeScript](https://www.typescriptlang.org/) - 熟悉`TypeScript`基本语法\r\n- [Es6+](http://es6.ruanyifeng.com/) - 熟悉 es6 基本语法\r\n- [Vue-Router-Next](https://next.router.vuejs.org/) - 熟悉 vue-router 基本使用\r\n- [Ant-Design-Vue](https://2x.antdv.com/docs/vue/introduce-cn/) - ui 基本使用\r\n- [Mock.js](https://github.com/nuysoft/Mock) - mockjs 基本语法\r\n\r\n## 安装使用\r\n\r\n- 获取项目代码\r\n\r\n```bash\r\ngit clone https://github.com/anncwb/vue-vben-admin.git\r\n```\r\n\r\n- 安装依赖\r\n\r\n```bash\r\ncd vue-vben-admin\r\n\r\nyarn install\r\n\r\n```\r\n\r\n- 运行\r\n\r\n```bash\r\nyarn serve\r\n```\r\n\r\n- 打包\r\n\r\n```bash\r\nyarn build\r\n```\r\n\r\n## 更新日志\r\n\r\n[CHANGELOG](./CHANGELOG.zh_CN.md)\r\n\r\n## 项目地址\r\n\r\n- [vue-vben-admin](https://github.com/anncwb/vue-vben-admin) - 完整版\r\n- [vue-vben-admin-thin-next](https://github.com/anncwb/vben-admin-thin-next) - 简化版\r\n\r\n## 如何贡献\r\n\r\n非常欢迎你的加入！[提一个 Issue](https://github.com/anncwb/vue-vben-admin/issues/new/choose) 或者提交一个 Pull Request。\r\n\r\n**Pull Request:**\r\n\r\n1. Fork 代码!\r\n2. 创建自己的分支: `git checkout -b feat/xxxx`\r\n3. 提交你的修改: `git commit -am \'feat(function): add xxxxx\'`\r\n4. 推送您的分支: `git push origin feat/xxxx`\r\n5. 提交`pull request`\r\n\r\n## Git 贡献提交规范\r\n\r\n- 参考 [vue](https://github.com/vuejs/vue/blob/dev/.github/COMMIT_CONVENTION.md) 规范 ([Angular](https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-angular))\r\n\r\n  - `feat` 增加新功能\r\n  - `fix` 修复问题/BUG\r\n  - `style` 代码风格相关无影响运行结果的\r\n  - `perf` 优化/性能提升\r\n  - `refactor` 重构\r\n  - `revert` 撤销修改\r\n  - `test` 测试相关\r\n  - `docs` 文档/注释\r\n  - `chore` 依赖更新/脚手架配置修改等\r\n  - `workflow` 工作流改进\r\n  - `ci` 持续集成\r\n  - `types` 类型定义文件更改\r\n  - `wip` 开发中\r\n\r\n## 浏览器支持\r\n\r\n本地开发推荐使用`Chrome 80+` 浏览器\r\n\r\n支持现代浏览器, 不支持 IE\r\n\r\n| [<img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/edge/edge_48x48.png\" alt=\" Edge\" width=\"24px\" height=\"24px\" />](http://godban.github.io/browsers-support-badges/)</br>IE | [<img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/edge/edge_48x48.png\" alt=\" Edge\" width=\"24px\" height=\"24px\" />](http://godban.github.io/browsers-support-badges/)</br>Edge | [<img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png\" alt=\"Firefox\" width=\"24px\" height=\"24px\" />](http://godban.github.io/browsers-support-badges/)</br>Firefox | [<img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png\" alt=\"Chrome\" width=\"24px\" height=\"24px\" />](http://godban.github.io/browsers-support-badges/)</br>Chrome | [<img src=\"https://raw.githubusercontent.com/alrra/browser-logos/master/src/safari/safari_48x48.png\" alt=\"Safari\" width=\"24px\" height=\"24px\" />](http://godban.github.io/browsers-support-badges/)</br>Safari |\r\n| :-: | :-: | :-: | :-: | :-: |\r\n| not support | last 2 versions | last 2 versions | last 2 versions | last 2 versions |\r\n\r\n## 相关仓库\r\n\r\n如果这些插件对你有帮助，可以给一个 star 支持下\r\n\r\n- [vite-plugin-mock](https://github.com/anncwb/vite-plugin-mock) - 用于本地及开发环境数据 mock\r\n- [vite-plugin-html](https://github.com/anncwb/vite-plugin-html) - 用于 html 模版转换及压缩\r\n- [vite-plugin-style-import](https://github.com/anncwb/vite-plugin-style-import) - 用于组件库样式按需引入\r\n- [vite-plugin-theme](https://github.com/anncwb/vite-plugin-theme) - 用于在线切换主题色等颜色相关配置\r\n- [vite-plugin-imagemin](https://github.com/anncwb/vite-plugin-imagemin) - 用于打包压缩图片资源\r\n- [vite-plugin-compression](https://github.com/anncwb/vite-plugin-compression) - 用于打包输出.gz|.brotil 文件\r\n- [vite-plugin-svg-icons](https://github.com/anncwb/vite-plugin-svg-icons) - 用于快速生成 svg 雪碧图\r\n\r\n## 后台整合示例\r\n\r\n- [lamp-cloud](https://github.com/zuihou/lamp-cloud) - 基于 SpringCloud Alibaba 的微服务中后台快速开发平台', 0, 'https://jikexingkong.com/?p=106', 0, 'post', '', 0),
(107, 1, '2021-10-31 10:34:01', '2021-10-31 02:34:01', 'sdfasdfasdfasdfasdfsadfsdaf', 'testsssdssdsdsd', '', 'publish', 'open', 'closed', '', 'testsssdssdsdsd', '', '', '2021-10-31 10:34:01', '2021-10-31 02:34:01', 'sdfasdfasdfasdfasdfsadfsdaf', 0, 'https://jikexingkong.com/forum/107/', 0, 'question', '', 0),
(108, 2, '2021-11-01 09:45:55', '2021-11-01 01:45:55', 'testsdssdsds', 'testsssdssdsdsd', '', 'publish', 'open', 'closed', '', '107', '', '', '2021-11-01 09:45:55', '2021-11-01 01:45:55', 'testsdssdsds', 107, 'https://jikexingkong.com/forum/107/answer/108/', 0, 'answer', '', 0),
(112, 1, '2021-11-03 19:07:05', '2021-11-03 11:07:05', ' ', '', '', 'publish', 'closed', 'closed', '', '112', '', '', '2021-11-03 19:07:05', '2021-11-03 11:07:05', '', 0, 'https://jikexingkong.com/?p=112', 7, 'nav_menu_item', '', 0),
(121, 1, '2021-11-16 19:47:57', '2021-11-16 11:47:57', '', '2021111611475722', '', 'inherit', 'open', 'closed', '', '2021111611475722', '', '', '2021-11-16 19:47:57', '2021-11-16 11:47:57', '', 64, 'https://jikexingkong.com/wp-content/uploads/2021/10/2021111611475722.png', 0, 'attachment', 'image/png', 0),
(122, 1, '2021-11-16 19:50:36', '2021-11-16 11:50:36', '', '202111161150365', '', 'inherit', 'open', 'closed', '', '202111161150365', '', '', '2021-11-16 19:50:36', '2021-11-16 11:50:36', '', 0, 'https://jikexingkong.com/wp-content/uploads/2021/10/202111161150365.png', 0, 'attachment', 'image/png', 0),
(123, 1, '2021-11-16 19:51:14', '2021-11-16 11:51:14', '', '20211116115114100', '', 'inherit', 'open', 'closed', '', '20211116115114100', '', '', '2021-11-16 19:51:14', '2021-11-16 11:51:14', '', 0, 'https://jikexingkong.com/wp-content/uploads/2021/10/20211116115114100.png', 0, 'attachment', 'image/png', 0),
(129, 1, '2021-11-17 22:43:29', '2021-11-17 14:43:29', '轻松拓展知识面,快速提升技术水平,节省大量学习时间', '视频课程', '', 'inherit', 'closed', 'closed', '', '20-autosave-v1', '', '', '2021-11-17 22:43:29', '2021-11-17 14:43:29', '轻松拓展知识面,快速提升技术水平,节省大量学习时间', 20, 'https://jikexingkong.com/?p=129', 0, 'revision', '', 0),
(132, 1, '2021-11-22 03:47:59', '2021-11-21 19:47:59', '', 'React Router(v6)中文文档[已译完]', '', 'publish', 'open', 'closed', '', 'react-routerv6-cn', '', '', '2021-11-23 14:58:55', '2021-11-23 06:58:55', '', 0, 'https://jikexingkong.com/docs/react-routerv6%e4%b8%ad%e6%96%87%e6%96%87%e6%a1%a3', 0, 'docs', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(133, 1, '2021-11-22 03:49:00', '2021-11-21 19:49:00', '<h1>概述</h1>\n\n如果你熟悉 JavaScript 生态系统、React 和 React Router，这可以作为 React Router v6 的快速概览，其中包含大量代码和最少的解释。\n\n<ul>\n<li>有关 React Router 的完整介绍，请参阅<a class=\"wp-editor-md-post-content-link\" href=\"/docs/react-routerv6-cn/tutorial\">教程</a></li>\n<li>有关每个 API 的大量文档，请参阅<a class=\"wp-editor-md-post-content-link\" href=\"/docs/react-routerv6-cn/api\">API 参考</a></li>\n<li>要更深入地了解概念，请参阅<a class=\"wp-editor-md-post-content-link\" href=\"https://reactrouter.com/docs/en/v6/getting-started/concepts\">主要概念</a></li>\n</ul>\n\n<h2>安装</h2>\n\n<pre><code class=\"language-shell line-numbers\">npm install react-router-dom@6\n</code></pre>\n\n<h2>配置路由</h2>\n\n<pre><code class=\"language-jsx line-numbers\">import { render } from \"react-dom\";\nimport {\n  BrowserRouter,\n  Routes,\n  Route\n} from \"react-router-dom\";\n// import your route components too\n\nrender(\n  &lt;BrowserRouter&gt;\n    &lt;Routes&gt;\n      &lt;Route path=\"/\" element={&lt;App /&gt;}&gt;\n        &lt;Route index element={&lt;Home /&gt;} /&gt;\n        &lt;Route path=\"teams\" element={&lt;Teams /&gt;}&gt;\n          &lt;Route path=\":teamId\" element={&lt;Team /&gt;} /&gt;\n          &lt;Route path=\"new\" element={&lt;NewTeamForm /&gt;} /&gt;\n          &lt;Route index element={&lt;LeagueStandings /&gt;} /&gt;\n        &lt;/Route&gt;\n      &lt;/Route&gt;\n    &lt;/Routes&gt;\n  &lt;/BrowserRouter&gt;,\n  document.getElementById(\"root\")\n);\n</code></pre>\n\n在以前版本的 React Router 中，当多个路由匹配一个不明确的 URL 时，你必须以某种方式对你的路由进行排序才能得到正确的渲染。V6 更聪明，会选择最具体的匹配，所以你不必再担心了。例如，URL<code>/teams/new</code>匹配这两个路由：\n\n<pre><code class=\"language-jsx line-numbers\">&lt;Route path=\"teams/:teamId\" element={&lt;Team /&gt;} /&gt;\n&lt;Route path=\"teams/new\" element={&lt;NewTeamForm /&gt;} /&gt;\n</code></pre>\n\n但是<code>teams/new</code>相对<code>/teams/:teamId</code>是一个更具体的匹配，因此<code>&lt;NewTeamForm /&gt;</code>将被渲染。\n\n<h2>导航</h2>\n\n使用<code>Link</code>让用户更改URL或者<code>useNavigate</code>自己做（如表格提交后）：\n\n<pre><code class=\"language-tsx line-numbers\">import { Link } from \"react-router-dom\";\n\nfunction Home() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Home&lt;/h1&gt;\n      &lt;nav&gt;\n        &lt;Link to=\"/\"&gt;Home&lt;/Link&gt; |{\" \"}\n        &lt;Link to=\"about\"&gt;About&lt;/Link&gt;\n      &lt;/nav&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n\n<pre><code class=\"language-tsx line-numbers\">import { useNavigate } from \"react-router-dom\";\n\nfunction Invoices() {\n  let navigate = useNavigate();\n  return (\n    &lt;div&gt;\n      &lt;NewInvoiceForm\n        onSubmit={async event =&gt; {\n          let newInvoice = await createInvoice(\n            event.target\n          );\n          navigate(`/invoices/${newInvoice.id}`);\n        }}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n\n<h2>读取URL参数</h2>\n\n在路由路径中使用<code>:style</code>语法并<code>useParams()</code>阅读它们：\n\n<pre><code class=\"language-tsx line-numbers\">import { Routes, Route, useParams } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    &lt;Routes&gt;\n      &lt;Route\n        path=\"invoices/:invoiceId\"\n        element={&lt;Invoice /&gt;}\n      /&gt;\n    &lt;/Routes&gt;\n  );\n}\n\nfunction Invoice() {\n  let params = useParams();\n  return &lt;h1&gt;Invoice {params.invoiceId}&lt;/h1&gt;;\n}\n</code></pre>\n\n注意，路径中的<code>:invoiceId</code>和参数的键<code>params.invoiceId</code>匹配。\n\n一个非常常见的用例是在组件呈现时获取数据：\n\n<pre><code class=\"language-tsx line-numbers\">function Invoice() {\n  let { invoiceId } = useParams();\n  let invoice = useFakeFetch(`/api/invoices/${invoiceId}`);\n  return invoice ? (\n    &lt;div&gt;\n      &lt;h1&gt;{invoice.customerName}&lt;/h1&gt;\n    &lt;/div&gt;\n  ) : (\n    &lt;Loading /&gt;\n  );\n}\n</code></pre>\n\n<h2>嵌套路由</h2>\n\n这是 React Router 最强大的功能之一，基于它你不需要自己处理复杂的布局代码。绝大多数布局都与 URL 的片段耦合，而 React Router 完全实现了这一点。\n\n路由可以相互嵌套，它们的路径也会嵌套（子路由继承父路由）。\n\n<pre><code class=\"language-tsx line-numbers\">function App() {\n  return (\n    &lt;Routes&gt;\n      &lt;Route path=\"invoices\" element={&lt;Invoices /&gt;}&gt;\n        &lt;Route path=\":invoiceId\" element={&lt;Invoice /&gt;} /&gt;\n        &lt;Route path=\"sent\" element={&lt;SentInvoices /&gt;} /&gt;\n      &lt;/Route&gt;\n    &lt;/Routes&gt;\n  );\n}\n</code></pre>\n\n此路由配置定义了三个路由路径：\n\n<ul>\n<li><code>\"/invoices\"</code></li>\n<li><code>\"/invoices/sent\"</code></li>\n<li><code>\"/invoices/:invoiceId\"</code></li>\n</ul>\n\n当 URL 是<code>\"/invoices/sent\"</code>时组件树如下：\n\n<pre><code class=\"language-tsx line-numbers\">&lt;App&gt;\n  &lt;Invoices&gt;\n    &lt;SentInvoices /&gt;\n  &lt;/Invoices&gt;\n&lt;/App&gt;\n</code></pre>\n\n当 URL 为 时<code>\"/invoices/123\"</code>，组件树将如下：\n\n<pre><code class=\"language-tsx line-numbers\">&lt;App&gt;\n  &lt;Invoices&gt;\n    &lt;Invoice /&gt;\n  &lt;/Invoices&gt;\n&lt;/App&gt;\n</code></pre>\n\n注意，内部组件 (<code>&lt;SentInvoices&gt;</code>和<code>&lt;Invoice&gt;</code>)随 URL改变。确保子路由使用 <a class=\"wp-editor-md-post-content-link\" href=\"../api.md#outlet\"><code>&lt;Outlet&gt;</code></a>来渲染,这样父路由 ( <code>&lt;Invoices&gt;</code>) 才会响应. 这是完整的示例：\n\n<pre><code class=\"language-tsx line-numbers\">import { Routes, Route, Outlet } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    &lt;Routes&gt;\n      &lt;Route path=\"invoices\" element={&lt;Invoices /&gt;}&gt;\n        &lt;Route path=\":invoiceId\" element={&lt;Invoice /&gt;} /&gt;\n        &lt;Route path=\"sent\" element={&lt;SentInvoices /&gt;} /&gt;\n      &lt;/Route&gt;\n    &lt;/Routes&gt;\n  );\n}\n\nfunction Invoices() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Invoices&lt;/h1&gt;\n      &lt;Outlet /&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction Invoice() {\n  let { invoiceId } = useParams();\n  return &lt;h1&gt;Invoice {invoiceId}&lt;/h1&gt;;\n}\n\nfunction SentInvoices() {\n  return &lt;h1&gt;Sent Invoices&lt;/h1&gt;;\n}\n</code></pre>\n\n嵌套的 url 段映射到嵌套的组件树。这非常适合创建在布局中具有持久导航且内部部分随 URL 变化的 UI。如果你浏览一些网站，你会注意到许多网站（尤其是web apps）具有多层布局嵌套。\n\n这是带有导航的根布局的另一个示例，当内页与 URL 交换时，它仍然存在：\n\n<pre><code class=\"language-tsx line-numbers\">import {\n  Routes,\n  Route,\n  Link,\n  Outlet\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    &lt;Routes&gt;\n      &lt;Route path=\"/\" element={&lt;Layout /&gt;}&gt;\n        &lt;Route path=\"invoices\" element={&lt;Invoices /&gt;} /&gt;\n        &lt;Route path=\"dashboard\" element={&lt;Dashboard /&gt;} /&gt;\n      &lt;/Route&gt;\n    &lt;/Routes&gt;\n  );\n}\n\nfunction Layout() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Welcome to the app!&lt;/h1&gt;\n      &lt;nav&gt;\n        &lt;Link to=\"invoices\"&gt;Invoices&lt;/Link&gt; |{\" \"}\n        &lt;Link to=\"dashboard\"&gt;Dashboard&lt;/Link&gt;\n      &lt;/nav&gt;\n      &lt;div className=\"content\"&gt;\n        &lt;Outlet /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction Invoices() {\n  return &lt;h1&gt;Invoices&lt;/h1&gt;;\n}\n\nfunction Dashboard() {\n  return &lt;h1&gt;Dashboard&lt;/h1&gt;;\n}\n</code></pre>\n\n<h2>索引路由</h2>\n\n索引路由可以被认为是\"默认子路由\"。当父路由有多个子路由，但 URL 仅在父路由的路径上时，你可能希望将某些内容渲染到插槽中。\n\n思考这个例子：\n\n<pre><code class=\"language-tsx line-numbers\">function App() {\n  return (\n    &lt;Routes&gt;\n      &lt;Route path=\"/\" element={&lt;Layout /&gt;}&gt;\n        &lt;Route path=\"invoices\" element={&lt;Invoices /&gt;} /&gt;\n        &lt;Route path=\"activity\" element={&lt;Activity /&gt;} /&gt;\n      &lt;/Route&gt;\n    &lt;/Routes&gt;\n  );\n}\n\nfunction Layout() {\n  return (\n    &lt;div&gt;\n      &lt;GlobalNav /&gt;\n      &lt;main&gt;\n        &lt;Outlet /&gt;\n      &lt;/main&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n\n这个页面在\"/invoices\"和\"/activity\"上看起来很棒，但在URL为\"/\"它只是一个空白页面，因为<code>&lt;main&gt;</code>中没有子路由渲染。为此，我们可以添加一个索引路由：\n\n<pre><code class=\"language-tsx line-numbers\">function App() {\n  return (\n    &lt;Routes&gt;\n      &lt;Route path=\"/\" element={&lt;Layout /&gt;}&gt;\n        &lt;Route index element={&lt;Activity /&gt;}&gt;\n        &lt;Route path=\"invoices\" element={&lt;Invoices /&gt;} /&gt;\n        &lt;Route path=\"activity\" element={&lt;Activity /&gt;} /&gt;\n      &lt;/Route&gt;\n    &lt;/Routes&gt;\n  );\n}\n</code></pre>\n\n现在在URL为\"/\"时，<code>&lt;Activity&gt;</code>组件将被渲染。\n\n你可以在路由层次结构的任何级别拥有一个索引路由，当父级匹配但其他子级都不匹配时，该索引路由指定的组件将被渲染。\n\n<pre><code class=\"language-tsx line-numbers\">function App() {\n  return (\n    &lt;Routes&gt;\n      &lt;Route index element={&lt;Home /&gt;} /&gt;\n      &lt;Route path=\"dashboard\" element={&lt;Dashboard /&gt;}&gt;\n        &lt;Route index element={&lt;DashboardHome /&gt;} /&gt;\n        &lt;Route\n          path=\"invoices\"\n          element={&lt;DashboardInvoices /&gt;}\n        /&gt;\n      &lt;/Route&gt;\n    &lt;/Routes&gt;\n  );\n}\n</code></pre>\n\n<h2>相对链接</h2>\n\n<code>&lt;Link to&gt;</code>值是相对于渲染它们的路径的路由（并不以 a 开头<code>/</code>的）。下面的两个链接将链接到<code>/dashboard/invoices</code>和<code>/dashboard/team</code>，因为它们在<code>&lt;Dashboard&gt;</code>中渲染. 当你更改父级的 URL 或重新排序你的组件时这非常棒，因为你的所有链接都会自动更新。\n\n<pre><code class=\"language-tsx line-numbers\">import {\n  Routes,\n  Route,\n  Link,\n  Outlet\n} from \"react-router-dom\";\n\nfunction Home() {\n  return &lt;h1&gt;Home&lt;/h1&gt;;\n}\n\nfunction Dashboard() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Dashboard&lt;/h1&gt;\n      &lt;nav&gt;\n        &lt;Link to=\"invoices\"&gt;Invoices&lt;/Link&gt;{\" \"}\n        &lt;Link to=\"team\"&gt;Team&lt;/Link&gt;\n      &lt;/nav&gt;\n      &lt;hr /&gt;\n      &lt;Outlet /&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction Invoices() {\n  return &lt;h1&gt;Invoices&lt;/h1&gt;;\n}\n\nfunction Team() {\n  return &lt;h1&gt;Team&lt;/h1&gt;;\n}\n\nfunction App() {\n  return (\n    &lt;Routes&gt;\n      &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n      &lt;Route path=\"dashboard\" element={&lt;Dashboard /&gt;}&gt;\n        &lt;Route path=\"invoices\" element={&lt;Invoices /&gt;} /&gt;\n        &lt;Route path=\"team\" element={&lt;Team /&gt;} /&gt;\n      &lt;/Route&gt;\n    &lt;/Routes&gt;\n  );\n}\n</code></pre>\n\n<h2>\"Not Found\" 路由</h2>\n\n当没有其他路由与 URL 匹配时，你可以使用<code>path=\"*\"</code>. 此路由将匹配任何 URL，但具有最弱的优先级，因此路由器仅在没有其他路由匹配时才会选择它。\n\n<pre><code class=\"language-tsx line-numbers\">function App() {\n  return (\n    &lt;Routes&gt;\n      &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n      &lt;Route path=\"dashboard\" element={&lt;Dashboard /&gt;} /&gt;\n      &lt;Route path=\"*\" element={&lt;NotFound /&gt;} /&gt;\n    &lt;/Routes&gt;\n  );\n}\n</code></pre>\n\n<h2>更多的路由设置</h2>\n\n尽管你应该在应用中只拥有一个<code>&lt;Router&gt;</code>，但你可以在任何需要的地方拥有任意数量的<a class=\"wp-editor-md-post-content-link\" href=\"/docs/react-routerv6-cn/api#routes\"><code>Routes</code></a>。每个<code>&lt;Routes&gt;</code>元素独立于其他元素运行，并选择一个子路由进行渲染。\n\n<pre><code class=\"language-tsx line-numbers\">function App() {\n  return (\n    &lt;div&gt;\n      &lt;Sidebar&gt;\n        &lt;Routes&gt;\n          &lt;Route path=\"/\" element={&lt;MainNav /&gt;} /&gt;\n          &lt;Route\n            path=\"dashboard\"\n            element={&lt;DashboardNav /&gt;}\n          /&gt;\n        &lt;/Routes&gt;\n      &lt;/Sidebar&gt;\n\n      &lt;MainContent&gt;\n        &lt;Routes&gt;\n          &lt;Route path=\"/\" element={&lt;Home /&gt;}&gt;\n            &lt;Route path=\"about\" element={&lt;About /&gt;} /&gt;\n            &lt;Route path=\"support\" element={&lt;Support /&gt;} /&gt;\n          &lt;/Route&gt;\n          &lt;Route path=\"dashboard\" element={&lt;Dashboard /&gt;}&gt;\n            &lt;Route path=\"invoices\" element={&lt;Invoices /&gt;} /&gt;\n            &lt;Route path=\"team\" element={&lt;Team /&gt;} /&gt;\n          &lt;/Route&gt;\n          &lt;Route path=\"*\" element={&lt;NotFound /&gt;} /&gt;\n        &lt;/Routes&gt;\n      &lt;/MainContent&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n\n<h2>后代<code>&lt;Routes&gt;</code></h2>\n\n你可以在任何需要的地方渲染<Routes>组件，包括在另一个<Routes> 的组件树深处。它们将与任何其他<Routes> 一样工作，但是它们将会在渲染它们的路由的路径上自动构建。如果你这样做，请确保在父路由路径的末尾放置一个 *。否则，当 URL 长于父路由的路径时，父路由将与 URL 不匹配，并且你的后代<Routes>将永远不会出现。\n\n<pre><code class=\"language-tsx line-numbers\">function App() {\n  return (\n    &lt;Routes&gt;\n      &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n      &lt;Route path=\"dashboard/*\" element={&lt;Dashboard /&gt;} /&gt;\n    &lt;/Routes&gt;\n  );\n}\n\nfunction Dashboard() {\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Look, more routes!&lt;/p&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/\" element={&lt;DashboardGraphs /&gt;} /&gt;\n        &lt;Route path=\"invoices\" element={&lt;InvoiceList /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n\n仅此而已！我们没有在这里涵盖所有 API，但这些绝对是你将使用的最常见的 API。如果你想了解更多信息，请继续阅读<a class=\"wp-editor-md-post-content-link\" href=\"/docs/react-routerv6-cn/tutorial\">我们的教程</a>或浏览<a class=\"wp-editor-md-post-content-link\" href=\"/docs/react-routerv6-cn/api\">完整的 API 参考</a>。', '概述', '', 'publish', 'open', 'closed', '', 'overview', '', '', '2021-11-22 10:42:37', '2021-11-22 02:42:37', '# 概述\r\n\r\n如果你熟悉 JavaScript 生态系统、React 和 React Router，这可以作为 React Router v6 的快速概览，其中包含大量代码和最少的解释。\r\n\r\n-   有关 React Router 的完整介绍，请参阅[教程](/docs/react-routerv6-cn/tutorial)\r\n-   有关每个 API 的大量文档，请参阅[API 参考](/docs/react-routerv6-cn/api)\r\n-   要更深入地了解概念，请参阅[主要概念](https://reactrouter.com/docs/en/v6/getting-started/concepts)\r\n\r\n## 安装\r\n\r\n```shell\r\nnpm install react-router-dom@6\r\n```\r\n\r\n## 配置路由\r\n\r\n```jsx\r\nimport { render } from &quot;react-dom&quot;;\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route\r\n} from &quot;react-router-dom&quot;;\r\n// import your route components too\r\n\r\nrender(\r\n  &lt;BrowserRouter&gt;\r\n    &lt;Routes&gt;\r\n      &lt;Route path=&quot;/&quot; element={&lt;App /&gt;}&gt;\r\n        &lt;Route index element={&lt;Home /&gt;} /&gt;\r\n        &lt;Route path=&quot;teams&quot; element={&lt;Teams /&gt;}&gt;\r\n          &lt;Route path=&quot;:teamId&quot; element={&lt;Team /&gt;} /&gt;\r\n          &lt;Route path=&quot;new&quot; element={&lt;NewTeamForm /&gt;} /&gt;\r\n          &lt;Route index element={&lt;LeagueStandings /&gt;} /&gt;\r\n        &lt;/Route&gt;\r\n      &lt;/Route&gt;\r\n    &lt;/Routes&gt;\r\n  &lt;/BrowserRouter&gt;,\r\n  document.getElementById(&quot;root&quot;)\r\n);\r\n```\r\n\r\n在以前版本的 React Router 中，当多个路由匹配一个不明确的 URL 时，你必须以某种方式对你的路由进行排序才能得到正确的渲染。V6 更聪明，会选择最具体的匹配，所以你不必再担心了。例如，URL`/teams/new`匹配这两个路由：\r\n\r\n```jsx\r\n&lt;Route path=&quot;teams/:teamId&quot; element={&lt;Team /&gt;} /&gt;\r\n&lt;Route path=&quot;teams/new&quot; element={&lt;NewTeamForm /&gt;} /&gt;\r\n```\r\n\r\n但是`teams/new`相对`/teams/:teamId`是一个更具体的匹配，因此`<NewTeamForm />`将被渲染。\r\n\r\n## 导航\r\n\r\n使用`Link`让用户更改URL或者`useNavigate`自己做（如表格提交后）：\r\n\r\n```tsx\r\nimport { Link } from &quot;react-router-dom&quot;;\r\n\r\nfunction Home() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;Home&lt;/h1&gt;\r\n      &lt;nav&gt;\r\n        &lt;Link to=&quot;/&quot;&gt;Home&lt;/Link&gt; |{&quot; &quot;}\r\n        &lt;Link to=&quot;about&quot;&gt;About&lt;/Link&gt;\r\n      &lt;/nav&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n```\r\n\r\n```tsx\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction Invoices() {\r\n  let navigate = useNavigate();\r\n  return (\r\n    <div>\r\n      <NewInvoiceForm\r\n        onSubmit={async event => {\r\n          let newInvoice = await createInvoice(\r\n            event.target\r\n          );\r\n          navigate(`/invoices/${newInvoice.id}`);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n## 读取URL参数\r\n\r\n在路由路径中使用`:style`语法并`useParams()`阅读它们：\r\n\r\n```tsx\r\nimport { Routes, Route, useParams } from &quot;react-router-dom&quot;;\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;Routes&gt;\r\n      &lt;Route\r\n        path=&quot;invoices/:invoiceId&quot;\r\n        element={&lt;Invoice /&gt;}\r\n      /&gt;\r\n    &lt;/Routes&gt;\r\n  );\r\n}\r\n\r\nfunction Invoice() {\r\n  let params = useParams();\r\n  return &lt;h1&gt;Invoice {params.invoiceId}&lt;/h1&gt;;\r\n}\r\n```\r\n\r\n注意，路径中的`:invoiceId`和参数的键`params.invoiceId`匹配。\r\n\r\n一个非常常见的用例是在组件呈现时获取数据：\r\n\r\n```tsx\r\nfunction Invoice() {\r\n  let { invoiceId } = useParams();\r\n  let invoice = useFakeFetch(`/api/invoices/${invoiceId}`);\r\n  return invoice ? (\r\n    <div>\r\n      <h1>{invoice.customerName}</h1>\r\n    </div>\r\n  ) : (\r\n    <Loading />\r\n  );\r\n}\r\n```\r\n\r\n## 嵌套路由\r\n\r\n这是 React Router 最强大的功能之一，基于它你不需要自己处理复杂的布局代码。绝大多数布局都与 URL 的片段耦合，而 React Router 完全实现了这一点。\r\n\r\n路由可以相互嵌套，它们的路径也会嵌套（子路由继承父路由）。\r\n\r\n```tsx\r\nfunction App() {\r\n  return (\r\n    <Routes>\r\n      <Route path=\"invoices\" element={<Invoices />}>\r\n        <Route path=\":invoiceId\" element={<Invoice />} />\r\n        <Route path=\"sent\" element={<SentInvoices />} />\r\n      </Route>\r\n    </Routes>\r\n  );\r\n}\r\n```\r\n\r\n此路由配置定义了三个路由路径：\r\n\r\n- `\"/invoices\"`\r\n- `\"/invoices/sent\"`\r\n- `\"/invoices/:invoiceId\"`\r\n\r\n当 URL 是`\"/invoices/sent\"`时组件树如下：\r\n\r\n```tsx\r\n&lt;App&gt;\r\n  &lt;Invoices&gt;\r\n    &lt;SentInvoices /&gt;\r\n  &lt;/Invoices&gt;\r\n&lt;/App&gt;\r\n```\r\n\r\n当 URL 为 时`\"/invoices/123\"`，组件树将如下：\r\n\r\n```tsx\r\n&lt;App&gt;\r\n  &lt;Invoices&gt;\r\n    &lt;Invoice /&gt;\r\n  &lt;/Invoices&gt;\r\n&lt;/App&gt;\r\n```\r\n\r\n注意，内部组件 (`<SentInvoices>`和`<Invoice>`)随 URL改变。确保子路由使用 [`<Outlet>`](../api.md#outlet)来渲染,这样父路由 ( `<Invoices>`) 才会响应. 这是完整的示例：\r\n\r\n```tsx\r\nimport { Routes, Route, Outlet } from &quot;react-router-dom&quot;;\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;Routes&gt;\r\n      &lt;Route path=&quot;invoices&quot; element={&lt;Invoices /&gt;}&gt;\r\n        &lt;Route path=&quot;:invoiceId&quot; element={&lt;Invoice /&gt;} /&gt;\r\n        &lt;Route path=&quot;sent&quot; element={&lt;SentInvoices /&gt;} /&gt;\r\n      &lt;/Route&gt;\r\n    &lt;/Routes&gt;\r\n  );\r\n}\r\n\r\nfunction Invoices() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;Invoices&lt;/h1&gt;\r\n      &lt;Outlet /&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nfunction Invoice() {\r\n  let { invoiceId } = useParams();\r\n  return &lt;h1&gt;Invoice {invoiceId}&lt;/h1&gt;;\r\n}\r\n\r\nfunction SentInvoices() {\r\n  return &lt;h1&gt;Sent Invoices&lt;/h1&gt;;\r\n}\r\n```\r\n\r\n嵌套的 url 段映射到嵌套的组件树。这非常适合创建在布局中具有持久导航且内部部分随 URL 变化的 UI。如果你浏览一些网站，你会注意到许多网站（尤其是web apps）具有多层布局嵌套。\r\n\r\n这是带有导航的根布局的另一个示例，当内页与 URL 交换时，它仍然存在：\r\n\r\n```tsx\r\nimport {\r\n  Routes,\r\n  Route,\r\n  Link,\r\n  Outlet\r\n} from &quot;react-router-dom&quot;;\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;Routes&gt;\r\n      &lt;Route path=&quot;/&quot; element={&lt;Layout /&gt;}&gt;\r\n        &lt;Route path=&quot;invoices&quot; element={&lt;Invoices /&gt;} /&gt;\r\n        &lt;Route path=&quot;dashboard&quot; element={&lt;Dashboard /&gt;} /&gt;\r\n      &lt;/Route&gt;\r\n    &lt;/Routes&gt;\r\n  );\r\n}\r\n\r\nfunction Layout() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;Welcome to the app!&lt;/h1&gt;\r\n      &lt;nav&gt;\r\n        &lt;Link to=&quot;invoices&quot;&gt;Invoices&lt;/Link&gt; |{&quot; &quot;}\r\n        &lt;Link to=&quot;dashboard&quot;&gt;Dashboard&lt;/Link&gt;\r\n      &lt;/nav&gt;\r\n      &lt;div className=&quot;content&quot;&gt;\r\n        &lt;Outlet /&gt;\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nfunction Invoices() {\r\n  return &lt;h1&gt;Invoices&lt;/h1&gt;;\r\n}\r\n\r\nfunction Dashboard() {\r\n  return &lt;h1&gt;Dashboard&lt;/h1&gt;;\r\n}\r\n```\r\n\r\n## 索引路由\r\n\r\n索引路由可以被认为是\"默认子路由\"。当父路由有多个子路由，但 URL 仅在父路由的路径上时，你可能希望将某些内容渲染到插槽中。\r\n\r\n思考这个例子：\r\n\r\n```tsx\r\nfunction App() {\r\n  return (\r\n    &lt;Routes&gt;\r\n      &lt;Route path=&quot;/&quot; element={&lt;Layout /&gt;}&gt;\r\n        &lt;Route path=&quot;invoices&quot; element={&lt;Invoices /&gt;} /&gt;\r\n        &lt;Route path=&quot;activity&quot; element={&lt;Activity /&gt;} /&gt;\r\n      &lt;/Route&gt;\r\n    &lt;/Routes&gt;\r\n  );\r\n}\r\n\r\nfunction Layout() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;GlobalNav /&gt;\r\n      &lt;main&gt;\r\n        &lt;Outlet /&gt;\r\n      &lt;/main&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n```\r\n\r\n这个页面在\"/invoices\"和\"/activity\"上看起来很棒，但在URL为\"/\"它只是一个空白页面，因为`<main>`中没有子路由渲染。为此，我们可以添加一个索引路由：\r\n\r\n```tsx\r\nfunction App() {\r\n  return (\r\n    &lt;Routes&gt;\r\n      &lt;Route path=&quot;/&quot; element={&lt;Layout /&gt;}&gt;\r\n        &lt;Route index element={&lt;Activity /&gt;}&gt;\r\n        &lt;Route path=&quot;invoices&quot; element={&lt;Invoices /&gt;} /&gt;\r\n        &lt;Route path=&quot;activity&quot; element={&lt;Activity /&gt;} /&gt;\r\n      &lt;/Route&gt;\r\n    &lt;/Routes&gt;\r\n  );\r\n}\r\n```\r\n\r\n现在在URL为\"/\"时，`<Activity>`组件将被渲染。\r\n\r\n你可以在路由层次结构的任何级别拥有一个索引路由，当父级匹配但其他子级都不匹配时，该索引路由指定的组件将被渲染。\r\n\r\n```tsx\r\nfunction App() {\r\n  return (\r\n    &lt;Routes&gt;\r\n      &lt;Route index element={&lt;Home /&gt;} /&gt;\r\n      &lt;Route path=&quot;dashboard&quot; element={&lt;Dashboard /&gt;}&gt;\r\n        &lt;Route index element={&lt;DashboardHome /&gt;} /&gt;\r\n        &lt;Route\r\n          path=&quot;invoices&quot;\r\n          element={&lt;DashboardInvoices /&gt;}\r\n        /&gt;\r\n      &lt;/Route&gt;\r\n    &lt;/Routes&gt;\r\n  );\r\n}\r\n```\r\n\r\n## 相对链接\r\n\r\n`<Link to>`值是相对于渲染它们的路径的路由（并不以 a 开头`/`的）。下面的两个链接将链接到`/dashboard/invoices`和`/dashboard/team`，因为它们在`<Dashboard>`中渲染. 当你更改父级的 URL 或重新排序你的组件时这非常棒，因为你的所有链接都会自动更新。\r\n\r\n```tsx\r\nimport {\r\n  Routes,\r\n  Route,\r\n  Link,\r\n  Outlet\r\n} from &quot;react-router-dom&quot;;\r\n\r\nfunction Home() {\r\n  return &lt;h1&gt;Home&lt;/h1&gt;;\r\n}\r\n\r\nfunction Dashboard() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;Dashboard&lt;/h1&gt;\r\n      &lt;nav&gt;\r\n        &lt;Link to=&quot;invoices&quot;&gt;Invoices&lt;/Link&gt;{&quot; &quot;}\r\n        &lt;Link to=&quot;team&quot;&gt;Team&lt;/Link&gt;\r\n      &lt;/nav&gt;\r\n      &lt;hr /&gt;\r\n      &lt;Outlet /&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nfunction Invoices() {\r\n  return &lt;h1&gt;Invoices&lt;/h1&gt;;\r\n}\r\n\r\nfunction Team() {\r\n  return &lt;h1&gt;Team&lt;/h1&gt;;\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;Routes&gt;\r\n      &lt;Route path=&quot;/&quot; element={&lt;Home /&gt;} /&gt;\r\n      &lt;Route path=&quot;dashboard&quot; element={&lt;Dashboard /&gt;}&gt;\r\n        &lt;Route path=&quot;invoices&quot; element={&lt;Invoices /&gt;} /&gt;\r\n        &lt;Route path=&quot;team&quot; element={&lt;Team /&gt;} /&gt;\r\n      &lt;/Route&gt;\r\n    &lt;/Routes&gt;\r\n  );\r\n}\r\n```\r\n\r\n## \"Not Found\" 路由\r\n\r\n当没有其他路由与 URL 匹配时，你可以使用`path=\"*\"`. 此路由将匹配任何 URL，但具有最弱的优先级，因此路由器仅在没有其他路由匹配时才会选择它。\r\n\r\n```tsx\r\nfunction App() {\r\n  return (\r\n    &lt;Routes&gt;\r\n      &lt;Route path=&quot;/&quot; element={&lt;Home /&gt;} /&gt;\r\n      &lt;Route path=&quot;dashboard&quot; element={&lt;Dashboard /&gt;} /&gt;\r\n      &lt;Route path=&quot;*&quot; element={&lt;NotFound /&gt;} /&gt;\r\n    &lt;/Routes&gt;\r\n  );\r\n}\r\n```\r\n\r\n## 更多的路由设置\r\n\r\n尽管你应该在应用中只拥有一个`<Router>`，但你可以在任何需要的地方拥有任意数量的[`Routes`](/docs/react-routerv6-cn/api#routes)。每个`<Routes>`元素独立于其他元素运行，并选择一个子路由进行渲染。\r\n\r\n```tsx\r\nfunction App() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;Sidebar&gt;\r\n        &lt;Routes&gt;\r\n          &lt;Route path=&quot;/&quot; element={&lt;MainNav /&gt;} /&gt;\r\n          &lt;Route\r\n            path=&quot;dashboard&quot;\r\n            element={&lt;DashboardNav /&gt;}\r\n          /&gt;\r\n        &lt;/Routes&gt;\r\n      &lt;/Sidebar&gt;\r\n\r\n      &lt;MainContent&gt;\r\n        &lt;Routes&gt;\r\n          &lt;Route path=&quot;/&quot; element={&lt;Home /&gt;}&gt;\r\n            &lt;Route path=&quot;about&quot; element={&lt;About /&gt;} /&gt;\r\n            &lt;Route path=&quot;support&quot; element={&lt;Support /&gt;} /&gt;\r\n          &lt;/Route&gt;\r\n          &lt;Route path=&quot;dashboard&quot; element={&lt;Dashboard /&gt;}&gt;\r\n            &lt;Route path=&quot;invoices&quot; element={&lt;Invoices /&gt;} /&gt;\r\n            &lt;Route path=&quot;team&quot; element={&lt;Team /&gt;} /&gt;\r\n          &lt;/Route&gt;\r\n          &lt;Route path=&quot;*&quot; element={&lt;NotFound /&gt;} /&gt;\r\n        &lt;/Routes&gt;\r\n      &lt;/MainContent&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n```\r\n\r\n## 后代`<Routes>`\r\n\r\n你可以在任何需要的地方渲染<Routes>组件，包括在另一个<Routes> 的组件树深处。它们将与任何其他<Routes> 一样工作，但是它们将会在渲染它们的路由的路径上自动构建。如果你这样做，请确保在父路由路径的末尾放置一个 *。否则，当 URL 长于父路由的路径时，父路由将与 URL 不匹配，并且你的后代<Routes>将永远不会出现。\r\n\r\n```tsx\r\nfunction App() {\r\n  return (\r\n    &lt;Routes&gt;\r\n      &lt;Route path=&quot;/&quot; element={&lt;Home /&gt;} /&gt;\r\n      &lt;Route path=&quot;dashboard/*&quot; element={&lt;Dashboard /&gt;} /&gt;\r\n    &lt;/Routes&gt;\r\n  );\r\n}\r\n\r\nfunction Dashboard() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;p&gt;Look, more routes!&lt;/p&gt;\r\n      &lt;Routes&gt;\r\n        &lt;Route path=&quot;/&quot; element={&lt;DashboardGraphs /&gt;} /&gt;\r\n        &lt;Route path=&quot;invoices&quot; element={&lt;InvoiceList /&gt;} /&gt;\r\n      &lt;/Routes&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n```\r\n\r\n仅此而已！我们没有在这里涵盖所有 API，但这些绝对是你将使用的最常见的 API。如果你想了解更多信息，请继续阅读[我们的教程](/docs/react-routerv6-cn/tutorial)或浏览[完整的 API 参考](/docs/react-routerv6-cn/api)。\r\n', 132, 'https://jikexingkong.com/docs/react-routerv6-cn/%e6%a6%82%e8%bf%b0', 1, 'docs', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(134, 1, '2021-11-22 03:58:36', '2021-11-21 19:58:36', '<h1>教程</h1>\n\n<h2>介绍</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://stackblitz.com/edit/github-agqlf5?file=src/App.jsx\">在此处查看应用程序的完整版本</a>。\n\nReact Router 是一个功能齐全的客户端和服务器端 React路由库，一个用于构建用户界面的 JavaScript 库。React Router 在 React 运行的任何地方运行；在web上，在带有 node.js 的服务器上，以及在 React Native 上。\n\n如果你刚刚开始使用 React，我们建议你遵循官方文档中<a class=\"wp-editor-md-post-content-link\" href=\"https://reactjs.org/docs/getting-started.html\">优秀的入门指南</a>。那里有大量信息可以帮助你启动和运行。React Router 与 React >= 16.8 兼容。\n\n我们将保持本教程的快速和专注点。到最后你会知道你如何日常使用 React Router 处理的 API。之后，你可以深入研究其他一些文档以获得更深入的理解。\n\n在构建一个小记账应用时，我们将介绍：\n\n<ul>\n<li>配置路由</li>\n<li>使用链接导航</li>\n<li>创建具有激活样式的链接</li>\n<li>使用嵌套路由进行布局</li>\n<li>以编程方式导航</li>\n<li>使用 URL 参数加载数据</li>\n<li>使用 URL  Query参数</li>\n<li>通过组合创建自己的行为</li>\n<li>服务端渲染(译者: 官方文档还没有,更新后我会同步)</li>\n</ul>\n\n<h2>安装</h2>\n\n<h3>推荐: StackBlitz</h3>\n\n要完成本教程，你需要一个可用的 React 应用。我们建议跳过<a class=\"wp-editor-md-post-content-link\" href=\"https://stackblitz.com/github/remix-run/react-router/tree/main/tutorial?file=src/App.jsx\">打包</a>程序并通过在<a class=\"wp-editor-md-post-content-link\" href=\"https://stackblitz.com/github/remix-run/react-router/tree/main/tutorial?file=src/App.jsx\">StackBlitz的演示</a>上在浏览器中进行编码：\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://stackblitz.com/github/remix-run/react-router/tree/main/tutorial?file=src/App.jsx\"><img src=\"https://developer.stackblitz.com/img/open_in_stackblitz.svg\" alt=\"Open in StackBlitz\" /></a>\n\n当你编辑文件时，本教程将实时更新。\n\n<h3>使用打包工具</h3>\n\n随意使用你选择的打包器，例如<a class=\"wp-editor-md-post-content-link\" href=\"https://create-react-app.dev/\">Create React App</a>或<a class=\"wp-editor-md-post-content-link\" href=\"https://vitejs.dev/guide/#scaffolding-your-first-vite-project\">Vite</a>。\n\n<pre><code class=\"language-shell line-numbers\"># create react app\nnpx create-react-app router-tutorial\n\n# vite\nnpm init vite@latest router-tutorial --template react\n</code></pre>\n\n然后安装 React Router 依赖包：\n\n<pre><code class=\"language-shell line-numbers\">cd router-tutorial\nnpm add react-router-dom@6 history@5\n</code></pre>\n\n然后在你的 App.js 中写入\"Bookkeeper(无聊)!\"的文字：\n\n<pre><code class=\"language-tsx line-numbers\">export default function App() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Bookkeeper!&lt;/h1&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n\n其实那个\"！\" 看起来一点都不无聊。这非常令人兴奋。我们在 React Router v6 beta 上开发了一年多，因为我们在全球大流行之后调整了我们的业务。这是我们最近做过的最令人兴奋的事情！\n\n最后，确保<code>index.js</code>或<code>main.jsx</code>（取决于你使用的打包器）实际可用：\n\n<pre><code class=\"language-tsx line-numbers\">import { render } from \"react-dom\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(&lt;App /&gt;, rootElement);\n</code></pre>\n\n最后启动你的应用：\n\n<pre><code class=\"language-shell line-numbers\"># probably this\nnpm start\n\n# or this\nnpm run dev\n</code></pre>\n\n<h2>连接到URL</h2>\n\n首先，我们希望将你的应用连接到浏览器的 URL：导入<code>BrowserRouter</code>并围绕你的整个应用渲染它。\n\n<pre><code class=\"language-tsx line-numbers\">import { render } from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  &lt;BrowserRouter&gt;\n    &lt;App /&gt;\n  &lt;/BrowserRouter&gt;,\n  rootElement\n);\n</code></pre>\n\n你的应用中没有任何变化，但现在我们已准备好开始处理 URL。\n\n<h2>添加一些链接</h2>\n\n打开<code>src/App.js</code>、导入<code>Link</code>并添加一些全局导航。旁注：在本教程中不要太认真对待样式，我们只是为了方便而使用内联样式，你可以根据需要设置应用的样式。\n\n<pre><code class=\"language-tsx line-numbers\">import { Link } from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Bookkeeper&lt;/h1&gt;\n      &lt;nav\n        style={{\n          borderBottom: \"solid 1px\",\n          paddingBottom: \"1rem\"\n        }}\n      &gt;\n        &lt;Link to=\"/invoices\"&gt;Invoices&lt;/Link&gt; |{\" \"}\n        &lt;Link to=\"/expenses\"&gt;Expenses&lt;/Link&gt;\n      &lt;/nav&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n\n继续并单击链接和后退/前进按钮（如果你使用的是 StackBlitz，则需要单击内嵌浏览器工具栏中的\"在新窗口中打开\"按钮）。现在React Router 正在控制 URL！\n\n我们还没有在 URL 更改时渲染任何路由，但 Link 正在更改 URL，而不会导致整个页面重新加载。\n\n<h2>添加一些路由</h2>\n\n添加几个新文件：\n\n<ul>\n<li><code>src/routes/invoices.jsx</code></li>\n<li><code>src/routes/expenses.jsx</code></li>\n</ul>\n\n（文件的位置无关紧要，但是当你决定为此应用使用自动后端 API、服务器渲染、代码拆分打包器等时，以这种方式命名你的文件可以轻松将此应用程序移植到我们的另一个项目，<a class=\"wp-editor-md-post-content-link\" href=\"https://remix.run/\">Remix</a> 😉）\n\n现在用一些代码填充它们：\n\n<pre><code class=\"language-tsx line-numbers\">export default function Expenses() {\n  return (\n    &lt;main style={{ padding: \"1rem 0\" }}&gt;\n      &lt;h2&gt;Expenses&lt;/h2&gt;\n    &lt;/main&gt;\n  );\n}\n</code></pre>\n\n<pre><code class=\"language-tsx line-numbers\">export default function Invoices() {\n  return (\n    &lt;main style={{ padding: \"1rem 0\" }}&gt;\n      &lt;h2&gt;Invoices&lt;/h2&gt;\n    &lt;/main&gt;\n  );\n}\n</code></pre>\n\n最后，让我们通过在<code>main.jsx</code>内创建第一个\"路由配置\"来学会如何使用React Router渲染我们的应用.\n\n<pre><code class=\"language-tsx line-numbers\">import { render } from \"react-dom\";\nimport {\n  BrowserRouter,\n  Routes,\n  Route\n} from \"react-router-dom\";\nimport App from \"./App\";\nimport Expenses from \"./routes/expenses\";\nimport Invoices from \"./routes/invoices\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  &lt;BrowserRouter&gt;\n    &lt;Routes&gt;\n      &lt;Route path=\"/\" element={&lt;App /&gt;} /&gt;\n      &lt;Route path=\"expenses\" element={&lt;Expenses /&gt;} /&gt;\n      &lt;Route path=\"invoices\" element={&lt;Invoices /&gt;} /&gt;\n    &lt;/Routes&gt;\n  &lt;/BrowserRouter&gt;,\n  rootElement\n);\n</code></pre>\n\n注意，<code>\"/\"</code>将渲染<code>&lt;App&gt;</code>组件. <code>\"/invoices\"</code>则渲染<code>&lt;Invoices&gt;</code>。干得好！\n\n<blockquote>\n  请记住，如果你使用 StackBlitz 单击内嵌浏览器工具栏中的\"在新窗口中打开\"按钮，以便能够单击浏览器中的后退/前进按钮。\n</blockquote>\n\n<h2>嵌套路由</h2>\n\n单击链接时，你可能已经注意到布局<code>App</code>消失了。重复共享布局令人头疼。我们了解到，大多数 UI 是一系列嵌套布局，几乎总是映射到 URL 的片段，因此这个想法直接融入到了 React Router 中。\n\n让我们通过做两件事来获得一些自动的、持久的布局处理：\n\n<ol>\n<li>在 App 路由中嵌套路由</li>\n<li>渲染一个 Outlet</li>\n</ol>\n\n首先让我们嵌套路由。眼下的费用和发票的路由在应用中是平级关系，我们希望把它们变成应用的<em>子页面</em>：\n\n<pre><code class=\"language-jsx line-numbers\">import { render } from \"react-dom\";\nimport {\n  BrowserRouter,\n  Routes,\n  Route\n} from \"react-router-dom\";\nimport App from \"./App\";\nimport Expenses from \"./routes/expenses\";\nimport Invoices from \"./routes/invoices\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(\n  &lt;BrowserRouter&gt;\n    &lt;Routes&gt;\n      &lt;Route path=\"/\" element={&lt;App /&gt;}&gt;\n        &lt;Route path=\"expenses\" element={&lt;Expenses /&gt;} /&gt;\n        &lt;Route path=\"invoices\" element={&lt;Invoices /&gt;} /&gt;\n      &lt;/Route&gt;\n    &lt;/Routes&gt;\n  &lt;/BrowserRouter&gt;,\n  rootElement\n);\n</code></pre>\n\n当路由有子节点时，它会做两件事：\n\n<ol>\n<li>它嵌套了 URL (<code>\"/\" + \"expenses\"</code>和<code>\"/\" + \"invoices\"</code>)</li>\n<li>当子路由匹配时，它将嵌套共享布局的 UI 组件：</li>\n</ol>\n\n但是，在（2）生效之前，我们需要在\"父级\"的<code>App.jsx</code>路由中渲染一个<code>Outlet</code>。\n\n<pre><code class=\"language-jsx line-numbers\">import { Outlet, Link } from \"react-router-dom\";\n\nexport default function App() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Bookkeeper&lt;/h1&gt;\n      &lt;nav\n        style={{\n          borderBottom: \"solid 1px\",\n          paddingBottom: \"1rem\"\n        }}\n      &gt;\n        &lt;Link to=\"/invoices\"&gt;Invoices&lt;/Link&gt; |{\" \"}\n        &lt;Link to=\"/expenses\"&gt;Expenses&lt;/Link&gt;\n      &lt;/nav&gt;\n      &lt;Outlet /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n\n现在再次单击。父路由 ( <code>App.js</code>) 仍然存在，而两个<code>&lt;Outlet&gt;</code>子路由将在 (<code>&lt;Invoices&gt;</code>和<code>&lt;Expenses&gt;</code>)之间交换！\n\n正如我们稍后将看到的，这适用于路由层次结构的<em>任何级别</em>，并且非常强大。\n\n<h2>列出清单</h2>\n\n通常你会从某个地方的服务器获取数据，但在本教程中，让我们硬编码一些假数据，这样我们就可以专注于路由。\n\n创建一个文件<code>src/data.js</code>并将其复制/粘贴到那里：\n\n<pre><code class=\"language-js line-numbers\">let invoices = [\n  {\n    name: \"Santa Monica\",\n    number: 1995,\n    amount: \"$10,800\",\n    due: \"12/05/1995\"\n  },\n  {\n    name: \"Stankonia\",\n    number: 2000,\n    amount: \"$8,000\",\n    due: \"10/31/2000\"\n  },\n  {\n    name: \"Ocean Avenue\",\n    number: 2003,\n    amount: \"$9,500\",\n    due: \"07/22/2003\"\n  },\n  {\n    name: \"Tubthumper\",\n    number: 1997,\n    amount: \"$14,000\",\n    due: \"09/01/1997\"\n  },\n  {\n    name: \"Wide Open Spaces\",\n    number: 1998,\n    amount: \"$4,600\",\n    due: \"01/27/2998\"\n  }\n];\n\nexport function getInvoices() {\n  return invoices;\n}\n</code></pre>\n\n现在我们可以在清单(发票)路由中使用它。让我们同时添加一些样式来获得侧边栏导航布局。随意复制/粘贴所有这些，但要特别注意<code>&lt;Link&gt;</code>组件的<code>to</code>参数(prop)：\n\n<pre><code class=\"language-js line-numbers\">import { Link } from \"react-router-dom\";\nimport { getInvoices } from \"../data\";\n\nexport default function Invoices() {\n  let invoices = getInvoices();\n  return (\n    &lt;div style={{ display: \"flex\" }}&gt;\n      &lt;nav\n        style={{\n          borderRight: \"solid 1px\",\n          padding: \"1rem\"\n        }}\n      &gt;\n        {invoices.map(invoice =&gt; (\n          &lt;Link\n            style={{ display: \"block\", margin: \"1rem 0\" }}\n            to={`/invoices/${invoice.number}`}\n            key={invoice.number}\n          &gt;\n            {invoice.name}\n          &lt;/Link&gt;\n        ))}\n      &lt;/nav&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n\n爽的！现在单击发票链接，看看会发生什么。\n\n😨😨😨\n\n<h2>添加 \"无匹配\" 路由</h2>\n\n这并不像你预期的那样进行。如果你单击这些链接，页面将变为空白！那是因为我们定义的所有路由都无法匹配我们链接到的 URL：<code>\"/invoices/123\"</code>。\n\n在我们继续之前，最好始终处理这种\"不匹配\"的情况。返回你的路由配置并添加以下内容：\n\n<pre><code class=\"language-js line-numbers\">&lt;Routes&gt;\n  &lt;Route path=\"/\" element={&lt;App /&gt;}&gt;\n    &lt;Route path=\"expenses\" element={&lt;Expenses /&gt;} /&gt;\n    &lt;Route path=\"invoices\" element={&lt;Invoices /&gt;} /&gt;\n    &lt;Route\n      path=\"*\"\n      element={\n        &lt;main style={{ padding: \"1rem\" }}&gt;\n          &lt;p&gt;There\'s nothing here!&lt;/p&gt;\n        &lt;/main&gt;\n      }\n    /&gt;\n  &lt;/Route&gt;\n&lt;/Routes&gt;\n</code></pre>\n\n<code>\"*\"</code>在这里有着特殊的意义。只有在没有其他路由匹配时才会匹配。\n\n<h2>读取URL参数</h2>\n\n好的，回到单个发票 的URL。让我们为特定的发票添加一个路由。我们刚刚访问了一些像<code>\"/invoices/1998\"</code>这样的 URL ，比如<code>\"/invoices/2005\"</code>，现在让我们创建一个新组件 <code>src/routes/invoice.js</code>来呈现这些 URL：\n\n<pre><code class=\"language-js line-numbers\">export default function Invoice() {\n  return &lt;h2&gt;Invoice #???&lt;/h2&gt;;\n}\n</code></pre>\n\n我们想呈现发票编号而不是<code>\"???\"</code>。通常在 React 中，你会将其作为 prop:传递，比如<code>&lt;Invoice invoiceId=\"123\" /&gt;</code>，但你无法控制该信息，因为它来自 URL。\n\n让我们定义一个路由来匹配这些类型的 URL，并使我们能够从中获取发票编号。\n\n在\"发票\"路由内部创建一个新的<code>&lt;Route&gt;</code> ，如下所示：\n\n<pre><code class=\"language-js line-numbers\">&lt;Routes&gt;\n  &lt;Route path=\"/\" element={&lt;App /&gt;}&gt;\n    &lt;Route path=\"expenses\" element={&lt;Expenses /&gt;} /&gt;\n    &lt;Route path=\"invoices\" element={&lt;Invoices /&gt;}&gt;\n      &lt;Route path=\":invoiceId\" element={&lt;Invoice /&gt;} /&gt;\n    &lt;/Route&gt;\n    &lt;Route\n      path=\"*\"\n      element={\n        &lt;main style={{ padding: \"1rem\" }}&gt;\n          &lt;p&gt;There\'s nothing here!&lt;/p&gt;\n        &lt;/main&gt;\n      }\n    /&gt;\n  &lt;/Route&gt;\n&lt;/Routes&gt;\n</code></pre>\n\n需要注意的几点：\n\n<ul>\n<li>我们刚刚创建了一个匹配\"/invoices/2005\"和\"/invoices/1998\"等URL的路由。<code>:invoiceId</code>路径的一部分是\"URL param\"，这意味着只要模式相同，它就可以匹配任何值。</li>\n<li>当<code>&lt;Route&gt;</code>匹配时它增加了路由嵌套的第二层：<code>&lt;App&gt;&lt;Invoices&gt;&lt;Invoice /&gt;&lt;/Invoices&gt;&lt;/App&gt;</code>。因为<code>&lt;Route&gt;</code>是嵌套的，所以 UI 也会被嵌套。</li>\n</ul>\n\n好的，现在点击一个发票链接，注意 URL 发生了变化，但新的发票组件还没有显示出来。你知道为什么吗？\n\n这是正确的！我们需要在父布局路由中添加一个出口( outlet)（我们真的为你感到骄傲）。\n\n<pre><code class=\"language-tsx line-numbers\">import { Link, Outlet } from \"react-router-dom\";\nimport { getInvoices } from \"../data\";\n\nexport default function Invoices() {\n  let invoices = getInvoices();\n  return (\n    &lt;div style={{ display: \"flex\" }}&gt;\n      &lt;nav\n        style={{\n          borderRight: \"solid 1px\",\n          padding: \"1rem\"\n        }}\n      &gt;\n        {invoices.map(invoice =&gt; (\n          &lt;Link\n            style={{ display: \"block\", margin: \"1rem 0\" }}\n            to={`/invoices/${invoice.number}`}\n            key={invoice.number}\n          &gt;\n            {invoice.name}\n          &lt;/Link&gt;\n        ))}\n      &lt;/nav&gt;\n      &lt;Outlet /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n\n好的，让我们在这里关闭圆圈。再次打开发票组件，让我们从 <code>:invoiceId</code>URL 中获取参数：\n\n<pre><code class=\"language-ts line-numbers\">import { useParams } from \"react-router-dom\";\n\nexport default function Invoice() {\n  let params = useParams();\n  return &lt;h2&gt;Invoice: {params.invoiceId}&lt;/h2&gt;;\n}\n</code></pre>\n\n注意<code>params</code>对象上param的key与路由路径中的动态参数名相同：\n\n<pre><code class=\"line-numbers\">:invoiceId -&gt; params.invoiceId\n</code></pre>\n\n让我们使用这些信息来构建一个更有趣的发票页面。打开<code>src/data.js</code>并添加一个新功能来按编号查找发票：\n\n<pre><code class=\"language-js line-numbers\">// ...\n\nexport function getInvoices() {\n  return invoices;\n}\n\nexport function getInvoice(number) {\n  return invoices.find(\n    invoice =&gt; invoice.number === number\n  );\n}\n</code></pre>\n\n现在回到<code>invoice.js</code>我们使用参数来查找发票并显示更多信息：\n\n<pre><code class=\"language-js line-numbers\">import { useParams } from \"react-router-dom\";\nimport { getInvoice } from \"../data\";\n\nexport default function Invoice() {\n  let params = useParams();\n  let invoice = getInvoice(parseInt(params.invoiceId, 10));\n  return (\n    &lt;main style={{ padding: \"1rem\" }}&gt;\n      &lt;h2&gt;Total Due: {invoice.amount}&lt;/h2&gt;\n      &lt;p&gt;\n        {invoice.name}: {invoice.number}\n      &lt;/p&gt;\n      &lt;p&gt;Due Date: {invoice.due}&lt;/p&gt;\n    &lt;/main&gt;\n  );\n}\n</code></pre>\n\n请注意，我们在参数周围使用了<code>parseInt</code>。使用<code>number</code>类型来查找数据是很常见的，但 URL 参数始终是<code>string</code>.\n\n<h2>索引路由</h2>\n\n索引路由可能是 React Router 中最难理解的概念。因此，如果你以前遇到过困难，我们希望这次可以为你澄清。\n\n现在你可能正在查看其中一张发票。单击应用程序全局导航中的\"发票\"链接。请注意，主要内容区域变为空白！我们可以使用\"索引\"路由来解决这个问题。\n\n<pre><code class=\"language-jsx line-numbers\">&lt;Routes&gt;\n  &lt;Route path=\"/\" element={&lt;App /&gt;}&gt;\n    &lt;Route path=\"expenses\" element={&lt;Expenses /&gt;} /&gt;\n    &lt;Route path=\"invoices\" element={&lt;Invoices /&gt;}&gt;\n      &lt;Route\n        index\n        element={\n          &lt;main style={{ padding: \"1rem\" }}&gt;\n            &lt;p&gt;Select an invoice&lt;/p&gt;\n          &lt;/main&gt;\n        }\n      /&gt;\n      &lt;Route path=\":invoiceId\" element={&lt;Invoice /&gt;} /&gt;\n    &lt;/Route&gt;\n    &lt;Route\n      path=\"*\"\n      element={\n        &lt;main style={{ padding: \"1rem\" }}&gt;\n          &lt;p&gt;There\'s nothing here!&lt;/p&gt;\n        &lt;/main&gt;\n      }\n    /&gt;\n  &lt;/Route&gt;\n&lt;/Routes&gt;\n</code></pre>\n\n非常好！现在索引路由填补了空白！\n\n注意它有一个<code>index</code>的prop 而不是 一个 <code>path</code>。那是因为索引路由共享父路由的路径。这就是重点——它没有路径。\n\n也许你还在挠头。我们尝试通过几种方法来回答\"什么是索引路由？\"这个问题。希望其中一条适合你：\n\n<ul>\n<li>索引路由在父路由路径的父路由Outlet组件中渲染。</li>\n<li>当父路由匹配但其他子路由都不匹配时，索引路由匹配。</li>\n<li>索引路由是父路由的默认子路由。</li>\n<li>当用户还没有单击导航列表中的项目之一时，索引路由会渲染。</li>\n</ul>\n\n<h2>激活的链接</h2>\n\n将链接显示为用户正在查看的激活链接是很常见的，尤其是在导航列表中。让我们通过把<code>Link</code>替换为<code>NavLink</code>来添加这个功能到我们的发票列表中。\n\n<pre><code class=\"language-jsx line-numbers\">import { NavLink, Outlet } from \"react-router-dom\";\nimport { getInvoices } from \"../data\";\n\nexport default function Invoices() {\n  let invoices = getInvoices();\n  return (\n    &lt;div style={{ display: \"flex\" }}&gt;\n      &lt;nav\n        style={{\n          borderRight: \"solid 1px\",\n          padding: \"1rem\"\n        }}\n      &gt;\n        {invoices.map(invoice =&gt; (\n          &lt;NavLink\n            style={({ isActive }) =&gt; {\n              return {\n                display: \"block\",\n                margin: \"1rem 0\",\n                color: isActive ? \"red\" : \"\"\n              };\n            }}\n            to={`/invoices/${invoice.number}`}\n            key={invoice.number}\n          &gt;\n            {invoice.name}\n          &lt;/NavLink&gt;\n        ))}\n      &lt;/nav&gt;\n      &lt;Outlet /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n\n我们在那里做了三件事：\n\n<ol>\n<li>我们把<code>Link</code>换成了<code>NavLink</code>。</li>\n<li>我们的<code>style</code>从一个简单的对象变成了一个返回一个对象的函数。</li>\n<li>我们通过查找传递给<code>NavLink</code>组件的样式函数的<code>isActive</code>值来更改链接的颜色。</li>\n</ol>\n\n你也可以用<code>NavLink</code>上<code>className</code>参数做同样的事情：\n\n<pre><code class=\"language-jsx line-numbers\">// normal string\n&lt;NavLink className=\"red\" /&gt;\n\n// function\n&lt;NavLink className={({ isActive }) =&gt; isActive ? \"red\" : \"blue\"} /&gt;\n</code></pre>\n\n<h2>Query参数</h2>\n\n搜索参数类似于 URL 参数，但它们位于 URL 中的不同位置。它们不是在由 普通 URL 段中的<code>/</code>来分隔的，而是使用<code>?</code>. 你已经在许多网站上看到过它们，例如<code>\"/login?success=1\"</code>或<code>\"/shoes?brand=nike&amp;sort=asc&amp;sortby=price\"</code>。\n\nReact Router 使用<code>useSearchParams</code>来轻松实现，它的用法很像<code>React.useState()</code>，但它在 URL  Query参数中而不是在内存中存储和设置状态。\n\n让我们通过在发票导航列表上添加一个小过滤器来看看它的作用。\n\n<pre><code class=\"language-jsx line-numbers\">import {\n  NavLink,\n  Outlet,\n  useSearchParams\n} from \"react-router-dom\";\nimport { getInvoices } from \"../data\";\n\nexport default function Invoices() {\n  let invoices = getInvoices();\n  let [searchParams, setSearchParams] = useSearchParams();\n\n  return (\n    &lt;div style={{ display: \"flex\" }}&gt;\n      &lt;nav\n        style={{\n          borderRight: \"solid 1px\",\n          padding: \"1rem\"\n        }}\n      &gt;\n        &lt;input\n          value={searchParams.get(\"filter\") || \"\"}\n          onChange={event =&gt; {\n            let filter = event.target.value;\n            if (filter) {\n              setSearchParams({ filter });\n            } else {\n              setSearchParams({});\n            }\n          }}\n        /&gt;\n        {invoices\n          .filter(invoice =&gt; {\n            let filter = searchParams.get(\"filter\");\n            if (!filter) return true;\n            let name = invoice.name.toLowerCase();\n            return name.startsWith(filter.toLowerCase());\n          })\n          .map(invoice =&gt; (\n            &lt;NavLink\n              style={({ isActive }) =&gt; ({\n                display: \"block\",\n                margin: \"1rem 0\",\n                color: isActive ? \"red\" : \"\"\n              })}\n              to={`/invoices/${invoice.number}`}\n              key={invoice.number}\n            &gt;\n              {invoice.name}\n            &lt;/NavLink&gt;\n          ))}\n      &lt;/nav&gt;\n      &lt;Outlet /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n\n可以看到，就像用户输入的一样：\n\n<ul>\n<li><code>setSearchParams()</code>将<code>?filter=...</code>Query的参数放在 URL 中并重新渲染路由器。</li>\n<li><code>useSearchParams</code>现在返回一个带有<code>\"filter\"</code>的<a class=\"wp-editor-md-post-content-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\"><code>URLSearchParams</code></a>作为其值之一。</li>\n<li>我们将输入的值设置为过滤器Query参数中的任何值（就像<code>useState</code>，只是使用 URLSearchParams 来替代而已！）</li>\n<li>我们根据过滤器Query参数过滤我们的发票列表。</li>\n</ul>\n\n<h2>自定义行为</h2>\n\n如果你过滤列表然后单击链接，你会注意到列表不再过滤并且搜索参数从<code>&lt;input&gt;</code>和 URL 中清除。你可能想要这个，你可能不想要！也许你想保持过滤列表并将参数保留在 URL 中。\n\n我们可以在点击链接时添加查询字符串并把它添加到链接的href属性。我们将通过React Router 组合<code>NavLink</code>和<code>useLocation</code>到我们自己的<code>QueryNavLink</code>（也许有一个更好的名字，但这就是我们今天要做的）来做到这一点。\n\n<pre><code class=\"language-js line-numbers\">import { useLocation, NavLink } from \"react-router-dom\";\n\nfunction QueryNavLink({ to, ...props }) {\n  let location = useLocation();\n  return &lt;NavLink to={to + location.search} {...props} /&gt;;\n}\n</code></pre>\n\n你可以将该代码放在你的应用中任何你想要的位置，然后将你的<code>src/routes/invoices.jsx</code>为把<code>NavLink</code>替换为<code>QueryNavLink</code>，你就完成了。\n\n像<code>useSearchParams</code>，<code>useLocation</code>返回一个location对象来告诉我们有关 URL 的信息。一个location看起来像这样：\n\n<pre><code class=\"language-js line-numbers\">{\n  pathame: \"/invoices\",\n  search: \"?filter=sa\",\n  hash: \"\",\n  state: null,\n  key: \"ae4cz2j\"\n}\n</code></pre>\n\n有了这些信息，<code>QueryNavLink</code>中的任务就很简单了：把<code>location.search</code>加到<code>to</code> prop上。你可能会想，\"天哪，这应该是 React Router 的内置组件还是什么？\"。好吧，让我们看另一个例子。\n\n如果你在电子商务网站上有这样的链接怎么办？\n\n<pre><code class=\"language-jsx line-numbers\">&lt;Link to=\"/shoes?brand=nike\"&gt;Nike&lt;/Link&gt;\n&lt;Link to=\"/shoes?brand=vans\"&gt;Vans&lt;/Link&gt;\n</code></pre>\n\n然后你想在 url 搜索参数与品牌匹配时将它们设置为\"active\"样式？你完全可以用你在本教程中学到的东西来快速地制作一个这样组件：\n\n<pre><code class=\"language-jsx line-numbers\">function BrandLink({ brand, ...props }) {\n  let [params] = useSearchParams();\n  let isActive = params.getAll(\"brand\").includes(brand);\n  return (\n    &lt;Link\n      style={{ color: isActive ? \"red\" : \"\" }}\n      to={`/shoes?brand=${brand}`}\n      {...props}\n    /&gt;\n  );\n}\n</code></pre>\n\n这将为<code>\"/shoes?brand=nike\"</code>添加active,<code>\"/shoes?brand=nike&amp;brand=vans\"</code>也是一样。也许你希望它在仅选择一个品牌时处于active状态：\n\n<pre><code class=\"language-js line-numbers\">let brands = params.getAll(\"brand\");\nlet isActive =\n  brands.includes(brand) &amp;&amp; brands.length === 1;\n// ...\n</code></pre>\n\n或者，你可能希望链接是可<em>处理的</em>（点击 Nike，然后 Vans 将两个品牌都添加到搜索参数中）而不是替换品牌：\n\n<pre><code class=\"language-jsx line-numbers\">function BrandLink({ brand, ...props }) {\n  let [params] = useSearchParams();\n  let isActive = params.getAll(\"brand\").includes(brand);\n  if (!isActive) {\n    params.append(\"brand\", brand);\n  }\n  return (\n    &lt;Link\n      style={{ color: isActive ? \"red\" : \"\" }}\n      to={`/shoes?${params.toString()}`}\n      {...props}\n    /&gt;\n  );\n}\n</code></pre>\n\n或者，也许你希望它添加品牌（如果它已经不存在）并在再次单击时将其删除！\n\n<pre><code class=\"language-jsx line-numbers\">function BrandLink({ brand, ...props }) {\n  let [params] = useSearchParams();\n  let isActive = params.getAll(\"brand\").includes(brand);\n  if (!isActive) {\n    params.append(\"brand\", brand);\n  } else {\n    params = new URLSearchParams(\n      Array.from(params).filter(\n        ([key, value]) =&gt; key !== \"brand\" || value !== brand\n      )\n    );\n  }\n  return (\n    &lt;Link\n      style={{ color: isActive ? \"red\" : \"\" }}\n      to={`/shoes?${params.toString()}`}\n      {...props}\n    /&gt;\n  );\n}\n</code></pre>\n\n如你所见，即使在这个相当简单的示例中，你也可能需要许多有效的行为。React Router 并没有尝试解决我们直接听说过的每个用例。相反，我们为你提供组件和钩子来组合你需要的任何行为。\n\n<h2>以编程的方式导航</h2>\n\n好的，回到我们的应用。坚持住，你快完成了！\n\n大多数情况下，URL 更改是响应用户单击链接。但有时你，一个程序员，想要更改 URL。一个非常常见的用例是在数据更新之后，例如创建或删除记录。\n\n让我们添加一个按钮，将发票标记为已付款，然后导航到索引路径。\n\n首先，你可以复制粘贴此功能，从我们的虚拟数据中删除发票：\n\n<pre><code class=\"language-js line-numbers\">export function deleteInvoice(number) {\n  invoices = invoices.filter(\n    invoice =&gt; invoice.number !== number\n  );\n}\n</code></pre>\n\n现在让我们添加删除按钮，调用我们的新函数，并导航到索引路由：\n\n<pre><code class=\"language-js line-numbers\">import { useParams, useNavigate } from \"react-router-dom\";\nimport { getInvoice, deleteInvoice } from \"../data\";\n\nexport default function Invoice() {\n  let navigate = useNavigate();\n  let params = useParams();\n  let invoice = getInvoice(parseInt(params.invoiceId, 10));\n\n  return (\n    &lt;main style={{ padding: \"1rem\" }}&gt;\n      &lt;h2&gt;Total Due: {invoice.amount}&lt;/h2&gt;\n      &lt;p&gt;\n        {invoice.name}: {invoice.number}\n      &lt;/p&gt;\n      &lt;p&gt;Due Date: {invoice.due}&lt;/p&gt;\n      &lt;p&gt;\n        &lt;button\n          onClick={() =&gt; {\n            deleteInvoice(invoice.number);\n            navigate(\"/invoices\");\n          }}\n        &gt;\n          Delete\n        &lt;/button&gt;\n      &lt;/p&gt;\n    &lt;/main&gt;\n  );\n}\n</code></pre>\n\n<h2>获得帮助</h2>\n\n恭喜！你已经完成了本教程。我们希望它可以帮助你了解 React Router。\n\n如果你遇到问题，请查看<a class=\"wp-editor-md-post-content-link\" href=\"https://reactrouter.com/resources\">资源</a>页面以获取帮助。祝你好运！', '教程', '', 'publish', 'open', 'closed', '', 'tutorial', '', '', '2021-11-22 10:47:13', '2021-11-22 02:47:13', '# 教程\r\n\r\n## 介绍\r\n\r\n[在此处查看应用程序的完整版本](https://stackblitz.com/edit/github-agqlf5?file=src/App.jsx)。\r\n\r\nReact Router 是一个功能齐全的客户端和服务器端 React路由库，一个用于构建用户界面的 JavaScript 库。React Router 在 React 运行的任何地方运行；在web上，在带有 node.js 的服务器上，以及在 React Native 上。\r\n\r\n如果你刚刚开始使用 React，我们建议你遵循官方文档中[优秀的入门指南](https://reactjs.org/docs/getting-started.html)。那里有大量信息可以帮助你启动和运行。React Router 与 React >= 16.8 兼容。\r\n\r\n我们将保持本教程的快速和专注点。到最后你会知道你如何日常使用 React Router 处理的 API。之后，你可以深入研究其他一些文档以获得更深入的理解。\r\n\r\n在构建一个小记账应用时，我们将介绍：\r\n\r\n-   配置路由\r\n-   使用链接导航\r\n-   创建具有激活样式的链接\r\n-   使用嵌套路由进行布局\r\n-   以编程方式导航\r\n-   使用 URL 参数加载数据\r\n-   使用 URL  Query参数\r\n-   通过组合创建自己的行为\r\n-   服务端渲染(译者: 官方文档还没有,更新后我会同步)\r\n\r\n## 安装\r\n\r\n### 推荐: StackBlitz\r\n\r\n要完成本教程，你需要一个可用的 React 应用。我们建议跳过[打包](https://stackblitz.com/github/remix-run/react-router/tree/main/tutorial?file=src/App.jsx)程序并通过在[StackBlitz的演示](https://stackblitz.com/github/remix-run/react-router/tree/main/tutorial?file=src/App.jsx)上在浏览器中进行编码：\r\n\r\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/remix-run/react-router/tree/main/tutorial?file=src/App.jsx)\r\n\r\n当你编辑文件时，本教程将实时更新。\r\n\r\n### 使用打包工具\r\n\r\n随意使用你选择的打包器，例如[Create React App](https://create-react-app.dev/)或[Vite](https://vitejs.dev/guide/#scaffolding-your-first-vite-project)。\r\n\r\n```shell\r\n# create react app\r\nnpx create-react-app router-tutorial\r\n\r\n# vite\r\nnpm init vite@latest router-tutorial --template react\r\n```\r\n\r\n然后安装 React Router 依赖包：\r\n\r\n```shell\r\ncd router-tutorial\r\nnpm add react-router-dom@6 history@5\r\n```\r\n\r\n然后在你的 App.js 中写入\"Bookkeeper(无聊)!\"的文字：\r\n\r\n```tsx\r\nexport default function App() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;Bookkeeper!&lt;/h1&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n```\r\n\r\n其实那个\"！\" 看起来一点都不无聊。这非常令人兴奋。我们在 React Router v6 beta 上开发了一年多，因为我们在全球大流行之后调整了我们的业务。这是我们最近做过的最令人兴奋的事情！\r\n\r\n最后，确保`index.js`或`main.jsx`（取决于你使用的打包器）实际可用：\r\n\r\n```tsx\r\nimport { render } from &quot;react-dom&quot;;\r\nimport App from &quot;./App&quot;;\r\n\r\nconst rootElement = document.getElementById(&quot;root&quot;);\r\nrender(&lt;App /&gt;, rootElement);\r\n```\r\n\r\n最后启动你的应用：\r\n\r\n```shell\r\n# probably this\r\nnpm start\r\n\r\n# or this\r\nnpm run dev\r\n```\r\n## 连接到URL\r\n\r\n首先，我们希望将你的应用连接到浏览器的 URL：导入`BrowserRouter`并围绕你的整个应用渲染它。\r\n\r\n```tsx\r\nimport { render } from &quot;react-dom&quot;;\r\nimport { BrowserRouter } from &quot;react-router-dom&quot;;\r\nimport App from &quot;./App&quot;;\r\n\r\nconst rootElement = document.getElementById(&quot;root&quot;);\r\nrender(\r\n  &lt;BrowserRouter&gt;\r\n    &lt;App /&gt;\r\n  &lt;/BrowserRouter&gt;,\r\n  rootElement\r\n);\r\n```\r\n\r\n你的应用中没有任何变化，但现在我们已准备好开始处理 URL。\r\n\r\n## 添加一些链接\r\n\r\n打开`src/App.js`、导入`Link`并添加一些全局导航。旁注：在本教程中不要太认真对待样式，我们只是为了方便而使用内联样式，你可以根据需要设置应用的样式。\r\n\r\n```tsx\r\nimport { Link } from &quot;react-router-dom&quot;;\r\n\r\nexport default function App() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;Bookkeeper&lt;/h1&gt;\r\n      &lt;nav\r\n        style={{\r\n          borderBottom: &quot;solid 1px&quot;,\r\n          paddingBottom: &quot;1rem&quot;\r\n        }}\r\n      &gt;\r\n        &lt;Link to=&quot;/invoices&quot;&gt;Invoices&lt;/Link&gt; |{&quot; &quot;}\r\n        &lt;Link to=&quot;/expenses&quot;&gt;Expenses&lt;/Link&gt;\r\n      &lt;/nav&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n```\r\n\r\n继续并单击链接和后退/前进按钮（如果你使用的是 StackBlitz，则需要单击内嵌浏览器工具栏中的\"在新窗口中打开\"按钮）。现在React Router 正在控制 URL！\r\n\r\n我们还没有在 URL 更改时渲染任何路由，但 Link 正在更改 URL，而不会导致整个页面重新加载。\r\n\r\n## 添加一些路由\r\n\r\n添加几个新文件：\r\n\r\n-   `src/routes/invoices.jsx`\r\n-   `src/routes/expenses.jsx`\r\n\r\n（文件的位置无关紧要，但是当你决定为此应用使用自动后端 API、服务器渲染、代码拆分打包器等时，以这种方式命名你的文件可以轻松将此应用程序移植到我们的另一个项目，[Remix](https://remix.run/) 😉）\r\n\r\n现在用一些代码填充它们：\r\n\r\n```tsx\r\nexport default function Expenses() {\r\n  return (\r\n    &lt;main style={{ padding: &quot;1rem 0&quot; }}&gt;\r\n      &lt;h2&gt;Expenses&lt;/h2&gt;\r\n    &lt;/main&gt;\r\n  );\r\n}\r\n```\r\n\r\n```tsx\r\nexport default function Invoices() {\r\n  return (\r\n    &lt;main style={{ padding: &quot;1rem 0&quot; }}&gt;\r\n      &lt;h2&gt;Invoices&lt;/h2&gt;\r\n    &lt;/main&gt;\r\n  );\r\n}\r\n```\r\n\r\n最后，让我们通过在`main.jsx`内创建第一个\"路由配置\"来学会如何使用React Router渲染我们的应用.\r\n\r\n```tsx\r\nimport { render } from &quot;react-dom&quot;;\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route\r\n} from &quot;react-router-dom&quot;;\r\nimport App from &quot;./App&quot;;\r\nimport Expenses from &quot;./routes/expenses&quot;;\r\nimport Invoices from &quot;./routes/invoices&quot;;\r\n\r\nconst rootElement = document.getElementById(&quot;root&quot;);\r\nrender(\r\n  &lt;BrowserRouter&gt;\r\n    &lt;Routes&gt;\r\n      &lt;Route path=&quot;/&quot; element={&lt;App /&gt;} /&gt;\r\n      &lt;Route path=&quot;expenses&quot; element={&lt;Expenses /&gt;} /&gt;\r\n      &lt;Route path=&quot;invoices&quot; element={&lt;Invoices /&gt;} /&gt;\r\n    &lt;/Routes&gt;\r\n  &lt;/BrowserRouter&gt;,\r\n  rootElement\r\n);\r\n```\r\n\r\n注意，`\"/\"`将渲染`<App>`组件. `\"/invoices\"`则渲染`<Invoices>`。干得好！\r\n\r\n>   请记住，如果你使用 StackBlitz 单击内嵌浏览器工具栏中的\"在新窗口中打开\"按钮，以便能够单击浏览器中的后退/前进按钮。\r\n\r\n## 嵌套路由\r\n\r\n单击链接时，你可能已经注意到布局`App`消失了。重复共享布局令人头疼。我们了解到，大多数 UI 是一系列嵌套布局，几乎总是映射到 URL 的片段，因此这个想法直接融入到了 React Router 中。\r\n\r\n让我们通过做两件事来获得一些自动的、持久的布局处理：\r\n\r\n1.  在 App 路由中嵌套路由\r\n2.  渲染一个 Outlet\r\n\r\n首先让我们嵌套路由。眼下的费用和发票的路由在应用中是平级关系，我们希望把它们变成应用的*子页面*：\r\n\r\n```jsx\r\nimport { render } from &quot;react-dom&quot;;\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route\r\n} from &quot;react-router-dom&quot;;\r\nimport App from &quot;./App&quot;;\r\nimport Expenses from &quot;./routes/expenses&quot;;\r\nimport Invoices from &quot;./routes/invoices&quot;;\r\n\r\nconst rootElement = document.getElementById(&quot;root&quot;);\r\nrender(\r\n  &lt;BrowserRouter&gt;\r\n    &lt;Routes&gt;\r\n      &lt;Route path=&quot;/&quot; element={&lt;App /&gt;}&gt;\r\n        &lt;Route path=&quot;expenses&quot; element={&lt;Expenses /&gt;} /&gt;\r\n        &lt;Route path=&quot;invoices&quot; element={&lt;Invoices /&gt;} /&gt;\r\n      &lt;/Route&gt;\r\n    &lt;/Routes&gt;\r\n  &lt;/BrowserRouter&gt;,\r\n  rootElement\r\n);\r\n```\r\n\r\n当路由有子节点时，它会做两件事：\r\n\r\n1.  它嵌套了 URL (`\"/\" + \"expenses\"`和`\"/\" + \"invoices\"`)\r\n2.  当子路由匹配时，它将嵌套共享布局的 UI 组件：\r\n\r\n但是，在（2）生效之前，我们需要在\"父级\"的`App.jsx`路由中渲染一个`Outlet`。\r\n\r\n```jsx\r\nimport { Outlet, Link } from &quot;react-router-dom&quot;;\r\n\r\nexport default function App() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;Bookkeeper&lt;/h1&gt;\r\n      &lt;nav\r\n        style={{\r\n          borderBottom: &quot;solid 1px&quot;,\r\n          paddingBottom: &quot;1rem&quot;\r\n        }}\r\n      &gt;\r\n        &lt;Link to=&quot;/invoices&quot;&gt;Invoices&lt;/Link&gt; |{&quot; &quot;}\r\n        &lt;Link to=&quot;/expenses&quot;&gt;Expenses&lt;/Link&gt;\r\n      &lt;/nav&gt;\r\n      &lt;Outlet /&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n```\r\n\r\n现在再次单击。父路由 ( `App.js`) 仍然存在，而两个`<Outlet>`子路由将在 (`<Invoices>`和`<Expenses>`)之间交换！\r\n\r\n正如我们稍后将看到的，这适用于路由层次结构的*任何级别*，并且非常强大。\r\n\r\n## 列出清单\r\n\r\n通常你会从某个地方的服务器获取数据，但在本教程中，让我们硬编码一些假数据，这样我们就可以专注于路由。\r\n\r\n创建一个文件`src/data.js`并将其复制/粘贴到那里：\r\n\r\n```js\r\nlet invoices = [\r\n  {\r\n    name: &quot;Santa Monica&quot;,\r\n    number: 1995,\r\n    amount: &quot;$10,800&quot;,\r\n    due: &quot;12/05/1995&quot;\r\n  },\r\n  {\r\n    name: &quot;Stankonia&quot;,\r\n    number: 2000,\r\n    amount: &quot;$8,000&quot;,\r\n    due: &quot;10/31/2000&quot;\r\n  },\r\n  {\r\n    name: &quot;Ocean Avenue&quot;,\r\n    number: 2003,\r\n    amount: &quot;$9,500&quot;,\r\n    due: &quot;07/22/2003&quot;\r\n  },\r\n  {\r\n    name: &quot;Tubthumper&quot;,\r\n    number: 1997,\r\n    amount: &quot;$14,000&quot;,\r\n    due: &quot;09/01/1997&quot;\r\n  },\r\n  {\r\n    name: &quot;Wide Open Spaces&quot;,\r\n    number: 1998,\r\n    amount: &quot;$4,600&quot;,\r\n    due: &quot;01/27/2998&quot;\r\n  }\r\n];\r\n\r\nexport function getInvoices() {\r\n  return invoices;\r\n}\r\n```\r\n\r\n现在我们可以在清单(发票)路由中使用它。让我们同时添加一些样式来获得侧边栏导航布局。随意复制/粘贴所有这些，但要特别注意`<Link>`组件的`to`参数(prop)：\r\n\r\n```js\r\nimport { Link } from \"react-router-dom\";\r\nimport { getInvoices } from \"../data\";\r\n\r\nexport default function Invoices() {\r\n  let invoices = getInvoices();\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <nav\r\n        style={{\r\n          borderRight: \"solid 1px\",\r\n          padding: \"1rem\"\r\n        }}\r\n      >\r\n        {invoices.map(invoice => (\r\n          <Link\r\n            style={{ display: \"block\", margin: \"1rem 0\" }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n          >\r\n            {invoice.name}\r\n          </Link>\r\n        ))}\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n爽的！现在单击发票链接，看看会发生什么。\r\n\r\n😨😨😨\r\n\r\n## 添加 \"无匹配\" 路由\r\n\r\n这并不像你预期的那样进行。如果你单击这些链接，页面将变为空白！那是因为我们定义的所有路由都无法匹配我们链接到的 URL：`\"/invoices/123\"`。\r\n\r\n在我们继续之前，最好始终处理这种\"不匹配\"的情况。返回你的路由配置并添加以下内容：\r\n\r\n```js\r\n&lt;Routes&gt;\r\n  &lt;Route path=&quot;/&quot; element={&lt;App /&gt;}&gt;\r\n    &lt;Route path=&quot;expenses&quot; element={&lt;Expenses /&gt;} /&gt;\r\n    &lt;Route path=&quot;invoices&quot; element={&lt;Invoices /&gt;} /&gt;\r\n    &lt;Route\r\n      path=&quot;*&quot;\r\n      element={\r\n        &lt;main style={{ padding: &quot;1rem&quot; }}&gt;\r\n          &lt;p&gt;There&#039;s nothing here!&lt;/p&gt;\r\n        &lt;/main&gt;\r\n      }\r\n    /&gt;\r\n  &lt;/Route&gt;\r\n&lt;/Routes&gt;\r\n```\r\n\r\n`\"*\"`在这里有着特殊的意义。只有在没有其他路由匹配时才会匹配。\r\n\r\n## 读取URL参数\r\n\r\n好的，回到单个发票 的URL。让我们为特定的发票添加一个路由。我们刚刚访问了一些像`\"/invoices/1998\"`这样的 URL ，比如`\"/invoices/2005\"`，现在让我们创建一个新组件 `src/routes/invoice.js`来呈现这些 URL：\r\n\r\n```js\r\nexport default function Invoice() {\r\n  return &lt;h2&gt;Invoice #???&lt;/h2&gt;;\r\n}\r\n```\r\n\r\n我们想呈现发票编号而不是`\"???\"`。通常在 React 中，你会将其作为 prop:传递，比如`<Invoice invoiceId=\"123\" />`，但你无法控制该信息，因为它来自 URL。\r\n\r\n让我们定义一个路由来匹配这些类型的 URL，并使我们能够从中获取发票编号。\r\n\r\n在\"发票\"路由内部创建一个新的`<Route>` ，如下所示：\r\n\r\n```js\r\n&lt;Routes&gt;\r\n  &lt;Route path=&quot;/&quot; element={&lt;App /&gt;}&gt;\r\n    &lt;Route path=&quot;expenses&quot; element={&lt;Expenses /&gt;} /&gt;\r\n    &lt;Route path=&quot;invoices&quot; element={&lt;Invoices /&gt;}&gt;\r\n      &lt;Route path=&quot;:invoiceId&quot; element={&lt;Invoice /&gt;} /&gt;\r\n    &lt;/Route&gt;\r\n    &lt;Route\r\n      path=&quot;*&quot;\r\n      element={\r\n        &lt;main style={{ padding: &quot;1rem&quot; }}&gt;\r\n          &lt;p&gt;There&#039;s nothing here!&lt;/p&gt;\r\n        &lt;/main&gt;\r\n      }\r\n    /&gt;\r\n  &lt;/Route&gt;\r\n&lt;/Routes&gt;\r\n```\r\n\r\n需要注意的几点：\r\n\r\n-   我们刚刚创建了一个匹配\"/invoices/2005\"和\"/invoices/1998\"等URL的路由。`:invoiceId`路径的一部分是\"URL param\"，这意味着只要模式相同，它就可以匹配任何值。\r\n-   当`<Route>`匹配时它增加了路由嵌套的第二层：`<App><Invoices><Invoice /></Invoices></App>`。因为`<Route>`是嵌套的，所以 UI 也会被嵌套。\r\n\r\n好的，现在点击一个发票链接，注意 URL 发生了变化，但新的发票组件还没有显示出来。你知道为什么吗？\r\n\r\n这是正确的！我们需要在父布局路由中添加一个出口( outlet)（我们真的为你感到骄傲）。\r\n\r\n```tsx\r\nimport { Link, Outlet } from \"react-router-dom\";\r\nimport { getInvoices } from \"../data\";\r\n\r\nexport default function Invoices() {\r\n  let invoices = getInvoices();\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <nav\r\n        style={{\r\n          borderRight: \"solid 1px\",\r\n          padding: \"1rem\"\r\n        }}\r\n      >\r\n        {invoices.map(invoice => (\r\n          <Link\r\n            style={{ display: \"block\", margin: \"1rem 0\" }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n          >\r\n            {invoice.name}\r\n          </Link>\r\n        ))}\r\n      </nav>\r\n      <Outlet />\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n好的，让我们在这里关闭圆圈。再次打开发票组件，让我们从 `:invoiceId`URL 中获取参数：\r\n\r\n```ts\r\nimport { useParams } from &quot;react-router-dom&quot;;\r\n\r\nexport default function Invoice() {\r\n  let params = useParams();\r\n  return &lt;h2&gt;Invoice: {params.invoiceId}&lt;/h2&gt;;\r\n}\r\n```\r\n\r\n注意`params`对象上param的key与路由路径中的动态参数名相同：\r\n\r\n```\r\n:invoiceId -&gt; params.invoiceId\r\n```\r\n\r\n让我们使用这些信息来构建一个更有趣的发票页面。打开`src/data.js`并添加一个新功能来按编号查找发票：\r\n\r\n```js\r\n// ...\r\n\r\nexport function getInvoices() {\r\n  return invoices;\r\n}\r\n\r\nexport function getInvoice(number) {\r\n  return invoices.find(\r\n    invoice =&gt; invoice.number === number\r\n  );\r\n}\r\n```\r\n\r\n现在回到`invoice.js`我们使用参数来查找发票并显示更多信息：\r\n\r\n```js\r\nimport { useParams } from &quot;react-router-dom&quot;;\r\nimport { getInvoice } from &quot;../data&quot;;\r\n\r\nexport default function Invoice() {\r\n  let params = useParams();\r\n  let invoice = getInvoice(parseInt(params.invoiceId, 10));\r\n  return (\r\n    &lt;main style={{ padding: &quot;1rem&quot; }}&gt;\r\n      &lt;h2&gt;Total Due: {invoice.amount}&lt;/h2&gt;\r\n      &lt;p&gt;\r\n        {invoice.name}: {invoice.number}\r\n      &lt;/p&gt;\r\n      &lt;p&gt;Due Date: {invoice.due}&lt;/p&gt;\r\n    &lt;/main&gt;\r\n  );\r\n}\r\n```\r\n\r\n请注意，我们在参数周围使用了`parseInt`。使用`number`类型来查找数据是很常见的，但 URL 参数始终是`string`.\r\n\r\n## 索引路由\r\n\r\n索引路由可能是 React Router 中最难理解的概念。因此，如果你以前遇到过困难，我们希望这次可以为你澄清。\r\n\r\n现在你可能正在查看其中一张发票。单击应用程序全局导航中的\"发票\"链接。请注意，主要内容区域变为空白！我们可以使用\"索引\"路由来解决这个问题。\r\n\r\n```jsx\r\n&lt;Routes&gt;\r\n  &lt;Route path=&quot;/&quot; element={&lt;App /&gt;}&gt;\r\n    &lt;Route path=&quot;expenses&quot; element={&lt;Expenses /&gt;} /&gt;\r\n    &lt;Route path=&quot;invoices&quot; element={&lt;Invoices /&gt;}&gt;\r\n      &lt;Route\r\n        index\r\n        element={\r\n          &lt;main style={{ padding: &quot;1rem&quot; }}&gt;\r\n            &lt;p&gt;Select an invoice&lt;/p&gt;\r\n          &lt;/main&gt;\r\n        }\r\n      /&gt;\r\n      &lt;Route path=&quot;:invoiceId&quot; element={&lt;Invoice /&gt;} /&gt;\r\n    &lt;/Route&gt;\r\n    &lt;Route\r\n      path=&quot;*&quot;\r\n      element={\r\n        &lt;main style={{ padding: &quot;1rem&quot; }}&gt;\r\n          &lt;p&gt;There&#039;s nothing here!&lt;/p&gt;\r\n        &lt;/main&gt;\r\n      }\r\n    /&gt;\r\n  &lt;/Route&gt;\r\n&lt;/Routes&gt;\r\n```\r\n\r\n非常好！现在索引路由填补了空白！\r\n\r\n注意它有一个`index`的prop 而不是 一个 `path`。那是因为索引路由共享父路由的路径。这就是重点——它没有路径。\r\n\r\n也许你还在挠头。我们尝试通过几种方法来回答\"什么是索引路由？\"这个问题。希望其中一条适合你：\r\n\r\n-   索引路由在父路由路径的父路由Outlet组件中渲染。\r\n-   当父路由匹配但其他子路由都不匹配时，索引路由匹配。\r\n-   索引路由是父路由的默认子路由。\r\n-   当用户还没有单击导航列表中的项目之一时，索引路由会渲染。\r\n\r\n## 激活的链接\r\n\r\n将链接显示为用户正在查看的激活链接是很常见的，尤其是在导航列表中。让我们通过把`Link`替换为`NavLink`来添加这个功能到我们的发票列表中。\r\n\r\n```jsx\r\nimport { NavLink, Outlet } from \"react-router-dom\";\r\nimport { getInvoices } from \"../data\";\r\n\r\nexport default function Invoices() {\r\n  let invoices = getInvoices();\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <nav\r\n        style={{\r\n          borderRight: \"solid 1px\",\r\n          padding: \"1rem\"\r\n        }}\r\n      >\r\n        {invoices.map(invoice => (\r\n          <NavLink\r\n            style={({ isActive }) => {\r\n              return {\r\n                display: \"block\",\r\n                margin: \"1rem 0\",\r\n                color: isActive ? \"red\" : \"\"\r\n              };\r\n            }}\r\n            to={`/invoices/${invoice.number}`}\r\n            key={invoice.number}\r\n          >\r\n            {invoice.name}\r\n          </NavLink>\r\n        ))}\r\n      </nav>\r\n      <Outlet />\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n我们在那里做了三件事：\r\n\r\n1.  我们把`Link`换成了`NavLink`。\r\n2.  我们的`style`从一个简单的对象变成了一个返回一个对象的函数。\r\n3.  我们通过查找传递给`NavLink`组件的样式函数的`isActive`值来更改链接的颜色。\r\n\r\n你也可以用`NavLink`上`className`参数做同样的事情：\r\n\r\n```jsx\r\n// normal string\r\n&lt;NavLink className=&quot;red&quot; /&gt;\r\n\r\n// function\r\n&lt;NavLink className={({ isActive }) =&gt; isActive ? &quot;red&quot; : &quot;blue&quot;} /&gt;\r\n```\r\n\r\n## Query参数\r\n\r\n搜索参数类似于 URL 参数，但它们位于 URL 中的不同位置。它们不是在由 普通 URL 段中的`/`来分隔的，而是使用`?`. 你已经在许多网站上看到过它们，例如`\"/login?success=1\"`或`\"/shoes?brand=nike&sort=asc&sortby=price\"`。\r\n\r\nReact Router 使用`useSearchParams`来轻松实现，它的用法很像`React.useState()`，但它在 URL  Query参数中而不是在内存中存储和设置状态。\r\n\r\n让我们通过在发票导航列表上添加一个小过滤器来看看它的作用。\r\n\r\n```jsx\r\nimport {\r\n  NavLink,\r\n  Outlet,\r\n  useSearchParams\r\n} from \"react-router-dom\";\r\nimport { getInvoices } from \"../data\";\r\n\r\nexport default function Invoices() {\r\n  let invoices = getInvoices();\r\n  let [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <nav\r\n        style={{\r\n          borderRight: \"solid 1px\",\r\n          padding: \"1rem\"\r\n        }}\r\n      >\r\n        <input\r\n          value={searchParams.get(\"filter\") || \"\"}\r\n          onChange={event => {\r\n            let filter = event.target.value;\r\n            if (filter) {\r\n              setSearchParams({ filter });\r\n            } else {\r\n              setSearchParams({});\r\n            }\r\n          }}\r\n        />\r\n        {invoices\r\n          .filter(invoice => {\r\n            let filter = searchParams.get(\"filter\");\r\n            if (!filter) return true;\r\n            let name = invoice.name.toLowerCase();\r\n            return name.startsWith(filter.toLowerCase());\r\n          })\r\n          .map(invoice => (\r\n            <NavLink\r\n              style={({ isActive }) => ({\r\n                display: \"block\",\r\n                margin: \"1rem 0\",\r\n                color: isActive ? \"red\" : \"\"\r\n              })}\r\n              to={`/invoices/${invoice.number}`}\r\n              key={invoice.number}\r\n            >\r\n              {invoice.name}\r\n            </NavLink>\r\n          ))}\r\n      </nav>\r\n      <Outlet />\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n可以看到，就像用户输入的一样：\r\n\r\n-   `setSearchParams()`将`?filter=...`Query的参数放在 URL 中并重新渲染路由器。\r\n-   `useSearchParams`现在返回一个带有`\"filter\"`的[`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)作为其值之一。\r\n-   我们将输入的值设置为过滤器Query参数中的任何值（就像`useState`，只是使用 URLSearchParams 来替代而已！）\r\n-   我们根据过滤器Query参数过滤我们的发票列表。\r\n\r\n## 自定义行为\r\n\r\n如果你过滤列表然后单击链接，你会注意到列表不再过滤并且搜索参数从`<input>`和 URL 中清除。你可能想要这个，你可能不想要！也许你想保持过滤列表并将参数保留在 URL 中。\r\n\r\n我们可以在点击链接时添加查询字符串并把它添加到链接的href属性。我们将通过React Router 组合`NavLink`和`useLocation`到我们自己的`QueryNavLink`（也许有一个更好的名字，但这就是我们今天要做的）来做到这一点。\r\n\r\n```js\r\nimport { useLocation, NavLink } from &quot;react-router-dom&quot;;\r\n\r\nfunction QueryNavLink({ to, ...props }) {\r\n  let location = useLocation();\r\n  return &lt;NavLink to={to + location.search} {...props} /&gt;;\r\n}\r\n```\r\n\r\n你可以将该代码放在你的应用中任何你想要的位置，然后将你的`src/routes/invoices.jsx`为把`NavLink`替换为`QueryNavLink`，你就完成了。\r\n\r\n像`useSearchParams`，`useLocation`返回一个location对象来告诉我们有关 URL 的信息。一个location看起来像这样：\r\n\r\n```js\r\n{\r\n  pathame: &quot;/invoices&quot;,\r\n  search: &quot;?filter=sa&quot;,\r\n  hash: &quot;&quot;,\r\n  state: null,\r\n  key: &quot;ae4cz2j&quot;\r\n}\r\n```\r\n\r\n有了这些信息，`QueryNavLink`中的任务就很简单了：把`location.search`加到`to` prop上。你可能会想，\"天哪，这应该是 React Router 的内置组件还是什么？\"。好吧，让我们看另一个例子。\r\n\r\n如果你在电子商务网站上有这样的链接怎么办？\r\n\r\n```jsx\r\n&lt;Link to=&quot;/shoes?brand=nike&quot;&gt;Nike&lt;/Link&gt;\r\n&lt;Link to=&quot;/shoes?brand=vans&quot;&gt;Vans&lt;/Link&gt;\r\n```\r\n\r\n然后你想在 url 搜索参数与品牌匹配时将它们设置为\"active\"样式？你完全可以用你在本教程中学到的东西来快速地制作一个这样组件：\r\n\r\n```jsx\r\nfunction BrandLink({ brand, ...props }) {\r\n  let [params] = useSearchParams();\r\n  let isActive = params.getAll(\"brand\").includes(brand);\r\n  return (\r\n    <Link\r\n      style={{ color: isActive ? \"red\" : \"\" }}\r\n      to={`/shoes?brand=${brand}`}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n```\r\n\r\n这将为`\"/shoes?brand=nike\"`添加active,`\"/shoes?brand=nike&brand=vans\"`也是一样。也许你希望它在仅选择一个品牌时处于active状态：\r\n\r\n```js\r\nlet brands = params.getAll(&quot;brand&quot;);\r\nlet isActive =\r\n  brands.includes(brand) &amp;&amp; brands.length === 1;\r\n// ...\r\n```\r\n\r\n或者，你可能希望链接是可*处理的*（点击 Nike，然后 Vans 将两个品牌都添加到搜索参数中）而不是替换品牌：\r\n\r\n```jsx\r\nfunction BrandLink({ brand, ...props }) {\r\n  let [params] = useSearchParams();\r\n  let isActive = params.getAll(\"brand\").includes(brand);\r\n  if (!isActive) {\r\n    params.append(\"brand\", brand);\r\n  }\r\n  return (\r\n    <Link\r\n      style={{ color: isActive ? \"red\" : \"\" }}\r\n      to={`/shoes?${params.toString()}`}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n```\r\n\r\n或者，也许你希望它添加品牌（如果它已经不存在）并在再次单击时将其删除！\r\n\r\n```jsx\r\nfunction BrandLink({ brand, ...props }) {\r\n  let [params] = useSearchParams();\r\n  let isActive = params.getAll(\"brand\").includes(brand);\r\n  if (!isActive) {\r\n    params.append(\"brand\", brand);\r\n  } else {\r\n    params = new URLSearchParams(\r\n      Array.from(params).filter(\r\n        ([key, value]) => key !== \"brand\" || value !== brand\r\n      )\r\n    );\r\n  }\r\n  return (\r\n    <Link\r\n      style={{ color: isActive ? \"red\" : \"\" }}\r\n      to={`/shoes?${params.toString()}`}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n```\r\n\r\n如你所见，即使在这个相当简单的示例中，你也可能需要许多有效的行为。React Router 并没有尝试解决我们直接听说过的每个用例。相反，我们为你提供组件和钩子来组合你需要的任何行为。\r\n\r\n## 以编程的方式导航\r\n\r\n好的，回到我们的应用。坚持住，你快完成了！\r\n\r\n大多数情况下，URL 更改是响应用户单击链接。但有时你，一个程序员，想要更改 URL。一个非常常见的用例是在数据更新之后，例如创建或删除记录。\r\n\r\n让我们添加一个按钮，将发票标记为已付款，然后导航到索引路径。\r\n\r\n首先，你可以复制粘贴此功能，从我们的虚拟数据中删除发票：\r\n\r\n```js\r\nexport function deleteInvoice(number) {\r\n  invoices = invoices.filter(\r\n    invoice => invoice.number !== number\r\n  );\r\n}\r\n```\r\n\r\n现在让我们添加删除按钮，调用我们的新函数，并导航到索引路由：\r\n\r\n```js\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { getInvoice, deleteInvoice } from \"../data\";\r\n\r\nexport default function Invoice() {\r\n  let navigate = useNavigate();\r\n  let params = useParams();\r\n  let invoice = getInvoice(parseInt(params.invoiceId, 10));\r\n\r\n  return (\r\n    <main style={{ padding: \"1rem\" }}>\r\n      <h2>Total Due: {invoice.amount}</h2>\r\n      <p>\r\n        {invoice.name}: {invoice.number}\r\n      </p>\r\n      <p>Due Date: {invoice.due}</p>\r\n      <p>\r\n        <button\r\n          onClick={() => {\r\n            deleteInvoice(invoice.number);\r\n            navigate(\"/invoices\");\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </p>\r\n    </main>\r\n  );\r\n}\r\n```\r\n\r\n## 获得帮助\r\n\r\n恭喜！你已经完成了本教程。我们希望它可以帮助你了解 React Router。\r\n\r\n如果你遇到问题，请查看[资源](https://reactrouter.com/resources)页面以获取帮助。祝你好运！', 132, 'https://jikexingkong.com/docs/react-routerv6-cn/%e6%95%99%e7%a8%8b', 2, 'docs', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(135, 1, '2021-11-22 04:37:22', '2021-11-21 20:37:22', '<h1>安装</h1>\n\n本文档描述了将 React Router 与 React 生态系统中的各种工具一起使用的最常见方式。\n\n<h2>基本安装</h2>\n\n大多数现代 React 项目使用像<a class=\"wp-editor-md-post-content-link\" href=\"https://www.npmjs.com/\">npm</a>或<a class=\"wp-editor-md-post-content-link\" href=\"https://yarnpkg.com/\">Yarn</a>这样的包管理器来管理它们的依赖项。要将 React Router 添加到现有项目中，你应该做的第一件事是使用你选择的工具安装必要的依赖项：\n\nnpm\n\n<pre><code class=\"language-shell line-numbers\">$ npm install react-router-dom@6\n</code></pre>\n\nYarn\n\n<pre><code class=\"language-shell line-numbers\">$ yarn add react-router-dom@6\n</code></pre>\n\npnpm\n\n<pre><code class=\"language-shell line-numbers\">$ pnpm add react-router-dom@6\n</code></pre>\n\n<h2>Create React App</h2>\n\n首先根据<a class=\"wp-editor-md-post-content-link\" href=\"https://reactjs.org/docs/create-a-new-react-app.html#create-react-app\">React 文档中</a>的说明<a class=\"wp-editor-md-post-content-link\" href=\"https://reactjs.org/docs/create-a-new-react-app.html#create-react-app\">使用 Create React App 设置一个新项目</a>，然后按照<a class=\"wp-editor-md-post-content-link\" href=\"#basic-installation\">上面的安装说明</a>在你的项目中安装 React Router。\n\n设置好项目并将 React Router 作为依赖项安装后，在文本编辑器中打开<code>src/index.js</code>。在文件顶部附近吧<code>BrowserRouter</code>模块从<code>react-router-dom</code>导入，并将App组件包装在<code>&lt;Router&gt;</code>中：\n\n<pre><code class=\"language-js line-numbers\">import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  &lt;BrowserRouter&gt;\n    &lt;App /&gt;\n  &lt;/BrowserRouter&gt;,\n  document.getElementById(\"root\")\n);\n</code></pre>\n\n现在你可以在应用的任何地方使用 React Router！举一个简单的例子，打开<code>src/App.js</code>并用一些路由替换默认代码：\n\n<pre><code class=\"language-js line-numbers\">import * as React from \"react\";\nimport { Routes, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;h1&gt;Welcome to React Router!&lt;/h1&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n        &lt;Route path=\"about\" element={&lt;About /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n\n现在，仍在 <code>src/App.js</code>文件中创建你的路由组件：\n\n<pre><code class=\"language-js line-numbers\">// App.js\nfunction Home() {\n  return (\n    &lt;&gt;\n      &lt;main&gt;\n        &lt;h2&gt;Welcome to the homepage!&lt;/h2&gt;\n        &lt;p&gt;You can do this, I believe in you.&lt;/p&gt;\n      &lt;/main&gt;\n      &lt;nav&gt;\n        &lt;Link to=\"/about\"&gt;About&lt;/Link&gt;\n      &lt;/nav&gt;\n    &lt;/&gt;\n  );\n}\n\nfunction About() {\n  return (\n    &lt;&gt;\n      &lt;main&gt;\n        &lt;h2&gt;Who are we?&lt;/h2&gt;\n        &lt;p&gt;\n          That feels like an existential question, don\'t you\n          think?\n        &lt;/p&gt;\n      &lt;/main&gt;\n      &lt;nav&gt;\n        &lt;Link to=\"/\"&gt;Home&lt;/Link&gt;\n      &lt;/nav&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>\n\n通过运行<code>npm start</code>启动你的应用，你应该会在应用开始运行时看到<code>Home</code>路由。单击\"About\"链接以查看你的<code>&lt;About&gt;</code>路由，瞧！你已经使用 Create React App 成功设置了 React Router！🥳\n\n当需要将你的应用部署到生产环境时，请务必按照<a class=\"wp-editor-md-post-content-link\" href=\"https://create-react-app.dev/docs/deployment#serving-apps-with-client-side-routing\">Create React App 文档</a>中对 React Router 应用进行部署的说明来操作，以确保你的服务器配置正确。\n\n<h2>Parcel</h2>\n\n按照<a class=\"wp-editor-md-post-content-link\" href=\"https://parceljs.org/getting_started.html\">Parcel 文档中的说明</a>设置一个新项目，然后按照<a class=\"wp-editor-md-post-content-link\" href=\"#basic-installation\">上面的安装说明</a>在你的项目中安装 React Router。\n\n在项目中的<code>package.json</code>文件中添加一个<code>start</code>脚本，以便你可以在开发过程中在浏览器中打开你的项目。\n\n<pre><code class=\"language-json line-numbers\">\"scripts\": {\n  \"start\": \"parcel index.html\"\n}\n</code></pre>\n\n设置项目并安装依赖项后，<code>.babelrc</code>在项目的根目录下创建一个新文件：\n\n<pre><code class=\"language-json line-numbers\">{\n  \"presets\": [\"@babel/preset-react\"]\n}\n</code></pre>\n\n转到项目中的<code>index.js</code>文件，从<code>react</code>、<code>react-dom</code>和 <code>react-router-dom</code>中导入必要的函数，然后在 一个ID为<code>root</code>的<code>div</code>中挂载React 应用：\n\n<pre><code class=\"language-js line-numbers\">// index.js\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App.js\";\n\nReactDOM.render(\n  &lt;BrowserRouter&gt;\n    &lt;App /&gt;\n  &lt;/BrowserRouter&gt;,\n  document.getElementById(\"root\")\n);\n</code></pre>\n\n在你的 <code>index.html</code>中，在script标签上方的body中创建根 div。<code>noscript</code>为可能禁用 JavaScript 的用户提供回退消息也很有帮助，除非你计划稍后在服务端渲染你的应用。\n\n<pre data-language=HTML><code class=\"language-markup line-numbers\">&lt;body&gt;\n  &lt;noscript\n    &gt;You need to enable JavaScript to run this\n    app.&lt;/noscript\n  &gt;\n  &lt;div id=\"root\"&gt;&lt;/div&gt;\n  &lt;script src=\"./index.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n</code></pre>\n\n现在 React 和 React Router 已设置，创建一个新文件<code>App.js</code>并添加一些路由和组件：\n\n<pre><code class=\"language-js line-numbers\">// App.js\nimport * as React from \"react\";\nimport { Routes, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;header&gt;\n        &lt;h1&gt;Welcome to React Router!&lt;/h1&gt;\n      &lt;/header&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n        &lt;Route path=\"about\" element={&lt;About /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction Home() {\n  return (\n    &lt;&gt;\n      &lt;main&gt;\n        &lt;h2&gt;Welcome to the homepage!&lt;/h2&gt;\n        &lt;p&gt;You can do this, I believe in you.&lt;/p&gt;\n      &lt;/main&gt;\n      &lt;nav&gt;\n        &lt;Link to=\"/about\"&gt;About&lt;/Link&gt;\n      &lt;/nav&gt;\n    &lt;/&gt;\n  );\n}\n\nfunction About() {\n  return (\n    &lt;&gt;\n      &lt;main&gt;\n        &lt;h2&gt;Who are we?&lt;/h2&gt;\n        &lt;p&gt;\n          That feels like an existential question, don\'t you\n          think?\n        &lt;/p&gt;\n      &lt;/main&gt;\n      &lt;nav&gt;\n        &lt;Link to=\"/\"&gt;Home&lt;/Link&gt;\n      &lt;/nav&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre>\n\n现在通过<code>npm start</code>命令运行启动你的应用，你应该会在应用开始运行时看到<code>Home</code>路由。单击\"About\"链接以查看你的<code>About</code>路由，瞧！你使用 Parcel 成功设置了 React Router！🥳\n\n<h2>Webpack</h2>\n\n按照<a class=\"wp-editor-md-post-content-link\" href=\"https://webpack.js.org/guides/getting-started/\">webpack 文档中的说明</a>设置一个新项目，然后按照<a class=\"wp-editor-md-post-content-link\" href=\"#basic-installation\">上面的安装说明</a>在你的项目中安装 React Router。\n\n在 webpack 中设置一个新的 React 项目比 Parcel 或 Create React App 更复杂一些。由于 webpack 是一个低级工具，允许你根据自己的喜好微调构建，因此你可能需要阅读<a class=\"wp-editor-md-post-content-link\" href=\"https://webpack.js.org/\">webpack 文档</a>或查看<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/config/webpack.config.js\">其他存储库中的 webpack 配置</a>以了解如何构建自己的配置。\n\n一旦你配置了 webpack 并安装了必要的依赖项，在你的代码中的某个地方（可能是你的 React 组件树的根），你可以从<code>react-router-dom</code>中<code>import</code>模块了。\n\n<pre><code class=\"language-js line-numbers\">import {\n  BrowserRouter,\n  Routes,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;div&gt;\n        &lt;h1&gt;Hello, React Router!&lt;/h1&gt;\n        &lt;Routes&gt;\n          &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n        &lt;/Routes&gt;\n      &lt;/div&gt;\n    &lt;/BrowserRouter&gt;\n  );\n}\n</code></pre>\n\n<h2>HTML Script标签</h2>\n\n将 React 和 React Router 添加到网站的最快方法之一是使用<code>&lt;script&gt;</code>标签和全局变量。React Router 与 React 16.8+ 兼容。只需将以下<code>&lt;script&gt;</code>标签添加到你的 HTML 中，就在结束<code>&lt;/body&gt;</code>标签之前：\n\n<pre data-language=HTML><code class=\"language-markup line-numbers\">  &lt;!-- Other HTML for your app goes here --&gt;\n\n  &lt;!-- The node we will use to put our app in the document --&gt;\n  &lt;div id=\"root\"&gt;&lt;/div&gt;\n\n  &lt;!-- Note: When deploying to production, replace \"development.js\"\n       with \"production.min.js\" in each of the following tags --&gt;\n\n  &lt;!-- Load React and React DOM --&gt;\n  &lt;!-- See https://reactjs.org/docs/add-react-to-a-website.html to learn more --&gt;\n  &lt;script src=\"https://unpkg.com/react@&gt;=16.8/umd/react.development.js\" crossorigin&gt;&lt;/script&gt;\n  &lt;script src=\"https://unpkg.com/react-dom@&gt;=16.8/umd/react-dom.development.js\" crossorigin&gt;&lt;/script&gt;\n\n  &lt;!-- Load history --&gt;\n  &lt;script src=\"https://unpkg.com/history@5/umd/history.development.js\" crossorigin&gt;&lt;/script&gt;\n\n  &lt;!-- Load React Router and React Router DOM --&gt;\n  &lt;script src=\"https://unpkg.com/react-router@6/umd/react-router.development.js\" crossorigin&gt;&lt;/script&gt;\n  &lt;script src=\"https://unpkg.com/react-router-dom@6/umd/react-router-dom.development.js\" crossorigin&gt;&lt;/script&gt;\n\n  &lt;!-- A simple example app --&gt;\n  &lt;script&gt;\n  var e = React.createElement;\n  var Router = ReactRouterDOM.BrowserRouter;\n  var Routes = ReactRouterDOM.Routes;\n  var Route = ReactRouterDOM.Route;\n\n  ReactDOM.render(\n    (\n      e(Router, null, (\n        e(Routes, null, (\n          e(Route, {\n            element: e(\'div\', null, \'Hello, React Router!\')\n          })\n        ))\n      ))\n    ),\n    document.getElementById(\'root\')\n  );\n  &lt;/script&gt;\n\n&lt;/body&gt;\n</code></pre>\n\n尽管此方法是一种快速启动和运行的好方法，但它确实会加载一些你可能不会在你的应用中使用的代码。React Router 被设计为许多小组件和函数的集合，允许你根据实际需要使用尽可能少的库。\n\n为此，你需要使用 JavaScript打包程序（如<a class=\"wp-editor-md-post-content-link\" href=\"#webpack\">Webpack</a>或<a class=\"wp-editor-md-post-content-link\" href=\"#parcel\">Parcel </a>）来构建你的网站。', '安装', '', 'publish', 'open', 'closed', '', 'installation', '', '', '2021-11-22 10:26:58', '2021-11-22 02:26:58', '# 安装\r\n\r\n本文档描述了将 React Router 与 React 生态系统中的各种工具一起使用的最常见方式。\r\n\r\n## 基本安装\r\n\r\n大多数现代 React 项目使用像[npm](https://www.npmjs.com/)或[Yarn](https://yarnpkg.com/)这样的包管理器来管理它们的依赖项。要将 React Router 添加到现有项目中，你应该做的第一件事是使用你选择的工具安装必要的依赖项：\r\n\r\nnpm\r\n\r\n\r\n```shell\r\n$ npm install react-router-dom@6\r\n```\r\n\r\nYarn\r\n\r\n```shell\r\n$ yarn add react-router-dom@6\r\n```\r\n\r\npnpm\r\n\r\n```shell\r\n$ pnpm add react-router-dom@6\r\n```\r\n\r\n## Create React App\r\n\r\n首先根据[React 文档中](https://reactjs.org/docs/create-a-new-react-app.html#create-react-app)的说明[使用 Create React App 设置一个新项目](https://reactjs.org/docs/create-a-new-react-app.html#create-react-app)，然后按照[上面的安装说明](#basic-installation)在你的项目中安装 React Router。\r\n\r\n设置好项目并将 React Router 作为依赖项安装后，在文本编辑器中打开`src/index.js`。在文件顶部附近吧`BrowserRouter`模块从`react-router-dom`导入，并将App组件包装在`<Router>`中：\r\n\r\n```js\r\nimport * as React from &quot;react&quot;;\r\nimport * as ReactDOM from &quot;react-dom&quot;;\r\nimport { BrowserRouter } from &quot;react-router-dom&quot;;\r\nimport &quot;./index.css&quot;;\r\nimport App from &quot;./App&quot;;\r\nimport * as serviceWorker from &quot;./serviceWorker&quot;;\r\n\r\nReactDOM.render(\r\n  &lt;BrowserRouter&gt;\r\n    &lt;App /&gt;\r\n  &lt;/BrowserRouter&gt;,\r\n  document.getElementById(&quot;root&quot;)\r\n);\r\n```\r\n\r\n现在你可以在应用的任何地方使用 React Router！举一个简单的例子，打开`src/App.js`并用一些路由替换默认代码：\r\n\r\n```js\r\nimport * as React from &quot;react&quot;;\r\nimport { Routes, Route, Link } from &quot;react-router-dom&quot;;\r\nimport &quot;./App.css&quot;;\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;div className=&quot;App&quot;&gt;\r\n      &lt;h1&gt;Welcome to React Router!&lt;/h1&gt;\r\n      &lt;Routes&gt;\r\n        &lt;Route path=&quot;/&quot; element={&lt;Home /&gt;} /&gt;\r\n        &lt;Route path=&quot;about&quot; element={&lt;About /&gt;} /&gt;\r\n      &lt;/Routes&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n```\r\n\r\n现在，仍在 `src/App.js`文件中创建你的路由组件：\r\n\r\n```js\r\n// App.js\r\nfunction Home() {\r\n  return (\r\n    &lt;&gt;\r\n      &lt;main&gt;\r\n        &lt;h2&gt;Welcome to the homepage!&lt;/h2&gt;\r\n        &lt;p&gt;You can do this, I believe in you.&lt;/p&gt;\r\n      &lt;/main&gt;\r\n      &lt;nav&gt;\r\n        &lt;Link to=&quot;/about&quot;&gt;About&lt;/Link&gt;\r\n      &lt;/nav&gt;\r\n    &lt;/&gt;\r\n  );\r\n}\r\n\r\nfunction About() {\r\n  return (\r\n    &lt;&gt;\r\n      &lt;main&gt;\r\n        &lt;h2&gt;Who are we?&lt;/h2&gt;\r\n        &lt;p&gt;\r\n          That feels like an existential question, don&#039;t you\r\n          think?\r\n        &lt;/p&gt;\r\n      &lt;/main&gt;\r\n      &lt;nav&gt;\r\n        &lt;Link to=&quot;/&quot;&gt;Home&lt;/Link&gt;\r\n      &lt;/nav&gt;\r\n    &lt;/&gt;\r\n  );\r\n}\r\n```\r\n通过运行`npm start`启动你的应用，你应该会在应用开始运行时看到`Home`路由。单击\"About\"链接以查看你的`<About>`路由，瞧！你已经使用 Create React App 成功设置了 React Router！🥳\r\n\r\n当需要将你的应用部署到生产环境时，请务必按照[Create React App 文档](https://create-react-app.dev/docs/deployment#serving-apps-with-client-side-routing)中对 React Router 应用进行部署的说明来操作，以确保你的服务器配置正确。\r\n\r\n## Parcel\r\n\r\n按照[Parcel 文档中的说明](https://parceljs.org/getting_started.html)设置一个新项目，然后按照[上面的安装说明](#basic-installation)在你的项目中安装 React Router。\r\n\r\n在项目中的`package.json`文件中添加一个`start`脚本，以便你可以在开发过程中在浏览器中打开你的项目。\r\n\r\n```json\r\n&quot;scripts&quot;: {\r\n  &quot;start&quot;: &quot;parcel index.html&quot;\r\n}\r\n```\r\n\r\n设置项目并安装依赖项后，`.babelrc`在项目的根目录下创建一个新文件：\r\n\r\n```json\r\n{\r\n  &quot;presets&quot;: [&quot;@babel/preset-react&quot;]\r\n}\r\n```\r\n\r\n转到项目中的`index.js`文件，从`react`、`react-dom`和 `react-router-dom`中导入必要的函数，然后在 一个ID为`root`的`div`中挂载React 应用：\r\n\r\n```js\r\n// index.js\r\nimport * as React from &quot;react&quot;;\r\nimport * as ReactDOM from &quot;react-dom&quot;;\r\nimport { BrowserRouter } from &quot;react-router-dom&quot;;\r\nimport App from &quot;./App.js&quot;;\r\n\r\nReactDOM.render(\r\n  &lt;BrowserRouter&gt;\r\n    &lt;App /&gt;\r\n  &lt;/BrowserRouter&gt;,\r\n  document.getElementById(&quot;root&quot;)\r\n);\r\n```\r\n\r\n在你的 `index.html`中，在script标签上方的body中创建根 div。`noscript`为可能禁用 JavaScript 的用户提供回退消息也很有帮助，除非你计划稍后在服务端渲染你的应用。\r\n\r\n```html\r\n&lt;body&gt;\r\n  &lt;noscript\r\n    &gt;You need to enable JavaScript to run this\r\n    app.&lt;/noscript\r\n  &gt;\r\n  &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;\r\n  &lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;\r\n&lt;/body&gt;\r\n```\r\n\r\n现在 React 和 React Router 已设置，创建一个新文件`App.js`并添加一些路由和组件：\r\n\r\n```js\r\n// App.js\r\nimport * as React from &quot;react&quot;;\r\nimport { Routes, Route, Link } from &quot;react-router-dom&quot;;\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;header&gt;\r\n        &lt;h1&gt;Welcome to React Router!&lt;/h1&gt;\r\n      &lt;/header&gt;\r\n      &lt;Routes&gt;\r\n        &lt;Route path=&quot;/&quot; element={&lt;Home /&gt;} /&gt;\r\n        &lt;Route path=&quot;about&quot; element={&lt;About /&gt;} /&gt;\r\n      &lt;/Routes&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nfunction Home() {\r\n  return (\r\n    &lt;&gt;\r\n      &lt;main&gt;\r\n        &lt;h2&gt;Welcome to the homepage!&lt;/h2&gt;\r\n        &lt;p&gt;You can do this, I believe in you.&lt;/p&gt;\r\n      &lt;/main&gt;\r\n      &lt;nav&gt;\r\n        &lt;Link to=&quot;/about&quot;&gt;About&lt;/Link&gt;\r\n      &lt;/nav&gt;\r\n    &lt;/&gt;\r\n  );\r\n}\r\n\r\nfunction About() {\r\n  return (\r\n    &lt;&gt;\r\n      &lt;main&gt;\r\n        &lt;h2&gt;Who are we?&lt;/h2&gt;\r\n        &lt;p&gt;\r\n          That feels like an existential question, don&#039;t you\r\n          think?\r\n        &lt;/p&gt;\r\n      &lt;/main&gt;\r\n      &lt;nav&gt;\r\n        &lt;Link to=&quot;/&quot;&gt;Home&lt;/Link&gt;\r\n      &lt;/nav&gt;\r\n    &lt;/&gt;\r\n  );\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n现在通过`npm start`命令运行启动你的应用，你应该会在应用开始运行时看到`Home`路由。单击\"About\"链接以查看你的`About`路由，瞧！你使用 Parcel 成功设置了 React Router！🥳\r\n\r\n## Webpack\r\n\r\n按照[webpack 文档中的说明](https://webpack.js.org/guides/getting-started/)设置一个新项目，然后按照[上面的安装说明](#basic-installation)在你的项目中安装 React Router。\r\n\r\n在 webpack 中设置一个新的 React 项目比 Parcel 或 Create React App 更复杂一些。由于 webpack 是一个低级工具，允许你根据自己的喜好微调构建，因此你可能需要阅读[webpack 文档](https://webpack.js.org/)或查看[其他存储库中的 webpack 配置](https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/config/webpack.config.js)以了解如何构建自己的配置。\r\n\r\n一旦你配置了 webpack 并安装了必要的依赖项，在你的代码中的某个地方（可能是你的 React 组件树的根），你可以从`react-router-dom`中`import`模块了。\r\n\r\n```js\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route\r\n} from &quot;react-router-dom&quot;;\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;BrowserRouter&gt;\r\n      &lt;div&gt;\r\n        &lt;h1&gt;Hello, React Router!&lt;/h1&gt;\r\n        &lt;Routes&gt;\r\n          &lt;Route path=&quot;/&quot; element={&lt;Home /&gt;} /&gt;\r\n        &lt;/Routes&gt;\r\n      &lt;/div&gt;\r\n    &lt;/BrowserRouter&gt;\r\n  );\r\n}\r\n```\r\n\r\n## HTML Script标签\r\n\r\n将 React 和 React Router 添加到网站的最快方法之一是使用`<script>`标签和全局变量。React Router 与 React 16.8+ 兼容。只需将以下`<script>`标签添加到你的 HTML 中，就在结束`</body>`标签之前：\r\n\r\n```html\r\n  &lt;!-- Other HTML for your app goes here --&gt;\r\n\r\n  &lt;!-- The node we will use to put our app in the document --&gt;\r\n  &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;\r\n\r\n  &lt;!-- Note: When deploying to production, replace &quot;development.js&quot;\r\n       with &quot;production.min.js&quot; in each of the following tags --&gt;\r\n\r\n  &lt;!-- Load React and React DOM --&gt;\r\n  &lt;!-- See https://reactjs.org/docs/add-react-to-a-website.html to learn more --&gt;\r\n  &lt;script src=&quot;https://unpkg.com/react@&gt;=16.8/umd/react.development.js&quot; crossorigin&gt;&lt;/script&gt;\r\n  &lt;script src=&quot;https://unpkg.com/react-dom@&gt;=16.8/umd/react-dom.development.js&quot; crossorigin&gt;&lt;/script&gt;\r\n\r\n  &lt;!-- Load history --&gt;\r\n  &lt;script src=&quot;https://unpkg.com/history@5/umd/history.development.js&quot; crossorigin&gt;&lt;/script&gt;\r\n\r\n  &lt;!-- Load React Router and React Router DOM --&gt;\r\n  &lt;script src=&quot;https://unpkg.com/react-router@6/umd/react-router.development.js&quot; crossorigin&gt;&lt;/script&gt;\r\n  &lt;script src=&quot;https://unpkg.com/react-router-dom@6/umd/react-router-dom.development.js&quot; crossorigin&gt;&lt;/script&gt;\r\n\r\n  &lt;!-- A simple example app --&gt;\r\n  &lt;script&gt;\r\n  var e = React.createElement;\r\n  var Router = ReactRouterDOM.BrowserRouter;\r\n  var Routes = ReactRouterDOM.Routes;\r\n  var Route = ReactRouterDOM.Route;\r\n\r\n  ReactDOM.render(\r\n    (\r\n      e(Router, null, (\r\n        e(Routes, null, (\r\n          e(Route, {\r\n            element: e(&#039;div&#039;, null, &#039;Hello, React Router!&#039;)\r\n          })\r\n        ))\r\n      ))\r\n    ),\r\n    document.getElementById(&#039;root&#039;)\r\n  );\r\n  &lt;/script&gt;\r\n\r\n&lt;/body&gt;\r\n```\r\n\r\n尽管此方法是一种快速启动和运行的好方法，但它确实会加载一些你可能不会在你的应用中使用的代码。React Router 被设计为许多小组件和函数的集合，允许你根据实际需要使用尽可能少的库。\r\n\r\n为此，你需要使用 JavaScript打包程序（如[Webpack](#webpack)或[Parcel ](#parcel)）来构建你的网站。\r\n\r\n', 132, 'https://jikexingkong.com/docs/react-routerv6-cn/%e5%ae%89%e8%a3%85', 0, 'docs', '', 0),
(136, 1, '2021-11-22 04:55:12', '2021-11-21 20:55:12', '<h1>SSR</h1>\n\nReact Router 中最基本的服务器渲染非常简单。然而，要考虑的不仅仅是获得正确的渲染路由。以下是你需要处理的不完整事项清单：\n\n<ul>\n<li>为服务端和浏览器捆绑代码</li>\n<li>不仅限服务端的代码捆绑到浏览器捆绑包中</li>\n<li>适用于服务端和浏览器的代码拆分</li>\n<li>服务器端数据加载，所以你实际上有一些东西要渲染</li>\n<li>适用于客户端和服务端的数据加载策略</li>\n<li>处理服务器和客户端中的代码拆分</li>\n<li>正确的 HTTP 状态代码和重定向</li>\n<li>环境变量和密匙</li>\n<li>部署</li>\n</ul>\n\n将所有这些设置好可能会非常复杂，但对象对你在服务端渲染时才能获得的性能和 UX 特性这一切是值得的。\n\n如果你想在SSR应用中使用的 React Router ，我们强烈建议你使用<a class=\"wp-editor-md-post-content-link\" href=\"https://remix.run/\">Remix</a>。这是我们的另一个项目，它建立在 React Router 之上并处理上面提到的所有事情以及更多。试一试！\n\n如果你想自己解决它，你需要在服务端上使用<code>&lt;StaticRouter&gt;</code>。\n\n首先，你需要在服务端和浏览器中渲染某种\"应用\"或\"根\"组件：\n\n<pre><code class=\"language-js line-numbers\">export default function App() {\n  return (\n    &lt;html&gt;\n      &lt;head&gt;\n        &lt;title&gt;Server Rendered App&lt;/title&gt;\n      &lt;/head&gt;\n      &lt;body&gt;\n        &lt;Routes&gt;\n          &lt;Route path=\"/\" element={&lt;div&gt;Home&lt;/div&gt;} /&gt;\n          &lt;Route path=\"/about\" element={&lt;div&gt;About&lt;/div&gt;} /&gt;\n        &lt;/Routes&gt;\n        &lt;script src=\"/build/client.entry.js\" /&gt;\n      &lt;/body&gt;\n    &lt;/html&gt;\n  );\n}\n</code></pre>\n\n这是一个简单的快速服务端，它在服务器上渲染应用。注意使用<code>StaticRouter</code>.\n\n<pre><code class=\"language-js line-numbers\">import express from \"express\";\nimport ReactDOMServer from \"react-dom/server\";\nimport { StaticRouter } from \"react-router-dom/server\";\nimport App from \"./App\";\n\nlet app = express();\n\napp.get(\"*\", (req, res) =&gt; {\n  let html = ReactDOMServer.renderToString(\n    &lt;StaticRouter location={req.url}&gt;\n      &lt;App /&gt;\n    &lt;/StaticRouter&gt;\n  );\n  res.send(\"&lt;!DOCTYPE html&gt;\" + html);\n});\n\napp.listen(3000);\n</code></pre>\n\n最后，你需要一个类似的文件来使用包含相同<code>App</code>组件的JavaScript 包来\"混合\"应用。注意使用<code>BrowserRouter</code>代替<code>StaticRouter</code>。\n\n<pre><code class=\"language-js line-numbers\">import ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\n\nReactDOM.hydrate(\n  &lt;BrowserRouter&gt;\n    &lt;App /&gt;\n  &lt;/BrowserRouter&gt;,\n  document.documentElement\n);\n</code></pre>\n\n与客户端entry的唯一真正区别是：\n\n<ul>\n<li><code>StaticRouter</code> 代替 <code>BrowserRouter</code></li>\n<li>将 URL 从服务器传递到 <code>&lt;StaticRouter url&gt;</code></li>\n<li>使用<code>ReactDOMServer.renderToString</code>代替<code>ReactDOM.render</code>.</li>\n</ul>\n\n你需要自己做一些部分才能使其工作：\n\n<ul>\n<li>如何打包代码以在浏览器和服务端中工作</li>\n<li>如何知道客户端entry<code>&lt;script&gt;</code>在<code>&lt;App&gt;</code>组件中的位置。</li>\n<li>弄清楚数据加载（特别是对于<code>&lt;title&gt;</code>）。</li>\n</ul>\n\n同样，我们建议你看看<a class=\"wp-editor-md-post-content-link\" href=\"https://remix.run/\">Remix</a>。这是服务端渲染 React Router 应用的最佳方式——也许也是构建任何 React 应用程序的最佳方式😉。', 'SSR', '', 'publish', 'open', 'closed', '', 'ssr', '', '', '2021-11-22 04:55:17', '2021-11-21 20:55:17', '# SSR\r\n\r\nReact Router 中最基本的服务器渲染非常简单。然而，要考虑的不仅仅是获得正确的渲染路由。以下是你需要处理的不完整事项清单：\r\n\r\n-   为服务端和浏览器捆绑代码\r\n-   不仅限服务端的代码捆绑到浏览器捆绑包中\r\n-   适用于服务端和浏览器的代码拆分\r\n-   服务器端数据加载，所以你实际上有一些东西要渲染\r\n-   适用于客户端和服务端的数据加载策略\r\n-   处理服务器和客户端中的代码拆分\r\n-   正确的 HTTP 状态代码和重定向\r\n-   环境变量和密匙\r\n-   部署\r\n\r\n将所有这些设置好可能会非常复杂，但对象对你在服务端渲染时才能获得的性能和 UX 特性这一切是值得的。\r\n\r\n如果你想在SSR应用中使用的 React Router ，我们强烈建议你使用[Remix](https://remix.run/)。这是我们的另一个项目，它建立在 React Router 之上并处理上面提到的所有事情以及更多。试一试！\r\n\r\n如果你想自己解决它，你需要在服务端上使用`<StaticRouter>`。\r\n\r\n首先，你需要在服务端和浏览器中渲染某种\"应用\"或\"根\"组件：\r\n\r\n```js\r\nexport default function App() {\r\n  return (\r\n    &lt;html&gt;\r\n      &lt;head&gt;\r\n        &lt;title&gt;Server Rendered App&lt;/title&gt;\r\n      &lt;/head&gt;\r\n      &lt;body&gt;\r\n        &lt;Routes&gt;\r\n          &lt;Route path=&quot;/&quot; element={&lt;div&gt;Home&lt;/div&gt;} /&gt;\r\n          &lt;Route path=&quot;/about&quot; element={&lt;div&gt;About&lt;/div&gt;} /&gt;\r\n        &lt;/Routes&gt;\r\n        &lt;script src=&quot;/build/client.entry.js&quot; /&gt;\r\n      &lt;/body&gt;\r\n    &lt;/html&gt;\r\n  );\r\n}\r\n```\r\n\r\n这是一个简单的快速服务端，它在服务器上渲染应用。注意使用`StaticRouter`.\r\n\r\n```js\r\nimport express from &quot;express&quot;;\r\nimport ReactDOMServer from &quot;react-dom/server&quot;;\r\nimport { StaticRouter } from &quot;react-router-dom/server&quot;;\r\nimport App from &quot;./App&quot;;\r\n\r\nlet app = express();\r\n\r\napp.get(&quot;*&quot;, (req, res) =&gt; {\r\n  let html = ReactDOMServer.renderToString(\r\n    &lt;StaticRouter location={req.url}&gt;\r\n      &lt;App /&gt;\r\n    &lt;/StaticRouter&gt;\r\n  );\r\n  res.send(&quot;&lt;!DOCTYPE html&gt;&quot; + html);\r\n});\r\n\r\napp.listen(3000);\r\n```\r\n\r\n最后，你需要一个类似的文件来使用包含相同`App`组件的JavaScript 包来\"混合\"应用。注意使用`BrowserRouter`代替`StaticRouter`。\r\n\r\n```js\r\nimport ReactDOM from &quot;react-dom&quot;;\r\nimport { BrowserRouter } from &quot;react-router-dom&quot;;\r\nimport App from &quot;./App&quot;;\r\n\r\nReactDOM.hydrate(\r\n  &lt;BrowserRouter&gt;\r\n    &lt;App /&gt;\r\n  &lt;/BrowserRouter&gt;,\r\n  document.documentElement\r\n);\r\n```\r\n\r\n与客户端entry的唯一真正区别是：\r\n\r\n-   `StaticRouter` 代替 `BrowserRouter`\r\n-   将 URL 从服务器传递到 `<StaticRouter url>`\r\n-   使用`ReactDOMServer.renderToString`代替`ReactDOM.render`.\r\n\r\n你需要自己做一些部分才能使其工作：\r\n\r\n-   如何打包代码以在浏览器和服务端中工作\r\n-   如何知道客户端entry`<script>`在`<App>`组件中的位置。\r\n-   弄清楚数据加载（特别是对于`<title>`）。\r\n\r\n同样，我们建议你看看[Remix](https://remix.run/)。这是服务端渲染 React Router 应用的最佳方式——也许也是构建任何 React 应用程序的最佳方式😉。\r\n', 132, 'https://jikexingkong.com/docs/react-routerv6-cn/ssr', 3, 'docs', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(137, 1, '2021-11-22 08:55:13', '2021-11-22 00:55:13', '<h1>API 参考</h1>\n\nReact Router 是<a class=\"wp-editor-md-post-content-link\" href=\"https://reactjs.org/docs/components-and-props.html\">React 组件</a>、<a class=\"wp-editor-md-post-content-link\" href=\"https://reactjs.org/docs/hooks-intro.html\">hooks</a>和一套工具的集合，使使用<a class=\"wp-editor-md-post-content-link\" href=\"https://reactjs.org/\">React</a>构建多页面应用程序变得容易。此参考包含 React Router 中各种接口的函数签名和返回类型。\n\n<h2>概述</h2>\n\n<h3>包</h3>\n\nReact Router 以三个不同的包发布到 npm：\n\n<ul>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://npm.im/react-router\"><code>react-router</code></a> 包含 React Router 的大部分核心功能，包括路由匹配算法和大部分核心组件和hooks</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://npm.im/react-router-dom\"><code>react-router-dom</code></a>包含<code>react-router</code>中的一切并增加了一些DOM专用的API，其中包括<a class=\"wp-editor-md-post-content-link\" href=\"#browserrouter\"><code>&lt;BrowserRouter&gt;</code></a>, <a class=\"wp-editor-md-post-content-link\" href=\"#hashrouter\"><code>&lt;HashRouter&gt;</code></a>,和 <a class=\"wp-editor-md-post-content-link\" href=\"#link\"><code>&lt;Link&gt;</code></a></li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://npm.im/react-router-native\"><code>react-router-native</code></a>包含<code>react-router</code>中的一切并增加了一些React Native专用的API，包括<a class=\"wp-editor-md-post-content-link\" href=\"#nativerouter\"><code>&lt;NativeRouter&gt;</code></a>和一个native版本的<a class=\"wp-editor-md-post-content-link\" href=\"#link-react-native\"> <code>&lt;Link&gt;</code></a></li>\n</ul>\n\n当安装<code>react-router-dom</code>或<code>react-router-native</code>时,会自动包含<code>react-router</code>作为依赖，并且它们都从<code>react-router</code>暴露所有接口。当你<code>import</code>它们的模块的时候，你应该总是从<code>react-router-dom</code>或<code>react-router-native</code>导入，绝对不要直接从<code>react-router</code>导入. 否则，你可能会意外地在你的应用中导入不匹配的库版本。\n\n如果你将React Router<a class=\"wp-editor-md-post-content-link\" href=\"/docs/react-routerv6-cn/installation\">安装</a>为全局（使用<code>&lt;script&gt;</code>标签），你可以在<code>window.ReactRouterDOM</code>对象上找到它。如果你从 npm 安装它，你可以通过<a class=\"wp-editor-md-post-content-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\"><code>import</code></a>来导入需要的模块。本参考中的示例均使用<code>import</code>语法。\n\n<h3>设置</h3>\n\n为了让 React Router 在你的应用中工作，你需要在节点树的根节点或其边上渲染一个路由器节点。我们提供了几种不同的路由器，具体取决于你的应用程序运行的环境。\n\n<ul>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"#browserrouter\"><code>&lt;BrowserRouter&gt;</code></a> 或 <a class=\"wp-editor-md-post-content-link\" href=\"#hashrouter\"><code>&lt;HashRouter&gt;</code></a> 应该在在 Web 浏览器中运行时使用（选择哪个取决于你喜欢或需要的 URL 样式）</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"#staticrouter\"><code>&lt;StaticRouter&gt;</code></a> 应该在服务端渲染网站时使用</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"#nativerouter\"><code>&lt;NativeRouter&gt;</code></a> 应该在<a class=\"wp-editor-md-post-content-link\" href=\"https://reactnative.dev/\">React Native</a>应用程序中使用</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"#memoryrouter\"><code>&lt;MemoryRouter&gt;</code></a> 在测试场景中很有用，并作为其他路由器的参考实现</li>\n</ul>\n\n这些路由器提供了 React Router 在特定环境中运行所需的上下文。如果出于某种原因需要更细粒度的控制，你也可以在每个渲染器都内置一个<a class=\"wp-editor-md-post-content-link\" href=\"#router\"><code>&lt;Router&gt;</code></a>组件。但是很可能你只需要其中一个内部的路由器。\n\n<h3>路由</h3>\n\n路由是决定哪些 React 元素将在你的应用程序的给定页面上渲染以及它们将如何嵌套的过程。React Router 提供了两个接口来定义你的路由。\n\n<ul>\n<li>JSX中可以使用<a class=\"wp-editor-md-post-content-link\" href=\"#routes-and-route\"><code>&lt;Routes&gt;</code> 和 <code>&lt;Route&gt;</code></a>来定义</li>\n<li>如果你更喜欢配置式路由则可以使用<a class=\"wp-editor-md-post-content-link\" href=\"#useroutes\"><code>useRoutes</code></a></li>\n</ul>\n\n包内部使用的一些底层代码也公开为公共 API，以防你出于某种原因需要构建自己的高级接口\n\n<ul>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"#matchpath\"><code>matchPath</code></a> - 根据 URL 路径名匹配路径模式</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"#matchroutes\"><code>matchRoutes</code></a> - 将一组路线与某个 <a class=\"wp-editor-md-post-content-link\" href=\"#location\">location</a>对象匹配</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"#createroutesfromchildren\"><code>createRoutesFromChildren</code></a> - 从一组 React 组件（例如   <a class=\"wp-editor-md-post-content-link\" href=\"#routes-and-route\"><code>&lt;Route&gt;</code></a>）创建路由配置</li>\n</ul>\n\n<h3>导航</h3>\n\nReact Router 的导航接口让你可以通过修改当前<a class=\"wp-editor-md-post-content-link\" href=\"#location\">location</a>对象来更改当前渲染的页面。有两个主要接口/组件 可用于在你的应用程序中的页面之间导航，根据你的需要来选择。\n\n<ul>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"#link\"><code>&lt;Link&gt;</code></a> 和 <a class=\"wp-editor-md-post-content-link\" href=\"#navlink\"><code>&lt;NavLink&gt;</code></a> 渲染一个可访问的<code>&lt;a&gt;</code>标签，而<code>TouchableHighlight</code>则在 React Native 上渲染。这让用户可以通过单击或点击页面上的点击来启动导航。</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"#usenavigate\"><code>useNavigate</code></a> 和 <a class=\"wp-editor-md-post-content-link\" href=\"#navigate\"><code>&lt;Navigate&gt;</code></a>让你以编程方式进行导航，通常在事件处理程序中或用于响应某些状态变化</li>\n</ul>\n\n同样我们暴露内部的一些低级 API，它们在构建你自己的导航界面时也可能很有用。\n\n<ul>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"#useresolvedpath\"><code>useResolvedPath</code></a> - 解析当前<a class=\"wp-editor-md-post-content-link\" href=\"#location\">location</a>的相对路径</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"#usehref\"><code>useHref</code></a> - 解析合适的相对路径来作为 <code>&lt;a href&gt;</code>标签使用</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"#uselocation\"><code>useLocation</code></a> 和 <a class=\"wp-editor-md-post-content-link\" href=\"#usenavigationtype\"><code>useNavigationType</code></a> - 这些描述了当前<a class=\"wp-editor-md-post-content-link\" href=\"#location\">location</a>以及我们如何到达那里</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"#uselinkclickhandler\"><code>useLinkClickHandler</code></a> - 当在<code>react-router-dom</code>中构建一个自定义的<code>&lt;Link&gt;</code>时返回一个用于导航的事件处理器</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"#uselinkpresshandler\"><code>useLinkPressHandler</code></a> - 当在<code>react-router-native</code>中构建一个自定义的<code>&lt;Link&gt;</code>时返回一个用于导航的事件处理器</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"#resolvepath\"><code>resolvePath</code></a> - 根据给定的 URL 路径名解析相对路径</li>\n</ul>\n\n<h3>搜索参数</h3>\n\nAccess to the URL <a class=\"wp-editor-md-post-content-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/URL/searchParams\">search parameters</a> is provided via <a class=\"wp-editor-md-post-content-link\" href=\"#usesearchparams\">the <code>useSearchParams</code> hook</a>.\n\n通过提供的<a class=\"wp-editor-md-post-content-link\" href=\"#usesearchparams\"><code>useSearchParams hook</code> </a>hook来访问URL<a class=\"wp-editor-md-post-content-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/URL/searchParams\">搜索参数</a>。\n\n<hr />\n\n<h2>参考</h2>\n\n<h3><code>&lt;BrowserRouter&gt;</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function BrowserRouter(\n  props: BrowserRouterProps\n): React.ReactElement;\n\ninterface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n</code></pre>\n\n<code>&lt;BrowserRouter&gt;</code>是在 Web 浏览器中运行 React Router 的推荐接口。<code>&lt;BrowserRouter&gt;</code>组件使用干净的 URL 将当前位置存储在浏览器的地址栏中，并使用浏览器的内置历史堆栈进行导航。\n\n<code>&lt;BrowserRouter window&gt;</code>默认使用当前<a class=\"wp-editor-md-post-content-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/defaultView\">文档的<code>defaultView</code></a>，但它也可用于跟踪对另一个窗口的 URL 的更改，例如在<code>&lt;iframe&gt;</code>中。\n\n<pre><code class=\"language-tsx line-numbers\">import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  &lt;BrowserRouter&gt;\n    {/* The rest of your app goes here */}\n  &lt;/BrowserRouter&gt;,\n  root\n);\n</code></pre>\n\n<h3><code>&lt;HashRouter&gt;</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function HashRouter(\n  props: HashRouterProps\n): React.ReactElement;\n\ninterface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n</code></pre>\n\n当 URL 由于某种原因不应（或不能）发送到服务器时，浏览器可以使用<code>&lt;HashRouter&gt;</code>方案。在某些你无法完全控制服务器的共享托管方案中，可能会发生这种情况。在这些情况下，<code>&lt;HashRouter&gt;</code>可以将当前位置存储在当前 URL的<code>hash</code>部分中，因此永远不会将其发送到服务器。\n\n<code>&lt;HashRouter window&gt;</code>默认使用当前<a class=\"wp-editor-md-post-content-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/defaultView\">文档的<code>defaultView</code></a>，但它也可用于跟踪对另一个窗口 URL 的更改，例如在<code>&lt;iframe&gt;</code>中。\n\n<pre><code class=\"language-tsx line-numbers\">import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  &lt;HashRouter&gt;\n    {/* The rest of your app goes here */}\n  &lt;/HashRouter&gt;,\n  root\n);\n</code></pre>\n\n<blockquote>\n  我们强烈不建议你使用<code>HashRouter</code>,除非不得不用\n</blockquote>\n\n<h3><code>&lt;NativeRouter&gt;</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function NativeRouter(\n  props: NativeRouterProps\n): React.ReactElement;\n\ninterface NativeRouterProps extends MemoryRouterProps {}\n</code></pre>\n\n<code>&lt;NativeRouter&gt;</code>是在<a class=\"wp-editor-md-post-content-link\" href=\"https://reactnative.dev/\">React Native</a>应用中运行 React Router 的推荐接口。\n\n<ul>\n<li><code>&lt;NativeRouter initialEntries&gt;</code>默认为<code>[\"/\"]</code>（根URL<code>/</code> 中的单个条目）</li>\n<li><code>&lt;NativeRouter initialIndex&gt;</code> 默认为 <code>initialEntries</code>的最后一个索引</li>\n</ul>\n\n<pre><code class=\"language-tsx line-numbers\">import * as React from \"react\";\nimport { NativeRouter } from \"react-router-native\";\n\nfunction App() {\n  return (\n    &lt;NativeRouter&gt;\n      {/* The rest of your app goes here */}\n    &lt;/NativeRouter&gt;\n  );\n}\n</code></pre>\n\n<h3><code>&lt;MemoryRouter&gt;</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function MemoryRouter(\n  props: MemoryRouterProps\n): React.ReactElement;\n\ninterface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n}\n</code></pre>\n\n<code>&lt;MemoryRouter&gt;</code>将其位置存储在内存的一个数组中。与<code>&lt;BrowserHistory&gt;</code>和<code>&lt;HashHistory&gt;</code>不同，它不依赖于外部源，如浏览器中的历史堆栈。这使其非常适合需要完全控制历史堆栈的场景，例如测试。\n\n<ul>\n<li><code>&lt;MemoryRouter initialEntries&gt;</code>默认为<code>[\"/\"]</code>（根URL <code>/</code>中的单个条目）</li>\n<li><code>&lt;MemoryRouter initialIndex&gt;</code> 默认为 <code>initialEntries</code>的最后一个索引</li>\n</ul>\n\n<blockquote>\n  <strong>提示：</strong>\n  \n  大多数 React Router 的测试都是使用 <code>&lt;MemoryRouter&gt;</code>作为事实来源编写的，因此你只需<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/remix-run/react-router/tree/main/packages/react-router/__tests__\">浏览我们的测试</a>，就可以看到一些使用它的很好的例子 。\n</blockquote>\n\n<pre><code class=\"language-tsx line-numbers\">import * as React from \"react\";\nimport { create } from \"react-test-renderer\";\nimport {\n  MemoryRouter,\n  Routes,\n  Route\n} from \"react-router-dom\";\n\ndescribe(\"My app\", () =&gt; {\n  it(\"renders correctly\", () =&gt; {\n    let renderer = create(\n      &lt;MemoryRouter initialEntries={[\"/users/mjackson\"]}&gt;\n        &lt;Routes&gt;\n          &lt;Route path=\"users\" element={&lt;Users /&gt;}&gt;\n            &lt;Route path=\":id\" element={&lt;UserProfile /&gt;} /&gt;\n          &lt;/Route&gt;\n        &lt;/Routes&gt;\n      &lt;/MemoryRouter&gt;\n    );\n\n    expect(renderer.toJSON()).toMatchSnapshot();\n  });\n});\n</code></pre>\n\n<h3><code>&lt;Link&gt;</code></h3>\n\n<blockquote>\n  <strong>笔记：</strong>\n  \n  这是网页版的<code>&lt;Link&gt;</code>。对于 React Native 版本， <a class=\"wp-editor-md-post-content-link\" href=\"#link-react-native\">请转到此处</a>。\n</blockquote>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function Link(props: LinkProps): React.ReactElement;\n\ninterface LinkProps\n  extends Omit&lt;\n    React.AnchorHTMLAttributes&lt;HTMLAnchorElement&gt;,\n    \"href\"\n  &gt; {\n  replace?: boolean;\n  state?: any;\n  to: To;\n  reloadDocument?: boolean;\n}\n\ntype To = Partial&lt;Location&gt; | string;\n</code></pre>\n\n<code>&lt;Link&gt;</code>是允许用户通过点击它来导航到另一个页面组件。在 <code>react-router-dom</code>中，一个<code>&lt;Link&gt;</code>将渲染一个拥有指向资源的真实<code>href</code>属性的可访问的<code>&lt;a&gt;</code>标签。这意味着<code>&lt;Link&gt;</code>会像你期望的那样单击工作。你可以使用<code>&lt;Link reloadDocument&gt;</code>跳过客户端路由并让浏览器正常处理转换（就好像它是一个<code>&lt;a href&gt;</code>）。\n\n<pre><code class=\"language-tsx line-numbers\">import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction UsersIndexPage({ users }) {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Users&lt;/h1&gt;\n      &lt;ul&gt;\n        {users.map(user =&gt; (\n          &lt;li key={user.id}&gt;\n            &lt;Link to={user.id}&gt;{user.name}&lt;/Link&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n\n<code>&lt;Link to&gt;</code>的相对路径值（不以 开头<code>/</code>）会相对于父路由解析，这意味着它建立在渲染该<code>&lt;Link&gt;</code>的父路径的URL的基础上. 它可能包含<code>..</code>链接到层次结构更上一层的路由。在这些情况下，<code>..</code>与命令行<code>cd</code>功能完全一样；每个<code>..</code>删除父路径的一段。\n\n<blockquote>\n  <strong>笔记：</strong>\n  \n  带有 <code>..</code> 的 <code>&lt;Link to&gt;</code> 的行为与正常的 <code>&lt;a href&gt;</code> 不同，当\n  当前 URL 以 <code>/</code> 结尾时 <code>&lt;Link to&gt;</code> 会忽略尾部斜杠，并删除\n  每个 <code>..</code> 对应的一个 URL 段。 但是 <code>&lt;a href&gt;</code> 值处理 <code>..</code>，\n  当前 URL 以<code>/</code> 结尾与不以<code>/</code> 结尾的情况是不同的。\n</blockquote>\n\n<h3><code>&lt;Link&gt;</code> (React Native)</h3>\n\n<blockquote>\n  <strong>笔记：</strong>\n  \n  这是 React Native 版本的<code>&lt;Link&gt;</code>. 对于web版本， <a class=\"wp-editor-md-post-content-link\" href=\"#link\">请转到此处</a>。\n</blockquote>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function Link(props: LinkProps): React.ReactElement;\n\ninterface LinkProps extends TouchableHighlightProps {\n  children?: React.ReactNode;\n  onPress?(event: GestureResponderEvent): void;\n  replace?: boolean;\n  state?: State;\n  to: To;\n}\n</code></pre>\n\n<code>&lt;Link&gt;</code>是一个许用户通过点击它来导航到另一个视图的组件，类似于<code>&lt;a&gt;</code>标签在 Web 应用中的工作方式。在 中<code>react-router-native</code>， <code>&lt;Link&gt;</code>渲染一个<code>TouchableHighlight</code>。要覆盖默认样式和行为，请参阅<a class=\"wp-editor-md-post-content-link\" href=\"https://reactnative.dev/docs/touchablehighlight#props\">参考<code>TouchableHighlight</code>的Props属性</a>。\n\n<pre><code class=\"language-tsx line-numbers\">import * as React from \"react\";\nimport { View, Text } from \"react-native\";\nimport { Link } from \"react-router-native\";\n\nfunction Home() {\n  return (\n    &lt;View&gt;\n      &lt;Text&gt;Welcome!&lt;/Text&gt;\n      &lt;Link to=\"/profile\"&gt;Visit your profile&lt;/Link&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre>\n\n<h3><code>&lt;NavLink&gt;</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function NavLink(\n  props: NavLinkProps\n): React.ReactElement;\n\ninterface NavLinkProps\n  extends Omit&lt;LinkProps, \"className\" | \"style\"&gt; {\n  caseSensitive?: boolean;\n  className?:\n    | string\n    | ((props: { isActive: boolean }) =&gt; string);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: {\n        isActive: boolean;\n      }) =&gt; React.CSSProperties);\n}\n</code></pre>\n\n<code>&lt;NavLink&gt;</code> 是一种特殊的 <a class=\"wp-editor-md-post-content-link\" href=\"#link\"><code>&lt;Link&gt;</code></a>，它知道自己是否是\"active\"状态。 这在构建导航菜单（例如面包屑或一组选项卡）时非常有用，你可以在其中显示当前选择了哪些选项卡。 它还为屏幕阅读器等辅助技术提供了有用的上下文。\n\n默认情况下，当它处于激活状态时，一个 <code>active</code> 类被添加到一个 <code>&lt;NavLink&gt;</code> 组件中。 这为大多数从 v5 升级的用户提供了相同的简单样式机制。 与 <code>v6.0.0-beta.3</code> 的一个区别是 <code>activeClassName</code> 和 <code>activeStyle</code> 已从 <code>NavLinkProps</code> 中删除。 相反，你可以将函数传递给<code>style</code> 或<code>className</code>，这将允许你根据组件的激活状态自定义内联样式或类字符串。\n\n<pre><code class=\"language-tsx line-numbers\">import * as React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nfunction NavList() {\n  // This styling will be applied to a &lt;NavLink&gt; when the\n  // route that it links to is currently selected.\n  let activeStyle = {\n    textDecoration: \"underline\"\n  };\n\n  return (\n    &lt;nav&gt;\n      &lt;ul&gt;\n        &lt;li&gt;\n          &lt;NavLink\n            to=\"messages\"\n            style={({ isActive }) =&gt;\n              isActive ? activeStyle : undefined\n            }\n          &gt;\n            Messages\n          &lt;/NavLink&gt;\n        &lt;/li&gt;\n        &lt;li&gt;\n          &lt;NavLink\n            to=\"tasks\"\n            style={({ isActive }) =&gt;\n              isActive ? activeStyle : undefined\n            }\n          &gt;\n            Tasks\n          &lt;/NavLink&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/nav&gt;\n  );\n}\n</code></pre>\n\n如果你更喜欢 v5 API，你可以创建自己<code>&lt;NavLink /&gt;</code>的包装组件：\n\n<pre><code class=\"language-tsx line-numbers\">import * as React from \"react\";\nimport { NavLink as BaseNavLink } from \"react-router-dom\";\n\nconst NavLink = React.forwardRef(\n  ({ activeClassName, activeStyle, ...props }, ref) =&gt; {\n    return (\n      &lt;BaseNavLink\n        ref={ref}\n        {...props}\n        className={({ isActive }) =&gt;\n          [\n            props.className,\n            isActive ? activeClassName : null\n          ]\n            .filter(Boolean)\n            .join(\" \")\n        }\n        style={({ isActive }) =&gt; ({\n          ...props.style,\n          ...(isActive ? activeStyle : null)\n        })}\n      /&gt;\n    );\n  }\n);\n</code></pre>\n\n如果使用了<code>end</code>prop，它会确保当它的后代路径匹配时，这个组件不会被匹配为\"激活\"。例如，要显示仅在网站根目录而非任何其他 URL 中都处于激活状态的链接，你可以使用：\n\n<pre><code class=\"language-tsx line-numbers\">&lt;NavLink to=\"/\" end&gt;\n  Home\n&lt;/NavLink&gt;\n</code></pre>\n\n<h3><code>&lt;Navigate&gt;</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function Navigate(props: NavigateProps): null;\n\ninterface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: State;\n}\n</code></pre>\n\n当前位置改变时将渲染<code>&lt;Navigate&gt;</code>组件。它是<a class=\"wp-editor-md-post-content-link\" href=\"#usenavigate\"><code>useNavigate</code></a>这个Hooks的组件包装器，并接受的 props 与这个Hooks的参数相同。\n\n<blockquote>\n  <strong>笔记：</strong>\n  \n  拥有基于组件的<code>useNavigate</code> hooks版本可以更轻松地在无法使用hooks的<a class=\"wp-editor-md-post-content-link\" href=\"https://reactjs.org/docs/react-component.html\"><code>React.Component</code></a> 子类中使用此功能。\n</blockquote>\n\n<pre><code class=\"language-tsx line-numbers\">import * as React from \"react\";\nimport { Navigate } from \"react-router-dom\";\n\nclass LoginForm extends React.Component {\n  state = { user: null, error: null };\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    try {\n      let user = await login(event.target);\n      this.setState({ user });\n    } catch (error) {\n      this.setState({ error });\n    }\n  }\n\n  render() {\n    let { user, error } = this.state;\n    return (\n      &lt;div&gt;\n        {error &amp;&amp; &lt;p&gt;{error.message}&lt;/p&gt;}\n        {user &amp;&amp; (\n          &lt;Navigate to=\"/dashboard\" replace={true} /&gt;\n        )}\n        &lt;form onSubmit={event =&gt; this.handleSubmit(event)}&gt;\n          &lt;input type=\"text\" name=\"username\" /&gt;\n          &lt;input type=\"password\" name=\"password\" /&gt;\n        &lt;/form&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre>\n\n<h3><code>&lt;Outlet&gt;</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function Outlet(): React.ReactElement | null;\n</code></pre>\n\n<code>&lt;Outlet&gt;</code>组件用于在父路由节点中渲染子路节点。这允许在渲染子路由时显示嵌套的 UI。如果父路由完全匹配，它将渲染子索引路由，如果没有索引路由，则不渲染任何内容。\n\n<pre><code class=\"language-tsx line-numbers\">function Dashboard() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Dashboard&lt;/h1&gt;\n\n      {/* This element will render either &lt;DashboardMessages&gt; when the URL is\n          \"/messages\", &lt;DashboardTasks&gt; at \"/tasks\", or null if it is \"/\"\n      */}\n      &lt;Outlet /&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction App() {\n  return (\n    &lt;Routes&gt;\n      &lt;Route path=\"/\" element={&lt;Dashboard /&gt;}&gt;\n        &lt;Route\n          path=\"messages\"\n          element={&lt;DashboardMessages /&gt;}\n        /&gt;\n        &lt;Route path=\"tasks\" element={&lt;DashboardTasks /&gt;} /&gt;\n      &lt;/Route&gt;\n    &lt;/Routes&gt;\n  );\n}\n</code></pre>\n\n<h3><code>&lt;Router&gt;</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function Router(\n  props: RouterProps\n): React.ReactElement | null;\n\ninterface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial&lt;Location&gt; | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n}\n</code></pre>\n\n<code>&lt;Router&gt;</code> 是所有路由器组件共享的底层接口 (<a class=\"wp-editor-md-post-content-link\" href=\"#browserrouter\"><code>&lt;BrowserRouter&gt;</code></a>, <a class=\"wp-editor-md-post-content-link\" href=\"#hashrouter\"><code>&lt;HashRouter&gt;</code></a>, <a class=\"wp-editor-md-post-content-link\" href=\"#staticrouter\"><code>&lt;StaticRouter&gt;</code></a>、<a class=\"wp-editor-md-post-content-link\" href=\"#nativerouter\"><code>&lt;NativeRouter&gt;</code></a> 和 <a class=\"wp-editor-md-post-content-link\" href=\"#memoryrouter\"><code>&lt;MemoryRouter&gt;</code></a>)。 在 React 中，<code>&lt;Router&gt;</code> 是一个 <a class=\"wp-editor-md-post-content-link\" href=\"https://reactjs.org/docs/context.html#contextprovider\">context provider</a>，它为应用程序的其余部分提供路由信息。\n\n你可能永远不需要手动渲染 <code>&lt;Router&gt;</code>。 相反，你应该根据你的环境使用更高级别的路由器之一。 在给定的应用中，你只需要一个路由器。\n\n<code>&lt;Router basename&gt;</code> 属性可用于在你的应用中创建所有路由共享的 基础URL。 这在使用 React Router 仅渲染较大应用的一部分或当你的应用程序具有多个入口点时非常有用。 基本名称不区分大小写。\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function Routes(\n  props: RoutesProps\n): React.ReactElement | null;\n\ninterface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial&lt;Location&gt; | string;\n}\n\ndeclare function Route(\n  props: RouteProps\n): React.ReactElement | null;\n\ninterface RouteProps {\n  caseSensitive?: boolean;\n  children?: React.ReactNode;\n  element?: React.ReactElement | null;\n  index?: boolean;\n  path?: string;\n}\n</code></pre>\n\n<code>&lt;Routes&gt;</code> 和 <code>&lt;Route&gt;</code> 是基于当前 <a class=\"wp-editor-md-post-content-link\" href=\"#location\"><code>location</code></a> 在 React Router 中渲染某些东西的主要方式。 你可以把 <code>&lt;Route&gt;</code> 想象成一个 <code>if</code> 语句； 如果它的 <code>path</code> 匹配当前 URL，它会渲染它的 <code>element</code>！ <code>&lt;Route caseSensitive&gt;</code> 属性确定是否应该以区分大小写的方式进行匹配（默认为 <code>false</code>）。\n\n每当位置发生变化时，<code>&lt;Routes&gt;</code> 都会查看其所有的 <code>children</code> <code>&lt;Route&gt;</code> 组件以找到最佳匹配并渲染 UI 的该分支。 <code>&lt;Route&gt;</code> 组件可以嵌套以指向嵌套的 UI，也对应于嵌套的 URL 路径。 父路由通过渲染 <a class=\"wp-editor-md-post-content-link\" href=\"#outlet\"><code>&lt;Outlet&gt;</code></a> 来渲染它们的子路由。\n\n<pre><code class=\"language-tsx line-numbers\">&lt;Routes&gt;\n  &lt;Route path=\"/\" element={&lt;Dashboard /&gt;}&gt;\n    &lt;Route\n      path=\"messages\"\n      element={&lt;DashboardMessages /&gt;}\n    /&gt;\n    &lt;Route path=\"tasks\" element={&lt;DashboardTasks /&gt;} /&gt;\n  &lt;/Route&gt;\n  &lt;Route path=\"about\" element={&lt;AboutPage /&gt;} /&gt;\n&lt;/Routes&gt;\n</code></pre>\n\n<blockquote>\n  <strong>笔记：</strong>\n  \n  如果你想把路由作为常规的JavaScript对象来定义，而不是使用JSX，请尝试<a class=\"wp-editor-md-post-content-link\" href=\"#useroutes\"><code>useRoute</code></a>来代替。\n</blockquote>\n\n默认的 <code>&lt;Route element&gt;</code> 是一个 <a class=\"wp-editor-md-post-content-link\" href=\"#outlet\"><code>&lt;Outlet&gt;</code></a>。 这意味着即使没有明确的 <code>element</code> 属性，路由仍然会渲染其子元素，因此你可以嵌套路由路径，而无需在子路由元素周围嵌套 UI。\n\n例如，在以下配置中，父路由默认渲染一个 <code>&lt;Outlet&gt;</code>，因此子路由将在周围没有任何 UI 的情况下渲染。 但是子路由的路径是<code>/users/:id</code>，因为它仍然建立在它的父路由上。\n\n<pre><code class=\"language-tsx line-numbers\">&lt;Route path=\"users\"&gt;\n  &lt;Route path=\":id\" element={&lt;UserProfile /&gt;} /&gt;\n&lt;/Route&gt;\n</code></pre>\n\n<h3><code>&lt;StaticRouter&gt;</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function StaticRouter(\n  props: StaticRouterProps\n): React.ReactElement;\n\ninterface StaticRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location?: Path | LocationPieces;\n}\n</code></pre>\n\n<code>&lt;StaticRouter&gt;</code>用于在<a class=\"wp-editor-md-post-content-link\" href=\"https://nodejs.org/\">node </a>中渲染 React Router Web 应用。通过<code>location</code>的prop提供当前位置。\n\n<ul>\n<li><code>&lt;StaticRouter location&gt;</code> 默认为 <code>\"/\"</code></li>\n</ul>\n\n<pre><code class=\"language-tsx line-numbers\">import * as React from \"react\";\nimport * as ReactDOMServer from \"react-dom/server\";\nimport { StaticRouter } from \"react-router-dom/server\";\nimport http from \"http\";\n\nfunction requestHandler(req, res) {\n  let html = ReactDOMServer.renderToString(\n    &lt;StaticRouter location={req.url}&gt;\n      {/* The rest of your app goes here */}\n    &lt;/StaticRouter&gt;\n  );\n\n  res.write(html);\n  res.end();\n}\n\nhttp.createServer(requestHandler).listen(3000);\n</code></pre>\n\n<h3><code>createRoutesFromArray</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function createRoutesFromArray(\n  array: PartialRouteObject[]\n): RouteObject[];\n\ninterface PartialRouteObject {\n  path?: string;\n  caseSensitive?: boolean;\n  element?: React.ReactNode;\n  children?: PartialRouteObject[];\n}\n\ninterface RouteObject {\n  caseSensitive: boolean;\n  children?: RouteObject[];\n  element: React.ReactNode;\n  path: string;\n}\n</code></pre>\n\n<code>createRoutesFromArray</code>是一个帮助器，用于填充路由对象数组中（可能）缺失的部分。它在<a class=\"wp-editor-md-post-content-link\" href=\"#useroutes\"><code>useRoutes</code></a>内部用于创建路由对象。\n\n<h3><code>createRoutesFromChildren</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function createRoutesFromChildren(\n  children: React.ReactNode\n): RouteObject[];\n\ninterface RouteObject {\n  caseSensitive?: boolean;\n  children?: RouteObject[];\n  element?: React.ReactNode;\n  index?: boolean;\n  path?: string;\n}\n</code></pre>\n\n<code>createRoutesFromChildren</code> 是一个从 <code>&lt;Route&gt;</code> 组件创建路由对象的助手。 它在 <a class=\"wp-editor-md-post-content-link\" href=\"#routes-and-route\"><code>&lt;Routes&gt;</code> </a> 组件内部使用用于从其 <a class=\"wp-editor-md-post-content-link\" href=\"#routes-and-route\"><code>&lt;Route&gt;</code></a> 子路由生成路由配置。\n\n<h3><code>generatePath</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function generatePath(\n  path: string,\n  params?: Params\n): string;\n</code></pre>\n\n<code>generatePath</code> 将一组参数插入到带有 <code>:id</code> 和 <code>*</code> 占位符的路由路径字符串中。 当你想要从路由路径中消除占位符以使其静态匹配而不是使用动态参数时，这会很有用。\n\n<pre><code class=\"language-tsx line-numbers\">generatePath(\"/users/:id\", { id: 42 }); // \"/users/42\"\ngeneratePath(\"/files/:type/*\", {\n  type: \"img\",\n  \"*\": \"cat.jpg\"\n}); // \"/files/img/cat.jpg\"\n</code></pre>\n\n<h3><code>Location</code></h3>\n\n<blockquote>\n  <strong>注意：</strong>\n  \n  <code>history</code> 包是 React Router 的唯一依赖项，并且许多\n  React Router 中的核心类型直接来自该库，包括\n  <code>Location</code>、<code>To</code>、<code>Path</code>、<code>State</code> 等。 你可以阅读更多关于\n  <a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/remix-run/history/tree/main/docs\">其文档</a> 中的历史库。\n</blockquote>\n\n<h3><code>matchRoutes</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function matchRoutes(\n  routes: RouteObject[],\n  location: Partial&lt;Location&gt; | string,\n  basename?: string\n): RouteMatch[] | null;\n\ninterface RouteMatch&lt;ParamKey extends string = string&gt; {\n  params: Params&lt;ParamKey&gt;;\n  pathname: string;\n  route: RouteObject;\n}\n</code></pre>\n\n<code>matchRoutes</code> 针对给定的 <a class=\"wp-editor-md-post-content-link\" href=\"#location\"><code>location</code></a> 运行一组路由的路由匹配算法，以查看哪些路由（如果有）匹配。 如果找到匹配项，则返回一组 <code>RouteMatch</code> 对象，每个匹配的路由都有一个对象。\n\n这是 React Router 匹配算法的核心。 <a class=\"wp-editor-md-post-content-link\" href=\"#useroutes\"><code>useRoutes</code></a> 和 <a class=\"wp-editor-md-post-content-link\" href=\"#routes-and-route\"><code>&lt;Routes&gt;</code> 组件</a> 在内部使用它来确定哪些路由与当前位置匹配。 在你想要手动匹配一组路由的某些情况下，它也很有用。\n\n<h3><code>renderMatches</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null;\n</code></pre>\n\n<code>renderMatches</code> 将 <code>matchRoutes()</code> 的结果渲染到一个 React 节点中。\n\n<h3><code>matchPath</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function matchPath&lt;\n  ParamKey extends string = string\n&gt;(\n  pattern: PathPattern | string,\n  pathname: string\n): PathMatch&lt;ParamKey&gt; | null;\n\ninterface PathMatch&lt;ParamKey extends string = string&gt; {\n  params: Params&lt;ParamKey&gt;;\n  pathname: string;\n  pattern: PathPattern;\n}\n\ninterface PathPattern {\n  path: string;\n  caseSensitive?: boolean;\n  end?: boolean;\n}\n</code></pre>\n\n<code>matchPath</code> 将路由路径模式与 URL 路径名进行匹配，并返回有关的匹配信息。 当你需要手动运行路由器的匹配算法以确定路由路径是否匹配时，这非常有用。 如果pattern与给定的路径名不匹配，则返回 <code>null</code>。\n\n<a class=\"wp-editor-md-post-content-link\" href=\"#usematch\"><code>useMatch</code> </a> hook在内部使用这个函数来匹配相对于当前位置的路由路径。\n\n<h3><code>resolvePath</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function resolvePath(\n  to: To,\n  fromPathname?: string\n): Path;\n\ntype To = Partial&lt;Location&gt; | string;\n\ninterface Path {\n  pathname: string;\n  search: string;\n  hash: string;\n\n</code></pre>\n\n<code>resolvePath</code> 将给定的 <code>To</code> 值解析为具有绝对 <code>pathname</code> 的实际 <code>Path</code> 对象。 当你需要知道相对\"To\"值的确切路径时，这很有用。 例如，<code>&lt;Link&gt;</code> 组件使用这个函数来获取它指向的实际 URL。\n\n<a class=\"wp-editor-md-post-content-link\" href=\"#useresolvedpath\"><code>useResolvedPath</code> hook</a> 在内部使用 <code>resolvePath</code> 来解析路径名。 如果 <code>to</code> 包含路径名，则根据当前路由路径名进行解析。 否则，它会根据当前 URL (<code>location.pathname</code>) 进行解析。\n\n<h3><code>useHref</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function useHref(to: To): string;\n</code></pre>\n\n<code>useHref</code> hook返回一个 URL，可用于链接到给定的 <code>to</code> 位置，甚至可以是 React Router 之外的链接。\n\n<blockquote>\n  <strong>提示：</strong>\n  \n  你可能有兴趣查看<code>react-router-dom</code> 中 <code>&lt;Link&gt;</code> 组件的来源\n  看看它如何在内部使用 <code>useHref</code>确定它自己的 <code>href</code> 值。\n</blockquote>\n\n<code>useLinkClickHandler</code>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function useLinkClickHandler&lt;\n  E extends Element = HTMLAnchorElement,\n  S extends State = State\n&gt;(\n  to: To,\n  options?: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: S;\n  }\n): (event: React.MouseEvent&lt;E, MouseEvent&gt;) =&gt; void;\n</code></pre>\n\n<code>useLinkClickHandler</code> hook返回一个点击事件处理程序，用于在 <code>react-router-dom</code> 中构建自定义 <code>&lt;Link&gt;</code> 时进行导航。\n\n<pre><code class=\"language-tsx line-numbers\">import {\n  useHref,\n  useLinkClickHandler\n} from \"react-router-dom\";\n\nconst StyledLink = styled(\"a\", { color: \"fuchsia\" });\n\nconst Link = React.forwardRef(\n  (\n    {\n      onClick,\n      replace = false,\n      state,\n      target,\n      to,\n      ...rest\n    },\n    ref\n  ) =&gt; {\n    let href = useHref(to);\n    let handleClick = useLinkClickHandler(to, {\n      replace,\n      state,\n      target\n    });\n\n    return (\n      &lt;StyledLink\n        {...rest}\n        href={href}\n        onClick={event =&gt; {\n          onClick?.(event);\n          if (!event.defaultPrevented) {\n            handleClick(event);\n          }\n        }}\n        ref={ref}\n        target={target}\n      /&gt;\n    );\n  }\n);\n</code></pre>\n\n<h3><code>useLinkPressHandler</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function useLinkPressHandler&lt;\n  S extends State = State\n&gt;(\n  to: To,\n  options?: {\n    replace?: boolean;\n    state?: S;\n  }\n): (event: GestureResponderEvent) =&gt; void;\n</code></pre>\n\n<code>react-router-native</code> 对应于 <code>useLinkClickHandler</code>，<code>useLinkPressHandler</code> 返回用于自定义 <code>&lt;Link&gt;</code> 导航的输入事件处理器。\n\n<pre><code class=\"language-tsx line-numbers\">import { TouchableHighlight } from \"react-native\";\nimport { useLinkPressHandler } from \"react-router-native\";\n\nfunction Link({\n  onPress,\n  replace = false,\n  state,\n  to,\n  ...rest\n}) {\n  let handlePress = useLinkPressHandler(to, {\n    replace,\n    state\n  });\n\n  return (\n    &lt;TouchableHighlight\n      {...rest}\n      onPress={event =&gt; {\n        onPress?.(event);\n        if (!event.defaultPrevented) {\n          handlePress(event);\n        }\n      }}\n    /&gt;\n  );\n}\n</code></pre>\n\n<h3><code>useInRouterContext</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function useInRouterContext(): boolean;\n</code></pre>\n\n如果组件在 <code>&lt;Router&gt;</code> 的上下文中渲染，<code>useInRouterContext</code> hook将返回 <code>true</code>，否则返回 <code>false</code>。 这对于一些需要知道它们是否在 React Router 应用的上下文中渲染的 3rd 方扩展很有用。\n\n<h3><code>useLocation</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function useLocation(): Location;\n\ninterface Location&lt;S extends State = object | null&gt;\n  extends Path {\n  state: S;\n  key: Key;\n}\n</code></pre>\n\n这个hook返回当前的 <a class=\"wp-editor-md-post-content-link\" href=\"#location\"><code>location</code></a> 对象。 如果你想在当前位置更改时执行一些副作用，这会很有用。\n\n<pre><code class=\"language-tsx line-numbers\">import * as React from \'react\';\nimport { useLocation } from \'react-router-dom\';\n\nfunction App() {\n  let location = useLocation();\n\n  React.useEffect(() =&gt; {\n    ga(\'send\', \'pageview\');\n  }, [location]);\n\n  return (\n    // ...\n  );\n}\n</code></pre>\n\n<h3><code>useNavigationType</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function useNavigationType(): NavigationType;\n\ntype NavigationType = \"POP\" | \"PUSH\" | \"REPLACE\";\n</code></pre>\n\n这个hook返回当前的导航类型或者用户是如何来到当前页面的； 对历史堆栈进行弹出、推送或替换操作。\n\n<h3><code>useMatch</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function useMatch&lt;ParamKey extends string = string&gt;(\n  pattern: PathPattern | string\n): PathMatch&lt;ParamKey&gt; | null;\n</code></pre>\n\n返回关于在给定路径上相对于当前位置的路由的匹配数据。\n\n有关更多信息，请参阅 <a class=\"wp-editor-md-post-content-link\" href=\"#matchpath\"><code>matchPath</code></a>。\n\n<h3><code>useNavigate</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function useNavigate(): NavigateFunction;\n\ninterface NavigateFunction {\n  (\n    to: To,\n    options?: { replace?: boolean; state?: State }\n  ): void;\n  (delta: number): void;\n}\n</code></pre>\n\n<code>useNavigate</code> hook返回一个函数，让你以编程方式导航，例如在提交表单之后。\n\n<pre><code class=\"language-tsx line-numbers\">import { useNavigate } from \"react-router-dom\";\n\nfunction SignupForm() {\n  let navigate = useNavigate();\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    await submitForm(event.target);\n    navigate(\"../success\", { replace: true });\n  }\n\n  return &lt;form onSubmit={handleSubmit}&gt;{/* ... */}&lt;/form&gt;;\n}\n</code></pre>\n\n<code>navigate</code> 函数有两个签名：\n\n<ul>\n<li>传递一个<code>To</code> 值（与<code>&lt;Link to&gt;</code> 类型相同）和可选的第二个<code>{ replace, state }</code> 参数</li>\n<li>传递你想要进入历史堆栈的增量。 例如，<code>navigate(-1)</code> 相当于点击后退按钮。</li>\n</ul>\n\n<h3><code>useOutlet</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function useOutlet(): React.ReactElement | null;\n</code></pre>\n\n返回当前级别路由层次结构的子路由元素。 <a class=\"wp-editor-md-post-content-link\" href=\"#outlet\"><code>&lt;Outlet&gt;</code></a> 在内部使用这个钩子来渲染子路由。\n\n<h3><code>useParams</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function useParams&lt;\n  K extends string = string\n&gt;(): Readonly&lt;Params&lt;K&gt;&gt;;\n</code></pre>\n\n<code>useParams</code> hook从与 <code>&lt;Route path&gt;</code> 匹配的当前 URL 返回动态参数的键/值对对象。 子路由继承其父路由的所有参数。\n\n<pre><code class=\"language-tsx line-numbers\">import * as React from \'react\';\nimport { Routes, Route, useParams } from \'react-router-dom\';\n\nfunction ProfilePage() {\n  // Get the userId param from the URL.\n  let { userId } = useParams();\n  // ...\n}\n\nfunction App() {\n  return (\n    &lt;Routes&gt;\n      &lt;Route path=\"users\"&gt;\n        &lt;Route path=\":userId\" element={&lt;ProfilePage /&gt;} /&gt;\n        &lt;Route path=\"me\" element={...} /&gt;\n      &lt;/Route&gt;\n    &lt;/Routes&gt;\n  );\n}\n</code></pre>\n\n<h3><code>useResolvedPath</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function useResolvedPath(to: To): Path;\n</code></pre>\n\n这个hook根据当前位置的路径名解析给定<code>to</code>值中位置的<code>pathname</code>。\n\n这在从相对值构建链接时很有用。 例如，查看 <a class=\"wp-editor-md-post-content-link\" href=\"#navlink\"><code>&lt;NavLink&gt;</code></a> 的源代码，它在内部调用 <code>useResolvedPath</code> 来解析所链接页面的完整路径名。\n\n有关更多信息，请参阅 <a class=\"wp-editor-md-post-content-link\" href=\"#resolvepath\"><code>resolvePath</code></a>。\n\n<h3><code>useRoutes</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function useRoutes(\n  routes: RouteObject[],\n  location?: Partial&lt;Location&gt; | string;\n): React.ReactElement | null;\n</code></pre>\n\n<code>useRoutes</code> 钩子在功能上等同于 <a class=\"wp-editor-md-post-content-link\" href=\"#routes\"><code>&lt;Routes&gt;</code></a>，但它使用 JavaScript 对象而不是 <code>&lt;Route&gt;</code> 元素来定义你的路由。 这些对象与普通 <a class=\"wp-editor-md-post-content-link\" href=\"#routes-and-route\"><code>&lt;Route&gt;</code> 组件</a> 具有相同的属性，但它们不需要 JSX。\n\n<code>useRoutes</code> 的返回值要么是一个有效的 React 组件，你可以用来渲染路由树，要么是 <code>null</code> (假如没有匹配的话）。\n\n<pre><code class=\"language-tsx line-numbers\">import * as React from \"react\";\nimport { useRoutes } from \"react-router-dom\";\n\nfunction App() {\n  let element = useRoutes([\n    {\n      path: \"/\",\n      element: &lt;Dashboard /&gt;,\n      children: [\n        {\n          path: \"messages\",\n          element: &lt;DashboardMessages /&gt;\n        },\n        { path: \"tasks\", element: &lt;DashboardTasks /&gt; }\n      ]\n    },\n    { path: \"team\", element: &lt;AboutPage /&gt; }\n  ]);\n\n  return element;\n}\n</code></pre>\n\n另见<a class=\"wp-editor-md-post-content-link\" href=\"#createroutesfromarray\"><code>createRoutesFromArray</code></a>。\n\n<h3><code>useSearchParams</code></h3>\n\n<blockquote>\n  <strong>笔记：</strong>\n  \n  这是<code>useSearchParams</code> 的web版本。 对于 React Native 版本，\n    <a class=\"wp-editor-md-post-content-link\" href=\"#usesearchparams-react-native\">查看这里</a>。\n</blockquote>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, URLSearchParamsSetter];\n\ntype ParamKeyValuePair = [string, string];\n\ntype URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record&lt;string, string | string[]&gt;\n  | URLSearchParams;\n\ninterface URLSearchParamsSetter {\n  (\n    nextInit: URLSearchParamsInit,\n    navigateOptions?: { replace?: boolean; state?: State }\n  ): void;\n}\n</code></pre>\n\n<code>useSearchParams</code> hook用于读取和修改当前位置的 URL 中的query字符串。 就像 React 自己的 <a class=\"wp-editor-md-post-content-link\" href=\"https://reactjs.org/docs/hooks-reference.html#usestate\"><code>useState</code> hook</a>，<code>useSearchParams</code> 返回一个包含两个值的数组：当前位置的 <a class=\"wp-editor-md-post-content-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/URL/searchParams\">search params</a> 和可用于更新它们的函数。\n\n<pre><code class=\"language-tsx line-numbers\">import * as React from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\n\nfunction App() {\n  let [searchParams, setSearchParams] = useSearchParams();\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    // The serialize function here would be responsible for\n    // creating an object of { key: value } pairs from the\n    // fields in the form that make up the query.\n    let params = serializeFormQuery(event.target);\n    setSearchParams(params);\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;form onSubmit={handleSubmit}&gt;{/* ... */}&lt;/form&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n\n<blockquote>\n  <strong>笔记：</strong>\n  \n  <code>setSearchParams</code> 函数的工作方式类似于 <a class=\"wp-editor-md-post-content-link\" href=\"#usenavigate\"><code>navigate</code></a>，但是\n    仅用于 <a class=\"wp-editor-md-post-content-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Location/search\">搜索部分</a>\n    的网址。 另请注意，<code>setSearchParams</code> 的第二个参数是\n    与<code>navigate</code>的第二个参数相同的类型。\n</blockquote>\n\n<h3><code>useSearchParams</code> (React Native)</h3>\n\n<blockquote>\n  <strong>笔记：</strong>\n  \n  这是 <code>useSearchParams</code> 的 React Native 版本。 对于web版本，\n    <a class=\"wp-editor-md-post-content-link\" href=\"#usesearchparams\">查看这里</a>。\n</blockquote>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, URLSearchParamsSetter];\n\ntype ParamKeyValuePair = [string, string];\n\ntype URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record&lt;string, string | string[]&gt;\n  | URLSearchParams;\n\ninterface URLSearchParamsSetter {\n  (\n    nextInit: URLSearchParamsInit,\n    navigateOptions?: { replace?: boolean; state?: State }\n  ): void;\n}\n</code></pre>\n\n<code>useSearchParams</code> hook用于读取和修改当前位置的 URL 中的查询字符串。 就像 React 自己的 <a class=\"wp-editor-md-post-content-link\" href=\"https://reactjs.org/docs/hooks-reference.html#usestate\"><code>useState</code> hook</a>，<code>useSearchParams</code> 返回一个包含两个值的数组：当前位置的 <a class=\"wp-editor-md-post-content-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/URL/searchParams\">search params</a>  和可用于更新它们的函数。\n\n<pre><code class=\"language-tsx line-numbers\">import * as React from \"react\";\nimport { View, SearchForm, TextInput } from \"react-native\";\nimport { useSearchParams } from \"react-router-native\";\n\nfunction App() {\n  let [searchParams, setSearchParams] = useSearchParams();\n  let [query, setQuery] = React.useState(\n    searchParams.get(\"query\")\n  );\n\n  function handleSubmit() {\n    setSearchParams({ query });\n  }\n\n  return (\n    &lt;View&gt;\n      &lt;SearchForm onSubmit={handleSubmit}&gt;\n        &lt;TextInput value={query} onChangeText={setQuery} /&gt;\n      &lt;/SearchForm&gt;\n    &lt;/View&gt;\n  );\n}\n</code></pre>\n\n<h3><code>createSearchParams</code></h3>\n\n<strong>类型声明</strong>\n\n<pre><code class=\"language-tsx line-numbers\">declare function createSearchParams(\n  init?: URLSearchParamsInit\n): URLSearchParams;\n</code></pre>\n\n<code>createSearchParams</code> 是围绕 <a class=\"wp-editor-md-post-content-link\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/URLSearchParams\"><code>new URLSearchParams(init)</code></a> 的一个简洁包装器，它增加了对使用带有数组值的对象的支持。 这与 <code>useSearchParams</code> 在内部用于从 <code>URLSearchParamsInit</code> 值创建 <code>URLSearchParams</code> 对象的函数相同。', 'API参考', '', 'publish', 'open', 'closed', '', 'api', '', '', '2021-11-22 08:55:30', '2021-11-22 00:55:30', '# API 参考\r\n\r\nReact Router 是[React 组件](https://reactjs.org/docs/components-and-props.html)、[hooks](https://reactjs.org/docs/hooks-intro.html)和一套工具的集合，使使用[React](https://reactjs.org/)构建多页面应用程序变得容易。此参考包含 React Router 中各种接口的函数签名和返回类型。\r\n\r\n\r\n## 概述\r\n\r\n### 包\r\n\r\nReact Router 以三个不同的包发布到 npm：\r\n\r\n- [`react-router`](https://npm.im/react-router) 包含 React Router 的大部分核心功能，包括路由匹配算法和大部分核心组件和hooks\r\n- [`react-router-dom`](https://npm.im/react-router-dom)包含`react-router`中的一切并增加了一些DOM专用的API，其中包括[`<BrowserRouter>`](#browserrouter), [`<HashRouter>`](#hashrouter),和 [`<Link>`](#link)\r\n- [`react-router-native`](https://npm.im/react-router-native)包含`react-router`中的一切并增加了一些React Native专用的API，包括[`<NativeRouter>`](#nativerouter)和一个native版本的[ `<Link>`](#link-react-native)\r\n\r\n当安装`react-router-dom`或`react-router-native`时,会自动包含`react-router`作为依赖，并且它们都从`react-router`暴露所有接口。当你`import`它们的模块的时候，你应该总是从`react-router-dom`或`react-router-native`导入，绝对不要直接从`react-router`导入. 否则，你可能会意外地在你的应用中导入不匹配的库版本。\r\n\r\n如果你将React Router[安装](/docs/react-routerv6-cn/installation)为全局（使用`<script>`标签），你可以在`window.ReactRouterDOM`对象上找到它。如果你从 npm 安装它，你可以通过[`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)来导入需要的模块。本参考中的示例均使用`import`语法。\r\n\r\n### 设置\r\n\r\n为了让 React Router 在你的应用中工作，你需要在节点树的根节点或其边上渲染一个路由器节点。我们提供了几种不同的路由器，具体取决于你的应用程序运行的环境。\r\n\r\n- [`<BrowserRouter>`](#browserrouter) 或 [`<HashRouter>`](#hashrouter) 应该在在 Web 浏览器中运行时使用（选择哪个取决于你喜欢或需要的 URL 样式）\r\n- [`<StaticRouter>`](#staticrouter) 应该在服务端渲染网站时使用\r\n- [`<NativeRouter>`](#nativerouter) 应该在[React Native](https://reactnative.dev/)应用程序中使用\r\n- [`<MemoryRouter>`](#memoryrouter) 在测试场景中很有用，并作为其他路由器的参考实现\r\n\r\n这些路由器提供了 React Router 在特定环境中运行所需的上下文。如果出于某种原因需要更细粒度的控制，你也可以在每个渲染器都内置一个[`<Router>`](#router)组件。但是很可能你只需要其中一个内部的路由器。\r\n\r\n### 路由\r\n\r\n路由是决定哪些 React 元素将在你的应用程序的给定页面上渲染以及它们将如何嵌套的过程。React Router 提供了两个接口来定义你的路由。\r\n\r\n- JSX中可以使用[`<Routes>` 和 `<Route>`](#routes-and-route)来定义\r\n- 如果你更喜欢配置式路由则可以使用[`useRoutes`](#useroutes) \r\n\r\n包内部使用的一些底层代码也公开为公共 API，以防你出于某种原因需要构建自己的高级接口\r\n\r\n- [`matchPath`](#matchpath) - 根据 URL 路径名匹配路径模式\r\n- [`matchRoutes`](#matchroutes) - 将一组路线与某个 [location](#location)对象匹配\r\n- [`createRoutesFromChildren`](#createroutesfromchildren) - 从一组 React 组件（例如   [`<Route>`](#routes-and-route)）创建路由配置\r\n\r\n### 导航\r\n\r\nReact Router 的导航接口让你可以通过修改当前[location](#location)对象来更改当前渲染的页面。有两个主要接口/组件 可用于在你的应用程序中的页面之间导航，根据你的需要来选择。\r\n\r\n- [`<Link>`](#link) 和 [`<NavLink>`](#navlink) 渲染一个可访问的`<a>`标签，而`TouchableHighlight`则在 React Native 上渲染。这让用户可以通过单击或点击页面上的点击来启动导航。\r\n- [`useNavigate`](#usenavigate) 和 [`<Navigate>`](#navigate)让你以编程方式进行导航，通常在事件处理程序中或用于响应某些状态变化\r\n\r\n同样我们暴露内部的一些低级 API，它们在构建你自己的导航界面时也可能很有用。\r\n\r\n- [`useResolvedPath`](#useresolvedpath) - 解析当前[location](#location)的相对路径\r\n- [`useHref`](#usehref) - 解析合适的相对路径来作为 `<a href>`标签使用\r\n- [`useLocation`](#uselocation) 和 [`useNavigationType`](#usenavigationtype) - 这些描述了当前[location](#location)以及我们如何到达那里\r\n- [`useLinkClickHandler`](#uselinkclickhandler) - 当在`react-router-dom`中构建一个自定义的`<Link>`时返回一个用于导航的事件处理器\r\n- [`useLinkPressHandler`](#uselinkpresshandler) - 当在`react-router-native`中构建一个自定义的`<Link>`时返回一个用于导航的事件处理器\r\n- [`resolvePath`](#resolvepath) - 根据给定的 URL 路径名解析相对路径\r\n\r\n### 搜索参数\r\n\r\nAccess to the URL [search parameters](https://developer.mozilla.org/en-US/docs/Web/API/URL/searchParams) is provided via [the `useSearchParams` hook](#usesearchparams).\r\n\r\n通过提供的[`useSearchParams hook` ](#usesearchparams)hook来访问URL[搜索参数](https://developer.mozilla.org/en-US/docs/Web/API/URL/searchParams)。\r\n\r\n---\r\n\r\n## 参考\r\n\r\n### `<BrowserRouter>`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function BrowserRouter(\r\n  props: BrowserRouterProps\r\n): React.ReactElement;\r\n\r\ninterface BrowserRouterProps {\r\n  basename?: string;\r\n  children?: React.ReactNode;\r\n  window?: Window;\r\n}\r\n```\r\n\r\n`<BrowserRouter>`是在 Web 浏览器中运行 React Router 的推荐接口。`<BrowserRouter>`组件使用干净的 URL 将当前位置存储在浏览器的地址栏中，并使用浏览器的内置历史堆栈进行导航。\r\n\r\n`<BrowserRouter window>`默认使用当前[文档的`defaultView`](https://developer.mozilla.org/en-US/docs/Web/API/Document/defaultView)，但它也可用于跟踪对另一个窗口的 URL 的更改，例如在`<iframe>`中。\r\n\r\n```tsx\r\nimport * as React from &quot;react&quot;;\r\nimport * as ReactDOM from &quot;react-dom&quot;;\r\nimport { BrowserRouter } from &quot;react-router-dom&quot;;\r\n\r\nReactDOM.render(\r\n  &lt;BrowserRouter&gt;\r\n    {/* The rest of your app goes here */}\r\n  &lt;/BrowserRouter&gt;,\r\n  root\r\n);\r\n```\r\n\r\n### `<HashRouter>`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function HashRouter(\r\n  props: HashRouterProps\r\n): React.ReactElement;\r\n\r\ninterface HashRouterProps {\r\n  basename?: string;\r\n  children?: React.ReactNode;\r\n  window?: Window;\r\n}\r\n```\r\n\r\n当 URL 由于某种原因不应（或不能）发送到服务器时，浏览器可以使用`<HashRouter>`方案。在某些你无法完全控制服务器的共享托管方案中，可能会发生这种情况。在这些情况下，`<HashRouter>`可以将当前位置存储在当前 URL的`hash`部分中，因此永远不会将其发送到服务器。\r\n\r\n`<HashRouter window>`默认使用当前[文档的`defaultView`](https://developer.mozilla.org/en-US/docs/Web/API/Document/defaultView)，但它也可用于跟踪对另一个窗口 URL 的更改，例如在`<iframe>`中。\r\n\r\n```tsx\r\nimport * as React from &quot;react&quot;;\r\nimport * as ReactDOM from &quot;react-dom&quot;;\r\nimport { HashRouter } from &quot;react-router-dom&quot;;\r\n\r\nReactDOM.render(\r\n  &lt;HashRouter&gt;\r\n    {/* The rest of your app goes here */}\r\n  &lt;/HashRouter&gt;,\r\n  root\r\n);\r\n```\r\n\r\n>   我们强烈不建议你使用`HashRouter`,除非不得不用\r\n\r\n### `<NativeRouter>`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function NativeRouter(\r\n  props: NativeRouterProps\r\n): React.ReactElement;\r\n\r\ninterface NativeRouterProps extends MemoryRouterProps {}\r\n```\r\n\r\n`<NativeRouter>`是在[React Native](https://reactnative.dev/)应用中运行 React Router 的推荐接口。\r\n\r\n-   `<NativeRouter initialEntries>`默认为`[\"/\"]`（根URL`/` 中的单个条目）\r\n-   `<NativeRouter initialIndex>` 默认为 `initialEntries`的最后一个索引\r\n\r\n```tsx\r\nimport * as React from &quot;react&quot;;\r\nimport { NativeRouter } from &quot;react-router-native&quot;;\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;NativeRouter&gt;\r\n      {/* The rest of your app goes here */}\r\n    &lt;/NativeRouter&gt;\r\n  );\r\n}\r\n```\r\n\r\n### `<MemoryRouter>`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function MemoryRouter(\r\n  props: MemoryRouterProps\r\n): React.ReactElement;\r\n\r\ninterface MemoryRouterProps {\r\n  basename?: string;\r\n  children?: React.ReactNode;\r\n  initialEntries?: InitialEntry[];\r\n  initialIndex?: number;\r\n}\r\n```\r\n\r\n`<MemoryRouter>`将其位置存储在内存的一个数组中。与`<BrowserHistory>`和`<HashHistory>`不同，它不依赖于外部源，如浏览器中的历史堆栈。这使其非常适合需要完全控制历史堆栈的场景，例如测试。\r\n\r\n-   `<MemoryRouter initialEntries>`默认为`[\"/\"]`（根URL `/`中的单个条目）\r\n-   `<MemoryRouter initialIndex>` 默认为 `initialEntries`的最后一个索引\r\n\r\n>   **提示：**\r\n>\r\n>   大多数 React Router 的测试都是使用 `<MemoryRouter>`作为事实来源编写的，因此你只需[浏览我们的测试](https://github.com/remix-run/react-router/tree/main/packages/react-router/__tests__)，就可以看到一些使用它的很好的例子 。\r\n\r\n```tsx\r\nimport * as React from &quot;react&quot;;\r\nimport { create } from &quot;react-test-renderer&quot;;\r\nimport {\r\n  MemoryRouter,\r\n  Routes,\r\n  Route\r\n} from &quot;react-router-dom&quot;;\r\n\r\ndescribe(&quot;My app&quot;, () =&gt; {\r\n  it(&quot;renders correctly&quot;, () =&gt; {\r\n    let renderer = create(\r\n      &lt;MemoryRouter initialEntries={[&quot;/users/mjackson&quot;]}&gt;\r\n        &lt;Routes&gt;\r\n          &lt;Route path=&quot;users&quot; element={&lt;Users /&gt;}&gt;\r\n            &lt;Route path=&quot;:id&quot; element={&lt;UserProfile /&gt;} /&gt;\r\n          &lt;/Route&gt;\r\n        &lt;/Routes&gt;\r\n      &lt;/MemoryRouter&gt;\r\n    );\r\n\r\n    expect(renderer.toJSON()).toMatchSnapshot();\r\n  });\r\n});\r\n```\r\n\r\n### `<Link>`\r\n\r\n>   **笔记：**\r\n>\r\n>   这是网页版的`<Link>`。对于 React Native 版本， [请转到此处](#link-react-native)。\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function Link(props: LinkProps): React.ReactElement;\r\n\r\ninterface LinkProps\r\n  extends Omit&lt;\r\n    React.AnchorHTMLAttributes&lt;HTMLAnchorElement&gt;,\r\n    &quot;href&quot;\r\n  &gt; {\r\n  replace?: boolean;\r\n  state?: any;\r\n  to: To;\r\n  reloadDocument?: boolean;\r\n}\r\n\r\ntype To = Partial&lt;Location&gt; | string;\r\n```\r\n\r\n`<Link>`是允许用户通过点击它来导航到另一个页面组件。在 `react-router-dom`中，一个`<Link>`将渲染一个拥有指向资源的真实`href`属性的可访问的`<a>`标签。这意味着`<Link>`会像你期望的那样单击工作。你可以使用`<Link reloadDocument>`跳过客户端路由并让浏览器正常处理转换（就好像它是一个`<a href>`）。\r\n\r\n```tsx\r\nimport * as React from &quot;react&quot;;\r\nimport { Link } from &quot;react-router-dom&quot;;\r\n\r\nfunction UsersIndexPage({ users }) {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;Users&lt;/h1&gt;\r\n      &lt;ul&gt;\r\n        {users.map(user =&gt; (\r\n          &lt;li key={user.id}&gt;\r\n            &lt;Link to={user.id}&gt;{user.name}&lt;/Link&gt;\r\n          &lt;/li&gt;\r\n        ))}\r\n      &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n```\r\n\r\n`<Link to>`的相对路径值（不以 开头`/`）会相对于父路由解析，这意味着它建立在渲染该`<Link>`的父路径的URL的基础上. 它可能包含`..`链接到层次结构更上一层的路由。在这些情况下，`..`与命令行`cd`功能完全一样；每个`..`删除父路径的一段。\r\n\r\n>   **笔记：**\r\n>\r\n>   带有 `..` 的 `<Link to>` 的行为与正常的 `<a href>` 不同，当\r\n当前 URL 以 `/` 结尾时 `<Link to>` 会忽略尾部斜杠，并删除\r\n每个 `..` 对应的一个 URL 段。 但是 `<a href>` 值处理 `..`，\r\n当前 URL 以`/` 结尾与不以`/` 结尾的情况是不同的。\r\n\r\n### `<Link>` (React Native)\r\n\r\n>   **笔记：**\r\n>\r\n>   这是 React Native 版本的`<Link>`. 对于web版本， [请转到此处](#link)。\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function Link(props: LinkProps): React.ReactElement;\r\n\r\ninterface LinkProps extends TouchableHighlightProps {\r\n  children?: React.ReactNode;\r\n  onPress?(event: GestureResponderEvent): void;\r\n  replace?: boolean;\r\n  state?: State;\r\n  to: To;\r\n}\r\n```\r\n\r\n`<Link>`是一个许用户通过点击它来导航到另一个视图的组件，类似于`<a>`标签在 Web 应用中的工作方式。在 中`react-router-native`， `<Link>`渲染一个`TouchableHighlight`。要覆盖默认样式和行为，请参阅[参考`TouchableHighlight`的Props属性](https://reactnative.dev/docs/touchablehighlight#props)。\r\n\r\n```tsx\r\nimport * as React from &quot;react&quot;;\r\nimport { View, Text } from &quot;react-native&quot;;\r\nimport { Link } from &quot;react-router-native&quot;;\r\n\r\nfunction Home() {\r\n  return (\r\n    &lt;View&gt;\r\n      &lt;Text&gt;Welcome!&lt;/Text&gt;\r\n      &lt;Link to=&quot;/profile&quot;&gt;Visit your profile&lt;/Link&gt;\r\n    &lt;/View&gt;\r\n  );\r\n}\r\n```\r\n\r\n### `<NavLink>`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function NavLink(\r\n  props: NavLinkProps\r\n): React.ReactElement;\r\n\r\ninterface NavLinkProps\r\n  extends Omit&lt;LinkProps, &quot;className&quot; | &quot;style&quot;&gt; {\r\n  caseSensitive?: boolean;\r\n  className?:\r\n    | string\r\n    | ((props: { isActive: boolean }) =&gt; string);\r\n  end?: boolean;\r\n  style?:\r\n    | React.CSSProperties\r\n    | ((props: {\r\n        isActive: boolean;\r\n      }) =&gt; React.CSSProperties);\r\n}\r\n```\r\n\r\n`<NavLink>` 是一种特殊的 [`<Link>`](#link)，它知道自己是否是\"active\"状态。 这在构建导航菜单（例如面包屑或一组选项卡）时非常有用，你可以在其中显示当前选择了哪些选项卡。 它还为屏幕阅读器等辅助技术提供了有用的上下文。\r\n\r\n默认情况下，当它处于激活状态时，一个 `active` 类被添加到一个 `<NavLink>` 组件中。 这为大多数从 v5 升级的用户提供了相同的简单样式机制。 与 `v6.0.0-beta.3` 的一个区别是 `activeClassName` 和 `activeStyle` 已从 `NavLinkProps` 中删除。 相反，你可以将函数传递给`style` 或`className`，这将允许你根据组件的激活状态自定义内联样式或类字符串。\r\n\r\n```tsx\r\nimport * as React from &quot;react&quot;;\r\nimport { NavLink } from &quot;react-router-dom&quot;;\r\n\r\nfunction NavList() {\r\n  // This styling will be applied to a &lt;NavLink&gt; when the\r\n  // route that it links to is currently selected.\r\n  let activeStyle = {\r\n    textDecoration: &quot;underline&quot;\r\n  };\r\n\r\n  return (\r\n    &lt;nav&gt;\r\n      &lt;ul&gt;\r\n        &lt;li&gt;\r\n          &lt;NavLink\r\n            to=&quot;messages&quot;\r\n            style={({ isActive }) =&gt;\r\n              isActive ? activeStyle : undefined\r\n            }\r\n          &gt;\r\n            Messages\r\n          &lt;/NavLink&gt;\r\n        &lt;/li&gt;\r\n        &lt;li&gt;\r\n          &lt;NavLink\r\n            to=&quot;tasks&quot;\r\n            style={({ isActive }) =&gt;\r\n              isActive ? activeStyle : undefined\r\n            }\r\n          &gt;\r\n            Tasks\r\n          &lt;/NavLink&gt;\r\n        &lt;/li&gt;\r\n      &lt;/ul&gt;\r\n    &lt;/nav&gt;\r\n  );\r\n}\r\n```\r\n\r\n如果你更喜欢 v5 API，你可以创建自己`<NavLink />`的包装组件：\r\n\r\n```tsx\r\nimport * as React from &quot;react&quot;;\r\nimport { NavLink as BaseNavLink } from &quot;react-router-dom&quot;;\r\n\r\nconst NavLink = React.forwardRef(\r\n  ({ activeClassName, activeStyle, ...props }, ref) =&gt; {\r\n    return (\r\n      &lt;BaseNavLink\r\n        ref={ref}\r\n        {...props}\r\n        className={({ isActive }) =&gt;\r\n          [\r\n            props.className,\r\n            isActive ? activeClassName : null\r\n          ]\r\n            .filter(Boolean)\r\n            .join(&quot; &quot;)\r\n        }\r\n        style={({ isActive }) =&gt; ({\r\n          ...props.style,\r\n          ...(isActive ? activeStyle : null)\r\n        })}\r\n      /&gt;\r\n    );\r\n  }\r\n);\r\n```\r\n\r\n如果使用了`end`prop，它会确保当它的后代路径匹配时，这个组件不会被匹配为\"激活\"。例如，要显示仅在网站根目录而非任何其他 URL 中都处于激活状态的链接，你可以使用：\r\n\r\n```tsx\r\n&lt;NavLink to=&quot;/&quot; end&gt;\r\n  Home\r\n&lt;/NavLink&gt;\r\n```\r\n\r\n### `<Navigate>`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function Navigate(props: NavigateProps): null;\r\n\r\ninterface NavigateProps {\r\n  to: To;\r\n  replace?: boolean;\r\n  state?: State;\r\n}\r\n```\r\n\r\n当前位置改变时将渲染`<Navigate>`组件。它是[`useNavigate`](#usenavigate)这个Hooks的组件包装器，并接受的 props 与这个Hooks的参数相同。\r\n\r\n>   **笔记：**\r\n>\r\n>   拥有基于组件的`useNavigate` hooks版本可以更轻松地在无法使用hooks的[`React.Component`](https://reactjs.org/docs/react-component.html) 子类中使用此功能。\r\n\r\n```tsx\r\nimport * as React from &quot;react&quot;;\r\nimport { Navigate } from &quot;react-router-dom&quot;;\r\n\r\nclass LoginForm extends React.Component {\r\n  state = { user: null, error: null };\r\n\r\n  async handleSubmit(event) {\r\n    event.preventDefault();\r\n    try {\r\n      let user = await login(event.target);\r\n      this.setState({ user });\r\n    } catch (error) {\r\n      this.setState({ error });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let { user, error } = this.state;\r\n    return (\r\n      &lt;div&gt;\r\n        {error &amp;&amp; &lt;p&gt;{error.message}&lt;/p&gt;}\r\n        {user &amp;&amp; (\r\n          &lt;Navigate to=&quot;/dashboard&quot; replace={true} /&gt;\r\n        )}\r\n        &lt;form onSubmit={event =&gt; this.handleSubmit(event)}&gt;\r\n          &lt;input type=&quot;text&quot; name=&quot;username&quot; /&gt;\r\n          &lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;\r\n        &lt;/form&gt;\r\n      &lt;/div&gt;\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n### `<Outlet>`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function Outlet(): React.ReactElement | null;\r\n```\r\n\r\n`<Outlet>`组件用于在父路由节点中渲染子路节点。这允许在渲染子路由时显示嵌套的 UI。如果父路由完全匹配，它将渲染子索引路由，如果没有索引路由，则不渲染任何内容。\r\n\r\n```tsx\r\nfunction Dashboard() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;Dashboard&lt;/h1&gt;\r\n\r\n      {/* This element will render either &lt;DashboardMessages&gt; when the URL is\r\n          &quot;/messages&quot;, &lt;DashboardTasks&gt; at &quot;/tasks&quot;, or null if it is &quot;/&quot;\r\n      */}\r\n      &lt;Outlet /&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;Routes&gt;\r\n      &lt;Route path=&quot;/&quot; element={&lt;Dashboard /&gt;}&gt;\r\n        &lt;Route\r\n          path=&quot;messages&quot;\r\n          element={&lt;DashboardMessages /&gt;}\r\n        /&gt;\r\n        &lt;Route path=&quot;tasks&quot; element={&lt;DashboardTasks /&gt;} /&gt;\r\n      &lt;/Route&gt;\r\n    &lt;/Routes&gt;\r\n  );\r\n}\r\n```\r\n\r\n### `<Router>`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function Router(\r\n  props: RouterProps\r\n): React.ReactElement | null;\r\n\r\ninterface RouterProps {\r\n  basename?: string;\r\n  children?: React.ReactNode;\r\n  location: Partial&lt;Location&gt; | string;\r\n  navigationType?: NavigationType;\r\n  navigator: Navigator;\r\n  static?: boolean;\r\n}\r\n```\r\n\r\n`<Router>` 是所有路由器组件共享的底层接口 ([`<BrowserRouter>`](#browserrouter), [`<HashRouter>`](#hashrouter), [`<StaticRouter>`](#staticrouter)、[`<NativeRouter>`](#nativerouter) 和 [`<MemoryRouter>`](#memoryrouter))。 在 React 中，`<Router>` 是一个 [context provider](https://reactjs.org/docs/context.html#contextprovider)，它为应用程序的其余部分提供路由信息。\r\n\r\n你可能永远不需要手动渲染 `<Router>`。 相反，你应该根据你的环境使用更高级别的路由器之一。 在给定的应用中，你只需要一个路由器。\r\n\r\n`<Router basename>` 属性可用于在你的应用中创建所有路由共享的 基础URL。 这在使用 React Router 仅渲染较大应用的一部分或当你的应用程序具有多个入口点时非常有用。 基本名称不区分大小写。\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function Routes(\r\n  props: RoutesProps\r\n): React.ReactElement | null;\r\n\r\ninterface RoutesProps {\r\n  children?: React.ReactNode;\r\n  location?: Partial&lt;Location&gt; | string;\r\n}\r\n\r\ndeclare function Route(\r\n  props: RouteProps\r\n): React.ReactElement | null;\r\n\r\ninterface RouteProps {\r\n  caseSensitive?: boolean;\r\n  children?: React.ReactNode;\r\n  element?: React.ReactElement | null;\r\n  index?: boolean;\r\n  path?: string;\r\n}\r\n```\r\n\r\n`<Routes>` 和 `<Route>` 是基于当前 [`location`](#location) 在 React Router 中渲染某些东西的主要方式。 你可以把 `<Route>` 想象成一个 `if` 语句； 如果它的 `path` 匹配当前 URL，它会渲染它的 `element`！ `<Route caseSensitive>` 属性确定是否应该以区分大小写的方式进行匹配（默认为 `false`）。\r\n\r\n每当位置发生变化时，`<Routes>` 都会查看其所有的 `children` `<Route>` 组件以找到最佳匹配并渲染 UI 的该分支。 `<Route>` 组件可以嵌套以指向嵌套的 UI，也对应于嵌套的 URL 路径。 父路由通过渲染 [`<Outlet>`](#outlet) 来渲染它们的子路由。\r\n\r\n```tsx\r\n&lt;Routes&gt;\r\n  &lt;Route path=&quot;/&quot; element={&lt;Dashboard /&gt;}&gt;\r\n    &lt;Route\r\n      path=&quot;messages&quot;\r\n      element={&lt;DashboardMessages /&gt;}\r\n    /&gt;\r\n    &lt;Route path=&quot;tasks&quot; element={&lt;DashboardTasks /&gt;} /&gt;\r\n  &lt;/Route&gt;\r\n  &lt;Route path=&quot;about&quot; element={&lt;AboutPage /&gt;} /&gt;\r\n&lt;/Routes&gt;\r\n```\r\n\r\n>   **笔记：**\r\n>\r\n>   如果你想把路由作为常规的JavaScript对象来定义，而不是使用JSX，请尝试[`useRoute`](#useroutes)来代替。\r\n\r\n默认的 `<Route element>` 是一个 [`<Outlet>`](#outlet)。 这意味着即使没有明确的 `element` 属性，路由仍然会渲染其子元素，因此你可以嵌套路由路径，而无需在子路由元素周围嵌套 UI。\r\n\r\n例如，在以下配置中，父路由默认渲染一个 `<Outlet>`，因此子路由将在周围没有任何 UI 的情况下渲染。 但是子路由的路径是`/users/:id`，因为它仍然建立在它的父路由上。\r\n\r\n```tsx\r\n&lt;Route path=&quot;users&quot;&gt;\r\n  &lt;Route path=&quot;:id&quot; element={&lt;UserProfile /&gt;} /&gt;\r\n&lt;/Route&gt;\r\n```\r\n\r\n### `<StaticRouter>`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function StaticRouter(\r\n  props: StaticRouterProps\r\n): React.ReactElement;\r\n\r\ninterface StaticRouterProps {\r\n  basename?: string;\r\n  children?: React.ReactNode;\r\n  location?: Path | LocationPieces;\r\n}\r\n```\r\n\r\n`<StaticRouter>`用于在[node ](https://nodejs.org/)中渲染 React Router Web 应用。通过`location`的prop提供当前位置。\r\n\r\n-   `<StaticRouter location>` 默认为 `\"/\"`\r\n\r\n```tsx\r\nimport * as React from &quot;react&quot;;\r\nimport * as ReactDOMServer from &quot;react-dom/server&quot;;\r\nimport { StaticRouter } from &quot;react-router-dom/server&quot;;\r\nimport http from &quot;http&quot;;\r\n\r\nfunction requestHandler(req, res) {\r\n  let html = ReactDOMServer.renderToString(\r\n    &lt;StaticRouter location={req.url}&gt;\r\n      {/* The rest of your app goes here */}\r\n    &lt;/StaticRouter&gt;\r\n  );\r\n\r\n  res.write(html);\r\n  res.end();\r\n}\r\n\r\nhttp.createServer(requestHandler).listen(3000);\r\n```\r\n\r\n### `createRoutesFromArray`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function createRoutesFromArray(\r\n  array: PartialRouteObject[]\r\n): RouteObject[];\r\n\r\ninterface PartialRouteObject {\r\n  path?: string;\r\n  caseSensitive?: boolean;\r\n  element?: React.ReactNode;\r\n  children?: PartialRouteObject[];\r\n}\r\n\r\ninterface RouteObject {\r\n  caseSensitive: boolean;\r\n  children?: RouteObject[];\r\n  element: React.ReactNode;\r\n  path: string;\r\n}\r\n```\r\n\r\n`createRoutesFromArray`是一个帮助器，用于填充路由对象数组中（可能）缺失的部分。它在[`useRoutes`](#useroutes)内部用于创建路由对象。\r\n\r\n### `createRoutesFromChildren`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function createRoutesFromChildren(\r\n  children: React.ReactNode\r\n): RouteObject[];\r\n\r\ninterface RouteObject {\r\n  caseSensitive?: boolean;\r\n  children?: RouteObject[];\r\n  element?: React.ReactNode;\r\n  index?: boolean;\r\n  path?: string;\r\n}\r\n```\r\n\r\n`createRoutesFromChildren` 是一个从 `<Route>` 组件创建路由对象的助手。 它在 [`<Routes>` ](#routes-and-route) 组件内部使用用于从其 [`<Route>`](#routes-and-route) 子路由生成路由配置。\r\n\r\n### `generatePath`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function generatePath(\r\n  path: string,\r\n  params?: Params\r\n): string;\r\n```\r\n\r\n`generatePath` 将一组参数插入到带有 `:id` 和 `*` 占位符的路由路径字符串中。 当你想要从路由路径中消除占位符以使其静态匹配而不是使用动态参数时，这会很有用。\r\n\r\n```tsx\r\ngeneratePath(&quot;/users/:id&quot;, { id: 42 }); // &quot;/users/42&quot;\r\ngeneratePath(&quot;/files/:type/*&quot;, {\r\n  type: &quot;img&quot;,\r\n  &quot;*&quot;: &quot;cat.jpg&quot;\r\n}); // &quot;/files/img/cat.jpg&quot;\r\n```\r\n\r\n### `Location`\r\n\r\n> **注意：**\r\n>\r\n> `history` 包是 React Router 的唯一依赖项，并且许多\r\n> React Router 中的核心类型直接来自该库，包括\r\n> `Location`、`To`、`Path`、`State` 等。 你可以阅读更多关于\r\n> [其文档](https://github.com/remix-run/history/tree/main/docs) 中的历史库。\r\n\r\n### `matchRoutes`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function matchRoutes(\r\n  routes: RouteObject[],\r\n  location: Partial&lt;Location&gt; | string,\r\n  basename?: string\r\n): RouteMatch[] | null;\r\n\r\ninterface RouteMatch&lt;ParamKey extends string = string&gt; {\r\n  params: Params&lt;ParamKey&gt;;\r\n  pathname: string;\r\n  route: RouteObject;\r\n}\r\n```\r\n\r\n`matchRoutes` 针对给定的 [`location`](#location) 运行一组路由的路由匹配算法，以查看哪些路由（如果有）匹配。 如果找到匹配项，则返回一组 `RouteMatch` 对象，每个匹配的路由都有一个对象。\r\n\r\n这是 React Router 匹配算法的核心。 [`useRoutes`](#useroutes) 和 [`<Routes>` 组件](#routes-and-route) 在内部使用它来确定哪些路由与当前位置匹配。 在你想要手动匹配一组路由的某些情况下，它也很有用。\r\n\r\n### `renderMatches`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function renderMatches(\r\n  matches: RouteMatch[] | null\r\n): React.ReactElement | null;\r\n```\r\n\r\n`renderMatches` 将 `matchRoutes()` 的结果渲染到一个 React 节点中。\r\n\r\n### `matchPath`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function matchPath&lt;\r\n  ParamKey extends string = string\r\n&gt;(\r\n  pattern: PathPattern | string,\r\n  pathname: string\r\n): PathMatch&lt;ParamKey&gt; | null;\r\n\r\ninterface PathMatch&lt;ParamKey extends string = string&gt; {\r\n  params: Params&lt;ParamKey&gt;;\r\n  pathname: string;\r\n  pattern: PathPattern;\r\n}\r\n\r\ninterface PathPattern {\r\n  path: string;\r\n  caseSensitive?: boolean;\r\n  end?: boolean;\r\n}\r\n```\r\n\r\n`matchPath` 将路由路径模式与 URL 路径名进行匹配，并返回有关的匹配信息。 当你需要手动运行路由器的匹配算法以确定路由路径是否匹配时，这非常有用。 如果pattern与给定的路径名不匹配，则返回 `null`。\r\n\r\n[`useMatch` ](#usematch) hook在内部使用这个函数来匹配相对于当前位置的路由路径。\r\n\r\n### `resolvePath`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function resolvePath(\r\n  to: To,\r\n  fromPathname?: string\r\n): Path;\r\n\r\ntype To = Partial&lt;Location&gt; | string;\r\n\r\ninterface Path {\r\n  pathname: string;\r\n  search: string;\r\n  hash: string;\r\n\r\n```\r\n\r\n`resolvePath` 将给定的 `To` 值解析为具有绝对 `pathname` 的实际 `Path` 对象。 当你需要知道相对\"To\"值的确切路径时，这很有用。 例如，`<Link>` 组件使用这个函数来获取它指向的实际 URL。\r\n\r\n[`useResolvedPath` hook](#useresolvedpath) 在内部使用 `resolvePath` 来解析路径名。 如果 `to` 包含路径名，则根据当前路由路径名进行解析。 否则，它会根据当前 URL (`location.pathname`) 进行解析。\r\n\r\n### `useHref`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function useHref(to: To): string;\r\n```\r\n\r\n`useHref` hook返回一个 URL，可用于链接到给定的 `to` 位置，甚至可以是 React Router 之外的链接。\r\n\r\n> **提示：**\r\n>\r\n> 你可能有兴趣查看`react-router-dom` 中 `<Link>` 组件的来源\r\n> 看看它如何在内部使用 `useHref`确定它自己的 `href` 值。\r\n\r\n`useLinkClickHandler`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function useLinkClickHandler&lt;\r\n  E extends Element = HTMLAnchorElement,\r\n  S extends State = State\r\n&gt;(\r\n  to: To,\r\n  options?: {\r\n    target?: React.HTMLAttributeAnchorTarget;\r\n    replace?: boolean;\r\n    state?: S;\r\n  }\r\n): (event: React.MouseEvent&lt;E, MouseEvent&gt;) =&gt; void;\r\n```\r\n\r\n`useLinkClickHandler` hook返回一个点击事件处理程序，用于在 `react-router-dom` 中构建自定义 `<Link>` 时进行导航。\r\n\r\n```tsx\r\nimport {\r\n  useHref,\r\n  useLinkClickHandler\r\n} from &quot;react-router-dom&quot;;\r\n\r\nconst StyledLink = styled(&quot;a&quot;, { color: &quot;fuchsia&quot; });\r\n\r\nconst Link = React.forwardRef(\r\n  (\r\n    {\r\n      onClick,\r\n      replace = false,\r\n      state,\r\n      target,\r\n      to,\r\n      ...rest\r\n    },\r\n    ref\r\n  ) =&gt; {\r\n    let href = useHref(to);\r\n    let handleClick = useLinkClickHandler(to, {\r\n      replace,\r\n      state,\r\n      target\r\n    });\r\n\r\n    return (\r\n      &lt;StyledLink\r\n        {...rest}\r\n        href={href}\r\n        onClick={event =&gt; {\r\n          onClick?.(event);\r\n          if (!event.defaultPrevented) {\r\n            handleClick(event);\r\n          }\r\n        }}\r\n        ref={ref}\r\n        target={target}\r\n      /&gt;\r\n    );\r\n  }\r\n);\r\n```\r\n\r\n### `useLinkPressHandler`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function useLinkPressHandler&lt;\r\n  S extends State = State\r\n&gt;(\r\n  to: To,\r\n  options?: {\r\n    replace?: boolean;\r\n    state?: S;\r\n  }\r\n): (event: GestureResponderEvent) =&gt; void;\r\n```\r\n\r\n`react-router-native` 对应于 `useLinkClickHandler`，`useLinkPressHandler` 返回用于自定义 `<Link>` 导航的输入事件处理器。\r\n\r\n```tsx\r\nimport { TouchableHighlight } from &quot;react-native&quot;;\r\nimport { useLinkPressHandler } from &quot;react-router-native&quot;;\r\n\r\nfunction Link({\r\n  onPress,\r\n  replace = false,\r\n  state,\r\n  to,\r\n  ...rest\r\n}) {\r\n  let handlePress = useLinkPressHandler(to, {\r\n    replace,\r\n    state\r\n  });\r\n\r\n  return (\r\n    &lt;TouchableHighlight\r\n      {...rest}\r\n      onPress={event =&gt; {\r\n        onPress?.(event);\r\n        if (!event.defaultPrevented) {\r\n          handlePress(event);\r\n        }\r\n      }}\r\n    /&gt;\r\n  );\r\n}\r\n```\r\n\r\n### `useInRouterContext`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function useInRouterContext(): boolean;\r\n```\r\n\r\n如果组件在 `<Router>` 的上下文中渲染，`useInRouterContext` hook将返回 `true`，否则返回 `false`。 这对于一些需要知道它们是否在 React Router 应用的上下文中渲染的 3rd 方扩展很有用。\r\n\r\n### `useLocation`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function useLocation(): Location;\r\n\r\ninterface Location&lt;S extends State = object | null&gt;\r\n  extends Path {\r\n  state: S;\r\n  key: Key;\r\n}\r\n```\r\n\r\n这个hook返回当前的 [`location`](#location) 对象。 如果你想在当前位置更改时执行一些副作用，这会很有用。\r\n\r\n```tsx\r\nimport * as React from &#039;react&#039;;\r\nimport { useLocation } from &#039;react-router-dom&#039;;\r\n\r\nfunction App() {\r\n  let location = useLocation();\r\n\r\n  React.useEffect(() =&gt; {\r\n    ga(&#039;send&#039;, &#039;pageview&#039;);\r\n  }, [location]);\r\n\r\n  return (\r\n    // ...\r\n  );\r\n}\r\n```\r\n\r\n### `useNavigationType`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function useNavigationType(): NavigationType;\r\n\r\ntype NavigationType = &quot;POP&quot; | &quot;PUSH&quot; | &quot;REPLACE&quot;;\r\n```\r\n\r\n这个hook返回当前的导航类型或者用户是如何来到当前页面的； 对历史堆栈进行弹出、推送或替换操作。\r\n\r\n### `useMatch`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function useMatch&lt;ParamKey extends string = string&gt;(\r\n  pattern: PathPattern | string\r\n): PathMatch&lt;ParamKey&gt; | null;\r\n```\r\n\r\n返回关于在给定路径上相对于当前位置的路由的匹配数据。\r\n\r\n有关更多信息，请参阅 [`matchPath`](#matchpath)。\r\n\r\n### `useNavigate`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function useNavigate(): NavigateFunction;\r\n\r\ninterface NavigateFunction {\r\n  (\r\n    to: To,\r\n    options?: { replace?: boolean; state?: State }\r\n  ): void;\r\n  (delta: number): void;\r\n}\r\n```\r\n\r\n`useNavigate` hook返回一个函数，让你以编程方式导航，例如在提交表单之后。\r\n\r\n```tsx\r\nimport { useNavigate } from &quot;react-router-dom&quot;;\r\n\r\nfunction SignupForm() {\r\n  let navigate = useNavigate();\r\n\r\n  async function handleSubmit(event) {\r\n    event.preventDefault();\r\n    await submitForm(event.target);\r\n    navigate(&quot;../success&quot;, { replace: true });\r\n  }\r\n\r\n  return &lt;form onSubmit={handleSubmit}&gt;{/* ... */}&lt;/form&gt;;\r\n}\r\n```\r\n\r\n`navigate` 函数有两个签名：\r\n\r\n- 传递一个`To` 值（与`<Link to>` 类型相同）和可选的第二个`{ replace, state }` 参数\r\n- 传递你想要进入历史堆栈的增量。 例如，`navigate(-1)` 相当于点击后退按钮。\r\n\r\n### `useOutlet`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function useOutlet(): React.ReactElement | null;\r\n```\r\n\r\n返回当前级别路由层次结构的子路由元素。 [`<Outlet>`](#outlet) 在内部使用这个钩子来渲染子路由。\r\n\r\n### `useParams`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function useParams&lt;\r\n  K extends string = string\r\n&gt;(): Readonly&lt;Params&lt;K&gt;&gt;;\r\n```\r\n\r\n`useParams` hook从与 `<Route path>` 匹配的当前 URL 返回动态参数的键/值对对象。 子路由继承其父路由的所有参数。\r\n\r\n```tsx\r\nimport * as React from &#039;react&#039;;\r\nimport { Routes, Route, useParams } from &#039;react-router-dom&#039;;\r\n\r\nfunction ProfilePage() {\r\n  // Get the userId param from the URL.\r\n  let { userId } = useParams();\r\n  // ...\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;Routes&gt;\r\n      &lt;Route path=&quot;users&quot;&gt;\r\n        &lt;Route path=&quot;:userId&quot; element={&lt;ProfilePage /&gt;} /&gt;\r\n        &lt;Route path=&quot;me&quot; element={...} /&gt;\r\n      &lt;/Route&gt;\r\n    &lt;/Routes&gt;\r\n  );\r\n}\r\n```\r\n\r\n### `useResolvedPath`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function useResolvedPath(to: To): Path;\r\n```\r\n\r\n这个hook根据当前位置的路径名解析给定`to`值中位置的`pathname`。\r\n\r\n这在从相对值构建链接时很有用。 例如，查看 [`<NavLink>`](#navlink) 的源代码，它在内部调用 `useResolvedPath` 来解析所链接页面的完整路径名。\r\n\r\n有关更多信息，请参阅 [`resolvePath`](#resolvepath)。\r\n\r\n### `useRoutes`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function useRoutes(\r\n  routes: RouteObject[],\r\n  location?: Partial&lt;Location&gt; | string;\r\n): React.ReactElement | null;\r\n```\r\n\r\n`useRoutes` 钩子在功能上等同于 [`<Routes>`](#routes)，但它使用 JavaScript 对象而不是 `<Route>` 元素来定义你的路由。 这些对象与普通 [`<Route>` 组件](#routes-and-route) 具有相同的属性，但它们不需要 JSX。\r\n\r\n`useRoutes` 的返回值要么是一个有效的 React 组件，你可以用来渲染路由树，要么是 `null` (假如没有匹配的话）。\r\n\r\n```tsx\r\nimport * as React from &quot;react&quot;;\r\nimport { useRoutes } from &quot;react-router-dom&quot;;\r\n\r\nfunction App() {\r\n  let element = useRoutes([\r\n    {\r\n      path: &quot;/&quot;,\r\n      element: &lt;Dashboard /&gt;,\r\n      children: [\r\n        {\r\n          path: &quot;messages&quot;,\r\n          element: &lt;DashboardMessages /&gt;\r\n        },\r\n        { path: &quot;tasks&quot;, element: &lt;DashboardTasks /&gt; }\r\n      ]\r\n    },\r\n    { path: &quot;team&quot;, element: &lt;AboutPage /&gt; }\r\n  ]);\r\n\r\n  return element;\r\n}\r\n```\r\n\r\n另见[`createRoutesFromArray`](#createroutesfromarray)。\r\n\r\n### `useSearchParams`\r\n\r\n>   **笔记：**\r\n>\r\n>   这是`useSearchParams` 的web版本。 对于 React Native 版本，\r\n>   [查看这里](#usesearchparams-react-native)。\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function useSearchParams(\r\n  defaultInit?: URLSearchParamsInit\r\n): [URLSearchParams, URLSearchParamsSetter];\r\n\r\ntype ParamKeyValuePair = [string, string];\r\n\r\ntype URLSearchParamsInit =\r\n  | string\r\n  | ParamKeyValuePair[]\r\n  | Record&lt;string, string | string[]&gt;\r\n  | URLSearchParams;\r\n\r\ninterface URLSearchParamsSetter {\r\n  (\r\n    nextInit: URLSearchParamsInit,\r\n    navigateOptions?: { replace?: boolean; state?: State }\r\n  ): void;\r\n}\r\n```\r\n\r\n`useSearchParams` hook用于读取和修改当前位置的 URL 中的query字符串。 就像 React 自己的 [`useState` hook](https://reactjs.org/docs/hooks-reference.html#usestate)，`useSearchParams` 返回一个包含两个值的数组：当前位置的 [search params](https://developer.mozilla.org/en-US/docs/Web/API/URL/searchParams) 和可用于更新它们的函数。\r\n\r\n```tsx\r\nimport * as React from &quot;react&quot;;\r\nimport { useSearchParams } from &quot;react-router-dom&quot;;\r\n\r\nfunction App() {\r\n  let [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    // The serialize function here would be responsible for\r\n    // creating an object of { key: value } pairs from the\r\n    // fields in the form that make up the query.\r\n    let params = serializeFormQuery(event.target);\r\n    setSearchParams(params);\r\n  }\r\n\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;form onSubmit={handleSubmit}&gt;{/* ... */}&lt;/form&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n```\r\n\r\n>   **笔记：**\r\n>\r\n>   `setSearchParams` 函数的工作方式类似于 [`navigate`](#usenavigate)，但是\r\n>   仅用于 [搜索部分](https://developer.mozilla.org/en-US/docs/Web/API/Location/search)\r\n>   的网址。 另请注意，`setSearchParams` 的第二个参数是\r\n>   与`navigate`的第二个参数相同的类型。\r\n\r\n### `useSearchParams` (React Native)\r\n\r\n>   **笔记：**\r\n>\r\n>   这是 `useSearchParams` 的 React Native 版本。 对于web版本，\r\n>   [查看这里](#usesearchparams)。\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function useSearchParams(\r\n  defaultInit?: URLSearchParamsInit\r\n): [URLSearchParams, URLSearchParamsSetter];\r\n\r\ntype ParamKeyValuePair = [string, string];\r\n\r\ntype URLSearchParamsInit =\r\n  | string\r\n  | ParamKeyValuePair[]\r\n  | Record&lt;string, string | string[]&gt;\r\n  | URLSearchParams;\r\n\r\ninterface URLSearchParamsSetter {\r\n  (\r\n    nextInit: URLSearchParamsInit,\r\n    navigateOptions?: { replace?: boolean; state?: State }\r\n  ): void;\r\n}\r\n```\r\n\r\n`useSearchParams` hook用于读取和修改当前位置的 URL 中的查询字符串。 就像 React 自己的 [`useState` hook](https://reactjs.org/docs/hooks-reference.html#usestate)，`useSearchParams` 返回一个包含两个值的数组：当前位置的 [search params](https://developer.mozilla.org/en-US/docs/Web/API/URL/searchParams)  和可用于更新它们的函数。\r\n\r\n```tsx\r\nimport * as React from &quot;react&quot;;\r\nimport { View, SearchForm, TextInput } from &quot;react-native&quot;;\r\nimport { useSearchParams } from &quot;react-router-native&quot;;\r\n\r\nfunction App() {\r\n  let [searchParams, setSearchParams] = useSearchParams();\r\n  let [query, setQuery] = React.useState(\r\n    searchParams.get(&quot;query&quot;)\r\n  );\r\n\r\n  function handleSubmit() {\r\n    setSearchParams({ query });\r\n  }\r\n\r\n  return (\r\n    &lt;View&gt;\r\n      &lt;SearchForm onSubmit={handleSubmit}&gt;\r\n        &lt;TextInput value={query} onChangeText={setQuery} /&gt;\r\n      &lt;/SearchForm&gt;\r\n    &lt;/View&gt;\r\n  );\r\n}\r\n```\r\n\r\n### `createSearchParams`\r\n\r\n**类型声明**\r\n\r\n```tsx\r\ndeclare function createSearchParams(\r\n  init?: URLSearchParamsInit\r\n): URLSearchParams;\r\n```\r\n\r\n`createSearchParams` 是围绕 [`new URLSearchParams(init)`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/URLSearchParams) 的一个简洁包装器，它增加了对使用带有数组值的对象的支持。 这与 `useSearchParams` 在内部用于从 `URLSearchParamsInit` 值创建 `URLSearchParams` 对象的函数相同。\r\n', 132, 'https://jikexingkong.com/docs/react-routerv6-cn/api%e5%8f%82%e8%80%83', 4, 'docs', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(138, 1, '2021-11-22 10:04:35', '2021-11-22 02:04:35', '<h1>常见问题</h1>\n\n以下是 React Router v6中一些常见的问题:\n\n<h2>路由器怎么了？ 我需要它！</h2>\n\n这个问题通常源于你使用的是不支持hooks的 React 类组件。 在 React Router v6 中，我们完全接受了hooks并使用它们来共享路由器的所有内部状态。 但这并不意味着你不能使用router。 假设你实际上可以使用hooks（你使用的是 React 16.8+），你只需要一个包装器。\n\n<pre><code class=\"language-js line-numbers\">import {\n  useLocation,\n  useNavigate,\n  useParams\n} from \"react-router-dom\";\n\nfunction withRouter(Component) {\n  function ComponentWithRouterProp(props) {\n    let location = useLocation();\n    let navigate = useNavigate();\n    let params = useParams();\n    return (\n      &lt;Component\n        {...props}\n        router={{ location, navigate, params }}\n      /&gt;\n    );\n  }\n\n  return ComponentWithRouterProp;\n}\n</code></pre>\n\n<h2>为什么<code>&lt;Route&gt;</code> 有一个<code>element</code> 属性而不是<code>render</code> 或<code>component</code>？</h2>\n\n我们在 <a class=\"wp-editor-md-post-content-link\" href=\"https://reactrouter.com/docs/en/v6/upgrading/v5\">从 v5 到 v6 的迁移指南中提到了这一点</a>，但这里值得重复。\n\n在 React Router v6 中，我们从使用 v5 的 <code>&lt;Route component&gt;</code> 和 <code>&lt;Route render&gt;</code> API 切换到 <code>&lt;Route element&gt;</code>。这是为什么？\n\n首先，我们看到 React 本身把 <code>&lt;Suspense fallback={&lt;Spinner /&gt;}&gt;</code> 这个API作为优先使用 。 <code>fallback</code> prop采用 React <strong>element</strong>，而不是 <strong>component</strong>。这让你可以轻松地将你想要的任何props从渲染它的组件传递给你的 <code>&lt;Spinner&gt;</code>。\n\n使用元素而不是组件意味着我们不必提供 <code>passProps</code> 风格的 API，这样你就可以获得元素所需的props。例如，在基于组件的 API 中，没有好的方法将 props 传递给当 <code>&lt;Route path=\":userId\" component={Profile} /&gt;</code> 匹配时渲染的 <code>&lt;Profile&gt;</code> 组件。大多数采用这种方法的 React 库最终要么使用像 <code>&lt;Route component={Profile} passProps={{ animate: true }} /&gt;</code> 这样的 API，或者使用渲染prop或高阶组件。\n\n此外，<code>Route</code> 在 v5 中的渲染 API 相当大。当我们在 v4/5 上工作时，对话是这样的：\n\n<pre><code class=\"language-js line-numbers\">// Ah, this is nice and simple!\n&lt;Route path=\":userId\" component={Profile} /&gt;\n\n// But wait, how do I pass custom props to the &lt;Profile&gt; element??\n// Hmm, maybe we can use a render prop in those situations?\n&lt;Route\n  path=\":userId\"\n  render={routeProps =&gt; (\n    &lt;Profile routeProps={routeProps} animate={true} /&gt;\n  )}\n/&gt;\n\n// Ok, now we have two ways to render something with a route. :/\n\n// But wait, what if we want to render something when a route\n// *doesn\'t* match the URL, like a Not Found page? Maybe we\n// can use another render prop with slightly different semantics?\n&lt;Route\n  path=\":userId\"\n  children={({ match }) =&gt; (\n    match ? (\n      &lt;Profile match={match} animate={true} /&gt;\n    ) : (\n      &lt;NotFound /&gt;\n    )\n  )}\n/&gt;\n\n// What if I want to get access to the route match, or I need\n// to redirect deeper in the tree?\nfunction DeepComponent(routeStuff) {\n  // got routeStuff, phew!\n}\nexport default withRouter(DeepComponent);\n\n// Well hey, now at least we\'ve covered all our use cases!\n// ... *facepalm*\n</code></pre>\n\n这个 API 泛滥使用的至少部分原因是 React 没有提供任何方式让我们从 <code>&lt;Route&gt;</code> 获取信息到你的路由节点，所以我们必须发明聪明的方法来获取路由数据 <strong>和</strong>你自己的自定义props到你的节点：<code>component</code>、render props、<code>passProps</code>高阶组件......直到<strong>hooks</strong>出现！\n\n现在，上面的对话是这样的：\n\n<pre><code class=\"language-js line-numbers\">// Ah, nice and simple API. And it\'s just like the &lt;Suspense&gt; API!\n// Nothing more to learn here.\n&lt;Route path=\":userId\" element={&lt;Profile /&gt;} /&gt;\n\n// But wait, how do I pass custom props to the &lt;Profile&gt;\n// element? Oh ya, it\'s just an element. Easy.\n&lt;Route path=\":userId\" element={&lt;Profile animate={true} /&gt;} /&gt;\n\n// Ok, but how do I access the router\'s data, like the URL params\n// or the current location?\nfunction Profile({ animate }) {\n  let params = useParams();\n  let location = useLocation();\n}\n\n// But what about components deep in the tree?\nfunction DeepComponent() {\n  // oh right, same as anywhere else\n  let navigate = useNavigate();\n}\n\n// Aaaaaaaaand we\'re done here.\n</code></pre>\n\n在 v6 中使用 <code>element</code> 属性的另一个重要原因是 <code>&lt;Route children&gt;</code> 在嵌套路由中是保留的。 你可以在 v6 的 <a class=\"wp-editor-md-post-content-link\" href=\"/react-routerv6-cn/overview#嵌套路由\">入门指南</a> 中阅读更多相关信息。\n\n<h2>如何在 react-router v6 中添加 No Match (404) 路由？</h2>\n\n在 v4 中，我们只会将path prop留在路由之外。 在 v5 中，我们会将 404 元素包装在 Route 中并使用 <code>path=\"*\"</code>。 在 v6 中使用新的element prop来替代，改为传递 <code>path=\"*\"</code>：\n\n<pre><code class=\"language-js line-numbers\">&lt;Route path=\"*\" element={&lt;NoMatch /&gt;} /&gt;\n</code></pre>\n\n<h2><code>&lt;Route&gt;</code> 不渲染？ 我该怎么办？</h2>\n\n在 v5 中，<code>&lt;Route&gt;</code> 组件只是一个普通组件，就像一个 <code>if</code> 语句，当 URL 匹配它的路径时渲染。 在 v6 中，<code>&lt;Route&gt;</code> 组件实际上并不渲染，它只是用于配置。\n\n在 v5 中，由于路由只是组件，当路径为 \"/my-route\" 时，<code>MyRoute</code> 将被渲染。\n\n<pre><code class=\"language-tsx line-numbers\">let App = () =&gt; (\n  &lt;div&gt;\n    &lt;MyRoute /&gt;\n  &lt;/div&gt;\n);\n\nlet MyRoute = ({ element, ...rest }) =&gt; {\n  return (\n    &lt;Route path=\"/my-route\" children={&lt;p&gt;Hello!&lt;/p&gt;} /&gt;\n  );\n};\n</code></pre>\n\n然而，在 v6 中，<code>&lt;Route&gt;</code> 只用于它的 props，所以下面的代码永远不会渲染 <code>&lt;p&gt;Hello!&lt;/p&gt;</code>，因为 <code>&lt;MyRoute&gt;</code> 没有path可以被 <code>&lt;Routes&gt;</code> 找到：\n\n<pre><code class=\"language-tsx line-numbers\">let App = () =&gt; (\n  &lt;Routes&gt;\n    &lt;MyRoute /&gt;\n  &lt;/Routes&gt;\n);\n\nlet MyRoute = () =&gt; {\n  // won\'t ever render because the path is down here\n  return (\n    &lt;Route path=\"/my-route\" children={&lt;p&gt;Hello!&lt;/p&gt;} /&gt;\n  );\n};\n</code></pre>\n\n你可以通过以下方式获得相同的行为：\n\n<ul>\n<li>只在 <code>&lt;Routes&gt;</code> 内渲染 <code>&lt;Route&gt;</code> 元素</li>\n<li>将composition移动到 <code>element</code> prop中</li>\n</ul>\n\n<pre><code class=\"language-tsx line-numbers\">let App = () =&gt; (\n  &lt;div&gt;\n    &lt;Routes&gt;\n      &lt;Route path=\"/my-route\" element={&lt;MyRoute /&gt;} /&gt;\n    &lt;/Routes&gt;\n  &lt;/div&gt;\n);\n\nlet MyRoute = () =&gt; {\n  return &lt;p&gt;Hello!&lt;/p&gt;;\n};\n</code></pre>\n\n在 <code>&lt;Routes&gt;</code> 中静态提供完整的嵌套路由配置将启用 <code>v6.x</code> 中的许多功能，因此我们鼓励你将路由放在一个顶级配置中。 如果你真的喜欢独立于任何其他组件的匹配 URL 的组件的想法，你可以使用以下内容制作一个行为类似于 v5 <code>Route</code> 的组件：\n\n<pre><code class=\"language-tsx line-numbers\">function MatchPath({ path, Comp }) {\n  let match = useMatch(path);\n  return match ? &lt;Comp {...match} /&gt; : null;\n}\n\n// Will match anywhere w/o needing to be in a `&lt;Routes&gt;`\n&lt;MatchPath path=\"/accounts/:id\" Comp={Account} /&gt;;\n</code></pre>\n\n<h2>如何在路由树种深度嵌套路由？</h2>\n\n在 v5 中，你可以在任何你想要的地方渲染 <code>&lt;Route&gt;</code> 或 <code>&lt;Switch&gt;</code>。 你可以继续做同样的事情，但你需要使用 <code>&lt;Routes&gt;</code>（没有 \'s\' 的 <code>&lt;Route&gt;</code> 将不起作用）。 我们称这些为\"后代<code>&lt;Routes&gt;</code>\"。\n\n它在 v5 中可能看起来像这样\n\n<pre><code class=\"language-tsx line-numbers\">// somewhere up the tree\n&lt;Switch&gt;\n  &lt;Route path=\"/users\" component={Users} /&gt;\n&lt;/Switch&gt;;\n\n// and now deeper in the tree\nfunction Users() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Users&lt;/h1&gt;\n      &lt;Switch&gt;\n        &lt;Route path=\"/users/account\" component={Account} /&gt;\n      &lt;/Switch&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n\n在 v6 中几乎是一样的：\n\n<ul>\n<li>注意祖先路由中的 <code>*</code> 以使其匹配更深的 URL，即使它没有直接子路由</li>\n<li>你不再需要知道整个子路由路径，现在可以使用相对路由</li>\n</ul>\n\n<pre><code class=\"language-tsx line-numbers\">// somewhere up the tree\n&lt;Routes&gt;\n  &lt;Route path=\"/users/*\" element={&lt;Users /&gt;} /&gt;\n&lt;/Routes&gt;;\n\n// and now deeper in the tree\nfunction Users() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Users&lt;/h1&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"account\" element={&lt;Account /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n\n如果你在 v5 中有一个\"浮动路由\"（没有包裹在 <code>&lt;Switch&gt;</code> 中），只需将它包裹在一个 <code>&lt;Routes&gt;</code> 中。\n\n<pre><code class=\"language-tsx line-numbers\">// v5\n&lt;Route path=\"/contact\" component={Contact} /&gt;\n\n// v6\n&lt;Routes&gt;\n  &lt;Route path=\"contact\" element={&lt;Contact /&gt;} /&gt;\n&lt;/Routes&gt;\n</code></pre>\n\n<h2>正则表达式路由路径发生了什么变化？</h2>\n\n正则表达式路由路径被移除的原因有两个：\n\n<ol>\n<li>路由中的正则表达式路径给v6的排位路由匹配提出了很多问题。 你如何对正则表达式进行排名？</li>\n<li>我们能够摆脱整个依赖（路径到正则表达式）并显著减少发送到用户浏览器的包重量。 如果加回来，它将消耗 React Router 页面权重的 1/3！</li>\n</ol>\n\n在查看了大量用例后，我们发现我们仍然可以在没有直接正则表达式路径支持的情况下满足它们，因此我们进行了权衡以显着减小包大小并避免围绕正则表达式路由排序的开放性问题。\n\n大多数 regexp 路由一次只关心一个 URL 段，并做以下两件事之一：\n\n<ol>\n<li>匹配多个静态值</li>\n<li>以某种方式验证参数（是数字，不是数字等）</li>\n</ol>\n\n<strong>匹配一般静态值</strong>\n\n我们看到的一个非常常见的路径是匹配多种语言代码的正则表达式：\n\n<pre><code class=\"language-tsx line-numbers\">function App() {\n  return (\n    &lt;Switch&gt;\n      &lt;Route path={/(en|es|fr)/} component={Lang} /&gt;\n    &lt;/Switch&gt;\n  );\n}\n\nfunction Lang({ params }) {\n  let lang = params[0];\n  let translations = I81n[lang];\n  // ...\n}\n</code></pre>\n\n这些实际上都只是静态路径，因此在 v6 中你可以创建三个路由并将代码直接传递给组件。 如果你有很多，请制作一个数组并将其映射到路由中以避免重复。\n\n<pre><code class=\"language-tsx line-numbers\">function App() {\n  return (\n    &lt;Routes&gt;\n      &lt;Route path=\"en\" element={&lt;Lang code=\"en\" /&gt;} /&gt;\n      &lt;Route path=\"es\" element={&lt;Lang code=\"en\" /&gt;} /&gt;\n      &lt;Route path=\"fr\" element={&lt;Lang code=\"en\" /&gt;} /&gt;\n    &lt;/Routes&gt;\n  );\n}\n\nfunction Lang({ lang }) {\n  let translations = I81n[lang];\n  // ...\n}\n</code></pre>\n\n<strong>进行某种参数验证</strong>\n\n另一个常见的情况是确保参数是整数。\n\n<pre><code class=\"language-tsx line-numbers\">function App() {\n  return (\n    &lt;Switch&gt;\n      &lt;Route path={/users\\/(\\d+)/} component={User} /&gt;\n    &lt;/Switch&gt;\n  );\n}\n\nfunction User({ params }) {\n  let id = params[0];\n  // ...\n}\n</code></pre>\n\n在这种情况下，你必须自己使用匹配组件中的正则表达式做一些工作：\n\n<pre><code class=\"language-tsx line-numbers\">function App() {\n  return (\n    &lt;Routes&gt;\n      &lt;Route path=\"users/:id\" element={&lt;ValidateUser /&gt;} /&gt;\n      &lt;Route path=\"/users/*\" component={NotFound} /&gt;\n    &lt;/Routes&gt;\n  );\n}\n\nfunction ValidateUser() {\n  let params = useParams();\n  let userId = params.id.match(/\\d+/);\n  if (!userId) {\n    return &lt;NotFound /&gt;;\n  }\n  return &lt;User id={params.userId} /&gt;;\n}\n\nfunction User(props) {\n  let id = props.id;\n  // ...\n}\n</code></pre>\n\n在 v5 中，如果正则表达式不匹配，则 <code>&lt;Switch&gt;</code> 将继续尝试匹配下一个路由：\n\n<pre><code class=\"language-tsx line-numbers\">function App() {\n  return (\n    &lt;Switch&gt;\n      &lt;Route path={/users\\/(\\d+)/} component={User} /&gt;\n      &lt;Route path=\"/users/new\" exact component={NewUser} /&gt;\n      &lt;Route\n        path=\"/users/inactive\"\n        exact\n        component={InactiveUsers}\n      /&gt;\n      &lt;Route path=\"/users/*\" component={NotFound} /&gt;\n    &lt;/Switch&gt;\n  );\n}\n</code></pre>\n\n看看这个例子，你可能会担心在 v6 版本中你的其他路由不会在它们的 URL 上渲染，因为 <code>:userId</code> 路由可能首先匹配。 但是，由于路由排名，情况并非如此。 \"new\"和\"inactive\"路由将排名更高，因此在各自的 URL 上渲染：\n\n<pre><code class=\"language-tsx line-numbers\">function App() {\n  return (\n    &lt;Routes&gt;\n      &lt;Route path=\"/users/:id\" element={&lt;ValidateUser /&gt;} /&gt;\n      &lt;Route path=\"/users/new\" element={&lt;NewUser /&gt;} /&gt;\n      &lt;Route\n        path=\"/users/inactive\"\n        element={&lt;InactiveUsers /&gt;}\n      /&gt;\n    &lt;/Routes&gt;\n  );\n}\n</code></pre>\n\n事实上，如果你的路由不是按顺序排列的，v5 版本就会有各种各样的问题。 V6 完全消除了这个问题。\n\n<strong>Remix Users</strong>\n\n如果你正在使用 <a class=\"wp-editor-md-post-content-link\" href=\"https://remix.run\">Remix</a>，你可以通过将这项工作移动到你的加载程序中来向浏览器发送适当的 40x 响应。 这也减少了发送给用户的浏览器包的大小，因为加载程序只在服务端上运行。\n\n<pre><code class=\"language-tsx line-numbers\">import { useLoaderData } from \"remix\";\n\nexport async function loader({ params }) {\n  if (!params.id.match(/\\d+/)) {\n    throw new Response(\"\", { status: 400 });\n  }\n\n  let user = await fakeDb.user.find({ where: { id: params.id=}})\n  if (!user) {\n    throw new Response(\"\", { status: 404})\n  }\n\n  return user;\n}\n\nfunction User() {\n  let user = useLoaderData();\n  // ...\n}\n</code></pre>\n\nremix 不会渲染你的组件，而是渲染最近的 <a class=\"wp-editor-md-post-content-link\" href=\"https://docs.remix.run/v0.20/api/app/#catchboundary\">catch 边界</a>。', '常见问题', '', 'publish', 'open', 'closed', '', 'faq', '', '', '2021-11-22 10:50:35', '2021-11-22 02:50:35', '# 常见问题\r\n\r\n以下是 React Router v6中一些常见的问题:\r\n\r\n## 路由器怎么了？ 我需要它！\r\n\r\n这个问题通常源于你使用的是不支持hooks的 React 类组件。 在 React Router v6 中，我们完全接受了hooks并使用它们来共享路由器的所有内部状态。 但这并不意味着你不能使用router。 假设你实际上可以使用hooks（你使用的是 React 16.8+），你只需要一个包装器。 \r\n\r\n```js\r\nimport {\r\n  useLocation,\r\n  useNavigate,\r\n  useParams\r\n} from &quot;react-router-dom&quot;;\r\n\r\nfunction withRouter(Component) {\r\n  function ComponentWithRouterProp(props) {\r\n    let location = useLocation();\r\n    let navigate = useNavigate();\r\n    let params = useParams();\r\n    return (\r\n      &lt;Component\r\n        {...props}\r\n        router={{ location, navigate, params }}\r\n      /&gt;\r\n    );\r\n  }\r\n\r\n  return ComponentWithRouterProp;\r\n}\r\n```\r\n\r\n## 为什么`<Route>` 有一个`element` 属性而不是`render` 或`component`？ \r\n\r\n我们在 [从 v5 到 v6 的迁移指南中提到了这一点](https://reactrouter.com/docs/en/v6/upgrading/v5)，但这里值得重复。\r\n\r\n在 React Router v6 中，我们从使用 v5 的 `<Route component>` 和 `<Route render>` API 切换到 `<Route element>`。这是为什么？\r\n\r\n首先，我们看到 React 本身把 `<Suspense fallback={<Spinner />}>` 这个API作为优先使用 。 `fallback` prop采用 React **element**，而不是 **component**。这让你可以轻松地将你想要的任何props从渲染它的组件传递给你的 `<Spinner>`。\r\n\r\n使用元素而不是组件意味着我们不必提供 `passProps` 风格的 API，这样你就可以获得元素所需的props。例如，在基于组件的 API 中，没有好的方法将 props 传递给当 `<Route path=\":userId\" component={Profile} />` 匹配时渲染的 `<Profile>` 组件。大多数采用这种方法的 React 库最终要么使用像 `<Route component={Profile} passProps={{ animate: true }} />` 这样的 API，或者使用渲染prop或高阶组件。\r\n\r\n此外，`Route` 在 v5 中的渲染 API 相当大。当我们在 v4/5 上工作时，对话是这样的：\r\n\r\n```js\r\n// Ah, this is nice and simple!\r\n&lt;Route path=&quot;:userId&quot; component={Profile} /&gt;\r\n\r\n// But wait, how do I pass custom props to the &lt;Profile&gt; element??\r\n// Hmm, maybe we can use a render prop in those situations?\r\n&lt;Route\r\n  path=&quot;:userId&quot;\r\n  render={routeProps =&gt; (\r\n    &lt;Profile routeProps={routeProps} animate={true} /&gt;\r\n  )}\r\n/&gt;\r\n\r\n// Ok, now we have two ways to render something with a route. :/\r\n\r\n// But wait, what if we want to render something when a route\r\n// *doesn&#039;t* match the URL, like a Not Found page? Maybe we\r\n// can use another render prop with slightly different semantics?\r\n&lt;Route\r\n  path=&quot;:userId&quot;\r\n  children={({ match }) =&gt; (\r\n    match ? (\r\n      &lt;Profile match={match} animate={true} /&gt;\r\n    ) : (\r\n      &lt;NotFound /&gt;\r\n    )\r\n  )}\r\n/&gt;\r\n\r\n// What if I want to get access to the route match, or I need\r\n// to redirect deeper in the tree?\r\nfunction DeepComponent(routeStuff) {\r\n  // got routeStuff, phew!\r\n}\r\nexport default withRouter(DeepComponent);\r\n\r\n// Well hey, now at least we&#039;ve covered all our use cases!\r\n// ... *facepalm*\r\n```\r\n\r\n这个 API 泛滥使用的至少部分原因是 React 没有提供任何方式让我们从 `<Route>` 获取信息到你的路由节点，所以我们必须发明聪明的方法来获取路由数据 **和**你自己的自定义props到你的节点：`component`、render props、`passProps`高阶组件......直到**hooks**出现！\r\n\r\n现在，上面的对话是这样的：\r\n\r\n```js\r\n// Ah, nice and simple API. And it&#039;s just like the &lt;Suspense&gt; API!\r\n// Nothing more to learn here.\r\n&lt;Route path=&quot;:userId&quot; element={&lt;Profile /&gt;} /&gt;\r\n\r\n// But wait, how do I pass custom props to the &lt;Profile&gt;\r\n// element? Oh ya, it&#039;s just an element. Easy.\r\n&lt;Route path=&quot;:userId&quot; element={&lt;Profile animate={true} /&gt;} /&gt;\r\n\r\n// Ok, but how do I access the router&#039;s data, like the URL params\r\n// or the current location?\r\nfunction Profile({ animate }) {\r\n  let params = useParams();\r\n  let location = useLocation();\r\n}\r\n\r\n// But what about components deep in the tree?\r\nfunction DeepComponent() {\r\n  // oh right, same as anywhere else\r\n  let navigate = useNavigate();\r\n}\r\n\r\n// Aaaaaaaaand we&#039;re done here.\r\n```\r\n\r\n在 v6 中使用 `element` 属性的另一个重要原因是 `<Route children>` 在嵌套路由中是保留的。 你可以在 v6 的 [入门指南](/react-routerv6-cn/overview#嵌套路由) 中阅读更多相关信息。\r\n\r\n## 如何在 react-router v6 中添加 No Match (404) 路由？\r\n\r\n在 v4 中，我们只会将path prop留在路由之外。 在 v5 中，我们会将 404 元素包装在 Route 中并使用 `path=\"*\"`。 在 v6 中使用新的element prop来替代，改为传递 `path=\"*\"`：\r\n\r\n```js\r\n&lt;Route path=&quot;*&quot; element={&lt;NoMatch /&gt;} /&gt;\r\n```\r\n\r\n## `<Route>` 不渲染？ 我该怎么办？\r\n\r\n在 v5 中，`<Route>` 组件只是一个普通组件，就像一个 `if` 语句，当 URL 匹配它的路径时渲染。 在 v6 中，`<Route>` 组件实际上并不渲染，它只是用于配置。\r\n\r\n在 v5 中，由于路由只是组件，当路径为 \"/my-route\" 时，`MyRoute` 将被渲染。\r\n\r\n```tsx\r\nlet App = () =&gt; (\r\n  &lt;div&gt;\r\n    &lt;MyRoute /&gt;\r\n  &lt;/div&gt;\r\n);\r\n\r\nlet MyRoute = ({ element, ...rest }) =&gt; {\r\n  return (\r\n    &lt;Route path=&quot;/my-route&quot; children={&lt;p&gt;Hello!&lt;/p&gt;} /&gt;\r\n  );\r\n};\r\n```\r\n\r\n然而，在 v6 中，`<Route>` 只用于它的 props，所以下面的代码永远不会渲染 `<p>Hello!</p>`，因为 `<MyRoute>` 没有path可以被 `<Routes>  ` 找到：\r\n\r\n```tsx\r\nlet App = () =&gt; (\r\n  &lt;Routes&gt;\r\n    &lt;MyRoute /&gt;\r\n  &lt;/Routes&gt;\r\n);\r\n\r\nlet MyRoute = () =&gt; {\r\n  // won&#039;t ever render because the path is down here\r\n  return (\r\n    &lt;Route path=&quot;/my-route&quot; children={&lt;p&gt;Hello!&lt;/p&gt;} /&gt;\r\n  );\r\n};\r\n```\r\n\r\n你可以通过以下方式获得相同的行为：\r\n\r\n- 只在 `<Routes>` 内渲染 `<Route>` 元素\r\n- 将composition移动到 `element` prop中\r\n\r\n```tsx\r\nlet App = () =&gt; (\r\n  &lt;div&gt;\r\n    &lt;Routes&gt;\r\n      &lt;Route path=&quot;/my-route&quot; element={&lt;MyRoute /&gt;} /&gt;\r\n    &lt;/Routes&gt;\r\n  &lt;/div&gt;\r\n);\r\n\r\nlet MyRoute = () =&gt; {\r\n  return &lt;p&gt;Hello!&lt;/p&gt;;\r\n};\r\n```\r\n\r\n在 `<Routes>` 中静态提供完整的嵌套路由配置将启用 `v6.x` 中的许多功能，因此我们鼓励你将路由放在一个顶级配置中。 如果你真的喜欢独立于任何其他组件的匹配 URL 的组件的想法，你可以使用以下内容制作一个行为类似于 v5 `Route` 的组件：\r\n\r\n```tsx\r\nfunction MatchPath({ path, Comp }) {\r\n  let match = useMatch(path);\r\n  return match ? <Comp {...match} /> : null;\r\n}\r\n\r\n// Will match anywhere w/o needing to be in a `<Routes>`\r\n<MatchPath path=\"/accounts/:id\" Comp={Account} />;\r\n```\r\n\r\n## 如何在路由树种深度嵌套路由？\r\n\r\n在 v5 中，你可以在任何你想要的地方渲染 `<Route>` 或 `<Switch>`。 你可以继续做同样的事情，但你需要使用 `<Routes>`（没有 \'s\' 的 `<Route>` 将不起作用）。 我们称这些为\"后代`<Routes>`\"。\r\n\r\n它在 v5 中可能看起来像这样\r\n\r\n```tsx\r\n// somewhere up the tree\r\n&lt;Switch&gt;\r\n  &lt;Route path=&quot;/users&quot; component={Users} /&gt;\r\n&lt;/Switch&gt;;\r\n\r\n// and now deeper in the tree\r\nfunction Users() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;Users&lt;/h1&gt;\r\n      &lt;Switch&gt;\r\n        &lt;Route path=&quot;/users/account&quot; component={Account} /&gt;\r\n      &lt;/Switch&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n```\r\n\r\n在 v6 中几乎是一样的：\r\n\r\n- 注意祖先路由中的 `*` 以使其匹配更深的 URL，即使它没有直接子路由\r\n- 你不再需要知道整个子路由路径，现在可以使用相对路由\r\n\r\n```tsx\r\n// somewhere up the tree\r\n&lt;Routes&gt;\r\n  &lt;Route path=&quot;/users/*&quot; element={&lt;Users /&gt;} /&gt;\r\n&lt;/Routes&gt;;\r\n\r\n// and now deeper in the tree\r\nfunction Users() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;Users&lt;/h1&gt;\r\n      &lt;Routes&gt;\r\n        &lt;Route path=&quot;account&quot; element={&lt;Account /&gt;} /&gt;\r\n      &lt;/Routes&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n```\r\n\r\n如果你在 v5 中有一个\"浮动路由\"（没有包裹在 `<Switch>` 中），只需将它包裹在一个 `<Routes>` 中。\r\n\r\n```tsx\r\n// v5\r\n&lt;Route path=&quot;/contact&quot; component={Contact} /&gt;\r\n\r\n// v6\r\n&lt;Routes&gt;\r\n  &lt;Route path=&quot;contact&quot; element={&lt;Contact /&gt;} /&gt;\r\n&lt;/Routes&gt;\r\n```\r\n\r\n## 正则表达式路由路径发生了什么变化？\r\n\r\n正则表达式路由路径被移除的原因有两个：\r\n\r\n1.  路由中的正则表达式路径给v6的排位路由匹配提出了很多问题。 你如何对正则表达式进行排名？\r\n2.  我们能够摆脱整个依赖（路径到正则表达式）并显著减少发送到用户浏览器的包重量。 如果加回来，它将消耗 React Router 页面权重的 1/3！\r\n\r\n在查看了大量用例后，我们发现我们仍然可以在没有直接正则表达式路径支持的情况下满足它们，因此我们进行了权衡以显着减小包大小并避免围绕正则表达式路由排序的开放性问题。\r\n\r\n大多数 regexp 路由一次只关心一个 URL 段，并做以下两件事之一：\r\n\r\n1.  匹配多个静态值\r\n2.  以某种方式验证参数（是数字，不是数字等）\r\n\r\n**匹配一般静态值**\r\n\r\n我们看到的一个非常常见的路径是匹配多种语言代码的正则表达式：\r\n\r\n```tsx\r\nfunction App() {\r\n  return (\r\n    &lt;Switch&gt;\r\n      &lt;Route path={/(en|es|fr)/} component={Lang} /&gt;\r\n    &lt;/Switch&gt;\r\n  );\r\n}\r\n\r\nfunction Lang({ params }) {\r\n  let lang = params[0];\r\n  let translations = I81n[lang];\r\n  // ...\r\n}\r\n```\r\n\r\n这些实际上都只是静态路径，因此在 v6 中你可以创建三个路由并将代码直接传递给组件。 如果你有很多，请制作一个数组并将其映射到路由中以避免重复。\r\n\r\n```tsx\r\nfunction App() {\r\n  return (\r\n    &lt;Routes&gt;\r\n      &lt;Route path=&quot;en&quot; element={&lt;Lang code=&quot;en&quot; /&gt;} /&gt;\r\n      &lt;Route path=&quot;es&quot; element={&lt;Lang code=&quot;en&quot; /&gt;} /&gt;\r\n      &lt;Route path=&quot;fr&quot; element={&lt;Lang code=&quot;en&quot; /&gt;} /&gt;\r\n    &lt;/Routes&gt;\r\n  );\r\n}\r\n\r\nfunction Lang({ lang }) {\r\n  let translations = I81n[lang];\r\n  // ...\r\n}\r\n```\r\n\r\n**进行某种参数验证**\r\n\r\n另一个常见的情况是确保参数是整数。\r\n\r\n```tsx\r\nfunction App() {\r\n  return (\r\n    &lt;Switch&gt;\r\n      &lt;Route path={/users\\/(\\d+)/} component={User} /&gt;\r\n    &lt;/Switch&gt;\r\n  );\r\n}\r\n\r\nfunction User({ params }) {\r\n  let id = params[0];\r\n  // ...\r\n}\r\n```\r\n\r\n在这种情况下，你必须自己使用匹配组件中的正则表达式做一些工作：\r\n\r\n```tsx\r\nfunction App() {\r\n  return (\r\n    &lt;Routes&gt;\r\n      &lt;Route path=&quot;users/:id&quot; element={&lt;ValidateUser /&gt;} /&gt;\r\n      &lt;Route path=&quot;/users/*&quot; component={NotFound} /&gt;\r\n    &lt;/Routes&gt;\r\n  );\r\n}\r\n\r\nfunction ValidateUser() {\r\n  let params = useParams();\r\n  let userId = params.id.match(/\\d+/);\r\n  if (!userId) {\r\n    return &lt;NotFound /&gt;;\r\n  }\r\n  return &lt;User id={params.userId} /&gt;;\r\n}\r\n\r\nfunction User(props) {\r\n  let id = props.id;\r\n  // ...\r\n}\r\n```\r\n\r\n在 v5 中，如果正则表达式不匹配，则 `<Switch>` 将继续尝试匹配下一个路由：\r\n\r\n```tsx\r\nfunction App() {\r\n  return (\r\n    &lt;Switch&gt;\r\n      &lt;Route path={/users\\/(\\d+)/} component={User} /&gt;\r\n      &lt;Route path=&quot;/users/new&quot; exact component={NewUser} /&gt;\r\n      &lt;Route\r\n        path=&quot;/users/inactive&quot;\r\n        exact\r\n        component={InactiveUsers}\r\n      /&gt;\r\n      &lt;Route path=&quot;/users/*&quot; component={NotFound} /&gt;\r\n    &lt;/Switch&gt;\r\n  );\r\n}\r\n```\r\n\r\n看看这个例子，你可能会担心在 v6 版本中你的其他路由不会在它们的 URL 上渲染，因为 `:userId` 路由可能首先匹配。 但是，由于路由排名，情况并非如此。 \"new\"和\"inactive\"路由将排名更高，因此在各自的 URL 上渲染：\r\n\r\n```tsx\r\nfunction App() {\r\n  return (\r\n    &lt;Routes&gt;\r\n      &lt;Route path=&quot;/users/:id&quot; element={&lt;ValidateUser /&gt;} /&gt;\r\n      &lt;Route path=&quot;/users/new&quot; element={&lt;NewUser /&gt;} /&gt;\r\n      &lt;Route\r\n        path=&quot;/users/inactive&quot;\r\n        element={&lt;InactiveUsers /&gt;}\r\n      /&gt;\r\n    &lt;/Routes&gt;\r\n  );\r\n}\r\n```\r\n\r\n事实上，如果你的路由不是按顺序排列的，v5 版本就会有各种各样的问题。 V6 完全消除了这个问题。\r\n\r\n**Remix Users**\r\n\r\n如果你正在使用 [Remix](https://remix.run)，你可以通过将这项工作移动到你的加载程序中来向浏览器发送适当的 40x 响应。 这也减少了发送给用户的浏览器包的大小，因为加载程序只在服务端上运行。\r\n\r\n```tsx\r\nimport { useLoaderData } from &quot;remix&quot;;\r\n\r\nexport async function loader({ params }) {\r\n  if (!params.id.match(/\\d+/)) {\r\n    throw new Response(&quot;&quot;, { status: 400 });\r\n  }\r\n\r\n  let user = await fakeDb.user.find({ where: { id: params.id=}})\r\n  if (!user) {\r\n    throw new Response(&quot;&quot;, { status: 404})\r\n  }\r\n\r\n  return user;\r\n}\r\n\r\nfunction User() {\r\n  let user = useLoaderData();\r\n  // ...\r\n}\r\n```\r\n\r\nremix 不会渲染你的组件，而是渲染最近的 [catch 边界](https://docs.remix.run/v0.20/api/app/#catchboundary)。\r\n', 132, 'https://jikexingkong.com/docs/react-routerv6-cn/%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98', 5, 'docs', '', 0),
(140, 1, '2021-11-22 11:36:57', '2021-11-22 03:36:57', '', '2021112203365788', '', 'inherit', 'open', 'closed', '', '2021112203365788', '', '', '2021-11-22 11:36:57', '2021-11-22 03:36:57', '', 132, 'https://jikexingkong.com/wp-content/uploads/2021/11/2021112203365788.png', 0, 'attachment', 'image/png', 0),
(142, 1, '2021-11-22 16:08:05', '2021-11-22 08:08:05', '', 'Go标准教程', '', 'inherit', 'closed', 'closed', '', '40-autosave-v1', '', '', '2021-11-22 16:08:05', '2021-11-22 08:08:05', '', 40, 'https://jikexingkong.com/?p=142', 0, 'revision', '', 0),
(143, 1, '2021-11-22 16:17:48', '2021-11-22 08:17:48', '<h1>初始化golang项目</h1>\n\n<h2>开发环境</h2>\n\n推荐使用module组织golang代码,使用vscode编码,具体可参考<a class=\"wp-editor-md-post-content-link\" href=\"https://golang.org/doc/code.html\">官方文档</a>\n\n<h3>安装golang</h3>\n\n通过brew安装golang\n\n<pre><code class=\"language-shell line-numbers\">brew install go\n</code></pre>\n\n升级golang版本\n\n<pre><code class=\"language-shell line-numbers\">brew upgrade go\n</code></pre>\n\n查看版本\n\n<pre><code class=\"language-shell line-numbers\">go version\n</code></pre>\n\n设置仓库代理\n\n<blockquote>\n  除了以下方法,你也可以通过socket进行本地代理\n</blockquote>\n\n<pre><code class=\"language-shell line-numbers\"># 设置 Go Proxy 代理\ngo env -w GOPROXY=https://goproxy.io,direct\n</code></pre>\n\n<h3>环境变量</h3>\n\ngolang项目的层次为 repository(仓库)->module(模块)->package(包)->source file(源代码文件)\n\n初始化一个golang模块\n\n<pre><code class=\"language-shell line-numbers\">$ cd ~/Code\n$ mkdir hello &amp;&amp; cd $_\n$ go mod init github.com/pincman/go-hello\n$ touch hello.go &amp;&amp; vi hello.go\n</code></pre>\n\n在<code>hello.go</code>中写入以下代码\n\n<pre><code class=\"language-go line-numbers\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, world.\")\n}\n</code></pre>\n\n运行安装命令\n\n<pre><code class=\"language-shell line-numbers\">go install github.com/pincman/go-hello\n</code></pre>\n\n或者通过当前目录安装\n\n<pre><code class=\"line-numbers\">go install .\n</code></pre>\n\n或者\n\n<pre><code class=\"language-shell line-numbers\">go install \n</code></pre>\n\n以上命令会编译出一个<code>hello</code>二进制可执行文件,此文件的位置由<code>GOPATH</code>和<code>GOPATH</code>控制，通过以下顺序来确定<code>hello</code>的位置\n\n<ol>\n<li>如果设置了<code>GOBIN</code>,则直接放入<code>GOBIN</code>路径下</li>\n<li>如果设置了<code>GOPATH</code>,则放入<code>GOPATH</code>列表的第一个路径下的<code>bin</code>目录下</li>\n<li>如果都没有设置,则放入<code>GOPATH</code>的默认路径<code>$HOME/go</code>或者<code>%USERPROFILE%\\go</code>(windows)下的<code>bin</code>目录下</li>\n</ol>\n\n配置以上环境变量可以通过<code>~/.zhsrc</code>,<code>/etc/profile</code>等方式进行本地化配置,也可以使用以下命令直接配置(<strong>推荐</strong>)\n\n<pre><code class=\"language-shell line-numbers\">go env -w GOBIN=/somewhere/else/bin\n</code></pre>\n\n查看所有golang的环境变量\n\n<pre><code class=\"language-shell line-numbers\">go env\n</code></pre>\n\n取消一个环境变量的设置\n\n<pre><code class=\"language-shell line-numbers\">go env -u GOBIN\n</code></pre>\n\n把放置可执行文件的路径加入系统可执行文件路径\n\n<pre><code class=\"language-shell line-numbers\">export PATH=$PATH:$(dirname $(go list -f \'{{.Target}}\' .))\n</code></pre>\n\n如果想永久性生效,则需要把上面的命令追加到<code>~/.zshrc</code>等环境变量文件,然后<code>source ~/.zshrc</code>\n\n尝试执行一下\n\n<pre><code class=\"language-shell line-numbers\">$ helloHello, world.\n</code></pre>\n\n<h3>导入包</h3>\n\n<h4>基本命令</h4>\n\n<ul>\n<li><code>go build</code>用于编译go代码并且放入本地缓存中</li>\n<li><code>go run</code>用于编译并运行go代码</li>\n<li><code>go install</code>用于编译并生成二进制文件放入指定目录中</li>\n</ul>\n\n<h4>导入本地包</h4>\n\n<pre><code class=\"language-shell line-numbers\">$ mkdir morestrings &amp;&amp; touch reverse.go\n</code></pre>\n\n在<code>reverse.go</code>中写入如下代码\n\n<blockquote>\n  类似ReverseRunes这种大写字母开头的函数可以被其它包导入使用,是公开函数\n</blockquote>\n\n<pre><code class=\"language-go line-numbers\">// Package morestrings implements additional functions to manipulate UTF-8// encoded strings, beyond what is provided in the standard \"strings\" package.package morestrings// ReverseRunes returns its argument string reversed rune-wise left to right.func ReverseRunes(s string) string {    r := []rune(s)  for i, j := 0, len(r)-1; i &lt; len(r)/2; i, j = i+1, j-1 {        r[i], r[j] = r[j], r[i] }   return string(r)}\n</code></pre>\n\n写好代码后编译一下\n\n<pre><code class=\"language-shell line-numbers\">go build # 这不会产生输出文件,是将已编译的程序包保存在本地构建缓存中。\n</code></pre>\n\n现在修改一下<code>hello.go</code>并且再次安装执行\n\n<pre><code class=\"language-go line-numbers\">package main\nimport (    \"fmt\"   \"github.com/pincman/go-hello/morestrings\")\nfunc main() {   \n  fmt.Println(morestrings.ReverseRunes(\"!oG ,olleH\"))\n}\n</code></pre>\n\n<pre><code class=\"line-numbers\">$ go install github.com/pincman/go-hello &amp;&amp; helloHello, Go!\n</code></pre>\n\n<h4>导入远程包</h4>\n\n修改<code>hello.go</code>\n\n<pre><code class=\"language-go line-numbers\">package mainimport (    \"fmt\"   \"example.com/user/hello/morestrings\"    \"github.com/google/go-cmp/cmp\")func main() {    fmt.Println(morestrings.ReverseRunes(\"!oG ,olleH\")) fmt.Println(cmp.Diff(\"Hello World\", \"Hello Go\"))}\n</code></pre>\n\n使用<code>go install</code>,<code>go build</code>,<code>go run</code>等命令后会自动下载此远程依赖,并把其最新的版本号和依赖地址写入<code>go.mod</code>文件\n\n下载后的第三方模块的代码包将放入<code>GOPATH</code>中,如果要清除需要执行<code>go clean -modcache</code>命令\n\n<h2>vscode配置</h2>', '开发环境', '', 'publish', 'open', 'closed', '', 'development', '', '', '2021-11-22 17:26:53', '2021-11-22 09:26:53', '# 初始化golang项目\r\n\r\n## 开发环境\r\n\r\n推荐使用module组织golang代码,使用vscode编码,具体可参考[官方文档](https://golang.org/doc/code.html)\r\n\r\n### 安装golang\r\n\r\n通过brew安装golang\r\n\r\n```shell\r\nbrew install go\r\n```\r\n\r\n升级golang版本\r\n\r\n```shell\r\nbrew upgrade go\r\n```\r\n\r\n查看版本\r\n\r\n```shell\r\ngo version\r\n```\r\n\r\n设置仓库代理\r\n\r\n> 除了以下方法,你也可以通过socket进行本地代理\r\n\r\n```shell\r\n# 设置 Go Proxy 代理\r\ngo env -w GOPROXY=https://goproxy.io,direct\r\n```\r\n\r\n### 环境变量\r\n\r\ngolang项目的层次为 repository(仓库)->module(模块)->package(包)->source file(源代码文件)\r\n\r\n初始化一个golang模块\r\n\r\n```shell\r\n$ cd ~/Code\r\n$ mkdir hello && cd $_\r\n$ go mod init github.com/pincman/go-hello\r\n$ touch hello.go && vi hello.go\r\n```\r\n\r\n在`hello.go`中写入以下代码\r\n\r\n```go\r\npackage main\r\n\r\nimport &quot;fmt&quot;\r\n\r\nfunc main() {\r\n    fmt.Println(&quot;Hello, world.&quot;)\r\n}\r\n```\r\n\r\n运行安装命令\r\n\r\n```shell\r\ngo install github.com/pincman/go-hello\r\n```\r\n\r\n或者通过当前目录安装\r\n\r\n```\r\ngo install .\r\n```\r\n\r\n或者\r\n\r\n```shell\r\ngo install \r\n```\r\n\r\n以上命令会编译出一个`hello`二进制可执行文件,此文件的位置由`GOPATH`和`GOPATH`控制，通过以下顺序来确定`hello`的位置\r\n\r\n1. 如果设置了`GOBIN`,则直接放入`GOBIN`路径下\r\n2. 如果设置了`GOPATH`,则放入`GOPATH`列表的第一个路径下的`bin`目录下\r\n3. 如果都没有设置,则放入`GOPATH`的默认路径`$HOME/go`或者`%USERPROFILE%\\go`(windows)下的`bin`目录下\r\n\r\n配置以上环境变量可以通过`~/.zhsrc`,`/etc/profile`等方式进行本地化配置,也可以使用以下命令直接配置(**推荐**)\r\n\r\n```shell\r\ngo env -w GOBIN=/somewhere/else/bin\r\n```\r\n\r\n查看所有golang的环境变量\r\n\r\n```shell\r\ngo env\r\n```\r\n\r\n取消一个环境变量的设置\r\n\r\n```shell\r\ngo env -u GOBIN\r\n```\r\n\r\n把放置可执行文件的路径加入系统可执行文件路径\r\n\r\n```shell\r\nexport PATH=$PATH:$(dirname $(go list -f &#039;{{.Target}}&#039; .))\r\n```\r\n\r\n如果想永久性生效,则需要把上面的命令追加到`~/.zshrc`等环境变量文件,然后`source ~/.zshrc`\r\n\r\n尝试执行一下\r\n\r\n```shell\r\n$ helloHello, world.\r\n```\r\n\r\n### 导入包\r\n\r\n#### 基本命令\r\n\r\n- `go build`用于编译go代码并且放入本地缓存中\r\n- `go run`用于编译并运行go代码\r\n- `go install`用于编译并生成二进制文件放入指定目录中\r\n\r\n#### 导入本地包\r\n\r\n```shell\r\n$ mkdir morestrings &amp;&amp; touch reverse.go\r\n```\r\n\r\n在`reverse.go`中写入如下代码\r\n\r\n> 类似ReverseRunes这种大写字母开头的函数可以被其它包导入使用,是公开函数\r\n\r\n```go\r\n// Package morestrings implements additional functions to manipulate UTF-8// encoded strings, beyond what is provided in the standard &quot;strings&quot; package.package morestrings// ReverseRunes returns its argument string reversed rune-wise left to right.func ReverseRunes(s string) string {	r := []rune(s)	for i, j := 0, len(r)-1; i &lt; len(r)/2; i, j = i+1, j-1 {		r[i], r[j] = r[j], r[i]	}	return string(r)}\r\n```\r\n\r\n写好代码后编译一下\r\n\r\n```shell\r\ngo build # 这不会产生输出文件,是将已编译的程序包保存在本地构建缓存中。\r\n```\r\n\r\n现在修改一下`hello.go`并且再次安装执行\r\n\r\n```go\r\npackage main\r\nimport (	&quot;fmt&quot;	&quot;github.com/pincman/go-hello/morestrings&quot;)\r\nfunc main() {	\r\n  fmt.Println(morestrings.ReverseRunes(&quot;!oG ,olleH&quot;))\r\n}\r\n```\r\n\r\n```\r\n$ go install github.com/pincman/go-hello &amp;&amp; helloHello, Go!\r\n```\r\n\r\n#### 导入远程包\r\n\r\n修改`hello.go`\r\n\r\n```go\r\npackage mainimport (	&quot;fmt&quot;	&quot;example.com/user/hello/morestrings&quot;	&quot;github.com/google/go-cmp/cmp&quot;)func main() {	fmt.Println(morestrings.ReverseRunes(&quot;!oG ,olleH&quot;))	fmt.Println(cmp.Diff(&quot;Hello World&quot;, &quot;Hello Go&quot;))}\r\n```\r\n\r\n使用`go install`,`go build`,`go run`等命令后会自动下载此远程依赖,并把其最新的版本号和依赖地址写入`go.mod`文件\r\n\r\n下载后的第三方模块的代码包将放入`GOPATH`中,如果要清除需要执行`go clean -modcache`命令\r\n\r\n## vscode配置', 40, 'https://jikexingkong.com/docs/golang-standard/%e5%bc%80%e5%8f%91%e7%8e%af%e5%a2%83', 0, 'docs', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(144, 1, '2021-11-22 16:17:55', '2021-11-22 08:17:55', '<h1>Go语言实战</h1>\n\n类型转换\n\n映射与切片对比\n\n<h3>包</h3>\n\n包是go代码的文件组织结构\n\n<ul>\n<li>大写字母开头的属性可以被外部调用</li>\n</ul>\n\n<pre><code class=\"language-go line-numbers\">// ngm/hello.go\npackage ngm\n\nimport \"fmt\"\n\nfunc Hello() {\n    fmt.Println(\"Let\'s go\")\n}\n\n// main.go\npackage main\n\nimport (\n    \"jikebianma.com/goit/ngm\"\n)\n\nfunc main() {\n    ngm.Hello()\n}\n\n</code></pre>\n\n<h3>函数</h3>\n\n函数是go中唯一的代码逻辑包装器,go没有传统的面向对象中的类,方法等\n\n函数定义语法\n\n<pre><code class=\"language-go line-numbers\">func {函数名}(...参数:类型) 返回值类型\n</code></pre>\n\n注意\n\n<ul>\n<li>参数类型相同可以只写最后一个的类型</li>\n<li>可以返回多个值,并且应该直接赋值而不需要初始化</li>\n<li>可以把内部的变量返回出来,适用于短函数</li>\n<li>与其它编程语言一样函数支持闭包和变量函数</li>\n<li>与TS一样闭包函数可以作为返回值并支持透传</li>\n</ul>\n\n<pre><code class=\"language-go line-numbers\">package main\n\nimport (\n    \"fmt\"\n\n    \"jikebianma.com/godemo/ngm\"\n)\n\nfunc do(fn func(int, int) int) int {\n    return fn(3, 4)\n}\n\nfunc adder() func(int) int {\n    sum := 0\n    return func(x int) int {\n        sum += x\n        return sum\n    }\n}\n\nfunc main() {\n    ngm.Hello()\n    _, say := ngm.Sayname(\"nangongmo\", \"jikebianma\")\n    println(say)\n\n    p := func(x, y int) int {\n        return x * y\n    }\n    fmt.Println(do(p))\n\n    x := adder()\n    fmt.Println(x(1), x(1))\n}\n\n</code></pre>\n\n<h3>变量与常量</h3>\n\n变量使用<code>var</code>或<code>:=</code>初始化,常量使用<code>const</code>定义\n\n<ol>\n<li>使用<code>var</code>声明,声明时初始化的变量可自动推导类型</li>\n<li>可只初始化不赋值,如果始终不赋值则为零值(0,false,\"\")</li>\n<li>一行可以声明多个变量</li>\n<li><code>:=</code>可以快捷声明变量,<code>:=</code>声明方式方式只在函数内有效</li>\n<li>声明变量可以是一个语法块</li>\n<li>类型转换:把变量放入类型函数中即可(类型必须可转换)</li>\n</ol>\n\n<pre><code class=\"language-go line-numbers\">var commentCount, postCount int\n\nvar (\n    isPublishied bool   = false\n    categoryName string = \"learn-go\"\n)\n\nfunc Pvar() {\n    commentCount = 6\n    postCount = 7\n    c, python, java := true, false, \"no!\"\n\n  fmt.Println(float64(commentCount), postCount, isPublishied, categoryName, c, python, java)\n}\n</code></pre>\n\n<h3>逻辑</h3>\n\ngo的逻辑运算包括<code>if</code>,<code>else</code>,<code>for</code>,<code>switch</code>\n\n<ul>\n<li><code>if</code>与<code>for</code>的条件外围不需要加小括号<code>()</code></li>\n<li><code>for</code>初始化语句和后置语句是可选的</li>\n<li>没有<code>while</code>语句,用<code>for</code>去除两端语句就是<code>while</code></li>\n<li><code>for</code> 直接加大括号就是无限循环</li>\n<li><code>if</code>条件中可执行一个表达式,比如声明变量,此变量只在<code>if</code>内部有效</li>\n<li><code>switch</code>不需要<code>case</code>语句</li>\n<li>没有条件的 switch 同 <code>switch true</code> 一样</li>\n<li>使用<code>defer</code>语句的函数会在所在函数全部执行完毕后再执行</li>\n<li><code>defer</code>语句函数会按照后进先出的顺序调用</li>\n</ul>\n\n<pre><code class=\"language-go line-numbers\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    defer fmt.Println(\"done\")\n    for i := 0; i &lt; 10; i++ {\n        defer fmt.Println(i)\n    }\n    defer fmt.Println(\"counting\")\n\n    sum := 0\n    for i := 0; i &lt; 10; i++ {\n        sum += i\n    }\n    fmt.Println(sum)\n\n    sum = 1\n    for sum &lt; 100 {\n        sum += sum\n    }\n    fmt.Println(sum)\n    // for {\n       // 无限循环\n    // }\n\n    fmt.Println(\n        pow(3, 2, 10),\n        pow(3, 3, 20),\n    )\n\n    fmt.Println(\"When\'s Saturday?\")\n    today := time.Now().Weekday()\n    switch time.Saturday {\n    case today + 0:\n        fmt.Println(\"Today.\")\n    case today + 1:\n        fmt.Println(\"Tomorrow.\")\n    case today + 2:\n        fmt.Println(\"In two days.\")\n    default:\n        fmt.Println(\"Too far away.\")\n    }\n\n    t := time.Now()\n    switch {\n    case t.Hour() &lt; 12:\n        fmt.Println(\"Good morning!\")\n    case t.Hour() &lt; 17:\n        fmt.Println(\"Good afternoon.\")\n    default:\n        fmt.Println(\"Good evening.\")\n    }\n}\n\n</code></pre>\n\n<h3>指针</h3>\n\n指针是一个变量的内存地址\n\n<ul>\n<li>使用<code>&amp;{变量}</code>赋值一个指针,比如<code>p = &amp;i</code>,<code>p</code>就是<code>i</code>的内存地址</li>\n<li>通过<code>*{指针变量}</code>获取这个变量的值</li>\n<li>使用<code>var p *{类型}</code>可以初始化一个指针类型的变量</li>\n</ul>\n\n<pre><code class=\"language-go line-numbers\">package main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    x, y := 10, 15\n\n    s := &amp;x\n    fmt.Println(*s)\n    *s = 20\n    fmt.Println(x)\n\n    s = &amp;y\n    *s = *s / 5\n    fmt.Println(y)\n\n}\n\n</code></pre>\n\n<h3>结构体与映射</h3>\n\n结构体类似ts中的对象类型,只是使用<code>struct</code>定义的一组键值对\n\n结构体语法:\n\n<pre><code class=\"language-go line-numbers\">// 定义结构体类型\ntype {结构体名称} struct {\n    {变量1} {类型1}\n    {变量2} {类型2}\n}\n// 定义零值变量\nvar i:{结构体名称}\n// 直接初始化变量\ni := {结构体名称}{{变量1值},{变量2值}}\n</code></pre>\n\n映射是结构体的一个键值对集合,类似ts中的<code>Map</code>\n\n映射语法\n\n<pre><code class=\"language-go line-numbers\">// 定义零值变量\nvar m map[{索引类型}]{值类型}\n\n// 直接赋值\nvar m = map[索引类型]{值}\n\n// 通过make创建一个实例\nm = make(map[{索引类型}]{值类型})\n</code></pre>\n\n使用<code>delete({映射},{键名})</code>方法可通过键名删除映射一个元素\n\n通过<code>m[key]</code>来读取一个不存在的元素的时候将返回零值(<code>nil</code>)\n\n使用<code>elem, ok := m[key]</code>读取一个不存在的键的时候<code>elem</code>为零值,<code>ok</code>为<code>false</code>，这用于判断一个元素是否存在在映射中\n\n注意\n\n<ul>\n<li>创建结构体实例时没被赋值的属性会被赋零值</li>\n<li>结构体的指针可以省略<code>*</code>前缀来访问,比如<code>*p.X</code>可以直接写成<code>p.X</code></li>\n<li>通过<code>make</code>函数可以初始化一个映射实例以备后续使用</li>\n<li>映射的零值为 <code>nil</code>.<code>nil</code> 映射既没有键,也不能添加键</li>\n<li>如果元素的值类型是个类型名则在<strong>直接赋值</strong>时可以省略(通过<code>make</code>创建后单个元素赋值不可省略)</li>\n</ul>\n\n<pre><code class=\"language-go line-numbers\">package main\n\nimport (\n    \"fmt\"\n)\n\ntype Vertex struct {\n    X int\n    Y int\n}\n\nfunc main() {\n    v := Vertex{1, 2}\n    v.X = 4\n    fmt.Println(v.X)\n\n    v2 := &amp;v\n    v2.X = 6\n    fmt.Println(v.X)\n\n    p := Vertex{X: 1}\n    fmt.Println(p)\n\n    m := make(map[string]Vertex)\n\n    m[\"t\"] = Vertex{\n        1, 2,\n    }\n\n    h := map[string]Vertex{\n        \"d\": {\n            3, 4,\n        },\n    }\n    fmt.Println(m[\"t\"])\n    fmt.Println(h[\"d\"])\n    v, ok := m[\"t\"]\n    fmt.Println(\"The value:\", v, \"Present?\", ok)\n    delete(m, \"t\")\n    v, ok = m[\"t\"]\n    fmt.Println(\"The value:\", v, \"Present?\", ok)\n}\n</code></pre>\n\n<h3>数组与切片</h3>\n\n<ol>\n<li>使用<code>var 变量名 [长度]类型</code>语法定义数组</li>\n<li>使用<code>{数组}[开始索引:结束索引]</code>语法从数组中截取切片(切片不包含结束索引)</li>\n<li>使用<code>var 变量名 []类型</code>语法定义切片</li>\n<li>使用<code>len</code>获取切片长度,使用<code>caps</code>获取切片容量</li>\n<li>使用<code>make([]{类型},{长度}?,{容量})</code>的语法可创建切片(动态数组)</li>\n<li>切片可以是二维数组,用法与php的二维数组差不多</li>\n<li><code>append</code>函数(语法: <code>func append(s []T, vs ...T) []T</code>)可以给切片追加元素</li>\n<li>在<code>for</code>循环中使用<code>range</code>可遍历切片或数组,每次迭代都会返回当前元素的索引和值,语法:<code>for {索引}, {元素值} := range {切片/映射}</code></li>\n</ol>\n\n注意\n\n<ul>\n<li>语法: ,.。返回的切片会指向这个新分配的数组,</p></li>\n<li><p>数组长度是固定不可改变的,所以一般情况下我们会用切片代替</p></li>\n<li>相对于数组的定义切片仅仅去除了方括号中的长度</li>\n<li>切片是对数组的引用,改变切片中的元素也就改变了数组中的这个元素</li>\n<li>直接创建切片后go会自动创建其底层数组</li>\n<li>切片默认<code>开始索引</code>为0,而<code>结束索引</code>为该切片长度,也可以都不设置<code>[:]</code>,这样就输出原切片</li>\n<li>设置<code>结束索引</code>截取切片不会改变容量,设置<code>开始索引</code>截取则会改变容量</li>\n<li>切片的零值为<code>nil</code>(比如定义后没有赋值),也就是长度和容量为 0 且没有底层数组</li>\n<li><code>append</code>的元素参数是解构参数,可以一次给切片添加多个元素</li>\n<li>使用<code>append</code>添加元素当切片的底层数组r容量不够,它就会分配一个更大的数组,这时切片长度(<code>len</code>)就是元素的总数,而容量(<code>cap</code>)是随机的</li>\n<li>与es6+/ts的<code>map</code>的遍历方法非常相似的一点是<code>range</code>可以通过<code>_</code>来忽略元素的索引或值,如果只要索引则直接忽略第二个变量即可</li>\n</ul>\n\n<pre><code class=\"language-go line-numbers\">package main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n\n    // 使用`var 变量名 [长度]类型`所以一般情况下我们会用切片代替\n    s := [6]int{2, 3, 5, 7, 11}\n    s[5] = 1\n    var p []int = s[1:4]\n    p[2] = 100\n    fmt.Println(s)\n    fmt.Println(p)\n\n    i := []struct {\n        x int\n        y bool\n    }{{1, true}, {2, false}, {2, true}}\n\n    j := i[1:]\n\n    fmt.Println(i)\n\n    fmt.Println(j)\n\n    n := []int{2, 3, 5, 7, 11, 13}\n    printSlice(n)\n\n    // 截取切片使其长度为 0\n    n = n[:0]\n    printSlice(n)\n\n    // 拓展其长度\n    n = n[:4]\n    printSlice(n)\n\n    // 舍弃前两个值\n    n = n[2:]\n    printSlice(n)\n\n    var k []int\n    fmt.Println(s, len(k), cap(k))\n    if k == nil {\n        fmt.Println(\"nil!\")\n    }\n\n    a := make([]int, 5)\n    printfSlice(\"a\", a)\n\n    b := make([]int, 0, 5)\n    printfSlice(\"b\", b)\n\n    c := b[:2]\n    printfSlice(\"c\", c)\n\n    d := c[2:5]\n    printfSlice(\"d\", d)\n\n    m := [][]string{\n        {\"a\", \"b\"},\n        {\"c\", \"d\"},\n    }\n\n    // 两个玩家轮流打上 X 和 O\n    m[0][1] = \"e\"\n    fmt.Println(m)\n\n    var h []int\n    // 添加一个空切片\n    h = append(h, 0)\n    printSlice(h)\n\n    // 这个切片会按需增长\n    h = append(h, 1)\n    printSlice(h)\n    h = append(h, 2, 3, 4, 5, 6)\n    printSlice(h)\n\n    var pow = []int{1, 2, 4, 8, 16, 32, 64, 128}\n\n    for i, v := range pow {\n        fmt.Printf(\"2**%d = %d\\n\", i, v)\n    }\n\n    for _, value := range pow {\n        fmt.Printf(\"%d\\n\", value)\n    }\n    for i := range pow {\n        fmt.Printf(\"%d\\n\", i)\n    }\n}\n\nfunc printSlice(s []int) {\n    fmt.Printf(\"len=%d cap=%d %v\\n\", len(s), cap(s), s)\n}\n\nfunc printfSlice(s string, x []int) {\n    fmt.Printf(\"%s len=%d cap=%d %v\\n\",\n        s, len(x), cap(x), x)\n}\n</code></pre>\n\n<h3>方法与接口</h3>\n\n<blockquote>\n  <p>接口,方法中指针和值的转换是比较难记的,最简单的方法是在没有特殊要求下全部统一使用指针方式\n</blockquote>\n\n在go中没有类这个概念,方法就是一类带特殊的 <strong>接收者</strong> 参数的函数\n\n<ol>\n<li>使用<code>func ({接受者} {结构体类型}) {方法名}(...参数) 返回值类型 {}</code>来定义方法</li>\n<li>方法就是一个函数,可以是正常函数写法,也可以通过接受者实现</li>\n<li>方法的接受者不仅可以是结构体实力,也可以是自定义类型</li>\n<li>方法的接受者可以是一个指针,这样就可以在方法内部修改它的接受者</li>\n<li>接口是由一组方法签名定义的集合,使用<code>type 接口名称 interface {方法列表}</code>语法定义</li>\n<li>接口可以作为一个普通类型使用,比如在函数中作为参数的类型</li>\n<li>使用<code>interface{}</code>定义空接口,空接口接收任何类型的值</li>\n<li><code>t := i.(T)</code>用于类型断言并把<code>i</code>赋值给<code>t</code>,类似于ts中的<code>as type</code>或<code>&lt;type&gt;</code></li>\n<li>使用<code>switch v := i.(type) {...}</code>来定义类型选择器</li>\n</ol>\n\n注意\n\n<ul>\n<li>方法的接受者不能为内建类型</li>\n<li>接收者的类型定义和方法声明必须在同一包内</li>\n<li>由于方法经常需要修改它的接收者并且为了避免每次调用方法都需要复制接受者,所以指针接受者往往更加常用</li>\n<li>以指针为接受者的方法可直接使用变量值<code>v</code>或指针<code>&amp;v</code>调用,方法会根据接受者类型自动转换</li>\n<li>以值为接受者的方法可使用指针<code>&amp;v</code>或值调用,方法会根据接受者类型自动转换</li>\n<li>以指针为参数的函数则必须要使用<code>&amp;v</code>转换为指针后作为参数传入</li>\n<li>接口类型中的方法其接收者如果是个指针则其调用者必须也是指针</li>\n<li>接口类型中的方法其接收者如果是个值则其调用者可以是指针也可以是值,方法会自动转换</li>\n<li>go的接口是隐式声明的,即一个方法接收者类型实现了一个接口的所有方法,那就相当于其实现了该接口</li>\n<li>接口可用于参数的类型提示</li>\n<li>接收者为零值,方法仍然可被调用,可以在内部判断是否已被赋值</li>\n<li>直接调用未赋值的接口实例会运行错误,因为实例并未被实际方法所实现</li>\n<li>如果类型断言中<code>i</code>不一定是<code>T</code>,则需要使用<code>t, ok := i.(T)</code>语法来根据<code>ok</code>判断,如果不是则<code>ok</code>为<code>false</code>,<code>t</code>为<code>T</code>类型的零值</li>\n<li>于TS一样,在类型选择器中<code>case</code>会根据<code>type</code>来缩小类型范围,使变量值在类型提示中会使用<code>case</code>到的类型,<code>default</code>则与<code>i</code>类型相同</li>\n</ul>\n\n<pre><code class=\"language-go line-numbers\">package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\ntype Vertex struct {\n    X, Y float64\n}\n\ntype MyFloat float64\n\ntype I interface {\n    M()\n}\n\ntype T struct {\n    S string\n}\n\n// 此方法表示类型 T 实现了接口 I，但我们无需显式声明此事。\nfunc (t *T) M() {\n    fmt.Println(t.S)\n}\n\n// 方法定义\nfunc (v Vertex) Abs() float64 {\n    return v.X + v.Y\n}\n\n// 使用函数替代写法\nfunc Abs(v Vertex) float64 {\n    return v.X + v.Y\n}\n\n// 自定义类型方法\nfunc (f MyFloat) Abs() float64 {\n    if f &lt; 0 {\n        return float64(-f)\n    }\n    return float64(f)\n}\n\n// 指针接收者方法\nfunc (v *Vertex) Scale(f float64) {\n    v.X = v.X + f\n    v.Y = v.Y + f\n}\n\n// 指针接收者函数替代写法\nfunc Scale(v *Vertex, f float64) {\n    v.X = v.X + f\n    v.Y = v.Y + f\n}\n\n// 值会自动转换成指针\nfunc (v *Vertex) Abs2() float64 {\n    return v.X + v.Y\n}\n\n// 接口定义\ntype H interface {\n    o() float64\n    r() float64\n}\n\n// 定义接口方法的指针实现\nfunc (v *Vertex) o() float64 {\n    if v.X &gt; v.Y {\n        return v.X - v.Y\n    }\n    return v.Y - v.X\n}\n\n// 定义接口方法的变量值实现\nfunc (v Vertex) r() float64 {\n    return v.X * v.Y\n}\n\nfunc (v Vertex) Scale2(f float64) {\n    v.X = v.X + f\n    v.Y = v.Y + f\n}\n\ntype F float64\n\nfunc (f F) M() {\n    fmt.Println(f)\n}\n\nfunc main() {\n    v := Vertex{3, 4}\n    f := MyFloat(-1)\n    fmt.Println(\"f.Abs: \", f.Abs())\n    fmt.Println(\"v.Abs:\", v.Abs())\n    fmt.Println(\"Abs(v):\", Abs(v))\n\n    // 方法中自动转换值为指针,以下方法的调用结果是相同的\n    // p := &amp;v\n    // p.Scale(3)\n    // (*p).Scale(3)\n    // (&amp;v).Scale(3)\n    v.Scale(3)\n    fmt.Println(\"v.Abs after Scale:\", v.Abs())\n\n    // 函数参数无法自动转换,必须使用指针作为参数\n    Scale(&amp;v, 3)\n    fmt.Println(\"Abs(v) after Scale:\", Abs(v))\n\n    // 方法中自动转换指针为值\n    v2 := &amp;Vertex{3, 4}\n\n    v2.Scale2(3)\n    fmt.Println(\"v2.Abs after Scale:\", v2.Abs2())\n\n    // 接口类型中的方法其接收者如果是个指针则其调用者必须也是指针\n    // 所以,var v3 H = Vertex{3, 4}是错误的,因为h的实现方法的接受者是个指针(v *Vertex)\n    var v3 H = &amp;Vertex{3, 4}\n    fmt.Println(\"v3(h).h:\", v3.o())\n    // 接口类型中的方法其接收者如果是个值则其调用者可以是指针也可以是值,方法会自动转换\n    fmt.Println(\"v3(h).r:\", v3.r())\n\n    // 接口是隐式声明的,只要i(值或指针)对应的类型T实现了接口I中的所有方法,那么T就实现了I接口\n    var i I\n\n    i = &amp;T{\"Hello\"}\n    describe(i)\n\n    i = F(math.Pi)\n    describe(i)\n}\n\nfunc describe(i I) {\n    i.M()\n}\n\n</code></pre>\n\n<h3>内建接口</h3>\n\n<strong>Stringer</strong>\n\nStringer用于打印字符串,<code>fmt</code> 包（还有很多包）都通过此接口来打印值\n\n语法\n\n<pre><code class=\"language-go line-numbers\">type Stringer interface {\n    String() string\n}\n</code></pre>\n\n<strong>Error</strong>\n\nerror用于返回返回错误值\n\n<pre><code class=\"language-go line-numbers\">type error interface {\n    Error() string\n}\n</code></pre>\n\n<strong>Reader</strong>\n\n<code>io</code> 包指定了 <code>io.Reader</code> 接口，它表示从数据流的末尾进行读取\n\n<blockquote>\n  Go 标准库包含了该接口的<a class=\"wp-editor-md-post-content-link\" href=\"https://go-zh.org/search?q=Read#Global\">许多实现</a>，包括文件、网络连接、压缩和加密等等\n</blockquote>\n\n<code>io.Reader</code> 接口有一个 <code>Read</code> 方法,定义如下\n\n<pre><code class=\"language-go line-numbers\">func (T) Read(b []byte) (n int, err error)\n</code></pre>\n\n使用示例\n\n<pre><code class=\"line-numbers\">package main\n\nimport \"fmt\"\n\ntype Person struct {\n    Name string\n    Age  int\n}\n\nfunc (p Person) String() string {\n    return fmt.Sprintf(\"%v (%v years)\", p.Name, p.Age)\n}\n\nfunc main() {\n    a := Person{\"Arthur Dent\", 42}\n    z := Person{\"Zaphod Beeblebrox\", 9001}\n    fmt.Println(a, z)\n\n\n}\n\n</code></pre>', '编程基础', '', 'publish', 'open', 'closed', '', 'base', '', '', '2021-11-22 17:34:38', '2021-11-22 09:34:38', '# Go语言实战\r\n\r\n类型转换\r\n\r\n映射与切片对比\r\n\r\n### 包\r\n\r\n包是go代码的文件组织结构\r\n\r\n- 大写字母开头的属性可以被外部调用\r\n\r\n\r\n```go\r\n// ngm/hello.go\r\npackage ngm\r\n\r\nimport &quot;fmt&quot;\r\n\r\nfunc Hello() {\r\n	fmt.Println(&quot;Let&#039;s go&quot;)\r\n}\r\n\r\n// main.go\r\npackage main\r\n\r\nimport (\r\n	&quot;jikebianma.com/goit/ngm&quot;\r\n)\r\n\r\nfunc main() {\r\n	ngm.Hello()\r\n}\r\n\r\n```\r\n\r\n### 函数\r\n\r\n函数是go中唯一的代码逻辑包装器,go没有传统的面向对象中的类,方法等\r\n\r\n函数定义语法\r\n\r\n```go\r\nfunc {函数名}(...参数:类型) 返回值类型\r\n```\r\n\r\n注意\r\n\r\n- 参数类型相同可以只写最后一个的类型\r\n- 可以返回多个值,并且应该直接赋值而不需要初始化\r\n- 可以把内部的变量返回出来,适用于短函数\r\n- 与其它编程语言一样函数支持闭包和变量函数\r\n- 与TS一样闭包函数可以作为返回值并支持透传\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n	&quot;fmt&quot;\r\n\r\n	&quot;jikebianma.com/godemo/ngm&quot;\r\n)\r\n\r\nfunc do(fn func(int, int) int) int {\r\n	return fn(3, 4)\r\n}\r\n\r\nfunc adder() func(int) int {\r\n	sum := 0\r\n	return func(x int) int {\r\n		sum += x\r\n		return sum\r\n	}\r\n}\r\n\r\nfunc main() {\r\n	ngm.Hello()\r\n	_, say := ngm.Sayname(&quot;nangongmo&quot;, &quot;jikebianma&quot;)\r\n	println(say)\r\n\r\n	p := func(x, y int) int {\r\n		return x * y\r\n	}\r\n	fmt.Println(do(p))\r\n\r\n	x := adder()\r\n	fmt.Println(x(1), x(1))\r\n}\r\n\r\n```\r\n\r\n### 变量与常量\r\n\r\n变量使用`var`或`:=`初始化,常量使用`const`定义\r\n\r\n1. 使用`var`声明,声明时初始化的变量可自动推导类型\r\n2. 可只初始化不赋值,如果始终不赋值则为零值(0,false,\"\")\r\n3. 一行可以声明多个变量\r\n4. `:=`可以快捷声明变量,`:=`声明方式方式只在函数内有效\r\n5. 声明变量可以是一个语法块\r\n6. 类型转换:把变量放入类型函数中即可(类型必须可转换)\r\n\r\n```go\r\nvar commentCount, postCount int\r\n\r\nvar (\r\n	isPublishied bool   = false\r\n	categoryName string = &quot;learn-go&quot;\r\n)\r\n\r\nfunc Pvar() {\r\n	commentCount = 6\r\n	postCount = 7\r\n	c, python, java := true, false, &quot;no!&quot;\r\n\r\n  fmt.Println(float64(commentCount), postCount, isPublishied, categoryName, c, python, java)\r\n}\r\n```\r\n\r\n### 逻辑\r\n\r\ngo的逻辑运算包括`if`,`else`,`for`,`switch`\r\n\r\n- `if`与`for`的条件外围不需要加小括号`()`\r\n- `for`初始化语句和后置语句是可选的\r\n- 没有`while`语句,用`for`去除两端语句就是`while`\r\n- `for` 直接加大括号就是无限循环\r\n- `if`条件中可执行一个表达式,比如声明变量,此变量只在`if`内部有效\r\n- `switch`不需要`case`语句\r\n- 没有条件的 switch 同 `switch true` 一样\r\n- 使用`defer`语句的函数会在所在函数全部执行完毕后再执行\r\n- `defer`语句函数会按照后进先出的顺序调用\r\n\r\n```go\r\npackage main\r\n\r\nimport &quot;fmt&quot;\r\n\r\nfunc main() {\r\n    defer fmt.Println(&quot;done&quot;)\r\n	for i := 0; i &lt; 10; i++ {\r\n		defer fmt.Println(i)\r\n	}\r\n	defer fmt.Println(&quot;counting&quot;)\r\n    \r\n	sum := 0\r\n	for i := 0; i &lt; 10; i++ {\r\n		sum += i\r\n	}\r\n	fmt.Println(sum)\r\n\r\n	sum = 1\r\n	for sum &lt; 100 {\r\n		sum += sum\r\n	}\r\n	fmt.Println(sum)\r\n	// for {\r\n	   // 无限循环\r\n	// }\r\n	\r\n	fmt.Println(\r\n		pow(3, 2, 10),\r\n		pow(3, 3, 20),\r\n	)\r\n    \r\n    fmt.Println(&quot;When&#039;s Saturday?&quot;)\r\n	today := time.Now().Weekday()\r\n	switch time.Saturday {\r\n	case today + 0:\r\n		fmt.Println(&quot;Today.&quot;)\r\n	case today + 1:\r\n		fmt.Println(&quot;Tomorrow.&quot;)\r\n	case today + 2:\r\n		fmt.Println(&quot;In two days.&quot;)\r\n	default:\r\n		fmt.Println(&quot;Too far away.&quot;)\r\n	}\r\n\r\n	t := time.Now()\r\n	switch {\r\n	case t.Hour() &lt; 12:\r\n		fmt.Println(&quot;Good morning!&quot;)\r\n	case t.Hour() &lt; 17:\r\n		fmt.Println(&quot;Good afternoon.&quot;)\r\n	default:\r\n		fmt.Println(&quot;Good evening.&quot;)\r\n	}\r\n}\r\n\r\n```\r\n\r\n### 指针\r\n\r\n指针是一个变量的内存地址\r\n\r\n- 使用`&{变量}`赋值一个指针,比如`p = &i`,`p`就是`i`的内存地址\r\n- 通过`*{指针变量}`获取这个变量的值\r\n- 使用`var p *{类型}`可以初始化一个指针类型的变量\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n	&quot;fmt&quot;\r\n)\r\n\r\nfunc main() {\r\n	x, y := 10, 15\r\n\r\n	s := &amp;x\r\n	fmt.Println(*s)\r\n	*s = 20\r\n	fmt.Println(x)\r\n\r\n	s = &amp;y\r\n	*s = *s / 5\r\n	fmt.Println(y)\r\n    \r\n}\r\n\r\n```\r\n\r\n### 结构体与映射\r\n\r\n结构体类似ts中的对象类型,只是使用`struct`定义的一组键值对\r\n\r\n结构体语法:\r\n\r\n```go\r\n// 定义结构体类型\r\ntype {结构体名称} struct {\r\n    {变量1} {类型1}\r\n	{变量2} {类型2}\r\n}\r\n// 定义零值变量\r\nvar i:{结构体名称}\r\n// 直接初始化变量\r\ni := {结构体名称}{{变量1值},{变量2值}}\r\n```\r\n\r\n映射是结构体的一个键值对集合,类似ts中的`Map`\r\n\r\n映射语法\r\n\r\n```go\r\n// 定义零值变量\r\nvar m map[{索引类型}]{值类型}\r\n\r\n// 直接赋值\r\nvar m = map[索引类型]{值}\r\n\r\n// 通过make创建一个实例\r\nm = make(map[{索引类型}]{值类型})\r\n```\r\n\r\n使用`delete({映射},{键名})`方法可通过键名删除映射一个元素\r\n\r\n通过`m[key]`来读取一个不存在的元素的时候将返回零值(`nil`)\r\n\r\n使用`elem, ok := m[key]`读取一个不存在的键的时候`elem`为零值,`ok`为`false`，这用于判断一个元素是否存在在映射中\r\n\r\n注意\r\n\r\n- 创建结构体实例时没被赋值的属性会被赋零值\r\n- 结构体的指针可以省略`*`前缀来访问,比如`*p.X`可以直接写成`p.X`\r\n- 通过`make`函数可以初始化一个映射实例以备后续使用\r\n- 映射的零值为 `nil`.`nil` 映射既没有键,也不能添加键\r\n- 如果元素的值类型是个类型名则在**直接赋值**时可以省略(通过`make`创建后单个元素赋值不可省略)\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n	&quot;fmt&quot;\r\n)\r\n\r\ntype Vertex struct {\r\n	X int\r\n	Y int\r\n}\r\n\r\nfunc main() {\r\n	v := Vertex{1, 2}\r\n	v.X = 4\r\n	fmt.Println(v.X)\r\n\r\n	v2 := &amp;v\r\n	v2.X = 6\r\n	fmt.Println(v.X)\r\n\r\n	p := Vertex{X: 1}\r\n	fmt.Println(p)\r\n\r\n	m := make(map[string]Vertex)\r\n\r\n	m[&quot;t&quot;] = Vertex{\r\n		1, 2,\r\n	}\r\n\r\n	h := map[string]Vertex{\r\n		&quot;d&quot;: {\r\n			3, 4,\r\n		},\r\n	}\r\n	fmt.Println(m[&quot;t&quot;])\r\n	fmt.Println(h[&quot;d&quot;])\r\n	v, ok := m[&quot;t&quot;]\r\n	fmt.Println(&quot;The value:&quot;, v, &quot;Present?&quot;, ok)\r\n	delete(m, &quot;t&quot;)\r\n	v, ok = m[&quot;t&quot;]\r\n	fmt.Println(&quot;The value:&quot;, v, &quot;Present?&quot;, ok)\r\n}\r\n```\r\n\r\n### 数组与切片\r\n\r\n1. 使用`var 变量名 [长度]类型`语法定义数组\r\n2. 使用`{数组}[开始索引:结束索引]`语法从数组中截取切片(切片不包含结束索引)\r\n3. 使用`var 变量名 []类型`语法定义切片\r\n4. 使用`len`获取切片长度,使用`caps`获取切片容量\r\n5. 使用`make([]{类型},{长度}?,{容量})`的语法可创建切片(动态数组)\r\n6. 切片可以是二维数组,用法与php的二维数组差不多\r\n7. `append`函数(语法: `func append(s []T, vs ...T) []T`)可以给切片追加元素\r\n8. 在`for`循环中使用`range`可遍历切片或数组,每次迭代都会返回当前元素的索引和值,语法:`for {索引}, {元素值} := range {切片/映射}`\r\n\r\n注意\r\n\r\n- 语法: ,.。返回的切片会指向这个新分配的数组,\r\n\r\n- 数组长度是固定不可改变的,所以一般情况下我们会用切片代替\r\n- 相对于数组的定义切片仅仅去除了方括号中的长度\r\n- 切片是对数组的引用,改变切片中的元素也就改变了数组中的这个元素\r\n- 直接创建切片后go会自动创建其底层数组\r\n- 切片默认`开始索引`为0,而`结束索引`为该切片长度,也可以都不设置`[:]`,这样就输出原切片\r\n- 设置`结束索引`截取切片不会改变容量,设置`开始索引`截取则会改变容量\r\n- 切片的零值为`nil`(比如定义后没有赋值),也就是长度和容量为 0 且没有底层数组\r\n- `append`的元素参数是解构参数,可以一次给切片添加多个元素\r\n- 使用`append`添加元素当切片的底层数组r容量不够,它就会分配一个更大的数组,这时切片长度(`len`)就是元素的总数,而容量(`cap`)是随机的\r\n- 与es6+/ts的`map`的遍历方法非常相似的一点是`range`可以通过`_`来忽略元素的索引或值,如果只要索引则直接忽略第二个变量即可\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n	\"fmt\"\r\n)\r\n\r\nfunc main() {\r\n\r\n	// 使用`var 变量名 [长度]类型`所以一般情况下我们会用切片代替\r\n	s := [6]int{2, 3, 5, 7, 11}\r\n	s[5] = 1\r\n	var p []int = s[1:4]\r\n	p[2] = 100\r\n	fmt.Println(s)\r\n	fmt.Println(p)\r\n\r\n	i := []struct {\r\n		x int\r\n		y bool\r\n	}{{1, true}, {2, false}, {2, true}}\r\n\r\n	j := i[1:]\r\n\r\n	fmt.Println(i)\r\n\r\n	fmt.Println(j)\r\n\r\n	n := []int{2, 3, 5, 7, 11, 13}\r\n	printSlice(n)\r\n\r\n	// 截取切片使其长度为 0\r\n	n = n[:0]\r\n	printSlice(n)\r\n\r\n	// 拓展其长度\r\n	n = n[:4]\r\n	printSlice(n)\r\n\r\n	// 舍弃前两个值\r\n	n = n[2:]\r\n	printSlice(n)\r\n\r\n	var k []int\r\n	fmt.Println(s, len(k), cap(k))\r\n	if k == nil {\r\n		fmt.Println(\"nil!\")\r\n	}\r\n\r\n	a := make([]int, 5)\r\n	printfSlice(\"a\", a)\r\n\r\n	b := make([]int, 0, 5)\r\n	printfSlice(\"b\", b)\r\n\r\n	c := b[:2]\r\n	printfSlice(\"c\", c)\r\n\r\n	d := c[2:5]\r\n	printfSlice(\"d\", d)\r\n\r\n	m := [][]string{\r\n		{\"a\", \"b\"},\r\n		{\"c\", \"d\"},\r\n	}\r\n\r\n	// 两个玩家轮流打上 X 和 O\r\n	m[0][1] = \"e\"\r\n	fmt.Println(m)\r\n\r\n	var h []int\r\n	// 添加一个空切片\r\n	h = append(h, 0)\r\n	printSlice(h)\r\n\r\n	// 这个切片会按需增长\r\n	h = append(h, 1)\r\n	printSlice(h)\r\n	h = append(h, 2, 3, 4, 5, 6)\r\n	printSlice(h)\r\n\r\n	var pow = []int{1, 2, 4, 8, 16, 32, 64, 128}\r\n\r\n	for i, v := range pow {\r\n		fmt.Printf(\"2**%d = %d\\n\", i, v)\r\n	}\r\n\r\n	for _, value := range pow {\r\n		fmt.Printf(\"%d\\n\", value)\r\n	}\r\n	for i := range pow {\r\n		fmt.Printf(\"%d\\n\", i)\r\n	}\r\n}\r\n\r\nfunc printSlice(s []int) {\r\n	fmt.Printf(\"len=%d cap=%d %v\\n\", len(s), cap(s), s)\r\n}\r\n\r\nfunc printfSlice(s string, x []int) {\r\n	fmt.Printf(\"%s len=%d cap=%d %v\\n\",\r\n		s, len(x), cap(x), x)\r\n}\r\n```\r\n\r\n### 方法与接口\r\n\r\n> 接口,方法中指针和值的转换是比较难记的,最简单的方法是在没有特殊要求下全部统一使用指针方式\r\n\r\n在go中没有类这个概念,方法就是一类带特殊的 **接收者** 参数的函数\r\n\r\n1. 使用`func ({接受者} {结构体类型}) {方法名}(...参数) 返回值类型 {}`来定义方法\r\n2. 方法就是一个函数,可以是正常函数写法,也可以通过接受者实现\r\n3. 方法的接受者不仅可以是结构体实力,也可以是自定义类型\r\n4. 方法的接受者可以是一个指针,这样就可以在方法内部修改它的接受者\r\n5. 接口是由一组方法签名定义的集合,使用`type 接口名称 interface {方法列表}`语法定义\r\n6. 接口可以作为一个普通类型使用,比如在函数中作为参数的类型\r\n7. 使用`interface{}`定义空接口,空接口接收任何类型的值\r\n8. `t := i.(T)`用于类型断言并把`i`赋值给`t`,类似于ts中的`as type`或`<type>`\r\n9. 使用`switch v := i.(type) {...}`来定义类型选择器\r\n\r\n注意\r\n\r\n- 方法的接受者不能为内建类型\r\n- 接收者的类型定义和方法声明必须在同一包内\r\n- 由于方法经常需要修改它的接收者并且为了避免每次调用方法都需要复制接受者,所以指针接受者往往更加常用\r\n- 以指针为接受者的方法可直接使用变量值`v`或指针`&v`调用,方法会根据接受者类型自动转换\r\n- 以值为接受者的方法可使用指针`&v`或值调用,方法会根据接受者类型自动转换\r\n- 以指针为参数的函数则必须要使用`&v`转换为指针后作为参数传入\r\n- 接口类型中的方法其接收者如果是个指针则其调用者必须也是指针\r\n- 接口类型中的方法其接收者如果是个值则其调用者可以是指针也可以是值,方法会自动转换\r\n- go的接口是隐式声明的,即一个方法接收者类型实现了一个接口的所有方法,那就相当于其实现了该接口\r\n- 接口可用于参数的类型提示\r\n- 接收者为零值,方法仍然可被调用,可以在内部判断是否已被赋值\r\n- 直接调用未赋值的接口实例会运行错误,因为实例并未被实际方法所实现\r\n- 如果类型断言中`i`不一定是`T`,则需要使用`t, ok := i.(T)`语法来根据`ok`判断,如果不是则`ok`为`false`,`t`为`T`类型的零值\r\n- 于TS一样,在类型选择器中`case`会根据`type`来缩小类型范围,使变量值在类型提示中会使用`case`到的类型,`default`则与`i`类型相同\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n	&quot;fmt&quot;\r\n	&quot;math&quot;\r\n)\r\n\r\ntype Vertex struct {\r\n	X, Y float64\r\n}\r\n\r\ntype MyFloat float64\r\n\r\ntype I interface {\r\n	M()\r\n}\r\n\r\ntype T struct {\r\n	S string\r\n}\r\n\r\n// 此方法表示类型 T 实现了接口 I，但我们无需显式声明此事。\r\nfunc (t *T) M() {\r\n	fmt.Println(t.S)\r\n}\r\n\r\n// 方法定义\r\nfunc (v Vertex) Abs() float64 {\r\n	return v.X + v.Y\r\n}\r\n\r\n// 使用函数替代写法\r\nfunc Abs(v Vertex) float64 {\r\n	return v.X + v.Y\r\n}\r\n\r\n// 自定义类型方法\r\nfunc (f MyFloat) Abs() float64 {\r\n	if f &lt; 0 {\r\n		return float64(-f)\r\n	}\r\n	return float64(f)\r\n}\r\n\r\n// 指针接收者方法\r\nfunc (v *Vertex) Scale(f float64) {\r\n	v.X = v.X + f\r\n	v.Y = v.Y + f\r\n}\r\n\r\n// 指针接收者函数替代写法\r\nfunc Scale(v *Vertex, f float64) {\r\n	v.X = v.X + f\r\n	v.Y = v.Y + f\r\n}\r\n\r\n// 值会自动转换成指针\r\nfunc (v *Vertex) Abs2() float64 {\r\n	return v.X + v.Y\r\n}\r\n\r\n// 接口定义\r\ntype H interface {\r\n	o() float64\r\n	r() float64\r\n}\r\n\r\n// 定义接口方法的指针实现\r\nfunc (v *Vertex) o() float64 {\r\n	if v.X &gt; v.Y {\r\n		return v.X - v.Y\r\n	}\r\n	return v.Y - v.X\r\n}\r\n\r\n// 定义接口方法的变量值实现\r\nfunc (v Vertex) r() float64 {\r\n	return v.X * v.Y\r\n}\r\n\r\nfunc (v Vertex) Scale2(f float64) {\r\n	v.X = v.X + f\r\n	v.Y = v.Y + f\r\n}\r\n\r\ntype F float64\r\n\r\nfunc (f F) M() {\r\n	fmt.Println(f)\r\n}\r\n\r\nfunc main() {\r\n	v := Vertex{3, 4}\r\n	f := MyFloat(-1)\r\n	fmt.Println(&quot;f.Abs: &quot;, f.Abs())\r\n	fmt.Println(&quot;v.Abs:&quot;, v.Abs())\r\n	fmt.Println(&quot;Abs(v):&quot;, Abs(v))\r\n\r\n	// 方法中自动转换值为指针,以下方法的调用结果是相同的\r\n	// p := &amp;v\r\n	// p.Scale(3)\r\n	// (*p).Scale(3)\r\n	// (&amp;v).Scale(3)\r\n	v.Scale(3)\r\n	fmt.Println(&quot;v.Abs after Scale:&quot;, v.Abs())\r\n\r\n	// 函数参数无法自动转换,必须使用指针作为参数\r\n	Scale(&amp;v, 3)\r\n	fmt.Println(&quot;Abs(v) after Scale:&quot;, Abs(v))\r\n\r\n	// 方法中自动转换指针为值\r\n	v2 := &amp;Vertex{3, 4}\r\n\r\n	v2.Scale2(3)\r\n	fmt.Println(&quot;v2.Abs after Scale:&quot;, v2.Abs2())\r\n\r\n	// 接口类型中的方法其接收者如果是个指针则其调用者必须也是指针\r\n	// 所以,var v3 H = Vertex{3, 4}是错误的,因为h的实现方法的接受者是个指针(v *Vertex)\r\n	var v3 H = &amp;Vertex{3, 4}\r\n	fmt.Println(&quot;v3(h).h:&quot;, v3.o())\r\n	// 接口类型中的方法其接收者如果是个值则其调用者可以是指针也可以是值,方法会自动转换\r\n	fmt.Println(&quot;v3(h).r:&quot;, v3.r())\r\n\r\n	// 接口是隐式声明的,只要i(值或指针)对应的类型T实现了接口I中的所有方法,那么T就实现了I接口\r\n	var i I\r\n\r\n	i = &amp;T{&quot;Hello&quot;}\r\n	describe(i)\r\n\r\n	i = F(math.Pi)\r\n	describe(i)\r\n}\r\n\r\nfunc describe(i I) {\r\n	i.M()\r\n}\r\n\r\n```\r\n\r\n### 内建接口\r\n\r\n**Stringer**\r\n\r\nStringer用于打印字符串,`fmt` 包（还有很多包）都通过此接口来打印值\r\n\r\n语法\r\n\r\n```go\r\ntype Stringer interface {\r\n    String() string\r\n}\r\n```\r\n**Error**\r\n\r\nerror用于返回返回错误值\r\n\r\n```go\r\ntype error interface {\r\n    Error() string\r\n}\r\n```\r\n\r\n**Reader**\r\n\r\n`io` 包指定了 `io.Reader` 接口，它表示从数据流的末尾进行读取\r\n\r\n> Go 标准库包含了该接口的[许多实现](https://go-zh.org/search?q=Read#Global)，包括文件、网络连接、压缩和加密等等\r\n\r\n`io.Reader` 接口有一个 `Read` 方法,定义如下\r\n\r\n```go\r\nfunc (T) Read(b []byte) (n int, err error)\r\n```\r\n\r\n\r\n\r\n使用示例\r\n\r\n```\r\npackage main\r\n\r\nimport &quot;fmt&quot;\r\n\r\ntype Person struct {\r\n	Name string\r\n	Age  int\r\n}\r\n\r\nfunc (p Person) String() string {\r\n	return fmt.Sprintf(&quot;%v (%v years)&quot;, p.Name, p.Age)\r\n}\r\n\r\nfunc main() {\r\n	a := Person{&quot;Arthur Dent&quot;, 42}\r\n	z := Person{&quot;Zaphod Beeblebrox&quot;, 9001}\r\n	fmt.Println(a, z)\r\n	\r\n	\r\n}\r\n\r\n```\r\n\r\n\r\n', 40, 'https://jikexingkong.com/docs/golang-standard/%e5%9f%ba%e7%a1%80%e8%af%ad%e6%b3%95', 1, 'docs', '', 0),
(145, 1, '2021-11-22 16:18:11', '2021-11-22 08:18:11', '', '协程与并发', '', 'publish', 'open', 'closed', '', '%e5%8d%8f%e7%a8%8b%e4%b8%8e%e5%b9%b6%e5%8f%91', '', '', '2021-11-22 16:18:11', '2021-11-22 08:18:11', '', 40, 'https://jikexingkong.com/docs/golang-standard/%e5%8d%8f%e7%a8%8b%e4%b8%8e%e5%b9%b6%e5%8f%91', 2, 'docs', '', 0),
(146, 1, '2021-11-22 16:19:39', '2021-11-22 08:19:39', '', 'web开发', '', 'publish', 'open', 'closed', '', 'web%e7%bc%96%e7%a8%8b', '', '', '2021-11-22 16:20:42', '2021-11-22 08:20:42', '', 40, 'https://jikexingkong.com/docs/golang-standard/web%e7%bc%96%e7%a8%8b', 3, 'docs', '', 0),
(147, 1, '2021-11-22 16:19:48', '2021-11-22 08:19:48', '', '数据库开发', '', 'publish', 'open', 'closed', '', '%e6%95%b0%e6%8d%ae%e5%ba%93%e5%bc%80%e5%8f%91', '', '', '2021-11-22 16:19:48', '2021-11-22 08:19:48', '', 40, 'https://jikexingkong.com/docs/golang-standard/%e6%95%b0%e6%8d%ae%e5%ba%93%e5%bc%80%e5%8f%91', 4, 'docs', '', 0),
(148, 1, '2021-11-22 16:20:31', '2021-11-22 08:20:31', '', '网络编程', '', 'publish', 'open', 'closed', '', '%e7%bd%91%e7%bb%9c%e7%bc%96%e7%a8%8b', '', '', '2021-11-22 16:20:31', '2021-11-22 08:20:31', '', 40, 'https://jikexingkong.com/docs/golang-standard/%e7%bd%91%e7%bb%9c%e7%bc%96%e7%a8%8b', 5, 'docs', '', 0),
(149, 1, '2021-11-22 17:26:34', '2021-11-22 09:26:34', '<h1>初始化golang项目</h1>\n\n<h2>开发环境</h2>\n\n推荐使用module组织golang代码,使用vscode编码,具体可参考<a class=\"wp-editor-md-post-content-link\" href=\"https://golang.org/doc/code.html\">官方文档</a>\n\n<h3>安装golang</h3>\n\n通过brew安装golang\n\n<pre><code class=\"language-shell line-numbers\">brew install go\n</code></pre>\n\n升级golang版本\n\n<pre><code class=\"language-shell line-numbers\">brew upgrade go\n</code></pre>\n\n查看版本\n\n<pre><code class=\"language-shell line-numbers\">go version\n</code></pre>\n\n设置仓库代理\n\n<blockquote>\n  除了以下方法,你也可以通过socket进行本地代理\n</blockquote>\n\n<pre><code class=\"language-shell line-numbers\"># 设置 Go Proxy 代理\ngo env -w GOPROXY=https://goproxy.io,direct\n</code></pre>\n\n<h3>环境变量</h3>\n\ngolang项目的层次为 repository(仓库)->module(模块)->package(包)->source file(源代码文件)\n\n初始化一个golang模块\n\n<pre><code class=\"language-shell line-numbers\">$ cd ~/Code\n$ mkdir hello &amp;&amp; cd $_\n$ go mod init github.com/pincman/go-hello\n$ touch hello.go &amp;&amp; vi hello.go\n</code></pre>\n\n在<code>hello.go</code>中写入以下代码\n\n<pre><code class=\"language-go line-numbers\">package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, world.\")\n}\n</code></pre>\n\n运行安装命令\n\n<pre><code class=\"language-shell line-numbers\">go install github.com/pincman/go-hello\n</code></pre>\n\n或者通过当前目录安装\n\n<pre><code class=\"line-numbers\">go install .\n</code></pre>\n\n或者\n\n<pre><code class=\"language-shell line-numbers\">go install \n</code></pre>\n\n以上命令会编译出一个<code>hello</code>二进制可执行文件,此文件的位置由<code>GOPATH</code>和<code>GOPATH</code>控制，通过以下顺序来确定<code>hello</code>的位置\n\n<ol>\n<li>如果设置了<code>GOBIN</code>,则直接放入<code>GOBIN</code>路径下</li>\n<li>如果设置了<code>GOPATH</code>,则放入<code>GOPATH</code>列表的第一个路径下的<code>bin</code>目录下</li>\n<li>如果都没有设置,则放入<code>GOPATH</code>的默认路径<code>$HOME/go</code>或者<code>%USERPROFILE%\\go</code>(windows)下的<code>bin</code>目录下</li>\n</ol>\n\n配置以上环境变量可以通过<code>~/.zhsrc</code>,<code>/etc/profile</code>等方式进行本地化配置,也可以使用以下命令直接配置(<strong>推荐</strong>)\n\n<pre><code class=\"language-shell line-numbers\">go env -w GOBIN=/somewhere/else/bin\n</code></pre>\n\n查看所有golang的环境变量\n\n<pre><code class=\"language-shell line-numbers\">go env\n</code></pre>\n\n取消一个环境变量的设置\n\n<pre><code class=\"language-shell line-numbers\">go env -u GOBIN\n</code></pre>\n\n把放置可执行文件的路径加入系统可执行文件路径\n\n<pre><code class=\"language-shell line-numbers\">export PATH=$PATH:$(dirname $(go list -f \'{{.Target}}\' .))\n</code></pre>\n\n如果想永久性生效,则需要把上面的命令追加到<code>~/.zshrc</code>等环境变量文件,然后<code>source ~/.zshrc</code>\n\n尝试执行一下\n\n<pre><code class=\"language-shell line-numbers\">$ helloHello, world.\n</code></pre>\n\n<h3>导入包</h3>\n\n<h4>基本命令</h4>\n\n<ul>\n<li><code>go build</code>用于编译go代码并且放入本地缓存中</li>\n<li><code>go run</code>用于编译并运行go代码</li>\n<li><code>go install</code>用于编译并生成二进制文件放入指定目录中</li>\n</ul>\n\n<h4>导入本地包</h4>\n\n<pre><code class=\"language-shell line-numbers\">$ mkdir morestrings &amp;&amp; touch reverse.go\n</code></pre>\n\n在<code>reverse.go</code>中写入如下代码\n\n<blockquote>\n  类似ReverseRunes这种大写字母开头的函数可以被其它包导入使用,是公开函数\n</blockquote>\n\n<pre><code class=\"language-go line-numbers\">// Package morestrings implements additional functions to manipulate UTF-8// encoded strings, beyond what is provided in the standard \"strings\" package.package morestrings// ReverseRunes returns its argument string reversed rune-wise left to right.func ReverseRunes(s string) string {    r := []rune(s)  for i, j := 0, len(r)-1; i &lt; len(r)/2; i, j = i+1, j-1 {        r[i], r[j] = r[j], r[i] }   return string(r)}\n</code></pre>\n\n写好代码后编译一下\n\n<pre><code class=\"language-shell line-numbers\">go build # 这不会产生输出文件,是将已编译的程序包保存在本地构建缓存中。\n</code></pre>\n\n现在修改一下<code>hello.go</code>并且再次安装执行\n\n<pre><code class=\"language-go line-numbers\">package main\nimport (    \"fmt\"   \"github.com/pincman/go-hello/morestrings\")\nfunc main() {   \n  fmt.Println(morestrings.ReverseRunes(\"!oG ,olleH\"))\n}\n</code></pre>\n\n<pre><code class=\"line-numbers\">$ go install github.com/pincman/go-hello &amp;&amp; helloHello, Go!\n</code></pre>\n\n<h4>导入远程包</h4>\n\n修改<code>hello.go</code>\n\n<pre><code class=\"language-go line-numbers\">package mainimport (    \"fmt\"   \"example.com/user/hello/morestrings\"    \"github.com/google/go-cmp/cmp\")func main() {    fmt.Println(morestrings.ReverseRunes(\"!oG ,olleH\")) fmt.Println(cmp.Diff(\"Hello World\", \"Hello Go\"))}\n</code></pre>\n\n使用<code>go install</code>,<code>go build</code>,<code>go run</code>等命令后会自动下载此远程依赖,并把其最新的版本号和依赖地址写入<code>go.mod</code>文件\n\n下载后的第三方模块的代码包将放入<code>GOPATH</code>中,如果要清除需要执行<code>go clean -modcache</code>命令\n\n<h2>vscode配置</h2>', '开发环境', '', 'inherit', 'closed', 'closed', '', '143-autosave-v1', '', '', '2021-11-22 17:26:34', '2021-11-22 09:26:34', '# 初始化golang项目\n\n## 开发环境\n\n推荐使用module组织golang代码,使用vscode编码,具体可参考[官方文档](https://golang.org/doc/code.html)\n\n### 安装golang\n\n通过brew安装golang\n\n```shell\nbrew install go\n```\n\n升级golang版本\n\n```shell\nbrew upgrade go\n```\n\n查看版本\n\n```shell\ngo version\n```\n\n设置仓库代理\n\n> 除了以下方法,你也可以通过socket进行本地代理\n\n```shell\n# 设置 Go Proxy 代理\ngo env -w GOPROXY=https://goproxy.io,direct\n```\n\n### 环境变量\n\ngolang项目的层次为 repository(仓库)->module(模块)->package(包)->source file(源代码文件)\n\n初始化一个golang模块\n\n```shell\n$ cd ~/Code\n$ mkdir hello && cd $_\n$ go mod init github.com/pincman/go-hello\n$ touch hello.go && vi hello.go\n```\n\n在`hello.go`中写入以下代码\n\n```go\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() {\n    fmt.Println(&quot;Hello, world.&quot;)\n}\n```\n\n运行安装命令\n\n```shell\ngo install github.com/pincman/go-hello\n```\n\n或者通过当前目录安装\n\n```\ngo install .\n```\n\n或者\n\n```shell\ngo install \n```\n\n以上命令会编译出一个`hello`二进制可执行文件,此文件的位置由`GOPATH`和`GOPATH`控制，通过以下顺序来确定`hello`的位置\n\n1. 如果设置了`GOBIN`,则直接放入`GOBIN`路径下\n2. 如果设置了`GOPATH`,则放入`GOPATH`列表的第一个路径下的`bin`目录下\n3. 如果都没有设置,则放入`GOPATH`的默认路径`$HOME/go`或者`%USERPROFILE%\\go`(windows)下的`bin`目录下\n\n配置以上环境变量可以通过`~/.zhsrc`,`/etc/profile`等方式进行本地化配置,也可以使用以下命令直接配置(**推荐**)\n\n```shell\ngo env -w GOBIN=/somewhere/else/bin\n```\n\n查看所有golang的环境变量\n\n```shell\ngo env\n```\n\n取消一个环境变量的设置\n\n```shell\ngo env -u GOBIN\n```\n\n把放置可执行文件的路径加入系统可执行文件路径\n\n```shell\nexport PATH=$PATH:$(dirname $(go list -f &#039;{{.Target}}&#039; .))\n```\n\n如果想永久性生效,则需要把上面的命令追加到`~/.zshrc`等环境变量文件,然后`source ~/.zshrc`\n\n尝试执行一下\n\n```shell\n$ helloHello, world.\n```\n\n### 导入包\n\n#### 基本命令\n\n- `go build`用于编译go代码并且放入本地缓存中\n- `go run`用于编译并运行go代码\n- `go install`用于编译并生成二进制文件放入指定目录中\n\n#### 导入本地包\n\n```shell\n$ mkdir morestrings &amp;&amp; touch reverse.go\n```\n\n在`reverse.go`中写入如下代码\n\n> 类似ReverseRunes这种大写字母开头的函数可以被其它包导入使用,是公开函数\n\n```go\n// Package morestrings implements additional functions to manipulate UTF-8// encoded strings, beyond what is provided in the standard &quot;strings&quot; package.package morestrings// ReverseRunes returns its argument string reversed rune-wise left to right.func ReverseRunes(s string) string {	r := []rune(s)	for i, j := 0, len(r)-1; i &lt; len(r)/2; i, j = i+1, j-1 {		r[i], r[j] = r[j], r[i]	}	return string(r)}\n```\n\n写好代码后编译一下\n\n```shell\ngo build # 这不会产生输出文件,是将已编译的程序包保存在本地构建缓存中。\n```\n\n现在修改一下`hello.go`并且再次安装执行\n\n```go\npackage main\nimport (	&quot;fmt&quot;	&quot;github.com/pincman/go-hello/morestrings&quot;)\nfunc main() {	\n  fmt.Println(morestrings.ReverseRunes(&quot;!oG ,olleH&quot;))\n}\n```\n\n```\n$ go install github.com/pincman/go-hello &amp;&amp; helloHello, Go!\n```\n\n#### 导入远程包\n\n修改`hello.go`\n\n```go\npackage mainimport (	&quot;fmt&quot;	&quot;example.com/user/hello/morestrings&quot;	&quot;github.com/google/go-cmp/cmp&quot;)func main() {	fmt.Println(morestrings.ReverseRunes(&quot;!oG ,olleH&quot;))	fmt.Println(cmp.Diff(&quot;Hello World&quot;, &quot;Hello Go&quot;))}\n```\n\n使用`go install`,`go build`,`go run`等命令后会自动下载此远程依赖,并把其最新的版本号和依赖地址写入`go.mod`文件\n\n下载后的第三方模块的代码包将放入`GOPATH`中,如果要清除需要执行`go clean -modcache`命令\n\n## vscode配置', 143, 'https://jikexingkong.com/?p=149', 0, 'revision', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(152, 1, '2021-11-23 05:52:30', '2021-11-22 21:52:30', '<h1>Node.js列队处理-BullMQ中文教程</h1>\n\n<h2>基本概念</h2>\n\n<h3>Bull是什么?</h3>\n\n<blockquote>\n  任务列队一般用于异步处理视频转码,发送短信等耗时任务,不至于API接口连接卡死\n</blockquote>\n\nBull是一个Node库，它基于 <a class=\"wp-editor-md-post-content-link\" href=\"https://redis.io/\">redis</a>实现了快速而强大的队列系统。\n\n尽管可以使用Redis命令直接实现队列，但是该库提供了一个API，该API可以处理所有底层细节并丰富了Redis基本功能，因此可以轻松处理更复杂的用例。\n\n如果您不熟悉队列，您可能会想知道为什么需要它。队列可以用一种优雅的方式解决许多不同的问题，比如在微服务之间创建健壮的通信通道来平滑地处理CPU高峰，或将繁重的工作从一台服务器转移到许多较小的工作区间等。\n\n<h3>开始</h3>\n\n安装Bull:\n\n<pre><code class=\"language-shell line-numbers\">$ npm install bull --save && npm install @types/bull --save-dev\n</code></pre>\n\n或者\n\n<pre><code class=\"language-shell line-numbers\">$ yarn add bull && yarn add --dev @types/bull\n</code></pre>\n\n为了使用bull,你必须先安装Redis.在本地开发环境使用<a class=\"wp-editor-md-post-content-link\" href=\"https://hub.docker.com/_/redis/\">docker</a>可以方便的安装.Bull默认使用 <code>localhost:6379</code>来连接Redis.\n\n<h4>简单列队</h4>\n\n只需通过实例化Bull实例即可创建队列:\n\n<pre><code class=\"language-javascript line-numbers\">const myFirstQueue = new Bull(\'my-first-queue\');\n</code></pre>\n\n一个队列实例通常可以有 3 个主要不同的角色：任务生产者、任务消费者或以及事件监听器。\n\n尽管一个给定的实例可用于 3 个角色，但通常生产者和消费者被创建为为多个实例。通过给定队列的例化名称（如上面的示例中的<code>my-first-queue</code>）来引用它，一个列队可以具有许多生产者、许多使用者和许多侦听器。一个重要的方面是，生产者可以添加任务到队列，即使当时没有可用的消费者：队列提供异步通信，这是使它们如此强大的功能之一。\n\n相反，您可以让一个或多个消费者使用队列中的任务，这些任务将按指定顺序消费任务：FIFO（默认值）、FIFO 或根据优先级消费任务。\n\n关于工作区间，它们可以在同一个或不同的进程中、在同一台计算机或群集中运行。Redis 将作为一个公共端点，只要消费者或生产者可以连接到 Redis，他们将能够合作处理任务。\n\n<h4>生产者</h4>\n\n任务生产者只是将任务添加到队列的一些Node程序，如：\n\n<pre><code class=\"language-javascript line-numbers\">const myFirstQueue = new Bull(\'my-first-queue\');\n\nconst job = await myFirstQueue.add({\n  foo: \'bar\'\n});\n</code></pre>\n\n如您所看到的，任务只是一个 javascript 对象。此对象必须可被序列化，更具体地说应该可以被<code>JSON.stringify</code>转化为字符串，因为这就是它存储在 Redis 中的形式。\n\n也可以在任务数据对象参数之后提供一个选项对象参数，后面我们将介绍这一点。\n\n<h4>消费者</h4>\n\n消费者或工作区间，只不过是一个Node程序，它定义了一个流程函数，如：\n\n<pre><code class=\"language-javascript line-numbers\">const myFirstQueue = new Bull(\'my-first-queue\');\n\nmyFirstQueue.process(async (job) => {\n  return doSomething(job.data);\n});\n</code></pre>\n\n每次工作区间空闲且队列中有任务被等待处理时，都会调用该任务的<code>process</code>函数。由于添加任务时消费者不需要在线(添加和消费是异步的)，因此会有许多任务堆积在队列中等待消费，直到全部处理完。\n\n在上面的示例中，我们将<code>process</code>函数定义为 <code>async</code>，这是强烈建议的定义方法。如果您的 Node 运行时不支持异步/等待，那么您只需在进程函数的末尾返回一个<code>Promise</code>，以取得类似的结果。\n\n<code>process</code>函数返回的值将存储在任务<code>job</code>实例中，方便后面可以访问，例如在监听器的<code>completed</code>事件中可以通过<code>progress</code>函数来访问<code>job</code>实例：\n\n<pre><code class=\"language-javascript line-numbers\">myFirstQueue.process( async (job) => {\n  let progress = 0;\n  for(i = 0; i < 100; i++){\n    await doSomething(job.data);\n    progress += 10;\n    job.progress(progress);\n  }\n});\n</code></pre>\n\n<h4>监听器</h4>\n\n最后，您可以监听队列中触发的事件。如果是本地监听器则只接收在指定的队列实例中生成的通知，如果是全局监听器就会监听指定队列的所有事件。因此，您可以将监听器添加到任何实例，甚至充当消费者或生产者的实例。但请注意，如果队列不是消费者或生产者，则本地事件永远不会触发，在这种情况下，您需要使用全局事件。\n\n<pre><code class=\"language-javascript line-numbers\">const myFirstQueue = new Bull(\'my-first-queue\');\n\n// Define a local completed event\nmyFirstQueue.on(\'completed\', (job, result) => {\n  console.log(`Job completed with result ${result}`);\n})\n</code></pre>\n\n<h4>生命周期</h4>\n\n为了充分利用 Bull 队列的全部潜力，了解任务的生命周期非常重要。从生产者在队列实例上调用<code>add</code>方法的那一刻起，任务进入一个生命周期，该生命周期将处于不同的状态，直到完成或失败（尽管从技术上讲，失败的任务可以重试并获得新的生命周期）。\n\n<img src=\"https://optimalbits.github.io/bull/job-lifecycle.png\" alt=\"Diagram showing job statuses\" />\n\n当任务添加到队列中时，它可处于<strong>等待状态</strong>或<strong>延迟状态</strong>。等待状态其实是一个等待列表，所有列队在处理之前均处于等待状态，延迟状态意味着任务正在等待某些超时或处理失败的任务，延迟任务不会直接处理，而是在工作区间处于空闲状态时，将其放置在等待列表的开头并进行处理。\n\n任务的下一个状态为\"活动\"状态。活动状态由一Redis的<code>set</code>集表示，是当前正在处理的任务，这时它们在<code>process</code>函数中运行。任务可以无限时间的处于处于活动状态，直到过程完成或引发异常，以便任务以\"已完成\"或\"失败\"状态结束。\n\n<h4>停滞任务</h4>\n\n在 Bull中，我们定义了停滞任务的概念。停滞任务虽然正在处理的任务，但 Bull 怀疑流程功能已挂起。当<code>process</code>函数正在处理的任务使 CPU 负载过大时，会导致工作区间无法告诉队列它仍在处理该任务，这时会造成停滞任务。\n\n当任务停滞时，根据任务的设置，任务可由其他空闲工作区间重试，也可以切换到失败状态。\n\n停滞任务可以通过确保进程函数不会使 Node 事件循环运行时间太长，或使用单独的<a class=\"wp-editor-md-post-content-link\" href=\"#独立进程\">沙盒处理器</a>来避免。\n\n<h3>事件</h3>\n\nBull 中的队列拥有几个事件，这些事件在许多用例中很有用。事件可以是一个列队实例(一个工作区间)的本地事件，例如，如果一个任务在给定工作区间内完成，则将只为该实例发出本地事件。但是，可以监听所有事件，例如在本地事件名称前加上<code>global:</code>前缀。然后，我们可以监听指定队列的所有工作区间生成的所有事件。\n\n一个本地的<code>completed</code>事件:\n\n<pre><code class=\"language-javascript line-numbers\">queue.on(\'completed\', job => {\n  console.log(`Job with id ${job.id} has been completed`);\n})\n</code></pre>\n\n而下面这样就可以通过全局来监听:\n\n<pre><code class=\"language-javascript line-numbers\">queue.on(\'global:completed\', jobId => {\n  console.log(`Job with id ${jobId} has been completed`);\n})\n</code></pre>\n\n请注意，全局事件的签名与本地事件的签名略有不同，在上面的示例中，它只发送任务的 ID 而不是任务本身的完整实例，这样做是出于性能原因。\n\n可用事件的列表可在[reference文档] (https://github.com/OptimalBits/bull/blob/master/REFERENCE.md#eventsk)中找到。\n\n<h3>列队选项</h3>\n\n队列可以在实例化时可以传入一些选项，例如，您可以指定 Redis 服务器的地址和密码，以及其他一些有用的设置。所有这些设置都在 Bull 的<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/OptimalBits/bull/blob/master/REFERENCE.md#queue\">reference文档</a>中找到，下面我们看一下一些选项的用例\n\n<blockquote>\n  更多详细的API请参考<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/OptimalBits/bull/blob/master/REFERENCE.md#queue\">文档</a>\n</blockquote>\n\n<h4>速率限制</h4>\n\n为创建的队列限制在时间单位中处理的任务数。限制是每个队列定义的，与工作区间数量不一，因此您可以水平缩放，并且仍然能够轻松限制处理速率限制：\n\n<pre><code class=\"language-javascript line-numbers\">// Limit queue to max 1.000 jobs per 5 seconds.\nconst myRateLimitedQueue = new Queue(\'rateLimited\', {\n  limiter: {\n    max: 1000,\n    duration: 5000\n  }\n});\n</code></pre>\n\n当队列达到速率限制时，请求的任务将加入<code>delayed</code>队列。\n\n<h4>命名任务</h4>\n\n可以给任务命名不会改变队列的任何机制，但可获得更清晰的代码以及在UI 工具中的更好可视化：\n\n<pre><code class=\"language-javascript line-numbers\">// Jobs producer\nconst myJob = await transcoderQueue.add(\'image\', { input: \'myimagefile\' });\nconst myJob = await transcoderQueue.add(\'audio\', { input: \'myaudiofile\' });\nconst myJob = await transcoderQueue.add(\'video\', { input: \'myvideofile\' });\n// Worker\ntranscoderQueue.process(\'image\', processImage);\ntranscoderQueue.process(\'audio\', processAudio);\ntranscoderQueue.process(\'video\', processVideo);\n</code></pre>\n\n请记住，每个队列实例都需要为每个命名任务提供<em>一个</em>处理器，否则将抛出异常。\n\n<h4>沙盒处理器</h4>\n\n如上所述，在定义<code>process</code>函数时，还可以提供并发设置。此设置允许工作人员并行处理多个任务。任务仍在同一Node进程中处理，就算处理的OI密集非常高的任务也会处理正常。\n\n但是有时需要处理CPU密集非常高的任务，这可能会锁定Node事件循环太久而导致Bull 可能会停止任务。为了避免这种情况，可以在单独的Node进程中的运行<code>process</code>函数。在这种情况下，并发参数将决定允许运行的并发进程的最大数量。\n\n我们称这种进程为\"沙盒\"进程，这样就算某个进程崩溃也不会影响任何其他进程，并且将自动生成一个新进程来取代它。\n\n<h3>任务类型</h3>\n\nBull 中的默认任务类型是\"FIFO\"（先出），这意味着任务的处理顺序与进入队列的顺序相同。按不同顺序处理任务时这很有用。\n\n<h4>LIFO</h4>\n\nLifo（最后一个先出）表示任务被添加到队列的开头，因此将在工作区间空闲时进行处理。\n\n<pre><code class=\"language-javascript line-numbers\">const myJob = await myqueue.add({ foo: \'bar\' }, { lifo: true });\n</code></pre>\n\n<h4>延迟</h4>\n\n使任务在处理之前延迟一定时间。请注意，延迟参数表示任务在进行处理之前等待的最短时间量。延迟时间过时，任务将移动到列队的开头，并在工作区间空闲时进行处理。\n\n<pre><code class=\"language-javascript line-numbers\">// Delayed 5 seconds\nconst myJob = await myqueue.add({ foo: \'bar\' }, { delay: 5000 });\n</code></pre>\n\n<h4>优先级</h4>\n\n任务可以设置优先级。优先级较高的任务将在优先级较低的任务之前进行处理。最高优先级为 1，数值越大优先级月底。请记住，优先级队列比标准队列慢一点（因为优先级列队的当前插入时间 O(n)的会替代标准队列的O(1))。\n\n<blockquote>\n  上面括号中的n 代表当前在队列中等待的任务数\n</blockquote>\n\n<pre><code class=\"language-javascript line-numbers\">const myJob = await myqueue.add({ foo: \'bar\' }, { priority: 3 });\n</code></pre>\n\n<h4>重复</h4>\n\n可重复任务是特殊任务，根据 cron 规范或时间间隔，可以无限期地重复，直到给定的最大时间或到达重复次数才停止(如果设置这两者的话)。\n\n<pre><code class=\"language-javascript line-numbers\">// Repeat every 10 seconds for 100 times.\nconst myJob = await myqueue.add(\n  { foo: \'bar\' },\n  {\n    repeat: {\n      every: 10000,\n      limit: 100\n    }\n  }\n);\n\n// Repeat payment job once every day at 3:15 (am)\npaymentsQueue.add(paymentsData, { repeat: { cron: \'15 3 * * *\' } });\n</code></pre>\n\n关于可重复任务，有一些重要的注意事项：\n\n<ul>\n<li>如果重复选项相同，Bull 不会添加相同的可重复任务。（注意：任务 ID 是重复选项的一部分，因为：https://github.com/OptimalBits/bull/pull/603，因此传递任务 ID 将允许在队列中插入具有相同 cron 的任务）</li>\n<li>如果没有正在运行的工作区间，则下次工作区间在线时，可重复任务将不累积。</li>\n<li>可重复任务可以通过 <a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/OptimalBits/bull/blob/master/REFERENCE.md#queueremoverepeatable\">removeRepeatable</a>方法删除</li>\n</ul>\n\n<h2>如何使用</h2>\n\n<h3>基本使用</h3>\n\n<pre><code class=\"language-js line-numbers\">var Queue = require(\'bull\');\n\nvar videoQueue = new Queue(\'video transcoding\', \'redis://127.0.0.1:6379\');\nvar audioQueue = new Queue(\'audio transcoding\', {redis: {port: 6379, host: \'127.0.0.1\', password: \'foobared\'}}); // Specify Redis connection using object\nvar imageQueue = new Queue(\'image transcoding\');\nvar pdfQueue = new Queue(\'pdf transcoding\');\n\nvideoQueue.process(function(job, done){\n\n  // job.data contains the custom data passed when the job was created\n  // job.id contains id of this job.\n\n  // transcode video asynchronously and report progress\n  job.progress(42);\n\n  // call done when finished\n  done();\n\n  // or give a error if error\n  done(new Error(\'error transcoding\'));\n\n  // or pass it a result\n  done(null, { framerate: 29.5 /* etc... */ });\n\n  // If the job throws an unhandled exception it is also handled correctly\n  throw new Error(\'some unexpected error\');\n});\n\naudioQueue.process(function(job, done){\n  // transcode audio asynchronously and report progress\n  job.progress(42);\n\n  // call done when finished\n  done();\n\n  // or give a error if error\n  done(new Error(\'error transcoding\'));\n\n  // or pass it a result\n  done(null, { samplerate: 48000 /* etc... */ });\n\n  // If the job throws an unhandled exception it is also handled correctly\n  throw new Error(\'some unexpected error\');\n});\n\nimageQueue.process(function(job, done){\n  // transcode image asynchronously and report progress\n  job.progress(42);\n\n  // call done when finished\n  done();\n\n  // or give a error if error\n  done(new Error(\'error transcoding\'));\n\n  // or pass it a result\n  done(null, { width: 1280, height: 720 /* etc... */ });\n\n  // If the job throws an unhandled exception it is also handled correctly\n  throw new Error(\'some unexpected error\');\n});\n\npdfQueue.process(function(job){\n  // Processors can also return promises instead of using the done callback\n  return pdfAsyncProcessor();\n});\n\nvideoQueue.add({video: \'http://example.com/video1.mov\'});\naudioQueue.add({audio: \'http://example.com/audio1.mp3\'});\nimageQueue.add({image: \'http://example.com/image1.tiff\'});\n</code></pre>\n\n<h3>使用promises</h3>\n\n你可以返回 promises来替代 <code>done</code> 回调函数:\n\n<pre><code class=\"language-javascript line-numbers\">videoQueue.process(function(job){ // don\'t forget to remove the done callback!\n  // Simply return a promise\n  return fetchVideo(job.data.url).then(transcodeVideo);\n\n  // Handles promise rejection\n  return Promise.reject(new Error(\'error transcoding\'));\n\n  // Passes the value the promise is resolved with to the \"completed\" event\n  return Promise.resolve({ framerate: 29.5 /* etc... */ });\n\n  // If the job throws an unhandled exception it is also handled correctly\n  throw new Error(\'some unexpected error\');\n  // same as\n  return Promise.reject(new Error(\'some unexpected error\'));\n});\n</code></pre>\n\n<h3>独立进程</h3>\n\n<code>process</code>函数可以运行在独立进程中 . 这样做有一下几个优点:\n\n<ul>\n<li>进程是一个沙盒，所以就算崩溃也不会影响其它程序工作。</li>\n<li>你可以在不影响列队的情况下运行阻塞代码 （任务不会停滞）。</li>\n<li>多核CPU的利用率要好得多。</li>\n<li>与Redis的连接更少。</li>\n</ul>\n\n要运行此功能只需要创建单独的文件：\n\n<pre><code class=\"language-js line-numbers\">// processor.js\nmodule.exports = function(job){\n  // Do some heavy work\n\n  return Promise.resolve(result);\n}\n</code></pre>\n\n并定义处理器，像这样：\n\n<pre><code class=\"language-js line-numbers\">// Single process:\nqueue.process(\'/path/to/my/processor.js\');\n\n// You can use concurrency as well:\nqueue.process(5, \'/path/to/my/processor.js\');\n\n// and named processors:\nqueue.process(\'my processor\', 5, \'/path/to/my/processor.js\');\n</code></pre>\n\n<h3>重复任务</h3>\n\n任务可以添加到队列中，并根据 cron 规范重复处理：\n\n<pre><code class=\"line-numbers\">  paymentsQueue.process(function(job){\n    // Check payments\n  });\n\n  // Repeat payment job once every day at 3:15 (am)\n  paymentsQueue.add(paymentsData, {repeat: {cron: \'15 3 * * *\'}});\n\n</code></pre>\n\n在<a class=\"wp-editor-md-post-content-link\" href=\"https://crontab.cronhub.io\">此处</a>检查表达式以验证它们是否正确\n\n<h3>暂停 / 恢复</h3>\n\nA queue can be paused and resumed globally (pass <code>true</code> to pause processing for\njust this worker):\n\n可以全局暂停和恢复队列（通过此工作区间的暂停处理）：<code>true</code>\n\n<pre><code class=\"language-js line-numbers\">queue.pause().then(function(){\n  // queue is paused now\n});\n\nqueue.resume().then(function(){\n  // queue is resumed now\n})\n</code></pre>\n\n<h3>事件</h3>\n\n队列会触发一些有用的事件，例如...\n\n<pre><code class=\"language-js line-numbers\">.on(\'completed\', function(job, result){\n  // Job completed with output result!\n})\n</code></pre>\n\n有关事件（包括已触发事件的完整列表）的信息，请查看<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/OptimalBits/bull/blob/develop/REFERENCE.md#events\">事件参考</a>\n\n<h3>队列性能</h3>\n\n队列很便宜，因此如果您需要其中的许多队列，只需创建具有不同名称的新队列：\n\n<pre><code class=\"language-javascript line-numbers\">var userJohn = new Queue(\'john\');\nvar userLisa = new Queue(\'lisa\');\n.\n.\n.\n</code></pre>\n\n但是，每个队列实例都需要新的Redis连接，查看<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/OptimalBits/bull/blob/master/PATTERNS.md#reusing-redis-connections\">如何重用连接</a>，或者您也可以使用<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/OptimalBits/bull/blob/master/REFERENCE.md#queueprocess\">命名任务</a>来实现类似的结果。\n\n<h3><del>群集支持</del></h3>\n\n<blockquote>\n  从版本 3.2.0 及以上版本，建议使用线程处理器。\n</blockquote>\n\n<pre><code class=\"language-js line-numbers\">var\n  Queue = require(\'bull\'),\n  cluster = require(\'cluster\');\n\nvar numWorkers = 8;\nvar queue = new Queue(\"test concurrent queue\");\n\nif(cluster.isMaster){\n  for (var i = 0; i < numWorkers; i++) {\n    cluster.fork();\n  }\n\n  cluster.on(\'online\', function(worker) {\n    // Lets create a few jobs for the queue workers\n    for(var i=0; i<500; i++){\n      queue.add({foo: \'bar\'});\n    };\n  });\n\n  cluster.on(\'exit\', function(worker, code, signal) {\n    console.log(\'worker \' + worker.process.pid + \' died\');\n  });\n}else{\n  queue.process(function(job, jobDone){\n    console.log(\"Job done by worker\", cluster.worker.id, job.id);\n    jobDone();\n  });\n}\n</code></pre>\n\n<h2>官方文档</h2>\n\n有关完整文档，请查看 reference和patterns：\n\n<ul>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://optimalbits.github.io/bull/\">Guide</a> — 使用指南</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"./REFERENCE.md\">Reference</a> — 具有所有可用对象和方法的参考文档</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"./PATTERNS.md\">Patterns</a> —一组常见模式的示例</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"./LICENSE.md\">License</a> — MIT许可证</li>\n</ul>', 'Bulljs(完结)', '', 'publish', 'open', 'closed', '', 'bull-js', '', '', '2022-08-17 22:30:49', '2022-08-17 14:30:49', '<h1>Node.js列队处理-BullMQ中文教程</h1>\n\n<h2>基本概念</h2>\n\n<h3>Bull是什么?</h3>\n\n<blockquote>\n  任务列队一般用于异步处理视频转码,发送短信等耗时任务,不至于API接口连接卡死\n</blockquote>\n\nBull是一个Node库，它基于 <a class=\"wp-editor-md-post-content-link\" href=\"https://redis.io/\">redis</a>实现了快速而强大的队列系统。\n\n尽管可以使用Redis命令直接实现队列，但是该库提供了一个API，该API可以处理所有底层细节并丰富了Redis基本功能，因此可以轻松处理更复杂的用例。\n\n如果您不熟悉队列，您可能会想知道为什么需要它。队列可以用一种优雅的方式解决许多不同的问题，比如在微服务之间创建健壮的通信通道来平滑地处理CPU高峰，或将繁重的工作从一台服务器转移到许多较小的工作区间等。\n\n<h3>开始</h3>\n\n安装Bull:\n\n<pre><code class=\"language-shell line-numbers\">$ npm install bull --save && npm install @types/bull --save-dev\n</code></pre>\n\n或者\n\n<pre><code class=\"language-shell line-numbers\">$ yarn add bull && yarn add --dev @types/bull\n</code></pre>\n\n为了使用bull,你必须先安装Redis.在本地开发环境使用<a class=\"wp-editor-md-post-content-link\" href=\"https://hub.docker.com/_/redis/\">docker</a>可以方便的安装.Bull默认使用 <code>localhost:6379</code>来连接Redis.\n\n<h4>简单列队</h4>\n\n只需通过实例化Bull实例即可创建队列:\n\n<pre><code class=\"language-javascript line-numbers\">const myFirstQueue = new Bull(\'my-first-queue\');\n</code></pre>\n\n一个队列实例通常可以有 3 个主要不同的角色：任务生产者、任务消费者或以及事件监听器。\n\n尽管一个给定的实例可用于 3 个角色，但通常生产者和消费者被创建为为多个实例。通过给定队列的例化名称（如上面的示例中的<code>my-first-queue</code>）来引用它，一个列队可以具有许多生产者、许多使用者和许多侦听器。一个重要的方面是，生产者可以添加任务到队列，即使当时没有可用的消费者：队列提供异步通信，这是使它们如此强大的功能之一。\n\n相反，您可以让一个或多个消费者使用队列中的任务，这些任务将按指定顺序消费任务：FIFO（默认值）、FIFO 或根据优先级消费任务。\n\n关于工作区间，它们可以在同一个或不同的进程中、在同一台计算机或群集中运行。Redis 将作为一个公共端点，只要消费者或生产者可以连接到 Redis，他们将能够合作处理任务。\n\n<h4>生产者</h4>\n\n任务生产者只是将任务添加到队列的一些Node程序，如：\n\n<pre><code class=\"language-javascript line-numbers\">const myFirstQueue = new Bull(\'my-first-queue\');\n\nconst job = await myFirstQueue.add({\n  foo: \'bar\'\n});\n</code></pre>\n\n如您所看到的，任务只是一个 javascript 对象。此对象必须可被序列化，更具体地说应该可以被<code>JSON.stringify</code>转化为字符串，因为这就是它存储在 Redis 中的形式。\n\n也可以在任务数据对象参数之后提供一个选项对象参数，后面我们将介绍这一点。\n\n<h4>消费者</h4>\n\n消费者或工作区间，只不过是一个Node程序，它定义了一个流程函数，如：\n\n<pre><code class=\"language-javascript line-numbers\">const myFirstQueue = new Bull(\'my-first-queue\');\n\nmyFirstQueue.process(async (job) => {\n  return doSomething(job.data);\n});\n</code></pre>\n\n每次工作区间空闲且队列中有任务被等待处理时，都会调用该任务的<code>process</code>函数。由于添加任务时消费者不需要在线(添加和消费是异步的)，因此会有许多任务堆积在队列中等待消费，直到全部处理完。\n\n在上面的示例中，我们将<code>process</code>函数定义为 <code>async</code>，这是强烈建议的定义方法。如果您的 Node 运行时不支持异步/等待，那么您只需在进程函数的末尾返回一个<code>Promise</code>，以取得类似的结果。\n\n<code>process</code>函数返回的值将存储在任务<code>job</code>实例中，方便后面可以访问，例如在监听器的<code>completed</code>事件中可以通过<code>progress</code>函数来访问<code>job</code>实例：\n\n<pre><code class=\"language-javascript line-numbers\">myFirstQueue.process( async (job) => {\n  let progress = 0;\n  for(i = 0; i < 100; i++){\n    await doSomething(job.data);\n    progress += 10;\n    job.progress(progress);\n  }\n});\n</code></pre>\n\n<h4>监听器</h4>\n\n最后，您可以监听队列中触发的事件。如果是本地监听器则只接收在指定的队列实例中生成的通知，如果是全局监听器就会监听指定队列的所有事件。因此，您可以将监听器添加到任何实例，甚至充当消费者或生产者的实例。但请注意，如果队列不是消费者或生产者，则本地事件永远不会触发，在这种情况下，您需要使用全局事件。\n\n<pre><code class=\"language-javascript line-numbers\">const myFirstQueue = new Bull(\'my-first-queue\');\n\n// Define a local completed event\nmyFirstQueue.on(\'completed\', (job, result) => {\n  console.log(`Job completed with result ${result}`);\n})\n</code></pre>\n\n<h4>生命周期</h4>\n\n为了充分利用 Bull 队列的全部潜力，了解任务的生命周期非常重要。从生产者在队列实例上调用<code>add</code>方法的那一刻起，任务进入一个生命周期，该生命周期将处于不同的状态，直到完成或失败（尽管从技术上讲，失败的任务可以重试并获得新的生命周期）。\n\n<img src=\"https://optimalbits.github.io/bull/job-lifecycle.png\" alt=\"Diagram showing job statuses\" />\n\n当任务添加到队列中时，它可处于<strong>等待状态</strong>或<strong>延迟状态</strong>。等待状态其实是一个等待列表，所有列队在处理之前均处于等待状态，延迟状态意味着任务正在等待某些超时或处理失败的任务，延迟任务不会直接处理，而是在工作区间处于空闲状态时，将其放置在等待列表的开头并进行处理。\n\n任务的下一个状态为\"活动\"状态。活动状态由一Redis的<code>set</code>集表示，是当前正在处理的任务，这时它们在<code>process</code>函数中运行。任务可以无限时间的处于处于活动状态，直到过程完成或引发异常，以便任务以\"已完成\"或\"失败\"状态结束。\n\n<h4>停滞任务</h4>\n\n在 Bull中，我们定义了停滞任务的概念。停滞任务虽然正在处理的任务，但 Bull 怀疑流程功能已挂起。当<code>process</code>函数正在处理的任务使 CPU 负载过大时，会导致工作区间无法告诉队列它仍在处理该任务，这时会造成停滞任务。\n\n当任务停滞时，根据任务的设置，任务可由其他空闲工作区间重试，也可以切换到失败状态。\n\n停滞任务可以通过确保进程函数不会使 Node 事件循环运行时间太长，或使用单独的<a class=\"wp-editor-md-post-content-link\" href=\"#独立进程\">沙盒处理器</a>来避免。\n\n<h3>事件</h3>\n\nBull 中的队列拥有几个事件，这些事件在许多用例中很有用。事件可以是一个列队实例(一个工作区间)的本地事件，例如，如果一个任务在给定工作区间内完成，则将只为该实例发出本地事件。但是，可以监听所有事件，例如在本地事件名称前加上<code>global:</code>前缀。然后，我们可以监听指定队列的所有工作区间生成的所有事件。\n\n一个本地的<code>completed</code>事件:\n\n<pre><code class=\"language-javascript line-numbers\">queue.on(\'completed\', job => {\n  console.log(`Job with id ${job.id} has been completed`);\n})\n</code></pre>\n\n而下面这样就可以通过全局来监听:\n\n<pre><code class=\"language-javascript line-numbers\">queue.on(\'global:completed\', jobId => {\n  console.log(`Job with id ${jobId} has been completed`);\n})\n</code></pre>\n\n请注意，全局事件的签名与本地事件的签名略有不同，在上面的示例中，它只发送任务的 ID 而不是任务本身的完整实例，这样做是出于性能原因。\n\n可用事件的列表可在[reference文档] (https://github.com/OptimalBits/bull/blob/master/REFERENCE.md#eventsk)中找到。\n\n<h3>列队选项</h3>\n\n队列可以在实例化时可以传入一些选项，例如，您可以指定 Redis 服务器的地址和密码，以及其他一些有用的设置。所有这些设置都在 Bull 的<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/OptimalBits/bull/blob/master/REFERENCE.md#queue\">reference文档</a>中找到，下面我们看一下一些选项的用例\n\n<blockquote>\n  更多详细的API请参考<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/OptimalBits/bull/blob/master/REFERENCE.md#queue\">文档</a>\n</blockquote>\n\n<h4>速率限制</h4>\n\n为创建的队列限制在时间单位中处理的任务数。限制是每个队列定义的，与工作区间数量不一，因此您可以水平缩放，并且仍然能够轻松限制处理速率限制：\n\n<pre><code class=\"language-javascript line-numbers\">// Limit queue to max 1.000 jobs per 5 seconds.\nconst myRateLimitedQueue = new Queue(\'rateLimited\', {\n  limiter: {\n    max: 1000,\n    duration: 5000\n  }\n});\n</code></pre>\n\n当队列达到速率限制时，请求的任务将加入<code>delayed</code>队列。\n\n<h4>命名任务</h4>\n\n可以给任务命名不会改变队列的任何机制，但可获得更清晰的代码以及在UI 工具中的更好可视化：\n\n<pre><code class=\"language-javascript line-numbers\">// Jobs producer\nconst myJob = await transcoderQueue.add(\'image\', { input: \'myimagefile\' });\nconst myJob = await transcoderQueue.add(\'audio\', { input: \'myaudiofile\' });\nconst myJob = await transcoderQueue.add(\'video\', { input: \'myvideofile\' });\n// Worker\ntranscoderQueue.process(\'image\', processImage);\ntranscoderQueue.process(\'audio\', processAudio);\ntranscoderQueue.process(\'video\', processVideo);\n</code></pre>\n\n请记住，每个队列实例都需要为每个命名任务提供<em>一个</em>处理器，否则将抛出异常。\n\n<h4>沙盒处理器</h4>\n\n如上所述，在定义<code>process</code>函数时，还可以提供并发设置。此设置允许工作人员并行处理多个任务。任务仍在同一Node进程中处理，就算处理的OI密集非常高的任务也会处理正常。\n\n但是有时需要处理CPU密集非常高的任务，这可能会锁定Node事件循环太久而导致Bull 可能会停止任务。为了避免这种情况，可以在单独的Node进程中的运行<code>process</code>函数。在这种情况下，并发参数将决定允许运行的并发进程的最大数量。\n\n我们称这种进程为\"沙盒\"进程，这样就算某个进程崩溃也不会影响任何其他进程，并且将自动生成一个新进程来取代它。\n\n<h3>任务类型</h3>\n\nBull 中的默认任务类型是\"FIFO\"（先出），这意味着任务的处理顺序与进入队列的顺序相同。按不同顺序处理任务时这很有用。\n\n<h4>LIFO</h4>\n\nLifo（最后一个先出）表示任务被添加到队列的开头，因此将在工作区间空闲时进行处理。\n\n<pre><code class=\"language-javascript line-numbers\">const myJob = await myqueue.add({ foo: \'bar\' }, { lifo: true });\n</code></pre>\n\n<h4>延迟</h4>\n\n使任务在处理之前延迟一定时间。请注意，延迟参数表示任务在进行处理之前等待的最短时间量。延迟时间过时，任务将移动到列队的开头，并在工作区间空闲时进行处理。\n\n<pre><code class=\"language-javascript line-numbers\">// Delayed 5 seconds\nconst myJob = await myqueue.add({ foo: \'bar\' }, { delay: 5000 });\n</code></pre>\n\n<h4>优先级</h4>\n\n任务可以设置优先级。优先级较高的任务将在优先级较低的任务之前进行处理。最高优先级为 1，数值越大优先级月底。请记住，优先级队列比标准队列慢一点（因为优先级列队的当前插入时间 O(n)的会替代标准队列的O(1))。\n\n<blockquote>\n  上面括号中的n 代表当前在队列中等待的任务数\n</blockquote>\n\n<pre><code class=\"language-javascript line-numbers\">const myJob = await myqueue.add({ foo: \'bar\' }, { priority: 3 });\n</code></pre>\n\n<h4>重复</h4>\n\n可重复任务是特殊任务，根据 cron 规范或时间间隔，可以无限期地重复，直到给定的最大时间或到达重复次数才停止(如果设置这两者的话)。\n\n<pre><code class=\"language-javascript line-numbers\">// Repeat every 10 seconds for 100 times.\nconst myJob = await myqueue.add(\n  { foo: \'bar\' },\n  {\n    repeat: {\n      every: 10000,\n      limit: 100\n    }\n  }\n);\n\n// Repeat payment job once every day at 3:15 (am)\npaymentsQueue.add(paymentsData, { repeat: { cron: \'15 3 * * *\' } });\n</code></pre>\n\n关于可重复任务，有一些重要的注意事项：\n\n<ul>\n<li>如果重复选项相同，Bull 不会添加相同的可重复任务。（注意：任务 ID 是重复选项的一部分，因为：https://github.com/OptimalBits/bull/pull/603，因此传递任务 ID 将允许在队列中插入具有相同 cron 的任务）</li>\n<li>如果没有正在运行的工作区间，则下次工作区间在线时，可重复任务将不累积。</li>\n<li>可重复任务可以通过 <a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/OptimalBits/bull/blob/master/REFERENCE.md#queueremoverepeatable\">removeRepeatable</a>方法删除</li>\n</ul>\n\n<h2>如何使用</h2>\n\n<h3>基本使用</h3>\n\n<pre><code class=\"language-js line-numbers\">var Queue = require(\'bull\');\n\nvar videoQueue = new Queue(\'video transcoding\', \'redis://127.0.0.1:6379\');\nvar audioQueue = new Queue(\'audio transcoding\', {redis: {port: 6379, host: \'127.0.0.1\', password: \'foobared\'}}); // Specify Redis connection using object\nvar imageQueue = new Queue(\'image transcoding\');\nvar pdfQueue = new Queue(\'pdf transcoding\');\n\nvideoQueue.process(function(job, done){\n\n  // job.data contains the custom data passed when the job was created\n  // job.id contains id of this job.\n\n  // transcode video asynchronously and report progress\n  job.progress(42);\n\n  // call done when finished\n  done();\n\n  // or give a error if error\n  done(new Error(\'error transcoding\'));\n\n  // or pass it a result\n  done(null, { framerate: 29.5 /* etc... */ });\n\n  // If the job throws an unhandled exception it is also handled correctly\n  throw new Error(\'some unexpected error\');\n});\n\naudioQueue.process(function(job, done){\n  // transcode audio asynchronously and report progress\n  job.progress(42);\n\n  // call done when finished\n  done();\n\n  // or give a error if error\n  done(new Error(\'error transcoding\'));\n\n  // or pass it a result\n  done(null, { samplerate: 48000 /* etc... */ });\n\n  // If the job throws an unhandled exception it is also handled correctly\n  throw new Error(\'some unexpected error\');\n});\n\nimageQueue.process(function(job, done){\n  // transcode image asynchronously and report progress\n  job.progress(42);\n\n  // call done when finished\n  done();\n\n  // or give a error if error\n  done(new Error(\'error transcoding\'));\n\n  // or pass it a result\n  done(null, { width: 1280, height: 720 /* etc... */ });\n\n  // If the job throws an unhandled exception it is also handled correctly\n  throw new Error(\'some unexpected error\');\n});\n\npdfQueue.process(function(job){\n  // Processors can also return promises instead of using the done callback\n  return pdfAsyncProcessor();\n});\n\nvideoQueue.add({video: \'http://example.com/video1.mov\'});\naudioQueue.add({audio: \'http://example.com/audio1.mp3\'});\nimageQueue.add({image: \'http://example.com/image1.tiff\'});\n</code></pre>\n\n<h3>使用promises</h3>\n\n你可以返回 promises来替代 <code>done</code> 回调函数:\n\n<pre><code class=\"language-javascript line-numbers\">videoQueue.process(function(job){ // don\'t forget to remove the done callback!\n  // Simply return a promise\n  return fetchVideo(job.data.url).then(transcodeVideo);\n\n  // Handles promise rejection\n  return Promise.reject(new Error(\'error transcoding\'));\n\n  // Passes the value the promise is resolved with to the \"completed\" event\n  return Promise.resolve({ framerate: 29.5 /* etc... */ });\n\n  // If the job throws an unhandled exception it is also handled correctly\n  throw new Error(\'some unexpected error\');\n  // same as\n  return Promise.reject(new Error(\'some unexpected error\'));\n});\n</code></pre>\n\n<h3>独立进程</h3>\n\n<code>process</code>函数可以运行在独立进程中 . 这样做有一下几个优点:\n\n<ul>\n<li>进程是一个沙盒，所以就算崩溃也不会影响其它程序工作。</li>\n<li>你可以在不影响列队的情况下运行阻塞代码 （任务不会停滞）。</li>\n<li>多核CPU的利用率要好得多。</li>\n<li>与Redis的连接更少。</li>\n</ul>\n\n要运行此功能只需要创建单独的文件：\n\n<pre><code class=\"language-js line-numbers\">// processor.js\nmodule.exports = function(job){\n  // Do some heavy work\n\n  return Promise.resolve(result);\n}\n</code></pre>\n\n并定义处理器，像这样：\n\n<pre><code class=\"language-js line-numbers\">// Single process:\nqueue.process(\'/path/to/my/processor.js\');\n\n// You can use concurrency as well:\nqueue.process(5, \'/path/to/my/processor.js\');\n\n// and named processors:\nqueue.process(\'my processor\', 5, \'/path/to/my/processor.js\');\n</code></pre>\n\n<h3>重复任务</h3>\n\n任务可以添加到队列中，并根据 cron 规范重复处理：\n\n<pre><code class=\"line-numbers\">  paymentsQueue.process(function(job){\n    // Check payments\n  });\n\n  // Repeat payment job once every day at 3:15 (am)\n  paymentsQueue.add(paymentsData, {repeat: {cron: \'15 3 * * *\'}});\n\n</code></pre>\n\n在<a class=\"wp-editor-md-post-content-link\" href=\"https://crontab.cronhub.io\">此处</a>检查表达式以验证它们是否正确\n\n<h3>暂停 / 恢复</h3>\n\nA queue can be paused and resumed globally (pass <code>true</code> to pause processing for\njust this worker):\n\n可以全局暂停和恢复队列（通过此工作区间的暂停处理）：<code>true</code>\n\n<pre><code class=\"language-js line-numbers\">queue.pause().then(function(){\n  // queue is paused now\n});\n\nqueue.resume().then(function(){\n  // queue is resumed now\n})\n</code></pre>\n\n<h3>事件</h3>\n\n队列会触发一些有用的事件，例如...\n\n<pre><code class=\"language-js line-numbers\">.on(\'completed\', function(job, result){\n  // Job completed with output result!\n})\n</code></pre>\n\n有关事件（包括已触发事件的完整列表）的信息，请查看<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/OptimalBits/bull/blob/develop/REFERENCE.md#events\">事件参考</a>\n\n<h3>队列性能</h3>\n\n队列很便宜，因此如果您需要其中的许多队列，只需创建具有不同名称的新队列：\n\n<pre><code class=\"language-javascript line-numbers\">var userJohn = new Queue(\'john\');\nvar userLisa = new Queue(\'lisa\');\n.\n.\n.\n</code></pre>\n\n但是，每个队列实例都需要新的Redis连接，查看<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/OptimalBits/bull/blob/master/PATTERNS.md#reusing-redis-connections\">如何重用连接</a>，或者您也可以使用<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/OptimalBits/bull/blob/master/REFERENCE.md#queueprocess\">命名任务</a>来实现类似的结果。\n\n<h3><del>群集支持</del></h3>\n\n<blockquote>\n  从版本 3.2.0 及以上版本，建议使用线程处理器。\n</blockquote>\n\n<pre><code class=\"language-js line-numbers\">var\n  Queue = require(\'bull\'),\n  cluster = require(\'cluster\');\n\nvar numWorkers = 8;\nvar queue = new Queue(\"test concurrent queue\");\n\nif(cluster.isMaster){\n  for (var i = 0; i < numWorkers; i++) {\n    cluster.fork();\n  }\n\n  cluster.on(\'online\', function(worker) {\n    // Lets create a few jobs for the queue workers\n    for(var i=0; i<500; i++){\n      queue.add({foo: \'bar\'});\n    };\n  });\n\n  cluster.on(\'exit\', function(worker, code, signal) {\n    console.log(\'worker \' + worker.process.pid + \' died\');\n  });\n}else{\n  queue.process(function(job, jobDone){\n    console.log(\"Job done by worker\", cluster.worker.id, job.id);\n    jobDone();\n  });\n}\n</code></pre>\n\n<h2>官方文档</h2>\n\n有关完整文档，请查看 reference和patterns：\n\n<ul>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://optimalbits.github.io/bull/\">Guide</a> — 使用指南</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"./REFERENCE.md\">Reference</a> — 具有所有可用对象和方法的参考文档</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"./PATTERNS.md\">Patterns</a> —一组常见模式的示例</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"./LICENSE.md\">License</a> — MIT许可证</li>\n</ul>', 39, 'https://jikexingkong.com/docs/nodejs/bull-js', 2, 'docs', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(153, 1, '2021-11-23 05:53:34', '2021-11-22 21:53:34', '<h1>class-transformer使用教程</h1>\n\n类转换器的作用是将普通的javascript对象转换成类对象。我们通过api端点或者json文件访问所得的是普通的json文本，一般我们通过<code>JSON.parse</code>把其转换成普通的javascript对象，但是有时候我们想让它变成一个类的对象而不是普通的javascript对象。比如用<code>class-validator</code>来验证从后端api获取的json字符串时，我们就需要自动把json转为待验证类的对象而不是一个js对象。\n\n例如我们现在可以读取远程api的一个<code>users.json</code>的内容如下\n\n<pre><code class=\"language-json line-numbers\">[{\n  \"id\": 1,\n  \"firstName\": \"Johny\",\n  \"lastName\": \"Cage\",\n  \"age\": 27\n},\n{\n  \"id\": 2,\n  \"firstName\": \"Ismoil\",\n  \"lastName\": \"Somoni\",\n  \"age\": 50\n},\n{\n  \"id\": 3,\n  \"firstName\": \"Luke\",\n  \"lastName\": \"Dacascos\",\n  \"age\": 12\n}]\n</code></pre>\n\n我们有一个<code>User</code>类\n\n<pre><code class=\"language-typescript line-numbers\">export class User {\n    id: number;\n    firstName: string;\n    lastName: string;\n    age: number;\n\n    getName() {\n        return this.firstName + \" \" + this.lastName;\n    }\n\n    isAdult() {\n        return this.age > 36 && this.age < 60;\n    }\n}\n</code></pre>\n\n然后你想通过<code>user.json</code>来获取<code>User</code>的对象数组\n\n<pre><code class=\"language-typescript line-numbers\">fetch(\"users.json\").then((users: User[]) => {\n    // you can use users here, and type hinting also will be available to you,\n    //  but users are not actually instances of User class\n    // this means that you can\'t use methods of User class\n});\n</code></pre>\n\n现在你可以获取<code>users[0].firstname</code>但是由于你获取的是普通的js对象而非<code>User</code>类的对象，所以你无法调用<code>users[0].getName()</code>方法，而<strong>class-transformer</strong>就是为了把普通的js对象按你的需求转换成类对象而生的。\n\n你只要像下面这样就可以创建真正的<code>User[]</code>对象数组了\n\n<pre><code class=\"language-typescript line-numbers\">fetch(\"users.json\").then((users: Object[]) => {\n    const realUsers = plainToClass(User, users);\n    // now each user in realUsers is instance of User class\n});\n</code></pre>\n\n<h2>安装</h2>\n\n<ol>\n<li>安装class-transformer:\n<code>npm install class-transformer --save</code></p></li>\n<li>安装<code>reflect-metadata</code>\n\n<blockquote>\n  reflect-metadata是必须的，具体使用请看<a class=\"wp-editor-md-post-content-link\" href=\"[https://lichnow.com/notes/decorator.html#%E5%85%83%E4%BF%A1%E6%81%AF%E5%8F%8D%E5%B0%84API](https://lichnow.com/notes/decorator.html#元信息反射API)\">我这边文章</a>\n</blockquote></li>\n</ol>\n\n​         安装后在<code>app.ts</code>这种顶层文件你需要<code>import \"reflect-metadata\";</code>\n\n<h2>基础方法</h2>\n\n<h3>plainToClass</h3>\n\n普通对象转换为类对象\n\n<pre><code class=\"language-typescript line-numbers\">import {plainToClass} from \"class-transformer\";\n\nlet users = plainToClass(User, userJson); // to convert user plain object a single user. also supports arrays\n</code></pre>\n\n<h3>plainToClassFromExist</h3>\n\n普通对象合并已经创建的类实例\n\n<pre><code class=\"language-typescript line-numbers\">const defaultUser = new User();\ndefaultUser.role = \'user\';\n\nlet mixedUser = plainToClassFromExist(defaultUser, user); // mixed user should have the value role = user when no value is set otherwise.\n</code></pre>\n\n<h3>classToPlain</h3>\n\n类实例转换为普通对象\n\n<blockquote>\n  转换后可以使用<code>JSON.stringify</code>再转成普通的json文本\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">import {classToPlain} from \"class-transformer\";\nlet photo = classToPlain(photo);\n</code></pre>\n\n<h3>classToClass</h3>\n\n克隆类实例\n\n<pre><code class=\"language-typescript line-numbers\">import {classToClass} from \"class-transformer\";\nlet photo = classToClass(photo);\n</code></pre>\n\n可以使用<code>ignoreDecorators</code>选项去除所有原实例中的装饰器\n\n<h3>serialize</h3>\n\n直接把类实例转换为json文本,是不是数组都可以转换\n\n<pre><code class=\"language-typescript line-numbers\">import {serialize} from \"class-transformer\";\nlet photo = serialize(photo);\n</code></pre>\n\n<h3>deserialize 和 deserializeArray</h3>\n\n直接把json文本转换为类对象\n\n<pre><code class=\"language-typescript line-numbers\">import {deserialize} from \"class-transformer\";\nlet photo = deserialize(Photo, photo);\n</code></pre>\n\n如果json文本是个对象数组请使用<code>deserializeArray</code>方法\n\n<pre><code class=\"language-typescript line-numbers\">import {deserializeArray} from \"class-transformer\";\nlet photos = deserializeArray(Photo, photos);\n</code></pre>\n\n<h3>强制类型安全</h3>\n\n<code>plainToClass</code>会把所有的被转换对象的属性全部类实例的属性，即时类中并不存在某些属性\n\n<pre><code class=\"language-typescript line-numbers\">import {plainToClass} from \"class-transformer\";\n\nclass User {\n  id: number\n  firstName: string\n  lastName: string\n}\n\nconst fromPlainUser = {\n  unkownProp: \'hello there\',\n  firstName: \'Umed\',\n  lastName: \'Khudoiberdiev\',\n}\n\nconsole.log(plainToClass(User, fromPlainUser))\n\n// User {\n//   unkownProp: \'hello there\',\n//   firstName: \'Umed\',\n//   lastName: \'Khudoiberdiev\',\n// }\n</code></pre>\n\n你可以使用<code>excludeExtraneousValues</code>选项结合<code>Expose</code>装饰器来指定需要公开的属性\n\n<pre><code class=\"language-typescript line-numbers\">import {Expose, plainToClass} from \"class-transformer\";\n\nclass User {\n    @Expose() id: number;\n    @Expose() firstName: string;\n    @Expose() lastName: string;\n}\n\nconst fromPlainUser = {\n  unkownProp: \'hello there\',\n  firstName: \'Umed\',\n  lastName: \'Khudoiberdiev\',\n}\n\nconsole.log(plainToClass(User, fromPlainUser, { excludeExtraneousValues: true }))\n\n// User {\n//   id: undefined,\n//   firstName: \'Umed\',\n//   lastName: \'Khudoiberdiev\'\n// }\n</code></pre>\n\n<h2>子类型转换</h2>\n\n<h3>嵌套对象</h3>\n\n由于现在Typescript对反射还没有非常好的支持，所以你需要使用<code>@Type</code>装饰器来隐式地指定属性所属的类\n\n<pre><code class=\"language-typescript line-numbers\">import {Type, plainToClass} from \"class-transformer\";\n\nexport class Album {\n\n    id: number;\n\n    name: string;\n\n    @Type(() => Photo)\n    photos: Photo[];\n}\n\nexport class Photo {\n    id: number;\n    filename: string;\n}\n\nlet album = plainToClass(Album, albumJson);\n// now album is Album object with Photo objects inside\n</code></pre>\n\n<h3>多类型选项</h3>\n\n一个嵌套的子类型也可以匹配多个类型，这可以通过判断器实现。判断器需要指定一个<code>property</code>，而被转换js对象中的嵌套对象的也必须拥有与<code>property</code>相同的一个字段，并把值设置为需要转换的子类型的名称。判断器还需要指定所有的子类型值以及其名称，具体示例如下\n\n<pre><code class=\"language-typescript line-numbers\">import {Type, plainToClass} from \"class-transformer\";\n\nconst albumJson = {\n    \"id\": 1,\n    \"name\": \"foo\",\n    \"topPhoto\": {\n        \"id\": 9,\n        \"filename\": \"cool_wale.jpg\",\n        \"depth\": 1245,\n        \"__type\": \"underwater\"\n    }\n}\n\nexport abstract class Photo {\n    id: number;\n    filename: string;\n}\n\nexport class Landscape extends Photo {\n    panorama: boolean;\n}\n\nexport class Portrait extends Photo {\n    person: Person;\n}\n\nexport class UnderWater extends Photo {\n    depth: number;\n}\n\nexport class Album {\n\n    id: number;\n    name: string;\n\n    @Type(() => Photo, {\n        discriminator: {\n            property: \"__type\",\n            subTypes: [\n                { value: Landscape, name: \"landscape\" },\n                { value: Portrait, name: \"portrait\" },\n                { value: UnderWater, name: \"underwater\" }\n            ]\n        }\n    })\n    topPhoto: Landscape | Portrait | UnderWater;\n\n}\n\nlet album = plainToClass(Album, albumJson);\n// now album is Album object with a UnderWater object without `__type` property.\n</code></pre>\n\n此外可以设置<code>keepDiscriminatorProperty: true</code>，这样可以把判断器的属性也包含在转换后的对象中\n\n<h2>排除与公开</h2>\n\n<h3>公开方法的返回值</h3>\n\n添加<code>@Expose</code>装饰器即可公开getter和方法的返回值\n\n<pre><code class=\"language-typescript line-numbers\">import {Expose} from \"class-transformer\";\n\nexport class User {\n\n    id: number;\n    firstName: string;\n    lastName: string;\n    password: string;\n\n    @Expose()\n    get name() {\n        return this.firstName + \" \" + this.lastName;\n    }\n\n    @Expose()\n    getFullName() {\n        return this.firstName + \" \" + this.lastName;\n    }\n}\n</code></pre>\n\n<h3>公开属性为不同名称</h3>\n\n如果要使用其他名称公开某些属性，可以通过为<code>@Expose</code>装饰器指定<code>name</code>选项来实现：\n\n<pre><code class=\"language-typescript line-numbers\">import {Expose} from \"class-transformer\";\n\nexport class User {\n\n    @Expose({ name: \"uid\" })\n    id: number;\n\n    firstName: string;\n\n    lastName: string;\n\n    @Expose({ name: \"secretKey\" })\n    password: string;\n\n    @Expose({ name: \"fullName\" })\n    getFullName() {\n        return this.firstName + \" \" + this.lastName;\n    }\n}\n</code></pre>\n\n<h3>跳过指定属性</h3>\n\n有时您想在转换过程中跳过一些属性。这可以使用<code>@Exclude</code>装饰器完成：\n\n<pre><code class=\"language-typescript line-numbers\">import {Exclude} from \"class-transformer\";\n\nexport class User {\n\n    id: number;\n\n    email: string;\n\n    @Exclude()\n    password: string;\n}\n</code></pre>\n\n现在，当您转换用户时，<code>password</code>属性将被跳过，并且不包含在转换结果中。\n\n<h3>根据操作决定跳过</h3>\n\n我们可以通过<code>toClassOnly</code>或者<code>toPlainOnly</code>来控制一个属性在哪些操作中需要排除\n\n<pre><code class=\"language-typescript line-numbers\">import {Exclude} from \"class-transformer\";\n\nexport class User {\n\n    id: number;\n\n    email: string;\n\n    @Exclude({ toPlainOnly: true })\n    password: string;\n}\n</code></pre>\n\n现在<code>password</code>属性将会在<code>classToPlain</code>操作中排除，相反的可以使用<code>toClassOnly</code>\n\n<h3>跳过类的所有属性</h3>\n\n你可以通过在类上添加<code>@Exclude</code>装饰器并且在需要公开的属性上添加<code>@Expose</code>装饰器来只公开指定的属性\n\n<pre><code class=\"language-typescript line-numbers\">import {Exclude, Expose} from \"class-transformer\";\n\n@Exclude()\nexport class User {\n\n    @Expose()\n    id: number;\n\n    @Expose()\n    email: string;\n\n    password: string;\n}\n</code></pre>\n\n另外，您可以在转换期间设置排除策略：\n\n<pre><code class=\"language-typescript line-numbers\">import {classToPlain} from \"class-transformer\";\nlet photo = classToPlain(photo, { strategy: \"excludeAll\" });\n</code></pre>\n\n这时你不需要在添加<code>@Exclude</code>装饰器了\n\n<h3>跳过私有属性或某些前缀属性</h3>\n\n我们可以排除公开具有指定前缀的属性以及私有属性\n\n<pre><code class=\"language-typescript line-numbers\">import {Expose} from \"class-transformer\";\n\nexport class User {\n\n    id: number;\n    private _firstName: string;\n    private _lastName: string;\n    _password: string;\n\n    setName(firstName: string, lastName: string) {\n        this._firstName = firstName;\n        this._lastName = lastName;\n    }\n\n    @Expose()\n    get name() {\n        return this.firstName + \" \" + this.lastName;\n    }\n\n}\n\nconst user = new User();\nuser.id = 1;\nuser.setName(\"Johny\", \"Cage\");\nuser._password = 123;\n\nconst plainUser = classToPlain(user, { excludePrefixes: [\"_\"] });\n// here plainUser will be equal to\n// { id: 1, name: \"Johny Cage\" }\n</code></pre>\n\n<h3>使用组来控制排除的属性</h3>\n\n<pre><code class=\"language-typescript line-numbers\">import {Exclude, Expose} from \"class-transformer\";\n\n@Exclude()\nexport class User {\n\n    id: number;\n\n    name: string;\n\n    @Expose({ groups: [\"user\", \"admin\"] }) // this means that this data will be exposed only to users and admins\n    email: string;\n\n    @Expose({ groups: [\"user\"] }) // this means that this data will be exposed only to users\n    password: string;\n}\n\nlet user1 = classToPlain(user, { groups: [\"user\"] }); // will contain id, name, email and password\nlet user2 = classToPlain(user, { groups: [\"admin\"] }); // will contain id, name and email\n</code></pre>\n\n<h3>使用版本范围来控制公开和排除的属性</h3>\n\n如果要构建具有不同版本的API，则class-transformer具有非常有用的工具。您可以控制应在哪个版本中公开或排除模型的哪些属性。示例\n\n<pre><code class=\"language-typescript line-numbers\">import {Exclude, Expose} from \"class-transformer\";\n\n@Exclude()\nexport class User {\n\n    id: number;\n\n    name: string;\n\n    @Expose({ since: 0.7, until: 1 }) // this means that this property will be exposed for version starting from 0.7 until 1\n    email: string;\n\n    @Expose({ since: 2.1 }) // this means that this property will be exposed for version starting from 2.1\n    password: string;\n}\n\nlet user1 = classToPlain(user, { version: 0.5 }); // will contain id and name\nlet user2 = classToPlain(user, { version: 0.7 }); // will contain id, name and email\nlet user3 = classToPlain(user, { version: 1 }); // will contain id and name\nlet user4 = classToPlain(user, { version: 2 }); // will contain id and name\nlet user5 = classToPlain(user, { version: 2.1 }); // will contain id, name nad password\n</code></pre>\n\n<h2>特殊处理</h2>\n\n<h3>将日期字符串转换为Date对象</h3>\n\n有时，您的JavaScript对象中有一个以字符串格式接收的Date。您想从中创建一个真正的javascript Date对象。您只需将Date对象传递给<code>@Type</code>装饰器即可完成此操作：\n\n<blockquote>\n  当从类对象反向转换为普通对象时registrationDate将会被转回为字符串\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">import {Type} from \"class-transformer\";\n\nexport class User {\n\n    id: number;\n\n    email: string;\n\n    password: string;\n\n    @Type(() => Date)\n    registrationDate: Date;\n}\n</code></pre>\n\n当您想将值转换为<code>Number</code>, <code>String</code>, <code>Boolean</code> 类型时也是这样做\n\n<h3>数组处理</h3>\n\n当你想转换数组时，你必须使用<code>@Type</code>装饰器指定数组项的类型也可以使用自定义的数组类型\n\n<code>Set</code>和<code>Map</code>也是一样\n\n<pre><code class=\"language-typescript line-numbers\">import {Type} from \"class-transformer\";\n\nexport class AlbumCollection extends Array<Album> {\n    // custom array functions ...\n}\n\nexport class Photo {\n\n    id: number;\n\n    name: string;\n\n    @Type(() => Album)\n    albums: Album[];\n    // albums: AlbumCollection; 使用自定义类型\n}\n\nexport class Skill {\n    name: string;\n}\n\nexport class Weapon {\n    name: string;\n    range: number;\n}\n\nexport class Player {\n    name: string;\n\n    @Type(() => Skill)\n    skills: Set<Skill>;\n\n    @Type(() => Weapon)\n    weapons: Map<string, Weapon>;\n}\n</code></pre>\n\n<h2>自定义转换</h2>\n\n<h3>基本使用</h3>\n\n你可以使用<code>@Transform</code>添加额外的数据转换,例如当你想把通过普通对象中的字符串日期转换后的<code>date</code>对象继续转换变成<code>moment</code>库的对象：\n\n<pre><code class=\"language-typescript line-numbers\">import {Transform} from \"class-transformer\";\nimport * as moment from \"moment\";\nimport {Moment} from \"moment\";\n\nexport class Photo {\n\n    id: number;\n\n    @Type(() => Date)\n    @Transform(value => moment(value), { toClassOnly: true })\n    date: Moment;\n}\n</code></pre>\n\n现在当执行<code>plainToClass</code>转换后的对象中的<code>date</code>属性将是一个<code>Moment</code>对象。<code>@Transform</code>同样支持组和版本。\n\n<h3>高级用法</h3>\n\n<code>@Transform</code>有更多的参数给你创建自定义的转换逻辑\n\n<pre><code class=\"language-typescript line-numbers\">@Transform((value, obj, type) => value)\n</code></pre>\n\n<table>\n<thead>\n<tr>\n  <th align=\"left\">参数</th>\n  <th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td align=\"left\"><code>value</code></td>\n  <td>自定义转换执行前的属性值</td>\n</tr>\n<tr>\n  <td align=\"left\"><code>obj</code></td>\n  <td>转换源对象</td>\n</tr>\n<tr>\n  <td align=\"left\"><code>type</code></td>\n  <td>转换的类型</td>\n</tr>\n</tbody>\n</table>\n\n<h3>其他装饰器</h3>\n\n<table>\n<thead>\n<tr>\n  <th>签名</th>\n  <th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td><code>@TransformClassToPlain</code></td>\n  <td><code>@TransformClassToPlain({ groups: [\"user\"] })</code></td>\n</tr>\n<tr>\n  <td><code>@TransformClassToClass</code></td>\n  <td><code>@TransformClassToClass({ groups: [\"user\"] })</code></td>\n</tr>\n<tr>\n  <td><code>@TransformPlainToClas</code></td>\n  <td><code>@TransformPlainToClass(User, { groups: [\"user\"] })</code></td>\n</tr>\n</tbody>\n</table>\n\n上述装饰器接受一个可选参数：<code>ClassTransformOptions</code>-转换选项，例如groups, version, name，示例：\n\n<pre><code class=\"language-typescript line-numbers\">@Exclude()\nclass User {\n\n    id: number;\n\n    @Expose()\n    firstName: string;\n\n    @Expose()\n    lastName: string;\n\n    @Expose({ groups: [\'user.email\'] })\n    email: string;\n\n    password: string;\n}\n\nclass UserController {\n\n    @TransformClassToPlain({ groups: [\'user.email\'] })\n    getUser() {\n        const user = new User();\n        user.firstName = \"Snir\";\n        user.lastName = \"Segal\";\n        user.password = \"imnosuperman\";\n\n        return user;\n    }\n}\n\nconst controller = new UserController();\nconst user = controller.getUser();\n</code></pre>\n\n<code>user</code>对象将包含firstname,latstname和email\n\n<h3>使用泛型</h3>\n\n由于目前Typescript对反射的支持还没有完善，所以只能使用其它替代方案，具体可以查看<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/pleerock/class-transformer/tree/master/sample/sample4-generics\">这个例子</a>\n\n<h3>隐式类型转换</h3>\n\n<blockquote>\n  你如果将class-validator与class-transformer一起使用，则可能不想启用此功能。\n</blockquote>\n\n根据Typescript提供的类型信息，启用内置类型之间的自动转换。默认禁用。\n\n<pre><code class=\"language-typescript line-numbers\">import { IsString } from \'class-validator\'\n\nclass MyPayload {\n\n  @IsString()\n  prop: string\n}\n\n\nconst result1 = plainToClass(MyPayload, { prop: 1234 }, { enableImplicitConversion: true });\nconst result2 = plainToClass(MyPayload, { prop: 1234 }, { enableImplicitConversion: false });\n\n/**\n *  result1 will be `{ prop: \"1234\" }` - notice how the prop value has been converted to string.\n *  result2 will be `{ prop: 1234 }` - default behaviour\n */\n</code></pre>\n\n<h3>循环引用</h3>\n\n如果<code>User</code>包含一个<code>Photo</code>类型的<code>photos</code>数组属性，而<code>Photo</code>又包含一个属性链接到<code>User</code>，则转换过程中此属性会被忽略，除了<code>classToClass</code>操作。', 'class-transformer[完结]', '', 'publish', 'open', 'closed', '', 'class-transformer', '', '', '2022-08-17 22:30:49', '2022-08-17 14:30:49', '<h1>class-transformer使用教程</h1>\n\n类转换器的作用是将普通的javascript对象转换成类对象。我们通过api端点或者json文件访问所得的是普通的json文本，一般我们通过<code>JSON.parse</code>把其转换成普通的javascript对象，但是有时候我们想让它变成一个类的对象而不是普通的javascript对象。比如用<code>class-validator</code>来验证从后端api获取的json字符串时，我们就需要自动把json转为待验证类的对象而不是一个js对象。\n\n例如我们现在可以读取远程api的一个<code>users.json</code>的内容如下\n\n<pre><code class=\"language-json line-numbers\">[{\n  \"id\": 1,\n  \"firstName\": \"Johny\",\n  \"lastName\": \"Cage\",\n  \"age\": 27\n},\n{\n  \"id\": 2,\n  \"firstName\": \"Ismoil\",\n  \"lastName\": \"Somoni\",\n  \"age\": 50\n},\n{\n  \"id\": 3,\n  \"firstName\": \"Luke\",\n  \"lastName\": \"Dacascos\",\n  \"age\": 12\n}]\n</code></pre>\n\n我们有一个<code>User</code>类\n\n<pre><code class=\"language-typescript line-numbers\">export class User {\n    id: number;\n    firstName: string;\n    lastName: string;\n    age: number;\n\n    getName() {\n        return this.firstName + \" \" + this.lastName;\n    }\n\n    isAdult() {\n        return this.age > 36 && this.age < 60;\n    }\n}\n</code></pre>\n\n然后你想通过<code>user.json</code>来获取<code>User</code>的对象数组\n\n<pre><code class=\"language-typescript line-numbers\">fetch(\"users.json\").then((users: User[]) => {\n    // you can use users here, and type hinting also will be available to you,\n    //  but users are not actually instances of User class\n    // this means that you can\'t use methods of User class\n});\n</code></pre>\n\n现在你可以获取<code>users[0].firstname</code>但是由于你获取的是普通的js对象而非<code>User</code>类的对象，所以你无法调用<code>users[0].getName()</code>方法，而<strong>class-transformer</strong>就是为了把普通的js对象按你的需求转换成类对象而生的。\n\n你只要像下面这样就可以创建真正的<code>User[]</code>对象数组了\n\n<pre><code class=\"language-typescript line-numbers\">fetch(\"users.json\").then((users: Object[]) => {\n    const realUsers = plainToClass(User, users);\n    // now each user in realUsers is instance of User class\n});\n</code></pre>\n\n<h2>安装</h2>\n\n<ol>\n<li>安装class-transformer:\n<code>npm install class-transformer --save</code></p></li>\n<li>安装<code>reflect-metadata</code>\n\n<blockquote>\n  reflect-metadata是必须的，具体使用请看<a class=\"wp-editor-md-post-content-link\" href=\"[https://lichnow.com/notes/decorator.html#%E5%85%83%E4%BF%A1%E6%81%AF%E5%8F%8D%E5%B0%84API](https://lichnow.com/notes/decorator.html#元信息反射API)\">我这边文章</a>\n</blockquote></li>\n</ol>\n\n​         安装后在<code>app.ts</code>这种顶层文件你需要<code>import \"reflect-metadata\";</code>\n\n<h2>基础方法</h2>\n\n<h3>plainToClass</h3>\n\n普通对象转换为类对象\n\n<pre><code class=\"language-typescript line-numbers\">import {plainToClass} from \"class-transformer\";\n\nlet users = plainToClass(User, userJson); // to convert user plain object a single user. also supports arrays\n</code></pre>\n\n<h3>plainToClassFromExist</h3>\n\n普通对象合并已经创建的类实例\n\n<pre><code class=\"language-typescript line-numbers\">const defaultUser = new User();\ndefaultUser.role = \'user\';\n\nlet mixedUser = plainToClassFromExist(defaultUser, user); // mixed user should have the value role = user when no value is set otherwise.\n</code></pre>\n\n<h3>classToPlain</h3>\n\n类实例转换为普通对象\n\n<blockquote>\n  转换后可以使用<code>JSON.stringify</code>再转成普通的json文本\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">import {classToPlain} from \"class-transformer\";\nlet photo = classToPlain(photo);\n</code></pre>\n\n<h3>classToClass</h3>\n\n克隆类实例\n\n<pre><code class=\"language-typescript line-numbers\">import {classToClass} from \"class-transformer\";\nlet photo = classToClass(photo);\n</code></pre>\n\n可以使用<code>ignoreDecorators</code>选项去除所有原实例中的装饰器\n\n<h3>serialize</h3>\n\n直接把类实例转换为json文本,是不是数组都可以转换\n\n<pre><code class=\"language-typescript line-numbers\">import {serialize} from \"class-transformer\";\nlet photo = serialize(photo);\n</code></pre>\n\n<h3>deserialize 和 deserializeArray</h3>\n\n直接把json文本转换为类对象\n\n<pre><code class=\"language-typescript line-numbers\">import {deserialize} from \"class-transformer\";\nlet photo = deserialize(Photo, photo);\n</code></pre>\n\n如果json文本是个对象数组请使用<code>deserializeArray</code>方法\n\n<pre><code class=\"language-typescript line-numbers\">import {deserializeArray} from \"class-transformer\";\nlet photos = deserializeArray(Photo, photos);\n</code></pre>\n\n<h3>强制类型安全</h3>\n\n<code>plainToClass</code>会把所有的被转换对象的属性全部类实例的属性，即时类中并不存在某些属性\n\n<pre><code class=\"language-typescript line-numbers\">import {plainToClass} from \"class-transformer\";\n\nclass User {\n  id: number\n  firstName: string\n  lastName: string\n}\n\nconst fromPlainUser = {\n  unkownProp: \'hello there\',\n  firstName: \'Umed\',\n  lastName: \'Khudoiberdiev\',\n}\n\nconsole.log(plainToClass(User, fromPlainUser))\n\n// User {\n//   unkownProp: \'hello there\',\n//   firstName: \'Umed\',\n//   lastName: \'Khudoiberdiev\',\n// }\n</code></pre>\n\n你可以使用<code>excludeExtraneousValues</code>选项结合<code>Expose</code>装饰器来指定需要公开的属性\n\n<pre><code class=\"language-typescript line-numbers\">import {Expose, plainToClass} from \"class-transformer\";\n\nclass User {\n    @Expose() id: number;\n    @Expose() firstName: string;\n    @Expose() lastName: string;\n}\n\nconst fromPlainUser = {\n  unkownProp: \'hello there\',\n  firstName: \'Umed\',\n  lastName: \'Khudoiberdiev\',\n}\n\nconsole.log(plainToClass(User, fromPlainUser, { excludeExtraneousValues: true }))\n\n// User {\n//   id: undefined,\n//   firstName: \'Umed\',\n//   lastName: \'Khudoiberdiev\'\n// }\n</code></pre>\n\n<h2>子类型转换</h2>\n\n<h3>嵌套对象</h3>\n\n由于现在Typescript对反射还没有非常好的支持，所以你需要使用<code>@Type</code>装饰器来隐式地指定属性所属的类\n\n<pre><code class=\"language-typescript line-numbers\">import {Type, plainToClass} from \"class-transformer\";\n\nexport class Album {\n\n    id: number;\n\n    name: string;\n\n    @Type(() => Photo)\n    photos: Photo[];\n}\n\nexport class Photo {\n    id: number;\n    filename: string;\n}\n\nlet album = plainToClass(Album, albumJson);\n// now album is Album object with Photo objects inside\n</code></pre>\n\n<h3>多类型选项</h3>\n\n一个嵌套的子类型也可以匹配多个类型，这可以通过判断器实现。判断器需要指定一个<code>property</code>，而被转换js对象中的嵌套对象的也必须拥有与<code>property</code>相同的一个字段，并把值设置为需要转换的子类型的名称。判断器还需要指定所有的子类型值以及其名称，具体示例如下\n\n<pre><code class=\"language-typescript line-numbers\">import {Type, plainToClass} from \"class-transformer\";\n\nconst albumJson = {\n    \"id\": 1,\n    \"name\": \"foo\",\n    \"topPhoto\": {\n        \"id\": 9,\n        \"filename\": \"cool_wale.jpg\",\n        \"depth\": 1245,\n        \"__type\": \"underwater\"\n    }\n}\n\nexport abstract class Photo {\n    id: number;\n    filename: string;\n}\n\nexport class Landscape extends Photo {\n    panorama: boolean;\n}\n\nexport class Portrait extends Photo {\n    person: Person;\n}\n\nexport class UnderWater extends Photo {\n    depth: number;\n}\n\nexport class Album {\n\n    id: number;\n    name: string;\n\n    @Type(() => Photo, {\n        discriminator: {\n            property: \"__type\",\n            subTypes: [\n                { value: Landscape, name: \"landscape\" },\n                { value: Portrait, name: \"portrait\" },\n                { value: UnderWater, name: \"underwater\" }\n            ]\n        }\n    })\n    topPhoto: Landscape | Portrait | UnderWater;\n\n}\n\nlet album = plainToClass(Album, albumJson);\n// now album is Album object with a UnderWater object without `__type` property.\n</code></pre>\n\n此外可以设置<code>keepDiscriminatorProperty: true</code>，这样可以把判断器的属性也包含在转换后的对象中\n\n<h2>排除与公开</h2>\n\n<h3>公开方法的返回值</h3>\n\n添加<code>@Expose</code>装饰器即可公开getter和方法的返回值\n\n<pre><code class=\"language-typescript line-numbers\">import {Expose} from \"class-transformer\";\n\nexport class User {\n\n    id: number;\n    firstName: string;\n    lastName: string;\n    password: string;\n\n    @Expose()\n    get name() {\n        return this.firstName + \" \" + this.lastName;\n    }\n\n    @Expose()\n    getFullName() {\n        return this.firstName + \" \" + this.lastName;\n    }\n}\n</code></pre>\n\n<h3>公开属性为不同名称</h3>\n\n如果要使用其他名称公开某些属性，可以通过为<code>@Expose</code>装饰器指定<code>name</code>选项来实现：\n\n<pre><code class=\"language-typescript line-numbers\">import {Expose} from \"class-transformer\";\n\nexport class User {\n\n    @Expose({ name: \"uid\" })\n    id: number;\n\n    firstName: string;\n\n    lastName: string;\n\n    @Expose({ name: \"secretKey\" })\n    password: string;\n\n    @Expose({ name: \"fullName\" })\n    getFullName() {\n        return this.firstName + \" \" + this.lastName;\n    }\n}\n</code></pre>\n\n<h3>跳过指定属性</h3>\n\n有时您想在转换过程中跳过一些属性。这可以使用<code>@Exclude</code>装饰器完成：\n\n<pre><code class=\"language-typescript line-numbers\">import {Exclude} from \"class-transformer\";\n\nexport class User {\n\n    id: number;\n\n    email: string;\n\n    @Exclude()\n    password: string;\n}\n</code></pre>\n\n现在，当您转换用户时，<code>password</code>属性将被跳过，并且不包含在转换结果中。\n\n<h3>根据操作决定跳过</h3>\n\n我们可以通过<code>toClassOnly</code>或者<code>toPlainOnly</code>来控制一个属性在哪些操作中需要排除\n\n<pre><code class=\"language-typescript line-numbers\">import {Exclude} from \"class-transformer\";\n\nexport class User {\n\n    id: number;\n\n    email: string;\n\n    @Exclude({ toPlainOnly: true })\n    password: string;\n}\n</code></pre>\n\n现在<code>password</code>属性将会在<code>classToPlain</code>操作中排除，相反的可以使用<code>toClassOnly</code>\n\n<h3>跳过类的所有属性</h3>\n\n你可以通过在类上添加<code>@Exclude</code>装饰器并且在需要公开的属性上添加<code>@Expose</code>装饰器来只公开指定的属性\n\n<pre><code class=\"language-typescript line-numbers\">import {Exclude, Expose} from \"class-transformer\";\n\n@Exclude()\nexport class User {\n\n    @Expose()\n    id: number;\n\n    @Expose()\n    email: string;\n\n    password: string;\n}\n</code></pre>\n\n另外，您可以在转换期间设置排除策略：\n\n<pre><code class=\"language-typescript line-numbers\">import {classToPlain} from \"class-transformer\";\nlet photo = classToPlain(photo, { strategy: \"excludeAll\" });\n</code></pre>\n\n这时你不需要在添加<code>@Exclude</code>装饰器了\n\n<h3>跳过私有属性或某些前缀属性</h3>\n\n我们可以排除公开具有指定前缀的属性以及私有属性\n\n<pre><code class=\"language-typescript line-numbers\">import {Expose} from \"class-transformer\";\n\nexport class User {\n\n    id: number;\n    private _firstName: string;\n    private _lastName: string;\n    _password: string;\n\n    setName(firstName: string, lastName: string) {\n        this._firstName = firstName;\n        this._lastName = lastName;\n    }\n\n    @Expose()\n    get name() {\n        return this.firstName + \" \" + this.lastName;\n    }\n\n}\n\nconst user = new User();\nuser.id = 1;\nuser.setName(\"Johny\", \"Cage\");\nuser._password = 123;\n\nconst plainUser = classToPlain(user, { excludePrefixes: [\"_\"] });\n// here plainUser will be equal to\n// { id: 1, name: \"Johny Cage\" }\n</code></pre>\n\n<h3>使用组来控制排除的属性</h3>\n\n<pre><code class=\"language-typescript line-numbers\">import {Exclude, Expose} from \"class-transformer\";\n\n@Exclude()\nexport class User {\n\n    id: number;\n\n    name: string;\n\n    @Expose({ groups: [\"user\", \"admin\"] }) // this means that this data will be exposed only to users and admins\n    email: string;\n\n    @Expose({ groups: [\"user\"] }) // this means that this data will be exposed only to users\n    password: string;\n}\n\nlet user1 = classToPlain(user, { groups: [\"user\"] }); // will contain id, name, email and password\nlet user2 = classToPlain(user, { groups: [\"admin\"] }); // will contain id, name and email\n</code></pre>\n\n<h3>使用版本范围来控制公开和排除的属性</h3>\n\n如果要构建具有不同版本的API，则class-transformer具有非常有用的工具。您可以控制应在哪个版本中公开或排除模型的哪些属性。示例\n\n<pre><code class=\"language-typescript line-numbers\">import {Exclude, Expose} from \"class-transformer\";\n\n@Exclude()\nexport class User {\n\n    id: number;\n\n    name: string;\n\n    @Expose({ since: 0.7, until: 1 }) // this means that this property will be exposed for version starting from 0.7 until 1\n    email: string;\n\n    @Expose({ since: 2.1 }) // this means that this property will be exposed for version starting from 2.1\n    password: string;\n}\n\nlet user1 = classToPlain(user, { version: 0.5 }); // will contain id and name\nlet user2 = classToPlain(user, { version: 0.7 }); // will contain id, name and email\nlet user3 = classToPlain(user, { version: 1 }); // will contain id and name\nlet user4 = classToPlain(user, { version: 2 }); // will contain id and name\nlet user5 = classToPlain(user, { version: 2.1 }); // will contain id, name nad password\n</code></pre>\n\n<h2>特殊处理</h2>\n\n<h3>将日期字符串转换为Date对象</h3>\n\n有时，您的JavaScript对象中有一个以字符串格式接收的Date。您想从中创建一个真正的javascript Date对象。您只需将Date对象传递给<code>@Type</code>装饰器即可完成此操作：\n\n<blockquote>\n  当从类对象反向转换为普通对象时registrationDate将会被转回为字符串\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">import {Type} from \"class-transformer\";\n\nexport class User {\n\n    id: number;\n\n    email: string;\n\n    password: string;\n\n    @Type(() => Date)\n    registrationDate: Date;\n}\n</code></pre>\n\n当您想将值转换为<code>Number</code>, <code>String</code>, <code>Boolean</code> 类型时也是这样做\n\n<h3>数组处理</h3>\n\n当你想转换数组时，你必须使用<code>@Type</code>装饰器指定数组项的类型也可以使用自定义的数组类型\n\n<code>Set</code>和<code>Map</code>也是一样\n\n<pre><code class=\"language-typescript line-numbers\">import {Type} from \"class-transformer\";\n\nexport class AlbumCollection extends Array<Album> {\n    // custom array functions ...\n}\n\nexport class Photo {\n\n    id: number;\n\n    name: string;\n\n    @Type(() => Album)\n    albums: Album[];\n    // albums: AlbumCollection; 使用自定义类型\n}\n\nexport class Skill {\n    name: string;\n}\n\nexport class Weapon {\n    name: string;\n    range: number;\n}\n\nexport class Player {\n    name: string;\n\n    @Type(() => Skill)\n    skills: Set<Skill>;\n\n    @Type(() => Weapon)\n    weapons: Map<string, Weapon>;\n}\n</code></pre>\n\n<h2>自定义转换</h2>\n\n<h3>基本使用</h3>\n\n你可以使用<code>@Transform</code>添加额外的数据转换,例如当你想把通过普通对象中的字符串日期转换后的<code>date</code>对象继续转换变成<code>moment</code>库的对象：\n\n<pre><code class=\"language-typescript line-numbers\">import {Transform} from \"class-transformer\";\nimport * as moment from \"moment\";\nimport {Moment} from \"moment\";\n\nexport class Photo {\n\n    id: number;\n\n    @Type(() => Date)\n    @Transform(value => moment(value), { toClassOnly: true })\n    date: Moment;\n}\n</code></pre>\n\n现在当执行<code>plainToClass</code>转换后的对象中的<code>date</code>属性将是一个<code>Moment</code>对象。<code>@Transform</code>同样支持组和版本。\n\n<h3>高级用法</h3>\n\n<code>@Transform</code>有更多的参数给你创建自定义的转换逻辑\n\n<pre><code class=\"language-typescript line-numbers\">@Transform((value, obj, type) => value)\n</code></pre>\n\n<table>\n<thead>\n<tr>\n  <th align=\"left\">参数</th>\n  <th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td align=\"left\"><code>value</code></td>\n  <td>自定义转换执行前的属性值</td>\n</tr>\n<tr>\n  <td align=\"left\"><code>obj</code></td>\n  <td>转换源对象</td>\n</tr>\n<tr>\n  <td align=\"left\"><code>type</code></td>\n  <td>转换的类型</td>\n</tr>\n</tbody>\n</table>\n\n<h3>其他装饰器</h3>\n\n<table>\n<thead>\n<tr>\n  <th>签名</th>\n  <th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td><code>@TransformClassToPlain</code></td>\n  <td><code>@TransformClassToPlain({ groups: [\"user\"] })</code></td>\n</tr>\n<tr>\n  <td><code>@TransformClassToClass</code></td>\n  <td><code>@TransformClassToClass({ groups: [\"user\"] })</code></td>\n</tr>\n<tr>\n  <td><code>@TransformPlainToClas</code></td>\n  <td><code>@TransformPlainToClass(User, { groups: [\"user\"] })</code></td>\n</tr>\n</tbody>\n</table>\n\n上述装饰器接受一个可选参数：<code>ClassTransformOptions</code>-转换选项，例如groups, version, name，示例：\n\n<pre><code class=\"language-typescript line-numbers\">@Exclude()\nclass User {\n\n    id: number;\n\n    @Expose()\n    firstName: string;\n\n    @Expose()\n    lastName: string;\n\n    @Expose({ groups: [\'user.email\'] })\n    email: string;\n\n    password: string;\n}\n\nclass UserController {\n\n    @TransformClassToPlain({ groups: [\'user.email\'] })\n    getUser() {\n        const user = new User();\n        user.firstName = \"Snir\";\n        user.lastName = \"Segal\";\n        user.password = \"imnosuperman\";\n\n        return user;\n    }\n}\n\nconst controller = new UserController();\nconst user = controller.getUser();\n</code></pre>\n\n<code>user</code>对象将包含firstname,latstname和email\n\n<h3>使用泛型</h3>\n\n由于目前Typescript对反射的支持还没有完善，所以只能使用其它替代方案，具体可以查看<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/pleerock/class-transformer/tree/master/sample/sample4-generics\">这个例子</a>\n\n<h3>隐式类型转换</h3>\n\n<blockquote>\n  你如果将class-validator与class-transformer一起使用，则可能不想启用此功能。\n</blockquote>\n\n根据Typescript提供的类型信息，启用内置类型之间的自动转换。默认禁用。\n\n<pre><code class=\"language-typescript line-numbers\">import { IsString } from \'class-validator\'\n\nclass MyPayload {\n\n  @IsString()\n  prop: string\n}\n\n\nconst result1 = plainToClass(MyPayload, { prop: 1234 }, { enableImplicitConversion: true });\nconst result2 = plainToClass(MyPayload, { prop: 1234 }, { enableImplicitConversion: false });\n\n/**\n *  result1 will be `{ prop: \"1234\" }` - notice how the prop value has been converted to string.\n *  result2 will be `{ prop: 1234 }` - default behaviour\n */\n</code></pre>\n\n<h3>循环引用</h3>\n\n如果<code>User</code>包含一个<code>Photo</code>类型的<code>photos</code>数组属性，而<code>Photo</code>又包含一个属性链接到<code>User</code>，则转换过程中此属性会被忽略，除了<code>classToClass</code>操作。', 39, 'https://jikexingkong.com/docs/nodejs/class-transformer', 0, 'docs', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(154, 1, '2021-11-23 05:54:34', '2021-11-22 21:54:34', '<h1>class-validator使用教程</h1>\n\n用于Typescript或ES6+的类验证，基于<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/chriso/validator.js\">validator.js</a>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/typestack/class-validator#manual-validation\">手动验证方法列表</a>和<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/typestack/class-validator#validation-decorators\">验证装饰器列表</a>\n\n<h2>安装</h2>\n\n<pre><code class=\"language-shell line-numbers\">npm install class-validator --save\n</code></pre>\n\n<h3>基本使用</h3>\n\n创建一个<code>Post</code>作为演示,在每个属性上添加不同的验证<a class=\"wp-editor-md-post-content-link\" href=\"https://lichnow.com/notes/decorator.html\">装饰器</a>尝试\n\n<pre><code class=\"language-typescript line-numbers\">import {validate, validateOrReject, Contains, IsInt, Length, IsEmail, IsFQDN, IsDate, Min, Max} from \"class-validator\";\n\nexport class Post {\n\n    @Length(10, 20)\n    title: string;\n\n    @Contains(\"hello\")\n    text: string;\n\n    @IsInt()\n    @Min(0)\n    @Max(10)\n    rating: number;\n\n    @IsEmail()\n    email: string;\n\n    @IsFQDN()\n    site: string;\n\n    @IsDate()\n    createDate: Date;\n\n}\n\nlet post = new Post();\npost.title = \"Hello\"; // should not pass\npost.text = \"this is a great post about hell world\"; // should not pass\npost.rating = 11; // should not pass\npost.email = \"google.com\"; // should not pass\npost.site = \"googlecom\"; // should not pass\n\n// 如果验证失败不会停止运行程序\nvalidate(post).then(errors => { \n    if (errors.length > 0) {\n        console.log(\"validation failed. errors: \", errors);\n    } else {\n        console.log(\"validation succeed\");\n    }\n});\n\n// 验证失败就停止运行程序\nvalidateOrReject(post).catch(errors => {\n    console.log(\"Promise rejected (validation failed). Errors: \", errors);\n});\n// 或者\nasync function validateOrRejectExample(input) {\n    try {\n        await validateOrReject(input);\n    } catch (errors) {\n        console.log(\"Caught promise rejection (validation failed). Errors: \", errors)\n    }\n}\n</code></pre>\n\n<h3>选项</h3>\n\n<code>validate</code>函数的第二个参数是一个选项对象，尽量设置<code>forbidNonWhitelisted</code>为<code>true</code>以避免unkown对象的输入验证\n\n<pre><code class=\"language-typescript line-numbers\">export interface ValidatorOptions {\n\n    skipMissingProperties?: boolean;\n    whitelist?: boolean;\n    forbidNonWhitelisted?: boolean;\n    groups?: string[];\n    dismissDefaultMessages?: boolean;\n    validationError?: {\n        target?: boolean;\n        value?: boolean;\n    };\n\n    forbidUnknownValues?: boolean;\n}\n</code></pre>\n\n<h3>验证错误</h3>\n\n验证失败返回的错误数组是<code>ValidationError</code>类的对象的数组，格式如下\n\n<pre><code class=\"language-typescript line-numbers\">{\n    target: Object; // Object that was validated.\n    property: string; // Object\'s property that haven\'t pass validation.\n    value: any; // Value that haven\'t pass a validation.\n    constraints?: { // Constraints that failed validation with error messages.\n        [type: string]: string;\n    };\n    children?: ValidationError[]; // Contains all nested validation errors of the property\n}\n</code></pre>\n\n返回的格式如下\n\n<pre><code class=\"language-javascript line-numbers\">[{\n    target: /* post object */,\n    property: \"title\",\n    value: \"Hello\",\n    constraints: {\n        length: \"$property must be longer than or equal to 10 characters\"\n    }\n}, {\n    target: /* post object */,\n    property: \"text\",\n    value: \"this is a great post about hell world\",\n    constraints: {\n        contains: \"text must contain a hello string\"\n    }\n},\n// and other errors\n]\n</code></pre>\n\n在http响应中我们一般不想在错误中暴露<code>target</code>，那么就可以如下方式禁用它\n\n<pre><code class=\"language-typescript line-numbers\">validator.validate(post, { validationError: { target: false } });\n</code></pre>\n\n<h3>验证消息</h3>\n\n我们可以自定义在<code>ValidationError</code>对象中返回的错误消息\n\n<pre><code class=\"language-typescript line-numbers\">import {MinLength, MaxLength} from \"class-validator\";\n\nexport class Post {\n\n    @MinLength(10, {\n        message: \"Title is too short\"\n    })\n    @MaxLength(50, {\n        message: \"Title is too long\"\n    })\n    title: string;\n}\n</code></pre>\n\n消息可以接受几个参数作为变量，用字符串混合的方式放入，比如<code>\"$constraint1 characters\"</code>\n\n<pre><code class=\"language-typescript line-numbers\">import {MinLength, MaxLength} from \"class-validator\";\n\nexport class Post {\n\n    @MinLength(10, { // here, $constraint1 will be replaced with \"10\", and $value with actual supplied value\n        message: \"Title is too short. Minimal length is $constraint1 characters, but actual is $value\"\n    })\n    @MaxLength(50, { // here, $constraint1 will be replaced with \"50\", and $value with actual supplied value\n        message: \"Title is too long. Maximal length is $constraint1 characters, but actual is $value\"\n    })\n    title: string;\n}\n</code></pre>\n\n能接受的变量如下\n\n<ul>\n<li><code>value</code> - 被验证的值</li>\n<li><code>constraints</code> - 由指定验证类型定义的约束数组</li>\n<li><code>targetName</code> - 验证对象的类的名称</li>\n<li><code>object</code> - 被验证的对象</li>\n<li><code>property</code> - 被验证的属性名</li>\n</ul>\n\n当然<code>message</code>还可以接受一个函数的返回值，这个函数的参数为<code>ValidationArguments</code>类的对象，而<code>ValidationArguments</code>类的属性就是上面的变量列表\n\n<pre><code class=\"language-typescript line-numbers\">import {MinLength, MaxLength, ValidationArguments} from \"class-validator\";\n\nexport class Post {\n\n    @MinLength(10, {\n        message: (args: ValidationArguments) => {\n            if (args.value.length === 1) {\n                return \"Too short, minimum length is 1 character\";\n            } else {\n                return \"Too short, minimum length is \" + args.constraints[0] + \" characters\";\n            }\n        }\n    })\n    title: string;\n}\n</code></pre>\n\n<h2>特殊类型</h2>\n\n<code>class-validator</code>对一些经常使用的特殊类型有专门的处理方法\n\n<h3>集合类型</h3>\n\n验证数组,<code>Sets</code>,<code>Map</code>等集合类型需要开启<code>each</code>选项\n\n<h3>验证数组</h3>\n\n<pre><code class=\"language-typescript line-numbers\">import {MinLength, MaxLength} from \"class-validator\";\n\nexport class Post {\n\n    @MaxLength(20, {\n        each: true\n    })\n    tags: string[];\n}\n</code></pre>\n\n<h3>验证Sets</h3>\n\n<pre><code class=\"language-typescript line-numbers\">import {MinLength, MaxLength} from \"class-validator\";\n\nexport class Post {\n\n    @MaxLength(20, {\n        each: true\n    })\n    tags: Set<string>;\n}\n</code></pre>\n\n<h3>验证Map</h3>\n\n<pre><code class=\"language-typescript line-numbers\">import {MinLength, MaxLength} from \"class-validator\";\n\nexport class Post {\n\n    @MaxLength(20, {\n        each: true\n    })\n    tags: Map<string, string>;\n}\n</code></pre>\n\n<h3>嵌套对象</h3>\n\n一个验证的类中的某些属性可能是类一个的对象，比如<code>Post</code>类的<code>user</code>属性为<code>User</code>类，则可以使用<code>@ValidateNested()</code>方式来同时验证<code>Post</code>和嵌入的<code>User</code>类\n\n<pre><code class=\"language-typescript line-numbers\">import {ValidateNested} from \"class-validator\";\n\nexport class Post {\n\n    @ValidateNested()\n    user: User;\n\n}\n</code></pre>\n\n<h3>Promise对象</h3>\n\n如果待验证的属性是一个<code>Promise</code>对象，比如通过<code>await</code>关键字返回的值，则可以使用<code>@ValidatePromise()</code>\n\n<pre><code class=\"language-typescript line-numbers\">import {ValidatePromise, Min} from \"class-validator\";\n\nexport class Post {\n\n    @Min(0)\n    @ValidatePromise()\n    userId: Promise<number>;\n\n}\n</code></pre>\n\n<code>@ValidatePromise()</code>也可以和<code>@ValidateNested()</code>一起使用\n\n<pre><code class=\"language-typescript line-numbers\">import {ValidateNested, ValidatePromise} from \"class-validator\";\n\nexport class Post {\n\n    @ValidateNested()\n    @ValidatePromise()\n    user: Promise<User>;\n\n}\n</code></pre>\n\n<h2>高级主题</h2>\n\n<h3>子类验证</h3>\n\n如果定义一个从另一个继承的子类时，子类将自动继承父级的装饰器。如果在后代类中重新定义了属性，则装饰器将从该类和基类中继承\n\n<pre><code class=\"language-typescript line-numbers\">import {validate} from \"class-validator\";\n\nclass BaseContent {\n\n    @IsEmail()\n    email: string;\n\n    @IsString()\n    password: string;\n}\n\nclass User extends BaseContent {\n\n    @MinLength(10)\n    @MaxLength(20)\n    name: string;\n\n    @Contains(\"hello\")\n    welcome: string;\n\n    @MinLength(20)\n    password: string; /\n}\n\nlet user = new User();\n\nuser.email = \"invalid email\";  // inherited property\nuser.password = \"too short\" // password wil be validated not only against IsString, but against MinLength as well\nuser.name = \"not valid\";\nuser.welcome = \"helo\";\n\nvalidate(user).then(errors => {\n    // ...\n});  // it will return errors for email, title and text properties\n</code></pre>\n\n<h3>条件验证</h3>\n\n当某个属性需要满足一定条件验证时可以使用(<code>@ValidateIf</code>)装饰器\n\n<pre><code class=\"language-typescript line-numbers\">import {ValidateIf, IsNotEmpty} from \"class-validator\";\n\nexport class Post {\n    otherProperty:string;\n\n    @ValidateIf(o => o.otherProperty === \"value\")\n    @IsNotEmpty()\n    example:string;\n}\n</code></pre>\n\n<h3>白名单</h3>\n\n一个被验证的类的对象可以定义在类中不存在的属性，在验证时不会产生错误。为了使只有添加了<strong>验证装饰器</strong>的属性才能被定义，你需要把<code>whitelist</code>设置为<code>true</code>，那么如果对象中定义一个类中不存在的属性就无法通过验证了。\n\n<pre><code class=\"language-typescript line-numbers\">import {validate} from \"class-validator\";\n// ...\nvalidate(post, { whitelist: true });\n</code></pre>\n\n开启白名单之后所有没有加上<strong>验证装饰器</strong>的属性被定义后都将无法通过验证，如果你想一些属性可以被定义但是又不想被验证，如果<a class=\"wp-editor-md-post-content-link\" href=\"#条件验证\">条件验证</a>中的<code>otherProperty</code>属性，那么你需要在该属性上面添加一个<code>@Allow</code>装饰器\n\n<pre><code class=\"language-typescript line-numbers\">/**\n * title可以被定义\n * nonWhitelistedProperty不能被定义，否则验证失败\n */\nimport {validate, Allow, Min} from \"class-validator\";\n\nexport class Post {\n\n    @Allow()\n    title: string;\n\n    @Min(0)\n    views: number;\n\n    nonWhitelistedProperty: number;\n}\n\nlet post = new Post();\npost.title = \'Hello world!\';\npost.views = 420;\n\npost.nonWhitelistedProperty = 69;\n// 额外属性不能被添加，否则验证失败\n(post as any).anotherNonWhitelistedProperty = \"something\";\n\nvalidate(post).then(errors => {\n  // post.nonWhitelistedProperty is not defined\n  // (post as any).anotherNonWhitelistedProperty is not defined\n  ...\n});\n</code></pre>\n\n如果你想要所有没有添加<strong>验证装饰器</strong>的属性都无法定义，则可以设置<code>forbidNonWhitelisted</code>为<code>true</code>\n\n<blockquote>\n  这个一般不要设置，否则属性添加@Allow会都没用了\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">import {validate} from \"class-validator\";\n// ...\nvalidate(post, { whitelist: true, forbidNonWhitelisted: true });\n</code></pre>\n\n<h3>添加上下文</h3>\n\n你可以在验证装饰其中添加一个自定义的上下文对象，此对象在验证失败时被<code>ValidationError</code>的实例获取\n\n<pre><code class=\"language-typescript line-numbers\">import { validate } from \'class-validator\';\n\nclass MyClass {\n    @MinLength(32, {\n        message: \"EIC code must be at least 32 characters\",\n        context: {\n            errorCode: 1003,\n            developerNote: \"The validated string must contain 32 or more characters.\"\n        }\n    })\n    eicCode: string;\n}\n\nconst model = new MyClass();\n\nvalidate(model).then(errors => {\n    //errors[0].contexts[\'minLength\'].errorCode === 1003\n});\n</code></pre>\n\n<h3>跳过缺失属性</h3>\n\n有时候你需要跳过一些对象中没有设置的属性，比如更新数据模型时，与创建模型不同的是你只会更新部分值，那么这时候你就需要设置<code>skipMissingProperties</code>为<code>true</code>，当然可能一部分属性是你不想被跳过验证的，那么需要在这些属性上加上<code>@IsDefined()</code>装饰器，加了<code>@IsDefined()</code>装饰器的属性会忽略<code>skipMissingProperties</code>而必定被验证\n\n<pre><code class=\"language-typescript line-numbers\">import {validate} from \"class-validator\";\n// ...\nvalidate(post, { skipMissingProperties: true });\n</code></pre>\n\n<h3>验证组</h3>\n\n<pre><code class=\"language-typescript line-numbers\">import {validate, Min, Length} from \"class-validator\";\n\nexport class User {\n\n    @Min(12, {\n        groups: [\"registration\"]\n    })\n    age: number;\n\n    @Length(2, 20, {\n        groups: [\"registration\", \"admin\"]\n    })\n    name: string;\n}\n\nlet user = new User();\nuser.age = 10;\nuser.name = \"Alex\";\n\nvalidate(user, {\n    groups: [\"registration\"]\n}); // 无法通过验证\n\nvalidate(user, {\n    groups: [\"admin\"]\n}); // 可以通过验证\n\nvalidate(user, {\n    groups: [\"registration\", \"admin\"]\n}); // 无法通过验证\n\nvalidate(user, {\n    groups: undefined // 默认模式\n}); // 无法通过验证，因为没有指定group则所有属性都将被验证\n\nvalidate(user, {\n    groups: []\n}); // 无法通过验证 (与\'groups: undefined\'相同)\n</code></pre>\n\n在验证中还有一个<code>always: true</code>选项，如果添加了此选项，无论验证时设定的是哪种模式的<code>groups</code>，都将被验证\n\n<h3>使用服务容器</h3>\n\n你可以使用服务容器来加载验证器通过依赖注入的方式使用。以下如何将其与<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/pleerock/typedi\">typedi</a>集成的示例：\n\n<pre><code class=\"language-typescript line-numbers\">import {Container} from \"typedi\";\nimport {useContainer, Validator} from \"class-validator\";\n\n// do this somewhere in the global application level:\nuseContainer(Container);\nlet validator = Container.get(Validator);\n\n// now everywhere you can inject Validator class which will go from the container\n// also you can inject classes using constructor injection into your custom ValidatorConstraint-s\n</code></pre>\n\n<h3>非装饰器验证</h3>\n\n如果你的运行环境不支持装饰器请看<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/typestack/class-validator#defining-validation-schema-without-decorators\">这里</a>\n\n<h3>验证普通对象</h3>\n\n<blockquote>\n  Nest.js中使用的验证管道就是class-validator+class-transformer结合的方式\n</blockquote>\n\n由于装饰器的性质，必须使用<code>new class()</code>语法实例化待验证的对象。如果你使用了class-validator装饰器定义了类，并且想要验证普通的JS对象（文本对象或JSON.parse返回），则需要将其转换为类实例（例如，使用<a class=\"wp-editor-md-post-content-link\" href=\"[class-transformer](https://github.com/pleerock/class-transformer)\">class-transformer</a>）或仅使用<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/19majkel94/class-transformer-validator\">class-transformer-validator</a>扩展可以为您完成此任务。\n\n<h2>自定义验证</h2>\n\n<h3>自定义规则类</h3>\n\n你可以创建一个自定义的验证规则的类，并在规则类上添加<code>@ValidatorConstraint</code>装饰器。 还可以设置验证约束名称(<code>name</code>选项)-该名称将在<code>ValidationError</code>中用作“error type”。 如果您不提供约束名称，它将自动生成。\n\n规则类必须实现<code>ValidatorConstraintInterface</code>接口及<code>validate</code>方法，该接口定义了验证逻辑。 如果验证成功，则方法返回<code>true</code>，否则返回<code>false</code>。 自定义验证器可以是异步的，如果您想在执行一些异步操作后执行验证，只需在<code>validate</code>方法中返回带有布尔值的<code>promise</code>。\n\n我们还可以定义了可选方法<code>defaultMessage</code>，它在属性上的装饰器未设置错误消息的情况下定义了默认错误消息。\n\n首选我们创建一个<code>CustomTextLength</code>演示用的验证规则类\n\n<pre><code class=\"language-typescript line-numbers\">import {ValidatorConstraint, ValidatorConstraintInterface, ValidationArguments} from \"class-validator\";\n\n@ValidatorConstraint({ name: \"customText\", async: false })\nexport class CustomTextLength implements ValidatorConstraintInterface {\n\n    validate(text: string, args: ValidationArguments) {\n        return text.length > 1 && text.length < 10; // 对于异步验证，您必须在此处返回Promise<boolean>\n    }\n\n    defaultMessage(args: ValidationArguments) { // 如果验证失败，您可以在此处提供默认错误消息\n        return \"Text ($value) is too short or too long!\";\n    }\n\n}\n</code></pre>\n\n定义好规则后我们就可以在类中使用了\n\n<pre><code class=\"language-typescript line-numbers\">import {Validate} from \"class-validator\";\nimport {CustomTextLength} from \"./CustomTextLength\";\n\nclass Post {\n\n    @Validate(CustomTextLength, {\n        message: \"Title is too short or long!\"\n    })\n    title: string;\n\n}\n\n\nvalidate(post).then(errors => {\n    // ...\n});\n</code></pre>\n\n你也可以将自定义的约束传入规则类，并通过约束来设定验证的条件\n\n<pre><code class=\"language-typescript line-numbers\">import {Validate} from \"class-validator\";\nimport {CustomTextLength} from \"./CustomTextLength\";\n\nimport {ValidationArguments, ValidatorConstraint, ValidatorConstraintInterface} from \"class-validator\";\n\n@ValidatorConstraint()\nclass CustomTextLength implements ValidatorConstraintInterface {\n\n    validate(text: string, validationArguments: ValidationArguments) {\n        return text.length > validationArguments.constraints[0] && text.length < validationArguments.constraints[1];\n    }\n\n}\n\nclass Post {\n\n    @Validate(CustomTextLength, [3, 20], {\n        message: \"Wrong post title\"\n    })\n    title: string;\n\n}\n</code></pre>\n\n<h3>自定义装饰器</h3>\n\n创建自定义装饰器的方法类似创建自定义规则类，只是使用装饰器而已\n\n<blockquote>\n  装饰器的详细使用请看我<a class=\"wp-editor-md-post-content-link\" href=\"https://lichnow.com/notes/decorator.html\">这篇文章</a>\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">import {registerDecorator, ValidationOptions, ValidationArguments} from \"class-validator\";\n\nfunction IsLongerThan(property: string, validationOptions?: ValidationOptions) {\n   return function (object: Object, propertyName: string) {\n        registerDecorator({\n            name: \"isLongerThan\",\n            target: object.constructor,\n            propertyName: propertyName,\n            constraints: [property],\n            options: validationOptions,\n            validator: {\n                validate(value: any, args: ValidationArguments) {\n                    const [relatedPropertyName] = args.constraints;\n                    const relatedValue = (args.object as any)[relatedPropertyName];\n                    return  typeof value === \"string\" &&\n                           typeof relatedValue === \"string\" &&\n                           value.length > relatedValue.length; // you can return a Promise<boolean> here as well, if you want to make async validation\n                }\n            }\n        });\n   };\n}\n\nexport class Post {\n\n    title: string;\n\n    @IsLongerThan(\"title\", {\n       /* you can also use additional validation options, like \"groups\" in your custom validation decorators. \"each\" is not supported */\n       message: \"Text must be longer than the title\"\n    })\n    text: string;\n\n}\n</code></pre>\n\n在自定义装饰器上仍然可以使用<code>ValidationConstraint</code>装饰器。我们在创建一个<code>IsUserAlreadyExist</code>验证装饰器演示\n\n<pre><code class=\"language-typescript line-numbers\">import {registerDecorator, ValidationOptions, ValidatorConstraint, ValidatorConstraintInterface, ValidationArguments} from \"class-validator\";\n\n@ValidatorConstraint({ async: true })\nclass IsUserAlreadyExistConstraint implements ValidatorConstraintInterface {\n\n    validate(userName: any, args: ValidationArguments) {\n        return UserRepository.findOneByName(userName).then(user => {\n            if (user) return false;\n            return true;\n        });\n    }\n\n}\n\nfunction IsUserAlreadyExist(validationOptions?: ValidationOptions) {\n   return function (object: Object, propertyName: string) {\n        registerDecorator({\n            target: object.constructor,\n            propertyName: propertyName,\n            options: validationOptions,\n            constraints: [],\n            validator: IsUserAlreadyExistConstraint\n        });\n   };\n}\n\nclass User {\n\n    @IsUserAlreadyExist({\n       message: \"User $value already exists. Choose another name.\"\n    })\n    name: string;\n\n}\n</code></pre>\n\n<h3>同步验证</h3>\n\n如果只是想简单的进行同步验证，可以使用<code>validateSync</code>代替<code>validate</code>。不过需要注意的是<code>validateSync</code>会忽略所有的异步验证。', 'class-validator(完结)', '', 'publish', 'open', 'closed', '', 'class-validator', '', '', '2022-08-17 22:30:49', '2022-08-17 14:30:49', '<h1>class-validator使用教程</h1>\n\n用于Typescript或ES6+的类验证，基于<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/chriso/validator.js\">validator.js</a>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/typestack/class-validator#manual-validation\">手动验证方法列表</a>和<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/typestack/class-validator#validation-decorators\">验证装饰器列表</a>\n\n<h2>安装</h2>\n\n<pre><code class=\"language-shell line-numbers\">npm install class-validator --save\n</code></pre>\n\n<h3>基本使用</h3>\n\n创建一个<code>Post</code>作为演示,在每个属性上添加不同的验证<a class=\"wp-editor-md-post-content-link\" href=\"https://lichnow.com/notes/decorator.html\">装饰器</a>尝试\n\n<pre><code class=\"language-typescript line-numbers\">import {validate, validateOrReject, Contains, IsInt, Length, IsEmail, IsFQDN, IsDate, Min, Max} from \"class-validator\";\n\nexport class Post {\n\n    @Length(10, 20)\n    title: string;\n\n    @Contains(\"hello\")\n    text: string;\n\n    @IsInt()\n    @Min(0)\n    @Max(10)\n    rating: number;\n\n    @IsEmail()\n    email: string;\n\n    @IsFQDN()\n    site: string;\n\n    @IsDate()\n    createDate: Date;\n\n}\n\nlet post = new Post();\npost.title = \"Hello\"; // should not pass\npost.text = \"this is a great post about hell world\"; // should not pass\npost.rating = 11; // should not pass\npost.email = \"google.com\"; // should not pass\npost.site = \"googlecom\"; // should not pass\n\n// 如果验证失败不会停止运行程序\nvalidate(post).then(errors => { \n    if (errors.length > 0) {\n        console.log(\"validation failed. errors: \", errors);\n    } else {\n        console.log(\"validation succeed\");\n    }\n});\n\n// 验证失败就停止运行程序\nvalidateOrReject(post).catch(errors => {\n    console.log(\"Promise rejected (validation failed). Errors: \", errors);\n});\n// 或者\nasync function validateOrRejectExample(input) {\n    try {\n        await validateOrReject(input);\n    } catch (errors) {\n        console.log(\"Caught promise rejection (validation failed). Errors: \", errors)\n    }\n}\n</code></pre>\n\n<h3>选项</h3>\n\n<code>validate</code>函数的第二个参数是一个选项对象，尽量设置<code>forbidNonWhitelisted</code>为<code>true</code>以避免unkown对象的输入验证\n\n<pre><code class=\"language-typescript line-numbers\">export interface ValidatorOptions {\n\n    skipMissingProperties?: boolean;\n    whitelist?: boolean;\n    forbidNonWhitelisted?: boolean;\n    groups?: string[];\n    dismissDefaultMessages?: boolean;\n    validationError?: {\n        target?: boolean;\n        value?: boolean;\n    };\n\n    forbidUnknownValues?: boolean;\n}\n</code></pre>\n\n<h3>验证错误</h3>\n\n验证失败返回的错误数组是<code>ValidationError</code>类的对象的数组，格式如下\n\n<pre><code class=\"language-typescript line-numbers\">{\n    target: Object; // Object that was validated.\n    property: string; // Object\'s property that haven\'t pass validation.\n    value: any; // Value that haven\'t pass a validation.\n    constraints?: { // Constraints that failed validation with error messages.\n        [type: string]: string;\n    };\n    children?: ValidationError[]; // Contains all nested validation errors of the property\n}\n</code></pre>\n\n返回的格式如下\n\n<pre><code class=\"language-javascript line-numbers\">[{\n    target: /* post object */,\n    property: \"title\",\n    value: \"Hello\",\n    constraints: {\n        length: \"$property must be longer than or equal to 10 characters\"\n    }\n}, {\n    target: /* post object */,\n    property: \"text\",\n    value: \"this is a great post about hell world\",\n    constraints: {\n        contains: \"text must contain a hello string\"\n    }\n},\n// and other errors\n]\n</code></pre>\n\n在http响应中我们一般不想在错误中暴露<code>target</code>，那么就可以如下方式禁用它\n\n<pre><code class=\"language-typescript line-numbers\">validator.validate(post, { validationError: { target: false } });\n</code></pre>\n\n<h3>验证消息</h3>\n\n我们可以自定义在<code>ValidationError</code>对象中返回的错误消息\n\n<pre><code class=\"language-typescript line-numbers\">import {MinLength, MaxLength} from \"class-validator\";\n\nexport class Post {\n\n    @MinLength(10, {\n        message: \"Title is too short\"\n    })\n    @MaxLength(50, {\n        message: \"Title is too long\"\n    })\n    title: string;\n}\n</code></pre>\n\n消息可以接受几个参数作为变量，用字符串混合的方式放入，比如<code>\"$constraint1 characters\"</code>\n\n<pre><code class=\"language-typescript line-numbers\">import {MinLength, MaxLength} from \"class-validator\";\n\nexport class Post {\n\n    @MinLength(10, { // here, $constraint1 will be replaced with \"10\", and $value with actual supplied value\n        message: \"Title is too short. Minimal length is $constraint1 characters, but actual is $value\"\n    })\n    @MaxLength(50, { // here, $constraint1 will be replaced with \"50\", and $value with actual supplied value\n        message: \"Title is too long. Maximal length is $constraint1 characters, but actual is $value\"\n    })\n    title: string;\n}\n</code></pre>\n\n能接受的变量如下\n\n<ul>\n<li><code>value</code> - 被验证的值</li>\n<li><code>constraints</code> - 由指定验证类型定义的约束数组</li>\n<li><code>targetName</code> - 验证对象的类的名称</li>\n<li><code>object</code> - 被验证的对象</li>\n<li><code>property</code> - 被验证的属性名</li>\n</ul>\n\n当然<code>message</code>还可以接受一个函数的返回值，这个函数的参数为<code>ValidationArguments</code>类的对象，而<code>ValidationArguments</code>类的属性就是上面的变量列表\n\n<pre><code class=\"language-typescript line-numbers\">import {MinLength, MaxLength, ValidationArguments} from \"class-validator\";\n\nexport class Post {\n\n    @MinLength(10, {\n        message: (args: ValidationArguments) => {\n            if (args.value.length === 1) {\n                return \"Too short, minimum length is 1 character\";\n            } else {\n                return \"Too short, minimum length is \" + args.constraints[0] + \" characters\";\n            }\n        }\n    })\n    title: string;\n}\n</code></pre>\n\n<h2>特殊类型</h2>\n\n<code>class-validator</code>对一些经常使用的特殊类型有专门的处理方法\n\n<h3>集合类型</h3>\n\n验证数组,<code>Sets</code>,<code>Map</code>等集合类型需要开启<code>each</code>选项\n\n<h3>验证数组</h3>\n\n<pre><code class=\"language-typescript line-numbers\">import {MinLength, MaxLength} from \"class-validator\";\n\nexport class Post {\n\n    @MaxLength(20, {\n        each: true\n    })\n    tags: string[];\n}\n</code></pre>\n\n<h3>验证Sets</h3>\n\n<pre><code class=\"language-typescript line-numbers\">import {MinLength, MaxLength} from \"class-validator\";\n\nexport class Post {\n\n    @MaxLength(20, {\n        each: true\n    })\n    tags: Set<string>;\n}\n</code></pre>\n\n<h3>验证Map</h3>\n\n<pre><code class=\"language-typescript line-numbers\">import {MinLength, MaxLength} from \"class-validator\";\n\nexport class Post {\n\n    @MaxLength(20, {\n        each: true\n    })\n    tags: Map<string, string>;\n}\n</code></pre>\n\n<h3>嵌套对象</h3>\n\n一个验证的类中的某些属性可能是类一个的对象，比如<code>Post</code>类的<code>user</code>属性为<code>User</code>类，则可以使用<code>@ValidateNested()</code>方式来同时验证<code>Post</code>和嵌入的<code>User</code>类\n\n<pre><code class=\"language-typescript line-numbers\">import {ValidateNested} from \"class-validator\";\n\nexport class Post {\n\n    @ValidateNested()\n    user: User;\n\n}\n</code></pre>\n\n<h3>Promise对象</h3>\n\n如果待验证的属性是一个<code>Promise</code>对象，比如通过<code>await</code>关键字返回的值，则可以使用<code>@ValidatePromise()</code>\n\n<pre><code class=\"language-typescript line-numbers\">import {ValidatePromise, Min} from \"class-validator\";\n\nexport class Post {\n\n    @Min(0)\n    @ValidatePromise()\n    userId: Promise<number>;\n\n}\n</code></pre>\n\n<code>@ValidatePromise()</code>也可以和<code>@ValidateNested()</code>一起使用\n\n<pre><code class=\"language-typescript line-numbers\">import {ValidateNested, ValidatePromise} from \"class-validator\";\n\nexport class Post {\n\n    @ValidateNested()\n    @ValidatePromise()\n    user: Promise<User>;\n\n}\n</code></pre>\n\n<h2>高级主题</h2>\n\n<h3>子类验证</h3>\n\n如果定义一个从另一个继承的子类时，子类将自动继承父级的装饰器。如果在后代类中重新定义了属性，则装饰器将从该类和基类中继承\n\n<pre><code class=\"language-typescript line-numbers\">import {validate} from \"class-validator\";\n\nclass BaseContent {\n\n    @IsEmail()\n    email: string;\n\n    @IsString()\n    password: string;\n}\n\nclass User extends BaseContent {\n\n    @MinLength(10)\n    @MaxLength(20)\n    name: string;\n\n    @Contains(\"hello\")\n    welcome: string;\n\n    @MinLength(20)\n    password: string; /\n}\n\nlet user = new User();\n\nuser.email = \"invalid email\";  // inherited property\nuser.password = \"too short\" // password wil be validated not only against IsString, but against MinLength as well\nuser.name = \"not valid\";\nuser.welcome = \"helo\";\n\nvalidate(user).then(errors => {\n    // ...\n});  // it will return errors for email, title and text properties\n</code></pre>\n\n<h3>条件验证</h3>\n\n当某个属性需要满足一定条件验证时可以使用(<code>@ValidateIf</code>)装饰器\n\n<pre><code class=\"language-typescript line-numbers\">import {ValidateIf, IsNotEmpty} from \"class-validator\";\n\nexport class Post {\n    otherProperty:string;\n\n    @ValidateIf(o => o.otherProperty === \"value\")\n    @IsNotEmpty()\n    example:string;\n}\n</code></pre>\n\n<h3>白名单</h3>\n\n一个被验证的类的对象可以定义在类中不存在的属性，在验证时不会产生错误。为了使只有添加了<strong>验证装饰器</strong>的属性才能被定义，你需要把<code>whitelist</code>设置为<code>true</code>，那么如果对象中定义一个类中不存在的属性就无法通过验证了。\n\n<pre><code class=\"language-typescript line-numbers\">import {validate} from \"class-validator\";\n// ...\nvalidate(post, { whitelist: true });\n</code></pre>\n\n开启白名单之后所有没有加上<strong>验证装饰器</strong>的属性被定义后都将无法通过验证，如果你想一些属性可以被定义但是又不想被验证，如果<a class=\"wp-editor-md-post-content-link\" href=\"#条件验证\">条件验证</a>中的<code>otherProperty</code>属性，那么你需要在该属性上面添加一个<code>@Allow</code>装饰器\n\n<pre><code class=\"language-typescript line-numbers\">/**\n * title可以被定义\n * nonWhitelistedProperty不能被定义，否则验证失败\n */\nimport {validate, Allow, Min} from \"class-validator\";\n\nexport class Post {\n\n    @Allow()\n    title: string;\n\n    @Min(0)\n    views: number;\n\n    nonWhitelistedProperty: number;\n}\n\nlet post = new Post();\npost.title = \'Hello world!\';\npost.views = 420;\n\npost.nonWhitelistedProperty = 69;\n// 额外属性不能被添加，否则验证失败\n(post as any).anotherNonWhitelistedProperty = \"something\";\n\nvalidate(post).then(errors => {\n  // post.nonWhitelistedProperty is not defined\n  // (post as any).anotherNonWhitelistedProperty is not defined\n  ...\n});\n</code></pre>\n\n如果你想要所有没有添加<strong>验证装饰器</strong>的属性都无法定义，则可以设置<code>forbidNonWhitelisted</code>为<code>true</code>\n\n<blockquote>\n  这个一般不要设置，否则属性添加@Allow会都没用了\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">import {validate} from \"class-validator\";\n// ...\nvalidate(post, { whitelist: true, forbidNonWhitelisted: true });\n</code></pre>\n\n<h3>添加上下文</h3>\n\n你可以在验证装饰其中添加一个自定义的上下文对象，此对象在验证失败时被<code>ValidationError</code>的实例获取\n\n<pre><code class=\"language-typescript line-numbers\">import { validate } from \'class-validator\';\n\nclass MyClass {\n    @MinLength(32, {\n        message: \"EIC code must be at least 32 characters\",\n        context: {\n            errorCode: 1003,\n            developerNote: \"The validated string must contain 32 or more characters.\"\n        }\n    })\n    eicCode: string;\n}\n\nconst model = new MyClass();\n\nvalidate(model).then(errors => {\n    //errors[0].contexts[\'minLength\'].errorCode === 1003\n});\n</code></pre>\n\n<h3>跳过缺失属性</h3>\n\n有时候你需要跳过一些对象中没有设置的属性，比如更新数据模型时，与创建模型不同的是你只会更新部分值，那么这时候你就需要设置<code>skipMissingProperties</code>为<code>true</code>，当然可能一部分属性是你不想被跳过验证的，那么需要在这些属性上加上<code>@IsDefined()</code>装饰器，加了<code>@IsDefined()</code>装饰器的属性会忽略<code>skipMissingProperties</code>而必定被验证\n\n<pre><code class=\"language-typescript line-numbers\">import {validate} from \"class-validator\";\n// ...\nvalidate(post, { skipMissingProperties: true });\n</code></pre>\n\n<h3>验证组</h3>\n\n<pre><code class=\"language-typescript line-numbers\">import {validate, Min, Length} from \"class-validator\";\n\nexport class User {\n\n    @Min(12, {\n        groups: [\"registration\"]\n    })\n    age: number;\n\n    @Length(2, 20, {\n        groups: [\"registration\", \"admin\"]\n    })\n    name: string;\n}\n\nlet user = new User();\nuser.age = 10;\nuser.name = \"Alex\";\n\nvalidate(user, {\n    groups: [\"registration\"]\n}); // 无法通过验证\n\nvalidate(user, {\n    groups: [\"admin\"]\n}); // 可以通过验证\n\nvalidate(user, {\n    groups: [\"registration\", \"admin\"]\n}); // 无法通过验证\n\nvalidate(user, {\n    groups: undefined // 默认模式\n}); // 无法通过验证，因为没有指定group则所有属性都将被验证\n\nvalidate(user, {\n    groups: []\n}); // 无法通过验证 (与\'groups: undefined\'相同)\n</code></pre>\n\n在验证中还有一个<code>always: true</code>选项，如果添加了此选项，无论验证时设定的是哪种模式的<code>groups</code>，都将被验证\n\n<h3>使用服务容器</h3>\n\n你可以使用服务容器来加载验证器通过依赖注入的方式使用。以下如何将其与<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/pleerock/typedi\">typedi</a>集成的示例：\n\n<pre><code class=\"language-typescript line-numbers\">import {Container} from \"typedi\";\nimport {useContainer, Validator} from \"class-validator\";\n\n// do this somewhere in the global application level:\nuseContainer(Container);\nlet validator = Container.get(Validator);\n\n// now everywhere you can inject Validator class which will go from the container\n// also you can inject classes using constructor injection into your custom ValidatorConstraint-s\n</code></pre>\n\n<h3>非装饰器验证</h3>\n\n如果你的运行环境不支持装饰器请看<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/typestack/class-validator#defining-validation-schema-without-decorators\">这里</a>\n\n<h3>验证普通对象</h3>\n\n<blockquote>\n  Nest.js中使用的验证管道就是class-validator+class-transformer结合的方式\n</blockquote>\n\n由于装饰器的性质，必须使用<code>new class()</code>语法实例化待验证的对象。如果你使用了class-validator装饰器定义了类，并且想要验证普通的JS对象（文本对象或JSON.parse返回），则需要将其转换为类实例（例如，使用<a class=\"wp-editor-md-post-content-link\" href=\"[class-transformer](https://github.com/pleerock/class-transformer)\">class-transformer</a>）或仅使用<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/19majkel94/class-transformer-validator\">class-transformer-validator</a>扩展可以为您完成此任务。\n\n<h2>自定义验证</h2>\n\n<h3>自定义规则类</h3>\n\n你可以创建一个自定义的验证规则的类，并在规则类上添加<code>@ValidatorConstraint</code>装饰器。 还可以设置验证约束名称(<code>name</code>选项)-该名称将在<code>ValidationError</code>中用作“error type”。 如果您不提供约束名称，它将自动生成。\n\n规则类必须实现<code>ValidatorConstraintInterface</code>接口及<code>validate</code>方法，该接口定义了验证逻辑。 如果验证成功，则方法返回<code>true</code>，否则返回<code>false</code>。 自定义验证器可以是异步的，如果您想在执行一些异步操作后执行验证，只需在<code>validate</code>方法中返回带有布尔值的<code>promise</code>。\n\n我们还可以定义了可选方法<code>defaultMessage</code>，它在属性上的装饰器未设置错误消息的情况下定义了默认错误消息。\n\n首选我们创建一个<code>CustomTextLength</code>演示用的验证规则类\n\n<pre><code class=\"language-typescript line-numbers\">import {ValidatorConstraint, ValidatorConstraintInterface, ValidationArguments} from \"class-validator\";\n\n@ValidatorConstraint({ name: \"customText\", async: false })\nexport class CustomTextLength implements ValidatorConstraintInterface {\n\n    validate(text: string, args: ValidationArguments) {\n        return text.length > 1 && text.length < 10; // 对于异步验证，您必须在此处返回Promise<boolean>\n    }\n\n    defaultMessage(args: ValidationArguments) { // 如果验证失败，您可以在此处提供默认错误消息\n        return \"Text ($value) is too short or too long!\";\n    }\n\n}\n</code></pre>\n\n定义好规则后我们就可以在类中使用了\n\n<pre><code class=\"language-typescript line-numbers\">import {Validate} from \"class-validator\";\nimport {CustomTextLength} from \"./CustomTextLength\";\n\nclass Post {\n\n    @Validate(CustomTextLength, {\n        message: \"Title is too short or long!\"\n    })\n    title: string;\n\n}\n\n\nvalidate(post).then(errors => {\n    // ...\n});\n</code></pre>\n\n你也可以将自定义的约束传入规则类，并通过约束来设定验证的条件\n\n<pre><code class=\"language-typescript line-numbers\">import {Validate} from \"class-validator\";\nimport {CustomTextLength} from \"./CustomTextLength\";\n\nimport {ValidationArguments, ValidatorConstraint, ValidatorConstraintInterface} from \"class-validator\";\n\n@ValidatorConstraint()\nclass CustomTextLength implements ValidatorConstraintInterface {\n\n    validate(text: string, validationArguments: ValidationArguments) {\n        return text.length > validationArguments.constraints[0] && text.length < validationArguments.constraints[1];\n    }\n\n}\n\nclass Post {\n\n    @Validate(CustomTextLength, [3, 20], {\n        message: \"Wrong post title\"\n    })\n    title: string;\n\n}\n</code></pre>\n\n<h3>自定义装饰器</h3>\n\n创建自定义装饰器的方法类似创建自定义规则类，只是使用装饰器而已\n\n<blockquote>\n  装饰器的详细使用请看我<a class=\"wp-editor-md-post-content-link\" href=\"https://lichnow.com/notes/decorator.html\">这篇文章</a>\n</blockquote>\n\n<pre><code class=\"language-typescript line-numbers\">import {registerDecorator, ValidationOptions, ValidationArguments} from \"class-validator\";\n\nfunction IsLongerThan(property: string, validationOptions?: ValidationOptions) {\n   return function (object: Object, propertyName: string) {\n        registerDecorator({\n            name: \"isLongerThan\",\n            target: object.constructor,\n            propertyName: propertyName,\n            constraints: [property],\n            options: validationOptions,\n            validator: {\n                validate(value: any, args: ValidationArguments) {\n                    const [relatedPropertyName] = args.constraints;\n                    const relatedValue = (args.object as any)[relatedPropertyName];\n                    return  typeof value === \"string\" &&\n                           typeof relatedValue === \"string\" &&\n                           value.length > relatedValue.length; // you can return a Promise<boolean> here as well, if you want to make async validation\n                }\n            }\n        });\n   };\n}\n\nexport class Post {\n\n    title: string;\n\n    @IsLongerThan(\"title\", {\n       /* you can also use additional validation options, like \"groups\" in your custom validation decorators. \"each\" is not supported */\n       message: \"Text must be longer than the title\"\n    })\n    text: string;\n\n}\n</code></pre>\n\n在自定义装饰器上仍然可以使用<code>ValidationConstraint</code>装饰器。我们在创建一个<code>IsUserAlreadyExist</code>验证装饰器演示\n\n<pre><code class=\"language-typescript line-numbers\">import {registerDecorator, ValidationOptions, ValidatorConstraint, ValidatorConstraintInterface, ValidationArguments} from \"class-validator\";\n\n@ValidatorConstraint({ async: true })\nclass IsUserAlreadyExistConstraint implements ValidatorConstraintInterface {\n\n    validate(userName: any, args: ValidationArguments) {\n        return UserRepository.findOneByName(userName).then(user => {\n            if (user) return false;\n            return true;\n        });\n    }\n\n}\n\nfunction IsUserAlreadyExist(validationOptions?: ValidationOptions) {\n   return function (object: Object, propertyName: string) {\n        registerDecorator({\n            target: object.constructor,\n            propertyName: propertyName,\n            options: validationOptions,\n            constraints: [],\n            validator: IsUserAlreadyExistConstraint\n        });\n   };\n}\n\nclass User {\n\n    @IsUserAlreadyExist({\n       message: \"User $value already exists. Choose another name.\"\n    })\n    name: string;\n\n}\n</code></pre>\n\n<h3>同步验证</h3>\n\n如果只是想简单的进行同步验证，可以使用<code>validateSync</code>代替<code>validate</code>。不过需要注意的是<code>validateSync</code>会忽略所有的异步验证。', 39, 'https://jikexingkong.com/docs/nodejs/class-validator', 1, 'docs', '', 0),
(157, 1, '2021-11-23 06:28:09', '2021-11-22 22:28:09', '编写一些电子书以及翻译一些网络上找不到完善的最新版本的中文文档的框架或类库，网络上已有完善文档的资源会放到<a class=\"wp-editor-md-post-content-link\" href=\"/links\">生态导航</a>里', '文档中心', '', 'inherit', 'closed', 'closed', '', '11-autosave-v1', '', '', '2021-11-23 06:28:09', '2021-11-22 22:28:09', '编写一些电子书以及翻译一些网络上找不到完善的最新版本的中文文档的框架或类库，网络上已有完善文档的资源会放到[生态导航](/links)里', 11, 'https://jikexingkong.com/?p=157', 0, 'revision', '', 0),
(158, 1, '2021-11-23 06:53:46', '2021-11-22 22:53:46', '', 'Yargs中文文档', '', 'publish', 'open', 'closed', '', 'yargs-cn', '', '', '2021-11-23 14:57:47', '2021-11-23 06:57:47', '', 0, 'https://jikexingkong.com/docs/yargs%e4%b8%ad%e6%96%87%e6%96%87%e6%a1%a3', 0, 'docs', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(159, 1, '2021-11-23 06:57:12', '2021-11-22 22:57:12', '<h2>基础</h2>\n\n<h3>说明 :</h3>\n\nYargs通过解析参数和生成优雅的用户界面来帮助您构建交互式命令行工具。\n\n它为你提供:\n\n<ul>\n<li>命令和（分组）选项 (<code>my-program.js serve --port=5000</code>)。</li>\n<li>根据您的参数动态生成的帮助菜单。</li>\n</ul>\n\n<blockquote>\n  <img width=\"400\" src=\"https://pic.phpna.com/media/20191207232216.png\">\n</blockquote>\n\n<ul>\n<li>命令和选项的bash-completion快捷方式.</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/yargs/yargs/blob/master/docs/api.md\">更多api</a>.</li>\n</ul>\n\n<h3>安装</h3>\n\n稳定版本:\n\n<pre><code class=\"language-bash line-numbers\">npm i yargs\n</code></pre>\n\n最新版本:\n\n<pre><code class=\"language-bash line-numbers\">npm i yargs@next\n</code></pre>\n\n<h3>用法 :</h3>\n\n<h4>简单示例</h4>\n\n<pre><code class=\"language-javascript line-numbers\">#!/usr/bin/env node\nconst argv = require(\'yargs\').argv\n\nif (argv.ships &gt; 3 &amp;&amp; argv.distance &lt; 53.5) {\n  console.log(\'Plunder more riffiwobbles!\')\n} else {\n  console.log(\'Retreat from the xupptumblers!\')\n}\n</code></pre>\n\n<pre><code class=\"language-bash line-numbers\">$ ./plunder.js --ships=4 --distance=22\nPlunder more riffiwobbles!\n\n$ ./plunder.js --ships 12 --distance 98.7\nRetreat from the xupptumblers!\n</code></pre>\n\n<h4>比较复杂的案例</h4>\n\n<pre><code class=\"language-javascript line-numbers\">#!/usr/bin/env node\nrequire(\'yargs\') // eslint-disable-line\n  .command(\'serve [port]\', \'start the server\', (yargs) =&gt; {\n    yargs\n      .positional(\'port\', {\n        describe: \'port to bind on\',\n        default: 5000\n      })\n  }, (argv) =&gt; {\n    if (argv.verbose) console.info(`start server on :${argv.port}`)\n    serve(argv.port)\n  })\n  .option(\'verbose\', {\n    alias: \'v\',\n    default: false\n  })\n  .argv\n</code></pre>\n\n运行上面的示例并加上 <code>--help</code> 选项以查看应用程序的帮助。\n\n<h2>TypeScript</h2>\n\nyargs 的类型定义在 [@types/yargs][type-definitions]包中,请先安装此包\n\n<pre><code class=\"line-numbers\">npm i @types/yargs --save-dev\n</code></pre>\n\n<h3>TypeScript用法示例</h3>\n\nTypeScript的定义 需要考虑到 yargs的 <code>type</code> 键以及<code>demandOption</code>/<code>default</code>(如果存在的话)。\n\n<code>.options()</code>定义如下：\n\n<pre><code class=\"language-typescript line-numbers\">#!/usr/bin/env node\nimport * as yargs from \'yargs\';\n\nconst argv = yargs.options({\n  a: { type: \'boolean\', default: false },\n  b: { type: \'string\', demandOption: true },\n  c: { type: \'number\', alias: \'chill\' },\n  d: { type: \'array\' },\n  e: { type: \'count\' },\n  f: { choices: [\'1\', \'2\', \'3\'] }\n}).argv;\n</code></pre>\n\n则<code>argv</code>返回的值的类型会像下面这样子：\n\n<pre><code class=\"language-typescript line-numbers\">{\n  [x: string]: unknown;\n  a: boolean;\n  b: string;\n  c: number | undefined;\n  d: (string | number)[] | undefined;\n  e: number;\n  f: string | undefined;\n  _: string[];\n  $0: string;\n}\n</code></pre>\n\n您可能希望为应用程序定义一个接口，描述解析<code>argv</code>后将采用的形式：\n\n<pre><code class=\"language-typescript line-numbers\">interface Arguments {\n  [x: string]: unknown;\n  a: boolean;\n  b: string;\n  c: number | undefined;\n  d: (string | number)[] | undefined;\n  e: number;\n  f: string | undefined;\n}\n</code></pre>\n\n要改进<code>choices</code>选项类型，您还可以指定它的类型：\n\n<pre><code class=\"language-typescript line-numbers\">type Difficulty = \'normal\' | \'nightmare\' | \'hell\';\nconst difficulties: ReadonlyArray&lt;Difficulty&gt; = [\'normal\', \'nightmare\', \'hell\'];\n\nconst argv = yargs.option(\'difficulty\', {\n  choices: difficulties,\n  demandOption: true\n}).argv;\n</code></pre>\n\n<code>argv</code>会得到类型<code>\'normal\' | \'nightmare\' | \'hell\'</code>。\n\n<h2>解析技巧</h2>\n\n<a name=\"stop\"></a>\n\n<h3>停止解析</h3>\n\n使用 <code>—</code>标志来停止解析,此标志后的参数将会放入 <code>argv._</code>.\n\n<pre><code>$ node examples/reflect.js -a 1 -b 2 -- -c 3 -d 4\n{ _: [ \'-c\', \'3\', \'-d\', \'4\' ],\n  a: 1,\n  b: 2,\n  \'$0\': \'examples/reflect.js\' }\n</code></pre>\n\n<a name=\"negate\"></a>\n\n<h3>设置字段为false</h3>\n\n如果要将字段显式设置为false而不是将其保留为未定义或覆盖默认值，则可以执行此操作<code>--no-key</code>。\n\n<pre><code>$ node examples/reflect.js -a --no-b\n{ _: [], a: true, b: false, \'$0\': \'examples/reflect.js\' }\n</code></pre>\n\n<a name=\"numbers\"></a>\n\n<h3>整型</h3>\n\n每个看起来像数字（<code>!isNaN(Number(arg))</code>）的参数都会转换为一个。通过这种方式，你可以直接<code>net.createConnection(argv.port)</code>并且你可以在<code>argv</code>之外使用<code>+</code>添加数字,不过这样是产生没有意义的并列值，这非常令人沮丧。\n\n<a name=\"arrays\"></a>\n\n<h3>数组</h3>\n\n如果多次指定一个标志，它将变为一个包含所有值的数组。\n\n<pre><code>$ node examples/reflect.js -x 5 -x 8 -x 0\n{ _: [], x: [ 5, 8, 0 ], \'$0\': \'examples/reflect.js\' }\n</code></pre>\n\n您还可以将选项配置为<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/yargs/yargs/blob/master/docs/api.md#array\">type <code>array</code></a>，以支持表单的数组<code>-x 5 6 7 8</code>。\n\n<a name=\"objects\"></a>\n\n<h3>对象</h3>\n\n当你在参数名中使用点符号（<code>.</code>s）时，将假定一个隐式对象路径。这使您可以将参数组织到嵌套对象中。\n\n<pre><code>$ node examples/reflect.js --foo.bar.baz=33 --foo.quux=5\n{ _: [],\n  foo: { bar: { baz: 33 }, quux: 5 },\n  \'$0\': \'examples/reflect.js\' }\n</code></pre>\n\n<a name=\"quotes\"></a>\n\n<h3>问题</h3>\n\n当您使用包含破折号（<code>-</code>）的字符串参数时，shell会将这些参数视为单独的选项，而不是字符串的一部分。问题是像bash这样的shell往往会删除引号。解决方案是将字符串包装在两组引号中。\n\n在单引号内使用双引号。\n\n<pre><code class=\"line-numbers\">$ node examples/reflect.js --foo \'\"--hello -x=yes -v\"\'\n{ _: [], foo: \'--hello -x=yes -v\',\n  \'$0\': \'examples/reflect.js\' }\n</code></pre>\n\n在双引号内转义双引号。\n\n<pre><code class=\"line-numbers\">$ node examples/reflect.js --foo \"\\\"--hello -x=yes -v\\\"\"\n{ _: [], foo: \'--hello -x=yes -v\',\n  \'$0\': \'examples/reflect.js\' }\n</code></pre>\n\n<h2>高级主题</h2>\n\n<a name=\"commands\"></a>\n\n<h3>命令</h3>\n\nYargs提供了一组强大的工具来组成模块化命令驱动的应用程序。在本节中，我们将介绍此API中提供的一些高级功能：\n\n<h4>默认命令</h4>\n\n要指定默认命令，请使用字符串<code>*</code>或<code>$0</code>。如果提供的位置参数与未知命令匹配，则将运行默认命令。默认命令允许您使用与子命令类似的API来定义应用程序的端点。\n\n<pre><code class=\"language-js line-numbers\">const argv = require(\'yargs\')\n  .command(\'$0\', \'the default command\', () =&gt; {}, (argv) =&gt; {\n    console.log(\'this command will be run by default\')\n  })\n</code></pre>\n\n如果运行<code>./my-cli.js --x=22</code>，将执行上面定义的命令将被执行。\n\n默认命令也可以用作命令别名，如下所示：\n\n<pre><code class=\"language-js line-numbers\">const argv = require(\'yargs\')\n  .command([\'serve\', \'$0\'], \'the serve command\', () =&gt; {}, (argv) =&gt; {\n    console.log(\'this command will be run by default\')\n  })\n</code></pre>\n\n如果程序运行<code>./my-cli.js --x=22</code>或<code>./my-cli.js serve --x=22</code>，则将执行上面定义的命令将被之心。\n\n<h4>位置参数</h4>\n\n命令可以接受<em>可选</em>和<em>必需的</em>位置参数。必需的位置参数采用表单<code>&lt;foo&gt;</code>，可选参数采用表单<code>[bar]</code>。解析的位置参数将填充在 <code>argv</code>属性中：\n\n<pre><code class=\"language-js line-numbers\">yargs.command(\'get &lt;source&gt; [proxy]\', \'make a get HTTP request\')\n  .help()\n  .argv\n</code></pre>\n\n<h4>位置参数别名</h4>\n\n可以使用该<code>|</code>字符为位置参数提供别名。例如，假设我们的应用程序允许username<em>或</em> email作为第一个参数：\n\n<pre><code class=\"language-js line-numbers\">yargs.command(\'get &lt;username|email&gt; [password]\', \'fetch a user by username or email.\')\n  .help()\n  .argv\n</code></pre>\n\n以这种方式，在命令执行时<code>argv.username</code>和<code>argv.email</code>都将被填充。\n\n<h5>可选的位置参数</h5>\n\n最后一个位置参数可以选择接受一个值数组，方法是使用<code>..</code>运算符：\n\n<pre><code class=\"language-js line-numbers\">yargs.command(\'download &lt;url&gt; [files..]\', \'download several files\')\n  .help()\n  .argv\n</code></pre>\n\n<h5>位置参数的帮助信息</h5>\n\n您可以在命令构造器函数中使用<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/yargs/yargs/blob/master/docs/api.md#positionalkey-opt\"><code>.positional()</code></a>方法来描述和配置位置参数：\n\n<pre><code class=\"language-js line-numbers\">yargs.command(\'get &lt;source&gt; [proxy]\', \'make a get HTTP request\', (yargs) =&gt; {\n  yargs.positional(\'source\', {\n    describe: \'URL to fetch content from\',\n    type: \'string\',\n    default: \'http://www.google.com\'\n  }).positional(\'proxy\', {\n    describe: \'optional proxy URL\'\n  })\n})\n.help()\n.argv\n</code></pre>\n\n<h4>命令执行</h4>\n\n当在命令行上给出命令时，yargs将执行以下动作：\n\n<ol>\n<li>将命令推入当前上下文</li>\n<li>重置非全局配置</li>\n<li>如果给定了<code>builder</code>,则通过它来配置命令</li>\n<li>从命令行解析并验证参数，包括位置参数</li>\n<li>如果验证成功，则运行<code>handler</code>函数（如果给定）</li>\n<li>从当前上下文中弹出命令</li>\n</ol>\n\n<h4>命令别名</h4>\n\n您可以通过将命令及其所有别名放入数组来为命令定义别名。\n\n或者，一个命令模块可以指定<code>aliases</code>属性，该属性可以是字符串或字符串数组。通过<code>command</code>属性和<code>aliases</code>属性定义的所有别名将连接在一起。\n\n数组中的第一个元素被认为是规范命令，它可以定义位置参数，数组中的其余元素被视为别名。别名从规范命令继承位置参数，因此将忽略别名中定义的任何位置参数。\n\n如果在命令行上给出了规范命令或其任何别名，则将执行该命令。\n\n<pre><code class=\"language-js line-numbers\">#!/usr/bin/env node\nrequire(\'yargs\')\n  .command([\'start [app]\', \'run\', \'up\'], \'Start up an app\', {}, (argv) =&gt; {\n    console.log(\'starting up the\', argv.app || \'default\', \'app\')\n  })\n  .command({\n    command: \'configure &lt;key&gt; [value]\',\n    aliases: [\'config\', \'cfg\'],\n    desc: \'Set a config variable\',\n    builder: (yargs) =&gt; yargs.default(\'value\', \'true\'),\n    handler: (argv) =&gt; {\n      console.log(`setting ${argv.key} to ${argv.value}`)\n    }\n  })\n  .demandCommand()\n  .help()\n  .wrap(72)\n  .argv\n</code></pre>\n\n<pre><code class=\"line-numbers\">$ ./svc.js help\nCommands:\n  start [app]              Start up an app            [aliases: run, up]\n  configure &lt;key&gt; [value]  Set a config variable  [aliases: config, cfg]\n\nOptions:\n  --help  Show help                                            [boolean]\n\n$ ./svc.js cfg concurrency 4\nsetting concurrency to 4\n\n$ ./svc.js run web\nstarting up the web app\n</code></pre>\n\n<h4>提供命令模块</h4>\n\n对于复杂的命令，您可以将逻辑拉入模块。模块只需要导出：\n\n<ul>\n<li><code>exports.command</code>: 在命令行上给出字符串（或字符串数组）时执行此命令，第一个字符串可能包含位置参数</li>\n<li><code>exports.aliases</code>:  表示别名的字符串数组（或单个字符串），别名中exports.command定义的位置参数将被忽略</li>\n<li><code>exports.describe</code>:  用作帮助文本中命令的描述的字符串，<code>false</code>用于隐藏命令</li>\n<li><code>exports.builder</code>:  一个声明命令接受的选项的对象，或者接受和返回yargs实例的函数</li>\n<li><code>exports.handler</code>: a function which will be passed the parsed argv.</li>\n</ul>\n\n<pre><code class=\"language-js line-numbers\">// my-module.js\nexports.command = \'get &lt;source&gt; [proxy]\'\n\nexports.describe = \'make a get HTTP request\'\n\nexports.builder = {\n  banana: {\n    default: \'cool\'\n  },\n  batman: {\n    default: \'sad\'\n  }\n}\n\nexports.handler = function (argv) {\n  // do something with argv.\n}\n</code></pre>\n\n然后注册模块如下：\n\n<pre><code class=\"language-js line-numbers\">yargs.command(require(\'my-module\'))\n  .help()\n  .argv\n</code></pre>\n\n或者，如果该模块不导出<code>command</code>和<code>describe</code>（或如果你只是想重写它们）：\n\n<pre><code class=\"language-js line-numbers\">yargs.command(\'get &lt;source&gt; [proxy]\', \'make a get HTTP request\', require(\'my-module\'))\n  .help()\n  .argv\n</code></pre>\n\n<h5>测试命令模块</h5>\n\n如果你想完整地测试一个命令，你可以像这样测试它：\n\n<pre><code class=\"language-js line-numbers\">it(\"returns help output\", async () =&gt; {\n  // Initialize parser using the command module\n  const parser = yargs.command(require(\'./my-command-module\')).help();\n\n  // Run the command module with --help as argument\n  const output = await new Promise((resolve) =&gt; {\n    parser.parse(\"--help\", (err, argv, output) =&gt; {\n      resolve(output);\n    })\n  });\n\n  // Verify the output is correct\n  expect(output).toBe(expect.stringContaining(\"helpful message\"));\n});\n</code></pre>\n\n此示例使用<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/facebook/jest\">jest</a>作为测试运行器，但该概念独立于框架。\n\n<h3>.commandDir(directory, [opts])</h3>\n\n从一个模块的相对目录来应用命令模块的时候调用此方法。\n\n这允许您将多个命令组织到单个目录下的自己的模块中，并同时应用所有这些命令而不是多次调用 <code>.command(require(\'./dir/module\'))</code>。\n\n默认情况下，它会忽略子目录。这样您就可以使用目录结构来表示命令层次结构，其中每个命令在其构建器函数中使用此方法来应用其子命令。请参阅下面的示例。\n\n请注意，yargs假设给定目录中的所有模块都是命令模块，如果遇到非命令模块，则会出错。在这种情况下，您可以将模块移动到其他目录，也可以使用<code>exclude</code>或 <code>visit</code>选项手动将其过滤掉。更多相关内容如下。\n\n<code>directory</code> 是一个字符串类型的相对目录路径（必需）。\n\n<code>opts</code>是一个选项对象（可选）。仅对以下选项有效：\n\n<ul>\n<li><code>recurse</code>: 布尔值，默认值 <code>false</code>\n\n在所有子目录中查找命令模块，并将它们应用为扁平化（非分层）列表。</p></li>\n<li><p><code>extensions</code>: 字符串或数组，默认 <code>[\'js\']</code>\n\n需要命令模块时要查找的文件类型。</p></li>\n<li><p><code>visit</code>: 函数\n\nA synchronous function called for each command module encountered. Accepts\n<code>commandObject</code>, <code>pathToFile</code>, and <code>filename</code> as arguments. Returns\n<code>commandObject</code> to include the command; any ji to exclude/skip it.\n\n每个命令模块都会调用的同步函数。接受 <code>commandObject</code>，<code>pathToFile</code>和<code>filename</code>作为参数。返回包含命令的<code>commandObject</code>对象; 使用任何虚拟值来排除或跳过它。</p></li>\n<li><p><code>include</code>: RegExp或函数\n\n将某些模块列入白名单。有关详细信息，请参阅<a class=\"wp-editor-md-post-content-link\" href=\"https://www.npmjs.com/package/require-directory#whitelisting\"><code>require-directory</code>白名单</a>。</p></li>\n<li><p><code>exclude</code>: RegExp or function\n\n将某些模块列入黑名单。有关详细信息，请参阅<a class=\"wp-editor-md-post-content-link\" href=\"https://www.npmjs.com/package/require-directory#blacklisting\"><code>require-directory</code>黑名单</a>。</p></li>\n</ul>\n\n<h4>使用示例命令层次结构 <code>.commandDir()</code></h4>\n\n<p>预期实现的 CLI:\n\n<pre><code class=\"language-sh line-numbers\">$ myapp --help\n$ myapp init\n$ myapp remote --help\n$ myapp remote add base http://yargs.js.org\n$ myapp remote prune base\n$ myapp remote prune base fork whatever\n</code></pre>\n\n目录结构:\n\n<pre><code class=\"line-numbers\">myapp/\n├─ cli.js\n└─ cmds/\n   ├─ init.js\n   ├─ remote.js\n   └─ remote_cmds/\n      ├─ add.js\n      └─ prune.js\n</code></pre>\n\ncli.js:\n\n<pre><code class=\"language-js line-numbers\">#!/usr/bin/env node\nrequire(\'yargs\')\n  .commandDir(\'cmds\')\n  .demandCommand()\n  .help()\n  .argv\n</code></pre>\n\ncmds/init.js:\n\n<pre><code class=\"language-js line-numbers\">exports.command = \'init [dir]\'\nexports.desc = \'Create an empty repo\'\nexports.builder = {\n  dir: {\n    default: \'.\'\n  }\n}\nexports.handler = function (argv) {\n  console.log(\'init called for dir\', argv.dir)\n}\n</code></pre>\n\ncmds/remote.js:\n\n<pre><code class=\"language-js line-numbers\">exports.command = \'remote &lt;command&gt;\'\nexports.desc = \'Manage set of tracked repos\'\nexports.builder = function (yargs) {\n  return yargs.commandDir(\'remote_cmds\')\n}\nexports.handler = function (argv) {}\n</code></pre>\n\ncmds/remote_cmds/add.js:\n\n<pre><code class=\"language-js line-numbers\">exports.command = \'add &lt;name&gt; &lt;url&gt;\'\nexports.desc = \'Add remote named &lt;name&gt; for repo at url &lt;url&gt;\'\nexports.builder = {}\nexports.handler = function (argv) {\n  console.log(\'adding remote %s at url %s\', argv.name, argv.url)\n}\n</code></pre>\n\ncmds/remote_cmds/prune.js:\n\n<pre><code class=\"language-js line-numbers\">exports.command = \'prune &lt;name&gt; [names..]\'\nexports.desc = \'Delete tracked branches gone stale for remotes\'\nexports.builder = {}\nexports.handler = function (argv) {\n  console.log(\'pruning remotes %s\', [].concat(argv.name).concat(argv.names).join(\', \'))\n}\n</code></pre>\n\n<a name=\"configuration\"></a>\n\n<h3>构建可配置的CLI应用程序</h3>\n\nyargs的目标之一是检索JavaScript CLI社区中常见的实践，并使这些易于使用的约定应用于您自己的应用程序。\n\n已经出现的一组有用的约定是关于应用程序如何允许用户扩展和定制其功能。\n\n<h4>.rc 文件</h4>\n\n一些命令库（例如，<a class=\"wp-editor-md-post-content-link\" href=\"https://babeljs.io/docs/usage/babelrc/\">Babel</a>，<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/eslint/eslint#configuration\">ESLint</a>）允许您通过填充<code>.rc</code>文件来提供配置是很常见的。\n\nYargs的 <a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/yargs/yargs/blob/master/docs/api.md#config\"><code>config()</code></a>与模块<a class=\"wp-editor-md-post-content-link\" href=\"https://www.npmjs.com/package/find-up\">查找</a>相结合，可以轻松实现<code>.rc</code>功能：\n\n<pre><code class=\"language-js line-numbers\">const findUp = require(\'find-up\')\nconst fs = require(\'fs\')\nconst configPath = findUp.sync([\'.myapprc\', \'.myapprc.json\'])\nconst config = configPath ? JSON.parse(fs.readFileSync(configPath)) : {}\nconst argv = require(\'yargs\')\n  .config(config)\n  .argv\n</code></pre>\n\n<h4>在package.json中提供配置</h4>\n\n另一种常见做法是允许用户通过package.json中的保留字段提供配置。例如，分别使用<code>nyc</code>和<code>babel</code>键来配置 <a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/istanbuljs/nyc#configuring-nyc\">nyc</a> 或 <a class=\"wp-editor-md-post-content-link\" href=\"https://babeljs.io/docs/usage/babelrc/#lookup-behavior\">babel</a>：\n\n<pre><code class=\"language-json line-numbers\">{\n  \"nyc\": {\n    \"watermarks\": {\n      \"lines\": [80, 95],\n      \"functions\": [80, 95],\n      \"branches\": [80, 95],\n      \"statements\": [80, 95]\n    }\n  }\n}\n</code></pre>\n\nYargs使用下面的<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/yargs/yargs/blob/master/docs/api.md#config\"><code>pkgConf()</code></a> 方法为您提供此功能：\n\n<pre><code class=\"language-js line-numbers\">const argv = require(\'yargs\')\n  .pkgConf(\'nyc\')\n  .argv\n</code></pre>\n\n<h4>创建插件架构</h4>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/yargs/yargs/blob/master/docs/api.md#config\"><code>pkgConf()</code></a>和<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/yargs/yargs/blob/master/docs/api.md#config\"><code>config()</code></a>都支持<code>extends</code>关键字。<code>extends</code>允许您从<a class=\"wp-editor-md-post-content-link\" href=\"https://www.npmjs.com/package/@istanbuljs/nyc-config-babel\">其他npm模块</a>继承配置，从而可以构建类似于<a class=\"wp-editor-md-post-content-link\" href=\"https://babeljs.io/docs/plugins/#presets\">Babel presets</a>这样的插件架构：\n\n<pre><code class=\"language-json line-numbers\">{\n  \"nyc\": {\n    \"extends\": \"@istanbuljs/nyc-config-babel\"\n  }\n}\n</code></pre>\n\n<a name=\"customizing\"></a>\n\n<h4>定制Yargs的解析器</h4>\n\n不是每个人都同意<code>process.argv</code>的解析方式; 使用<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/yargs/yargs/blob/master/docs/api.md#parserConfiguration\"><code>parserConfiguration()</code></a>方法可以打开和关闭某些yargs的解析功能：\n\n<pre><code class=\"language-js line-numbers\">yargs.parserConfiguration({\n  \"yargs\": {\n    \"short-option-groups\": true,\n    \"camel-case-expansion\": true,\n    \"dot-notation\": true,\n    \"parse-numbers\": true,\n    \"boolean-negation\": true\n  }\n})\n</code></pre>\n\n有关此功能的详细文档，请参阅<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/yargs/yargs-parser#configuration\">yargs-parser</a>模块。\n\n<h3>中间件</h3>\n\n有时您可能希望在参数到达命令处理程序之前对其进行转换。例如，您可能希望验证是否已提供凭据，否则从文件加载凭据。\n\n中间件只是一堆函数，每个函数都传递当前解析的参数，然后可以通过添加值，删除值或覆盖值来更新。\n\nDiagram:\n\n<pre><code class=\"line-numbers\">                        --------------         --------------        ---------\nstdin ----&gt; argv ----&gt; | Middleware 1 | ----&gt; | Middleware 2 | ---&gt; | Command |\n                        --------------         --------------        ---------\n</code></pre>\n\n<h4>凭据中间件示例</h4>\n\n在这个例子中，我们的中间件将检查<code>username</code>和<code>password</code>的参数值。如果没有，它将加载<code>~/.credentials</code>，并填充<code>argv.username</code>和<code>argv.password</code>值。\n\n<h5>中间件函数</h5>\n\n<pre><code class=\"line-numbers\">const normalizeCredentials = (argv) =&gt; {\n  if (!argv.username || !argv.password) {\n    const credentials = JSON.parse(fs.readSync(\'~/.credentials\'))\n    return credentials\n  }\n  return {}\n}\n\n// Add normalizeCredentials to yargs\nyargs.middleware(normalizeCredentials)\n</code></pre>\n\n<h4>异步凭据中间件示例</h4>\n\n这个例子完全相同，但它异步加载<code>username</code>和<code>password</code>。\n\n<h5>中间件函数</h5>\n\n<pre><code class=\"line-numbers\">const { promisify } = require(\'util\') // since node 8.0.0\nconst readFile = promisify(require(\'fs\').readFile)\n\nconst normalizeCredentials = (argv) =&gt; {\n  if (!argv.username || !argv.password) {\n    return readFile(\'~/.credentials\').then(data =&gt; JSON.parse(data))\n  }\n  return {}\n}\n\n// Add normalizeCredentials to yargs\nyargs.middleware(normalizeCredentials)\n</code></pre>\n\n<h5>yargs解析配置</h5>\n\n<pre><code class=\"line-numbers\">var argv = require(\'yargs\')\n  .usage(\'Usage: $0 &lt;command&gt; [options]\')\n  .command(\'login\', \'Authenticate user\', (yargs) =&gt;{\n        return yargs.option(\'username\')\n                    .option(\'password\')\n      } ,(argv) =&gt; {\n        authenticateUser(argv.username, argv.password)\n      },\n      [normalizeCredentials]\n     )\n  .argv;\n</code></pre>\n\n<h4>使用非单例接口</h4>\n\n要使yargs不作为单例运行，请执行以下操作：\n\n<pre><code class=\"line-numbers\">const argv = require(\'yargs/yargs\')(process.argv.slice(2))\n</code></pre>\n\n当在库中使用yargs时，这尤其有用，因为第三方库不应该污染全局状态。\n\n<h2>Yargs示例</h2>\n\n有关Yargs的更多演示，请参阅<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/yargs/yargs/blob/master/example\">示例文件夹</a>。\n\n<h3>选项只是一个哈希值！</h3>\n\nplunder.js:\n\n<pre><code class=\"language-javascript line-numbers\">#!/usr/bin/env node\nvar argv = require(\'yargs\').argv;\n\nif (argv.ships &gt; 3 &amp;&amp; argv.distance &lt; 53.5) {\n    console.log(\'Plunder more riffiwobbles!\');\n} else {\n    console.log(\'Retreat from the xupptumblers!\');\n}\n</code></pre>\n\n<hr />\n\n<pre><code class=\"line-numbers\">$ ./plunder.js --ships=4 --distance=22\nPlunder more riffiwobbles!\n\n$ ./plunder.js --ships 12 --distance 98.7\nRetreat from the xupptumblers!\n</code></pre>\n\n<h3>你可以设置一些简短的选项：</h3>\n\nshort.js:\n\n<pre><code class=\"language-javascript line-numbers\">#!/usr/bin/env node\nvar argv = require(\'yargs\').argv;\nconsole.log(\'(%d,%d)\', argv.x, argv.y);\n</code></pre>\n\n<hr />\n\n<pre><code class=\"line-numbers\">$ ./short.js -x 10 -y 21\n(10,21)\n</code></pre>\n\n<h3>布尔值，长，短，甚至分组：</h3>\n\nbool.js:\n\n<pre><code class=\"language-javascript line-numbers\">#!/usr/bin/env node\nvar argv = require(\'yargs\').argv;\n\nif (argv.s) {\n    process.stdout.write(argv.fr ? \'Le perroquet dit: \' : \'The parrot says: \');\n}\nconsole.log(\n    (argv.fr ? \'couac\' : \'squawk\') + (argv.p ? \'!\' : \'\')\n);\n</code></pre>\n\n<hr />\n\n<pre><code class=\"line-numbers\">$ ./bool.js -s\nThe parrot says: squawk\n\n$ ./bool.js -sp\nThe parrot says: squawk!\n\n$ ./bool.js -sp --fr\nLe perroquet dit: couac!\n</code></pre>\n\n<h3>还有非连字符选项！只要使用<code>argv._</code>！</h3>\n\nnonopt.js:\n\n<pre><code class=\"language-javascript line-numbers\">#!/usr/bin/env node\nvar argv = require(\'yargs\').argv;\nconsole.log(\'(%d,%d)\', argv.x, argv.y);\nconsole.log(argv._);\n</code></pre>\n\n<hr />\n\n<pre><code class=\"line-numbers\">$ ./nonopt.js -x 6.82 -y 3.35 rum\n(6.82,3.35)\n[ \'rum\' ]\n\n$ ./nonopt.js \"me hearties\" -x 0.54 yo -y 1.12 ho\n(0.54,1.12)\n[ \'me hearties\', \'yo\', \'ho\' ]\n</code></pre>\n\n<h3>Yargs使用布尔值</h3>\n\ncount.js:\n\n<pre><code class=\"language-javascript line-numbers\">#!/usr/bin/env node\nvar argv = require(\'yargs\')\n    .count(\'verbose\')\n    .alias(\'v\', \'verbose\')\n    .argv;\n\nVERBOSE_LEVEL = argv.verbose;\n\nfunction WARN()  { VERBOSE_LEVEL &gt;= 0 &amp;&amp; console.log.apply(console, arguments); }\nfunction INFO()  { VERBOSE_LEVEL &gt;= 1 &amp;&amp; console.log.apply(console, arguments); }\nfunction DEBUG() { VERBOSE_LEVEL &gt;= 2 &amp;&amp; console.log.apply(console, arguments); }\n\nWARN(\"Showing only important stuff\");\nINFO(\"Showing semi-important stuff too\");\nDEBUG(\"Extra chatty mode\");\n</code></pre>\n\n<hr />\n\n<pre><code class=\"line-numbers\">$ node count.js\nShowing only important stuff\n\n$ node count.js -v\nShowing only important stuff\nShowing semi-important stuff too\n\n$ node count.js -vv\nShowing only important stuff\nShowing semi-important stuff too\nExtra chatty mode\n\n$ node count.js -v --verbose\nShowing only important stuff\nShowing semi-important stuff too\nExtra chatty mode\n</code></pre>\n\n<h3>告诉用户如何使用您的选项并设置要求。</h3>\n\narea.js:\n\n<pre><code class=\"language-javascript line-numbers\">#!/usr/bin/env node\nvar argv = require(\'yargs\')\n    .usage(\'Usage: $0 -w [num] -h [num]\')\n    .demandOption([\'w\',\'h\'])\n    .argv;\n\nconsole.log(\"The area is:\", argv.w * argv.h);\n</code></pre>\n\n<hr />\n\n<pre><code class=\"line-numbers\">$ ./area.js -w 55 -h 11\nThe area is: 605\n\n$ node ./area.js -w 4.91 -w 2.51\nUsage: area.js -w [num] -h [num]\n\nOptions:\n  -w  [required]\n  -h  [required]\n\nMissing required arguments: h\n</code></pre>\n\n<h3>符合要求后，需求更多！请求非连字符的参数！</h3>\n\ndemand_count.js:\n\n<pre><code class=\"language-javascript line-numbers\">#!/usr/bin/env node\nvar argv = require(\'yargs\')\n    .demandCommand(2)\n    .argv;\nconsole.dir(argv);\n</code></pre>\n\n<hr />\n\n<pre><code class=\"line-numbers\">$ ./demand_count.js a\n\nNot enough non-option arguments: got 1, need at least 2\n\n$ ./demand_count.js a b\n{ _: [ \'a\', \'b\' ], \'$0\': \'demand_count.js\' }\n\n$ ./demand_count.js a b c\n{ _: [ \'a\', \'b\', \'c\' ], \'$0\': \'demand_count.js\' }\n</code></pre>\n\n<h3>甚至更多的TIMBERS！</h3>\n\ndefault_singles.js:\n\n<pre><code class=\"language-javascript line-numbers\">#!/usr/bin/env node\nvar argv = require(\'yargs\')\n    .default(\'x\', 10)\n    .default(\'y\', 10)\n    .argv\n;\nconsole.log(argv.x + argv.y);\n</code></pre>\n\n<hr />\n\n<pre><code class=\"line-numbers\">$ ./default_singles.js -x 5\n15\n</code></pre>\n\ndefault_hash.js:\n\n<pre><code class=\"language-javascript line-numbers\">#!/usr/bin/env node\nvar argv = require(\'yargs\')\n    .default({ x : 10, y : 10 })\n    .argv\n;\nconsole.log(argv.x + argv.y);\n</code></pre>\n\n<hr />\n\n<pre><code class=\"line-numbers\">$ ./default_hash.js -y 7\n17\n</code></pre>\n\n<h3>如果你真的想得到所有的描述...</h3>\n\nboolean_single.js:\n\n<pre><code class=\"language-javascript line-numbers\">#!/usr/bin/env node\nvar argv = require(\'yargs\')\n    .boolean(\'v\')\n    .argv\n;\nconsole.dir(argv.v);\nconsole.dir(argv._);\n</code></pre>\n\n<hr />\n\n<pre><code class=\"line-numbers\">$ ./boolean_single.js -v \"me hearties\" yo ho\ntrue\n[ \'me hearties\', \'yo\', \'ho\' ]\n</code></pre>\n\nboolean_double.js:\n\n<pre><code class=\"language-javascript line-numbers\">#!/usr/bin/env node\nvar argv = require(\'yargs\')\n    .boolean([\'x\',\'y\',\'z\'])\n    .argv\n;\nconsole.dir([ argv.x, argv.y, argv.z ]);\nconsole.dir(argv._);\n</code></pre>\n\n<hr />\n\n<pre><code class=\"line-numbers\">$ ./boolean_double.js -x -z one two three\n[ true, false, true ]\n[ \'one\', \'two\', \'three\' ]\n</code></pre>\n\n<h3>Yargs在这里帮助你......</h3>\n\n您可以描述帮助消息的参数并设置别名。Yargs知道如何自动格式化一个方便的帮助字符串。\n\nline_count.js:\n\n<pre><code class=\"language-javascript line-numbers\">#!/usr/bin/env node\nvar argv = require(\'yargs\')\n    .usage(\'Usage: $0 &lt;command&gt; [options]\')\n    .command(\'count\', \'Count the lines in a file\')\n    .example(\'$0 count -f foo.js\', \'count the lines in the given file\')\n    .alias(\'f\', \'file\')\n    .nargs(\'f\', 1)\n    .describe(\'f\', \'Load a file\')\n    .demandOption([\'f\'])\n    .help(\'h\')\n    .alias(\'h\', \'help\')\n    .epilog(\'copyright 2019\')\n    .argv;\n\nvar fs = require(\'fs\');\nvar s = fs.createReadStream(argv.file);\n\nvar lines = 0;\ns.on(\'data\', function (buf) {\n    lines += buf.toString().match(/\\n/g).length;\n});\n\ns.on(\'end\', function () {\n    console.log(lines);\n});\n</code></pre>\n\n<hr />\n\n<pre><code class=\"line-numbers\">$ node line_count.js \nUsage: line_count.js &lt;command&gt; [options]\n\nCommands:\n  line_count.js count  Count the lines in a file\n\nOptions:\n  --version   Show version number      [boolean]\n  -f, --file  Load a file             [required]\n  -h, --help  Show help                [boolean]\n\nExamples:\n  line_count.js count -f foo.js  count the lines in the given file\n\ncopyright 2019\n\nMissing required argument: f\n\n$ node line_count.js count\nline_count.js count\n\nCount the lines in a file\n\nOptions:\n  --version   Show version number      [boolean]\n  -f, --file  Load a file             [required]\n  -h, --help  Show help                [boolean]\n\nMissing required argument: f\n\n$ node line_count.js count --file line_count.js\n25\n\n$ node line_count.js count -f line_count.js\n25\n</code></pre>', '基础', '', 'publish', 'open', 'closed', '', 'readme', '', '', '2021-11-23 06:59:26', '2021-11-22 22:59:26', '## 基础\r\n\r\n### 说明 :\r\n\r\nYargs通过解析参数和生成优雅的用户界面来帮助您构建交互式命令行工具。\r\n\r\n它为你提供:\r\n\r\n* 命令和（分组）选项 (`my-program.js serve --port=5000`)。\r\n* 根据您的参数动态生成的帮助菜单。\r\n\r\n> <img width=\"400\" src=\"https://pic.phpna.com/media/20191207232216.png\">\r\n\r\n* 命令和选项的bash-completion快捷方式.\r\n* [更多api](https://github.com/yargs/yargs/blob/master/docs/api.md).\r\n\r\n### 安装\r\n\r\n稳定版本:\r\n```bash\r\nnpm i yargs\r\n```\r\n\r\n最新版本:\r\n```bash\r\nnpm i yargs@next\r\n```\r\n\r\n### 用法 :\r\n\r\n#### 简单示例\r\n\r\n````javascript\r\n#!/usr/bin/env node\r\nconst argv = require(\'yargs\').argv\r\n\r\nif (argv.ships > 3 && argv.distance < 53.5) {\r\n  console.log(\'Plunder more riffiwobbles!\')\r\n} else {\r\n  console.log(\'Retreat from the xupptumblers!\')\r\n}\r\n````\r\n\r\n```bash\r\n$ ./plunder.js --ships=4 --distance=22\r\nPlunder more riffiwobbles!\r\n\r\n$ ./plunder.js --ships 12 --distance 98.7\r\nRetreat from the xupptumblers!\r\n```\r\n\r\n#### 比较复杂的案例\r\n\r\n```javascript\r\n#!/usr/bin/env node\r\nrequire(\'yargs\') // eslint-disable-line\r\n  .command(\'serve [port]\', \'start the server\', (yargs) => {\r\n    yargs\r\n      .positional(\'port\', {\r\n        describe: \'port to bind on\',\r\n        default: 5000\r\n      })\r\n  }, (argv) => {\r\n    if (argv.verbose) console.info(`start server on :${argv.port}`)\r\n    serve(argv.port)\r\n  })\r\n  .option(\'verbose\', {\r\n    alias: \'v\',\r\n    default: false\r\n  })\r\n  .argv\r\n```\r\n\r\n运行上面的示例并加上 `--help` 选项以查看应用程序的帮助。\r\n\r\n## TypeScript\r\n\r\nyargs 的类型定义在 [@types/yargs][type-definitions]包中,请先安装此包\r\n\r\n```\r\nnpm i @types/yargs --save-dev\r\n```\r\n\r\n### TypeScript用法示例\r\n\r\nTypeScript的定义 需要考虑到 yargs的 `type` 键以及`demandOption`/`default`(如果存在的话)。\r\n\r\n`.options()`定义如下：\r\n\r\n```typescript\r\n#!/usr/bin/env node\r\nimport * as yargs from &#039;yargs&#039;;\r\n\r\nconst argv = yargs.options({\r\n  a: { type: &#039;boolean&#039;, default: false },\r\n  b: { type: &#039;string&#039;, demandOption: true },\r\n  c: { type: &#039;number&#039;, alias: &#039;chill&#039; },\r\n  d: { type: &#039;array&#039; },\r\n  e: { type: &#039;count&#039; },\r\n  f: { choices: [&#039;1&#039;, &#039;2&#039;, &#039;3&#039;] }\r\n}).argv;\r\n```\r\n\r\n则`argv`返回的值的类型会像下面这样子：\r\n\r\n```typescript\r\n{\r\n  [x: string]: unknown;\r\n  a: boolean;\r\n  b: string;\r\n  c: number | undefined;\r\n  d: (string | number)[] | undefined;\r\n  e: number;\r\n  f: string | undefined;\r\n  _: string[];\r\n  $0: string;\r\n}\r\n```\r\n\r\n您可能希望为应用程序定义一个接口，描述解析`argv`后将采用的形式：\r\n\r\n```typescript\r\ninterface Arguments {\r\n  [x: string]: unknown;\r\n  a: boolean;\r\n  b: string;\r\n  c: number | undefined;\r\n  d: (string | number)[] | undefined;\r\n  e: number;\r\n  f: string | undefined;\r\n}\r\n```\r\n\r\n要改进`choices`选项类型，您还可以指定它的类型：\r\n\r\n```typescript\r\ntype Difficulty = &#039;normal&#039; | &#039;nightmare&#039; | &#039;hell&#039;;\r\nconst difficulties: ReadonlyArray&lt;Difficulty&gt; = [&#039;normal&#039;, &#039;nightmare&#039;, &#039;hell&#039;];\r\n\r\nconst argv = yargs.option(&#039;difficulty&#039;, {\r\n  choices: difficulties,\r\n  demandOption: true\r\n}).argv;\r\n```\r\n\r\n`argv`会得到类型`\'normal\' | \'nightmare\' | \'hell\'`。\r\n\r\n## 解析技巧\r\n\r\n<a name=\"stop\"></a>\r\n\r\n### 停止解析\r\n\r\n使用 `—`标志来停止解析,此标志后的参数将会放入 `argv._`.\r\n\r\n    $ node examples/reflect.js -a 1 -b 2 -- -c 3 -d 4\r\n    { _: [ \'-c\', \'3\', \'-d\', \'4\' ],\r\n      a: 1,\r\n      b: 2,\r\n      \'$0\': \'examples/reflect.js\' }\r\n\r\n<a name=\"negate\"></a>\r\n\r\n### 设置字段为false\r\n\r\n如果要将字段显式设置为false而不是将其保留为未定义或覆盖默认值，则可以执行此操作`--no-key`。\r\n\r\n    $ node examples/reflect.js -a --no-b\r\n    { _: [], a: true, b: false, \'$0\': \'examples/reflect.js\' }\r\n\r\n<a name=\"numbers\"></a>\r\n\r\n### 整型\r\n\r\n每个看起来像数字（`!isNaN(Number(arg))`）的参数都会转换为一个。通过这种方式，你可以直接`net.createConnection(argv.port)`并且你可以在`argv`之外使用`+`添加数字,不过这样是产生没有意义的并列值，这非常令人沮丧。\r\n\r\n<a name=\"arrays\"></a>\r\n### 数组\r\n\r\n如果多次指定一个标志，它将变为一个包含所有值的数组。\r\n\r\n    $ node examples/reflect.js -x 5 -x 8 -x 0\r\n    { _: [], x: [ 5, 8, 0 ], \'$0\': \'examples/reflect.js\' }\r\n\r\n您还可以将选项配置为[type `array`](https://github.com/yargs/yargs/blob/master/docs/api.md#array)，以支持表单的数组`-x 5 6 7 8`。\r\n\r\n<a name=\"objects\"></a>\r\n### 对象\r\n\r\n当你在参数名中使用点符号（`.`s）时，将假定一个隐式对象路径。这使您可以将参数组织到嵌套对象中。\r\n\r\n    $ node examples/reflect.js --foo.bar.baz=33 --foo.quux=5\r\n    { _: [],\r\n      foo: { bar: { baz: 33 }, quux: 5 },\r\n      \'$0\': \'examples/reflect.js\' }\r\n\r\n<a name=\"quotes\"></a>\r\n\r\n### 问题\r\n\r\n当您使用包含破折号（`-`）的字符串参数时，shell会将这些参数视为单独的选项，而不是字符串的一部分。问题是像bash这样的shell往往会删除引号。解决方案是将字符串包装在两组引号中。\r\n\r\n在单引号内使用双引号。\r\n\r\n```\r\n$ node examples/reflect.js --foo &#039;&quot;--hello -x=yes -v&quot;&#039;\r\n{ _: [], foo: &#039;--hello -x=yes -v&#039;,\r\n  &#039;$0&#039;: &#039;examples/reflect.js&#039; }\r\n```\r\n\r\n在双引号内转义双引号。\r\n\r\n```\r\n$ node examples/reflect.js --foo &quot;\\&quot;--hello -x=yes -v\\&quot;&quot;\r\n{ _: [], foo: &#039;--hello -x=yes -v&#039;,\r\n  &#039;$0&#039;: &#039;examples/reflect.js&#039; }\r\n```\r\n\r\n## 高级主题\r\n\r\n<a name=\"commands\"></a>\r\n\r\n### 命令\r\n\r\nYargs提供了一组强大的工具来组成模块化命令驱动的应用程序。在本节中，我们将介绍此API中提供的一些高级功能：\r\n\r\n#### 默认命令\r\n\r\n要指定默认命令，请使用字符串`*`或`$0`。如果提供的位置参数与未知命令匹配，则将运行默认命令。默认命令允许您使用与子命令类似的API来定义应用程序的端点。\r\n\r\n```js\r\nconst argv = require(&#039;yargs&#039;)\r\n  .command(&#039;$0&#039;, &#039;the default command&#039;, () =&gt; {}, (argv) =&gt; {\r\n    console.log(&#039;this command will be run by default&#039;)\r\n  })\r\n```\r\n\r\n如果运行`./my-cli.js --x=22`，将执行上面定义的命令将被执行。\r\n\r\n默认命令也可以用作命令别名，如下所示：\r\n\r\n```js\r\nconst argv = require(&#039;yargs&#039;)\r\n  .command([&#039;serve&#039;, &#039;$0&#039;], &#039;the serve command&#039;, () =&gt; {}, (argv) =&gt; {\r\n    console.log(&#039;this command will be run by default&#039;)\r\n  })\r\n```\r\n\r\n如果程序运行`./my-cli.js --x=22`或`./my-cli.js serve --x=22`，则将执行上面定义的命令将被之心。\r\n\r\n#### 位置参数\r\n\r\n命令可以接受*可选*和*必需的*位置参数。必需的位置参数采用表单`<foo>`，可选参数采用表单`[bar]`。解析的位置参数将填充在 `argv`属性中：\r\n\r\n```js\r\nyargs.command(&#039;get &lt;source&gt; [proxy]&#039;, &#039;make a get HTTP request&#039;)\r\n  .help()\r\n  .argv\r\n```\r\n\r\n#### 位置参数别名\r\n\r\n可以使用该`|`字符为位置参数提供别名。例如，假设我们的应用程序允许username*或* email作为第一个参数：\r\n\r\n```js\r\nyargs.command(&#039;get &lt;username|email&gt; [password]&#039;, &#039;fetch a user by username or email.&#039;)\r\n  .help()\r\n  .argv\r\n```\r\n\r\n以这种方式，在命令执行时`argv.username`和`argv.email`都将被填充。\r\n\r\n##### 可选的位置参数\r\n\r\n最后一个位置参数可以选择接受一个值数组，方法是使用`..`运算符：\r\n\r\n```js\r\nyargs.command(&#039;download &lt;url&gt; [files..]&#039;, &#039;download several files&#039;)\r\n  .help()\r\n  .argv\r\n```\r\n\r\n##### 位置参数的帮助信息\r\n\r\n您可以在命令构造器函数中使用[`.positional()`](https://github.com/yargs/yargs/blob/master/docs/api.md#positionalkey-opt)方法来描述和配置位置参数：\r\n\r\n```js\r\nyargs.command(&#039;get &lt;source&gt; [proxy]&#039;, &#039;make a get HTTP request&#039;, (yargs) =&gt; {\r\n  yargs.positional(&#039;source&#039;, {\r\n    describe: &#039;URL to fetch content from&#039;,\r\n    type: &#039;string&#039;,\r\n    default: &#039;http://www.google.com&#039;\r\n  }).positional(&#039;proxy&#039;, {\r\n    describe: &#039;optional proxy URL&#039;\r\n  })\r\n})\r\n.help()\r\n.argv\r\n```\r\n\r\n#### 命令执行\r\n\r\n当在命令行上给出命令时，yargs将执行以下动作：\r\n\r\n1. 将命令推入当前上下文\r\n2. 重置非全局配置\r\n3. 如果给定了`builder`,则通过它来配置命令\r\n4. 从命令行解析并验证参数，包括位置参数\r\n5. 如果验证成功，则运行`handler`函数（如果给定）\r\n6. 从当前上下文中弹出命令\r\n\r\n#### 命令别名\r\n\r\n您可以通过将命令及其所有别名放入数组来为命令定义别名。\r\n\r\n或者，一个命令模块可以指定`aliases`属性，该属性可以是字符串或字符串数组。通过`command`属性和`aliases`属性定义的所有别名将连接在一起。\r\n\r\n数组中的第一个元素被认为是规范命令，它可以定义位置参数，数组中的其余元素被视为别名。别名从规范命令继承位置参数，因此将忽略别名中定义的任何位置参数。\r\n\r\n如果在命令行上给出了规范命令或其任何别名，则将执行该命令。\r\n\r\n```js\r\n#!/usr/bin/env node\r\nrequire(\'yargs\')\r\n  .command([\'start [app]\', \'run\', \'up\'], \'Start up an app\', {}, (argv) => {\r\n    console.log(\'starting up the\', argv.app || \'default\', \'app\')\r\n  })\r\n  .command({\r\n    command: \'configure <key> [value]\',\r\n    aliases: [\'config\', \'cfg\'],\r\n    desc: \'Set a config variable\',\r\n    builder: (yargs) => yargs.default(\'value\', \'true\'),\r\n    handler: (argv) => {\r\n      console.log(`setting ${argv.key} to ${argv.value}`)\r\n    }\r\n  })\r\n  .demandCommand()\r\n  .help()\r\n  .wrap(72)\r\n  .argv\r\n```\r\n\r\n```\r\n$ ./svc.js help\r\nCommands:\r\n  start [app]              Start up an app            [aliases: run, up]\r\n  configure <key> [value]  Set a config variable  [aliases: config, cfg]\r\n\r\nOptions:\r\n  --help  Show help                                            [boolean]\r\n\r\n$ ./svc.js cfg concurrency 4\r\nsetting concurrency to 4\r\n\r\n$ ./svc.js run web\r\nstarting up the web app\r\n```\r\n\r\n#### 提供命令模块\r\n\r\n对于复杂的命令，您可以将逻辑拉入模块。模块只需要导出：\r\n\r\n* `exports.command`: 在命令行上给出字符串（或字符串数组）时执行此命令，第一个字符串可能包含位置参数\r\n* `exports.aliases`:  表示别名的字符串数组（或单个字符串），别名中exports.command定义的位置参数将被忽略\r\n* `exports.describe`:  用作帮助文本中命令的描述的字符串，`false`用于隐藏命令\r\n* `exports.builder`:  一个声明命令接受的选项的对象，或者接受和返回yargs实例的函数\r\n* `exports.handler`: a function which will be passed the parsed argv.\r\n\r\n```js\r\n// my-module.js\r\nexports.command = &#039;get &lt;source&gt; [proxy]&#039;\r\n\r\nexports.describe = &#039;make a get HTTP request&#039;\r\n\r\nexports.builder = {\r\n  banana: {\r\n    default: &#039;cool&#039;\r\n  },\r\n  batman: {\r\n    default: &#039;sad&#039;\r\n  }\r\n}\r\n\r\nexports.handler = function (argv) {\r\n  // do something with argv.\r\n}\r\n```\r\n\r\n然后注册模块如下：\r\n\r\n```js\r\nyargs.command(require(&#039;my-module&#039;))\r\n  .help()\r\n  .argv\r\n```\r\n\r\n或者，如果该模块不导出`command`和`describe`（或如果你只是想重写它们）：\r\n\r\n```js\r\nyargs.command(&#039;get &lt;source&gt; [proxy]&#039;, &#039;make a get HTTP request&#039;, require(&#039;my-module&#039;))\r\n  .help()\r\n  .argv\r\n```\r\n\r\n##### 测试命令模块\r\n\r\n如果你想完整地测试一个命令，你可以像这样测试它：\r\n\r\n```js\r\nit(&quot;returns help output&quot;, async () =&gt; {\r\n  // Initialize parser using the command module\r\n  const parser = yargs.command(require(&#039;./my-command-module&#039;)).help();\r\n\r\n  // Run the command module with --help as argument\r\n  const output = await new Promise((resolve) =&gt; {\r\n    parser.parse(&quot;--help&quot;, (err, argv, output) =&gt; {\r\n      resolve(output);\r\n    })\r\n  });\r\n\r\n  // Verify the output is correct\r\n  expect(output).toBe(expect.stringContaining(&quot;helpful message&quot;));\r\n});\r\n```\r\n\r\n此示例使用[jest](https://github.com/facebook/jest)作为测试运行器，但该概念独立于框架。\r\n\r\n### .commandDir(directory, [opts])\r\n\r\n从一个模块的相对目录来应用命令模块的时候调用此方法。\r\n\r\n这允许您将多个命令组织到单个目录下的自己的模块中，并同时应用所有这些命令而不是多次调用 `.command(require(\'./dir/module\'))`。\r\n\r\n默认情况下，它会忽略子目录。这样您就可以使用目录结构来表示命令层次结构，其中每个命令在其构建器函数中使用此方法来应用其子命令。请参阅下面的示例。\r\n\r\n请注意，yargs假设给定目录中的所有模块都是命令模块，如果遇到非命令模块，则会出错。在这种情况下，您可以将模块移动到其他目录，也可以使用`exclude`或 `visit`选项手动将其过滤掉。更多相关内容如下。\r\n\r\n`directory` 是一个字符串类型的相对目录路径（必需）。\r\n\r\n`opts`是一个选项对象（可选）。仅对以下选项有效：\r\n\r\n- `recurse`: 布尔值，默认值 `false`\r\n\r\n    在所有子目录中查找命令模块，并将它们应用为扁平化（非分层）列表。\r\n    \r\n- `extensions`: 字符串或数组，默认 `[\'js\']`\r\n\r\n    需要命令模块时要查找的文件类型。\r\n\r\n- `visit`: 函数\r\n\r\n    A synchronous function called for each command module encountered. Accepts\r\n    `commandObject`, `pathToFile`, and `filename` as arguments. Returns\r\n    `commandObject` to include the command; any ji to exclude/skip it.\r\n\r\n    每个命令模块都会调用的同步函数。接受 `commandObject`，`pathToFile`和`filename`作为参数。返回包含命令的`commandObject`对象; 使用任何虚拟值来排除或跳过它。\r\n\r\n- `include`: RegExp或函数\r\n\r\n    将某些模块列入白名单。有关详细信息，请参阅[`require-directory`白名单](https://www.npmjs.com/package/require-directory#whitelisting)。\r\n\r\n- `exclude`: RegExp or function\r\n\r\n    将某些模块列入黑名单。有关详细信息，请参阅[`require-directory`黑名单](https://www.npmjs.com/package/require-directory#blacklisting)。\r\n\r\n#### 使用示例命令层次结构 `.commandDir()`\r\n\r\n预期实现的 CLI:\r\n\r\n```sh\r\n$ myapp --help\r\n$ myapp init\r\n$ myapp remote --help\r\n$ myapp remote add base http://yargs.js.org\r\n$ myapp remote prune base\r\n$ myapp remote prune base fork whatever\r\n```\r\n\r\n目录结构:\r\n\r\n```\r\nmyapp/\r\n├─ cli.js\r\n└─ cmds/\r\n   ├─ init.js\r\n   ├─ remote.js\r\n   └─ remote_cmds/\r\n      ├─ add.js\r\n      └─ prune.js\r\n```\r\n\r\ncli.js:\r\n\r\n```js\r\n#!/usr/bin/env node\r\nrequire(&#039;yargs&#039;)\r\n  .commandDir(&#039;cmds&#039;)\r\n  .demandCommand()\r\n  .help()\r\n  .argv\r\n```\r\n\r\ncmds/init.js:\r\n\r\n```js\r\nexports.command = &#039;init [dir]&#039;\r\nexports.desc = &#039;Create an empty repo&#039;\r\nexports.builder = {\r\n  dir: {\r\n    default: &#039;.&#039;\r\n  }\r\n}\r\nexports.handler = function (argv) {\r\n  console.log(&#039;init called for dir&#039;, argv.dir)\r\n}\r\n```\r\n\r\ncmds/remote.js:\r\n\r\n```js\r\nexports.command = &#039;remote &lt;command&gt;&#039;\r\nexports.desc = &#039;Manage set of tracked repos&#039;\r\nexports.builder = function (yargs) {\r\n  return yargs.commandDir(&#039;remote_cmds&#039;)\r\n}\r\nexports.handler = function (argv) {}\r\n```\r\n\r\ncmds/remote_cmds/add.js:\r\n\r\n```js\r\nexports.command = &#039;add &lt;name&gt; &lt;url&gt;&#039;\r\nexports.desc = &#039;Add remote named &lt;name&gt; for repo at url &lt;url&gt;&#039;\r\nexports.builder = {}\r\nexports.handler = function (argv) {\r\n  console.log(&#039;adding remote %s at url %s&#039;, argv.name, argv.url)\r\n}\r\n```\r\n\r\ncmds/remote_cmds/prune.js:\r\n\r\n```js\r\nexports.command = &#039;prune &lt;name&gt; [names..]&#039;\r\nexports.desc = &#039;Delete tracked branches gone stale for remotes&#039;\r\nexports.builder = {}\r\nexports.handler = function (argv) {\r\n  console.log(&#039;pruning remotes %s&#039;, [].concat(argv.name).concat(argv.names).join(&#039;, &#039;))\r\n}\r\n```\r\n\r\n<a name=\"configuration\"></a>\r\n\r\n### 构建可配置的CLI应用程序\r\n\r\nyargs的目标之一是检索JavaScript CLI社区中常见的实践，并使这些易于使用的约定应用于您自己的应用程序。\r\n\r\n已经出现的一组有用的约定是关于应用程序如何允许用户扩展和定制其功能。\r\n\r\n#### .rc 文件\r\n\r\n一些命令库（例如，[Babel](https://babeljs.io/docs/usage/babelrc/)，[ESLint](https://github.com/eslint/eslint#configuration)）允许您通过填充`.rc`文件来提供配置是很常见的。\r\n\r\nYargs的 [`config()`](https://github.com/yargs/yargs/blob/master/docs/api.md#config)与模块[查找](https://www.npmjs.com/package/find-up)相结合，可以轻松实现`.rc`功能：\r\n\r\n```js\r\nconst findUp = require(&#039;find-up&#039;)\r\nconst fs = require(&#039;fs&#039;)\r\nconst configPath = findUp.sync([&#039;.myapprc&#039;, &#039;.myapprc.json&#039;])\r\nconst config = configPath ? JSON.parse(fs.readFileSync(configPath)) : {}\r\nconst argv = require(&#039;yargs&#039;)\r\n  .config(config)\r\n  .argv\r\n```\r\n\r\n#### 在package.json中提供配置\r\n\r\n另一种常见做法是允许用户通过package.json中的保留字段提供配置。例如，分别使用`nyc`和`babel`键来配置 [nyc](https://github.com/istanbuljs/nyc#configuring-nyc) 或 [babel](https://babeljs.io/docs/usage/babelrc/#lookup-behavior)：\r\n\r\n```json\r\n{\r\n  &quot;nyc&quot;: {\r\n    &quot;watermarks&quot;: {\r\n      &quot;lines&quot;: [80, 95],\r\n      &quot;functions&quot;: [80, 95],\r\n      &quot;branches&quot;: [80, 95],\r\n      &quot;statements&quot;: [80, 95]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nYargs使用下面的[`pkgConf()`](https://github.com/yargs/yargs/blob/master/docs/api.md#config) 方法为您提供此功能：\r\n\r\n```js\r\nconst argv = require(&#039;yargs&#039;)\r\n  .pkgConf(&#039;nyc&#039;)\r\n  .argv\r\n```\r\n\r\n#### 创建插件架构\r\n\r\n[`pkgConf()`](https://github.com/yargs/yargs/blob/master/docs/api.md#config)和[`config()`](https://github.com/yargs/yargs/blob/master/docs/api.md#config)都支持`extends`关键字。`extends`允许您从[其他npm模块](https://www.npmjs.com/package/@istanbuljs/nyc-config-babel)继承配置，从而可以构建类似于[Babel presets](https://babeljs.io/docs/plugins/#presets)这样的插件架构：\r\n\r\n```json\r\n{\r\n  &quot;nyc&quot;: {\r\n    &quot;extends&quot;: &quot;@istanbuljs/nyc-config-babel&quot;\r\n  }\r\n}\r\n```\r\n\r\n<a name=\"customizing\"></a>\r\n\r\n#### 定制Yargs的解析器\r\n\r\n不是每个人都同意`process.argv`的解析方式; 使用[`parserConfiguration()`](https://github.com/yargs/yargs/blob/master/docs/api.md#parserConfiguration)方法可以打开和关闭某些yargs的解析功能：\r\n\r\n```js\r\nyargs.parserConfiguration({\r\n  &quot;yargs&quot;: {\r\n    &quot;short-option-groups&quot;: true,\r\n    &quot;camel-case-expansion&quot;: true,\r\n    &quot;dot-notation&quot;: true,\r\n    &quot;parse-numbers&quot;: true,\r\n    &quot;boolean-negation&quot;: true\r\n  }\r\n})\r\n```\r\n\r\n有关此功能的详细文档，请参阅[yargs-parser](https://github.com/yargs/yargs-parser#configuration)模块。\r\n\r\n### 中间件\r\n\r\n有时您可能希望在参数到达命令处理程序之前对其进行转换。例如，您可能希望验证是否已提供凭据，否则从文件加载凭据。\r\n\r\n中间件只是一堆函数，每个函数都传递当前解析的参数，然后可以通过添加值，删除值或覆盖值来更新。\r\n\r\nDiagram:\r\n\r\n```\r\n                        --------------         --------------        ---------\r\nstdin ----&gt; argv ----&gt; | Middleware 1 | ----&gt; | Middleware 2 | ---&gt; | Command |\r\n                        --------------         --------------        ---------\r\n```\r\n\r\n#### 凭据中间件示例\r\n\r\n在这个例子中，我们的中间件将检查`username`和`password`的参数值。如果没有，它将加载`~/.credentials`，并填充`argv.username`和`argv.password`值。\r\n\r\n##### 中间件函数\r\n\r\n```\r\nconst normalizeCredentials = (argv) => {\r\n  if (!argv.username || !argv.password) {\r\n    const credentials = JSON.parse(fs.readSync(\'~/.credentials\'))\r\n    return credentials\r\n  }\r\n  return {}\r\n}\r\n\r\n// Add normalizeCredentials to yargs\r\nyargs.middleware(normalizeCredentials)\r\n```\r\n\r\n#### 异步凭据中间件示例\r\n\r\n这个例子完全相同，但它异步加载`username`和`password`。\r\n\r\n##### 中间件函数\r\n\r\n```\r\nconst { promisify } = require(\'util\') // since node 8.0.0\r\nconst readFile = promisify(require(\'fs\').readFile)\r\n\r\nconst normalizeCredentials = (argv) => {\r\n  if (!argv.username || !argv.password) {\r\n    return readFile(\'~/.credentials\').then(data => JSON.parse(data))\r\n  }\r\n  return {}\r\n}\r\n\r\n// Add normalizeCredentials to yargs\r\nyargs.middleware(normalizeCredentials)\r\n```\r\n\r\n##### yargs解析配置\r\n\r\n```\r\nvar argv = require(\'yargs\')\r\n  .usage(\'Usage: $0 <command> [options]\')\r\n  .command(\'login\', \'Authenticate user\', (yargs) =>{\r\n        return yargs.option(\'username\')\r\n                    .option(\'password\')\r\n      } ,(argv) => {\r\n        authenticateUser(argv.username, argv.password)\r\n      },\r\n      [normalizeCredentials]\r\n     )\r\n  .argv;\r\n```\r\n\r\n#### 使用非单例接口\r\n\r\n要使yargs不作为单例运行，请执行以下操作：\r\n```\r\nconst argv = require(\'yargs/yargs\')(process.argv.slice(2))\r\n```\r\n\r\n当在库中使用yargs时，这尤其有用，因为第三方库不应该污染全局状态。\r\n\r\n## Yargs示例\r\n\r\n有关Yargs的更多演示，请参阅[示例文件夹](https://github.com/yargs/yargs/blob/master/example)。\r\n\r\n### 选项只是一个哈希值！\r\n\r\nplunder.js:\r\n\r\n```javascript\r\n#!/usr/bin/env node\r\nvar argv = require(\'yargs\').argv;\r\n\r\nif (argv.ships > 3 && argv.distance < 53.5) {\r\n    console.log(\'Plunder more riffiwobbles!\');\r\n} else {\r\n    console.log(\'Retreat from the xupptumblers!\');\r\n}\r\n```\r\n\r\n------\r\n\r\n```\r\n$ ./plunder.js --ships=4 --distance=22\r\nPlunder more riffiwobbles!\r\n\r\n$ ./plunder.js --ships 12 --distance 98.7\r\nRetreat from the xupptumblers!\r\n```\r\n\r\n### 你可以设置一些简短的选项：\r\n\r\nshort.js:\r\n\r\n```javascript\r\n#!/usr/bin/env node\r\nvar argv = require(\'yargs\').argv;\r\nconsole.log(\'(%d,%d)\', argv.x, argv.y);\r\n```\r\n\r\n------\r\n\r\n```\r\n$ ./short.js -x 10 -y 21\r\n(10,21)\r\n```\r\n\r\n### 布尔值，长，短，甚至分组：\r\n\r\nbool.js:\r\n\r\n```javascript\r\n#!/usr/bin/env node\r\nvar argv = require(\'yargs\').argv;\r\n\r\nif (argv.s) {\r\n    process.stdout.write(argv.fr ? \'Le perroquet dit: \' : \'The parrot says: \');\r\n}\r\nconsole.log(\r\n    (argv.fr ? \'couac\' : \'squawk\') + (argv.p ? \'!\' : \'\')\r\n);\r\n```\r\n\r\n------\r\n\r\n```\r\n$ ./bool.js -s\r\nThe parrot says: squawk\r\n\r\n$ ./bool.js -sp\r\nThe parrot says: squawk!\r\n\r\n$ ./bool.js -sp --fr\r\nLe perroquet dit: couac!\r\n```\r\n\r\n### 还有非连字符选项！只要使用`argv._`！\r\n\r\nnonopt.js:\r\n\r\n```javascript\r\n#!/usr/bin/env node\r\nvar argv = require(&#039;yargs&#039;).argv;\r\nconsole.log(&#039;(%d,%d)&#039;, argv.x, argv.y);\r\nconsole.log(argv._);\r\n```\r\n\r\n------\r\n\r\n```\r\n$ ./nonopt.js -x 6.82 -y 3.35 rum\r\n(6.82,3.35)\r\n[ &#039;rum&#039; ]\r\n\r\n$ ./nonopt.js &quot;me hearties&quot; -x 0.54 yo -y 1.12 ho\r\n(0.54,1.12)\r\n[ &#039;me hearties&#039;, &#039;yo&#039;, &#039;ho&#039; ]\r\n```\r\n\r\n### Yargs使用布尔值\r\n\r\ncount.js:\r\n\r\n```javascript\r\n#!/usr/bin/env node\r\nvar argv = require(&#039;yargs&#039;)\r\n    .count(&#039;verbose&#039;)\r\n    .alias(&#039;v&#039;, &#039;verbose&#039;)\r\n    .argv;\r\n\r\nVERBOSE_LEVEL = argv.verbose;\r\n\r\nfunction WARN()  { VERBOSE_LEVEL &gt;= 0 &amp;&amp; console.log.apply(console, arguments); }\r\nfunction INFO()  { VERBOSE_LEVEL &gt;= 1 &amp;&amp; console.log.apply(console, arguments); }\r\nfunction DEBUG() { VERBOSE_LEVEL &gt;= 2 &amp;&amp; console.log.apply(console, arguments); }\r\n\r\nWARN(&quot;Showing only important stuff&quot;);\r\nINFO(&quot;Showing semi-important stuff too&quot;);\r\nDEBUG(&quot;Extra chatty mode&quot;);\r\n```\r\n\r\n------\r\n\r\n```\r\n$ node count.js\r\nShowing only important stuff\r\n\r\n$ node count.js -v\r\nShowing only important stuff\r\nShowing semi-important stuff too\r\n\r\n$ node count.js -vv\r\nShowing only important stuff\r\nShowing semi-important stuff too\r\nExtra chatty mode\r\n\r\n$ node count.js -v --verbose\r\nShowing only important stuff\r\nShowing semi-important stuff too\r\nExtra chatty mode\r\n```\r\n\r\n### 告诉用户如何使用您的选项并设置要求。\r\n\r\narea.js:\r\n\r\n```javascript\r\n#!/usr/bin/env node\r\nvar argv = require(&#039;yargs&#039;)\r\n    .usage(&#039;Usage: $0 -w [num] -h [num]&#039;)\r\n    .demandOption([&#039;w&#039;,&#039;h&#039;])\r\n    .argv;\r\n\r\nconsole.log(&quot;The area is:&quot;, argv.w * argv.h);\r\n```\r\n\r\n------\r\n\r\n```\r\n$ ./area.js -w 55 -h 11\r\nThe area is: 605\r\n\r\n$ node ./area.js -w 4.91 -w 2.51\r\nUsage: area.js -w [num] -h [num]\r\n\r\nOptions:\r\n  -w  [required]\r\n  -h  [required]\r\n\r\nMissing required arguments: h\r\n```\r\n\r\n### 符合要求后，需求更多！请求非连字符的参数！\r\n\r\ndemand_count.js:\r\n\r\n```javascript\r\n#!/usr/bin/env node\r\nvar argv = require(&#039;yargs&#039;)\r\n    .demandCommand(2)\r\n    .argv;\r\nconsole.dir(argv);\r\n```\r\n\r\n------\r\n\r\n```\r\n$ ./demand_count.js a\r\n\r\nNot enough non-option arguments: got 1, need at least 2\r\n\r\n$ ./demand_count.js a b\r\n{ _: [ &#039;a&#039;, &#039;b&#039; ], &#039;$0&#039;: &#039;demand_count.js&#039; }\r\n\r\n$ ./demand_count.js a b c\r\n{ _: [ &#039;a&#039;, &#039;b&#039;, &#039;c&#039; ], &#039;$0&#039;: &#039;demand_count.js&#039; }\r\n```\r\n\r\n### 甚至更多的TIMBERS！\r\n\r\ndefault_singles.js:\r\n\r\n```javascript\r\n#!/usr/bin/env node\r\nvar argv = require(&#039;yargs&#039;)\r\n    .default(&#039;x&#039;, 10)\r\n    .default(&#039;y&#039;, 10)\r\n    .argv\r\n;\r\nconsole.log(argv.x + argv.y);\r\n```\r\n\r\n------\r\n\r\n```\r\n$ ./default_singles.js -x 5\r\n15\r\n```\r\n\r\ndefault_hash.js:\r\n\r\n```javascript\r\n#!/usr/bin/env node\r\nvar argv = require(&#039;yargs&#039;)\r\n    .default({ x : 10, y : 10 })\r\n    .argv\r\n;\r\nconsole.log(argv.x + argv.y);\r\n```\r\n\r\n------\r\n\r\n```\r\n$ ./default_hash.js -y 7\r\n17\r\n```\r\n\r\n### 如果你真的想得到所有的描述...\r\n\r\nboolean_single.js:\r\n\r\n```javascript\r\n#!/usr/bin/env node\r\nvar argv = require(&#039;yargs&#039;)\r\n    .boolean(&#039;v&#039;)\r\n    .argv\r\n;\r\nconsole.dir(argv.v);\r\nconsole.dir(argv._);\r\n```\r\n\r\n------\r\n\r\n```\r\n$ ./boolean_single.js -v &quot;me hearties&quot; yo ho\r\ntrue\r\n[ &#039;me hearties&#039;, &#039;yo&#039;, &#039;ho&#039; ]\r\n```\r\n\r\nboolean_double.js:\r\n\r\n```javascript\r\n#!/usr/bin/env node\r\nvar argv = require(&#039;yargs&#039;)\r\n    .boolean([&#039;x&#039;,&#039;y&#039;,&#039;z&#039;])\r\n    .argv\r\n;\r\nconsole.dir([ argv.x, argv.y, argv.z ]);\r\nconsole.dir(argv._);\r\n```\r\n\r\n------\r\n\r\n```\r\n$ ./boolean_double.js -x -z one two three\r\n[ true, false, true ]\r\n[ &#039;one&#039;, &#039;two&#039;, &#039;three&#039; ]\r\n```\r\n\r\n### Yargs在这里帮助你......\r\n\r\n您可以描述帮助消息的参数并设置别名。Yargs知道如何自动格式化一个方便的帮助字符串。\r\n\r\nline_count.js:\r\n\r\n```javascript\r\n#!/usr/bin/env node\r\nvar argv = require(&#039;yargs&#039;)\r\n    .usage(&#039;Usage: $0 &lt;command&gt; [options]&#039;)\r\n    .command(&#039;count&#039;, &#039;Count the lines in a file&#039;)\r\n    .example(&#039;$0 count -f foo.js&#039;, &#039;count the lines in the given file&#039;)\r\n    .alias(&#039;f&#039;, &#039;file&#039;)\r\n    .nargs(&#039;f&#039;, 1)\r\n    .describe(&#039;f&#039;, &#039;Load a file&#039;)\r\n    .demandOption([&#039;f&#039;])\r\n    .help(&#039;h&#039;)\r\n    .alias(&#039;h&#039;, &#039;help&#039;)\r\n    .epilog(&#039;copyright 2019&#039;)\r\n    .argv;\r\n\r\nvar fs = require(&#039;fs&#039;);\r\nvar s = fs.createReadStream(argv.file);\r\n\r\nvar lines = 0;\r\ns.on(&#039;data&#039;, function (buf) {\r\n    lines += buf.toString().match(/\\n/g).length;\r\n});\r\n\r\ns.on(&#039;end&#039;, function () {\r\n    console.log(lines);\r\n});\r\n```\r\n\r\n------\r\n\r\n```\r\n$ node line_count.js \r\nUsage: line_count.js &lt;command&gt; [options]\r\n\r\nCommands:\r\n  line_count.js count  Count the lines in a file\r\n\r\nOptions:\r\n  --version   Show version number      [boolean]\r\n  -f, --file  Load a file             [required]\r\n  -h, --help  Show help                [boolean]\r\n\r\nExamples:\r\n  line_count.js count -f foo.js  count the lines in the given file\r\n\r\ncopyright 2019\r\n\r\nMissing required argument: f\r\n\r\n$ node line_count.js count\r\nline_count.js count\r\n\r\nCount the lines in a file\r\n\r\nOptions:\r\n  --version   Show version number      [boolean]\r\n  -f, --file  Load a file             [required]\r\n  -h, --help  Show help                [boolean]\r\n\r\nMissing required argument: f\r\n\r\n$ node line_count.js count --file line_count.js\r\n25\r\n\r\n$ node line_count.js count -f line_count.js\r\n25\r\n```\r\n\r\n\r\n', 158, 'https://jikexingkong.com/docs/yargs-cn/%e5%9f%ba%e7%a1%80', 0, 'docs', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(160, 1, '2021-11-23 07:00:41', '2021-11-22 23:00:41', '', '示例', '', 'publish', 'open', 'closed', '', '%e7%a4%ba%e4%be%8b', '', '', '2021-11-23 07:00:41', '2021-11-22 23:00:41', '', 158, 'https://jikexingkong.com/docs/yargs-cn/%e7%a4%ba%e4%be%8b', 1, 'docs', '', 0),
(161, 1, '2021-11-30 13:00:39', '2021-11-30 05:00:39', '', '网址导航', '', 'publish', 'closed', 'closed', '', 'links-2', '', '', '2021-11-30 13:00:39', '2021-11-30 05:00:39', '', 0, 'https://jikexingkong.com/links-2', 0, 'page', '', 0),
(163, 1, '2021-12-01 17:11:27', '2021-12-01 09:11:27', '', 'zustand中文文档', '', 'publish', 'open', 'closed', '', 'zustand-cn', '', '', '2021-12-03 06:52:09', '2021-12-02 22:52:09', '', 0, 'https://jikexingkong.com/docs/zustand%e4%b8%ad%e6%96%87%e6%96%87%e6%a1%a3', 0, 'docs', '', 0),
(164, 1, '2021-12-01 17:15:56', '2021-12-01 09:15:56', '欢迎来到 zustand 维基！', 'wiki', '', 'publish', 'open', 'closed', '', 'wiki', '', '', '2021-12-03 06:51:48', '2021-12-02 22:51:48', '欢迎来到 zustand 维基！', 163, 'https://jikexingkong.com/docs/zustand-cn/wiki', 1, 'docs', '', 0),
(167, 1, '2021-12-03 05:19:11', '2021-12-02 21:19:11', 'Zustand 为状态管理提供了必需要的东西，这对大多数项目都很有用；但是，一些用户希望扩展库的功能集。这可以使用社区创建的第三方库来完成。\n\n[scode type=\"yellow\"]免责声明：这些库可能有错误、有限的维护或其他限制，并且不是 pmndrs 或 zustand 维护者正式推荐的。此列表旨在为希望扩展 zustand 功能集的人提供一个良好的起点。[/scode]\n\n<ul>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/Albert-Gao/auto-zustand-selectors-hook\">auto-zustand-selectors-hook</a> - 支持的Typescript 自动生成store的 zustand hooks</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/BowlingX/geschichte\">geschichte</a> - 基于 zustand 和 immer 的hook来管理查询参数</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/2A5F/Mobz\">mobz</a> -zustand 风格的 mobx api</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/Tom-Julux/shared-zustand\">shared-zustand</a> -  zustand的交叉表状态共享</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/beerose/simple-zustand-devtools\">simple-zustand-devtools</a> - 在 React DevTools 中检查你的 zustand store 🐻⚛️</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/wobsoriano/solid-zustand\">solid-zustand</a> - Solid 的 Zustand 状态管理</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/InfiniteXyy/zoov\">zoov</a> -  🐻 Zustand与Module-like api一起使用</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/charkour/zundo\">zundo</a> - 🍜 在你的应用中启用时间旅行。zustand 的撤销/重做中间件</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/ntvinhit/zustand-constate\">zustand-constate</a> - 基于context的状态管理，使用 zustand 和 constate 的强大功能，并消除其中的许多缺点</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/Conduct/zustand-forms\">zustand-forms</a> - 为 zustand store提供的快速类型安全表单状态</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/cmlarsen/zustand-middleware-computed-state\">zustand-middleware-computed-state</a> - 这是一个简单的中间件，用于将computed 状态添加到Zustand状态管理库</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/biowaffeln/zustand-middleware-xstate\">zustand-middleware-xstate</a> - 此中间件允许你轻松地将 xstate 状态机放入全局 zustand store中</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/joebobmiles/zustand-middleware-yjs\">zustand-middleware-yjs</a> - 用于将 Zustand store与 Yjs 同步的中间件</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/roadmanfong/zustand-persist\">zustand-persist</a> - 持久化和胶水化状态</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/Nowsta/zustand-saga\">zustand-saga</a> - 用于 redux-saga 的 Zustand 中间件（去除 redux）</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/Diablow/zustand-store-addons\">zustand-store-addons</a> -zustand的 React 状态管理插件</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/tandem-pt/zustand-yjs\">zustand-yjs</a> -  Yjs 结构的zustand store</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/timkindberg/zusteller\">zusteller</a> - 你的全局救星. \"只是hooks\" + zustand.</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/udecode/zustood\">zustood</a> - 🐻‍❄️ 使用 zustand 的模块化store工厂</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/patdx/zustand-rx\">zustand-rx</a> - 带有 Rxjs 的 Zustand 中间件</li>\n</ul>', '第三方库', '', 'publish', 'open', 'closed', '', '3rd-party-libraries', '', '', '2021-12-03 06:01:03', '2021-12-02 22:01:03', 'Zustand 为状态管理提供了必需要的东西，这对大多数项目都很有用；但是，一些用户希望扩展库的功能集。这可以使用社区创建的第三方库来完成。\r\n\r\n[scode type=\"yellow\"]免责声明：这些库可能有错误、有限的维护或其他限制，并且不是 pmndrs 或 zustand 维护者正式推荐的。此列表旨在为希望扩展 zustand 功能集的人提供一个良好的起点。[/scode]\r\n\r\n- [auto-zustand-selectors-hook](https://github.com/Albert-Gao/auto-zustand-selectors-hook) - 支持的Typescript 自动生成store的 zustand hooks\r\n- [geschichte](https://github.com/BowlingX/geschichte) - 基于 zustand 和 immer 的hook来管理查询参数\r\n- [mobz](https://github.com/2A5F/Mobz) -zustand 风格的 mobx api\r\n- [shared-zustand](https://github.com/Tom-Julux/shared-zustand) -  zustand的交叉表状态共享\r\n- [simple-zustand-devtools](https://github.com/beerose/simple-zustand-devtools) - 在 React DevTools 中检查你的 zustand store 🐻⚛️\r\n- [solid-zustand](https://github.com/wobsoriano/solid-zustand) - Solid 的 Zustand 状态管理\r\n- [zoov](https://github.com/InfiniteXyy/zoov) -  🐻 Zustand与Module-like api一起使用\r\n- [zundo](https://github.com/charkour/zundo) - 🍜 在你的应用中启用时间旅行。zustand 的撤销/重做中间件\r\n- [zustand-constate](https://github.com/ntvinhit/zustand-constate) - 基于context的状态管理，使用 zustand 和 constate 的强大功能，并消除其中的许多缺点\r\n- [zustand-forms](https://github.com/Conduct/zustand-forms) - 为 zustand store提供的快速类型安全表单状态\r\n- [zustand-middleware-computed-state](https://github.com/cmlarsen/zustand-middleware-computed-state) - 这是一个简单的中间件，用于将computed 状态添加到Zustand状态管理库 \r\n- [zustand-middleware-xstate](https://github.com/biowaffeln/zustand-middleware-xstate) - 此中间件允许你轻松地将 xstate 状态机放入全局 zustand store中\r\n- [zustand-middleware-yjs](https://github.com/joebobmiles/zustand-middleware-yjs) - 用于将 Zustand store与 Yjs 同步的中间件\r\n- [zustand-persist](https://github.com/roadmanfong/zustand-persist) - 持久化和胶水化状态\r\n- [zustand-saga](https://github.com/Nowsta/zustand-saga) - 用于 redux-saga 的 Zustand 中间件（去除 redux）\r\n- [zustand-store-addons](https://github.com/Diablow/zustand-store-addons) -zustand的 React 状态管理插件\r\n- [zustand-yjs](https://github.com/tandem-pt/zustand-yjs) -  Yjs 结构的zustand store\r\n- [zusteller](https://github.com/timkindberg/zusteller) - 你的全局救星. \"只是hooks\" + zustand.\r\n- [zustood](https://github.com/udecode/zustood) - 🐻‍❄️ 使用 zustand 的模块化store工厂\r\n- [zustand-rx](https://github.com/patdx/zustand-rx) - 带有 Rxjs 的 Zustand 中间件', 164, 'https://jikexingkong.com/?post_type=docs&#038;p=167', 0, 'docs', '', 0),
(168, 1, '2021-12-03 05:19:28', '2021-12-02 21:19:28', '建议在使用 store 中的属性或操作时使用选择器。\n\n<pre><code class=\"language-javascript line-numbers\">const bears = useBearStore(state =&gt; state.bears)\n</code></pre>\n\n但是，编写这些可能很乏味，但你可以自动生成它们\n\n<h2>创建以下函数: <code>createSelectors</code></h2>\n\n<pre><code class=\"language-typescript line-numbers\">import create, { StateCreator, State, StoreApi, UseStore } from \'zustand\'\n\ninterface Selectors&lt;StoreType&gt; {\n  use: {\n    [key in keyof StoreType]: () =&gt; StoreType[key]\n  }\n}\n\nfunction createSelectors&lt;StoreType extends State&gt;(\n  store: UseStore&lt;StoreType&gt;,\n) {\n  ;(store as any).use = {}\n\n  Object.keys(store.getState()).forEach(key =&gt; {\n    const selector = (state: StoreType) =&gt; state[key as keyof StoreType]\n    ;(store as any).use[key] = () =&gt; store(selector)\n  })\n\n  return store as UseStore&lt;StoreType&gt; &amp; Selectors&lt;StoreType&gt;\n}\n</code></pre>\n\n<h2>如果你有这样的store:</h2>\n\n<pre><code class=\"language-typescript line-numbers\">interface BearState {\n  bears: number;\n  increase: (by: number) =&gt; void;\n}\n\nconst useStoreBase = create&lt;BearState&gt;((set) =&gt; ({\n  bears: 0,\n  increase: (by) =&gt; set((state) =&gt; ({ bears: state.bears + by })),\n}));\n</code></pre>\n\n<h2>在你的store中应用这个函数:</h2>\n\n<pre><code class=\"language-typescript line-numbers\">const useStore = createSelectors(useStoreBase);\n</code></pre>\n\n<h2>现在选择器将自动生成:</h2>\n\n<pre><code class=\"language-typescript line-numbers\">// get the property\nconst bears = useStore.use.bears();\n\n// get the action\nconst increase = useStore.use.increase();\n</code></pre>\n\n<h2>库</h2>\n\n<ul>\n<li>或者你可以 <code>npm i auto-zustand-selectors-hook</code></li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/Albert-Gao/auto-zustand-selectors-hook\">auto-zustand-selectors-hook</a></li>\n</ul>', '自动生成选择器', '', 'publish', 'open', 'closed', '', 'auto-generating-selectors', '', '', '2021-12-03 05:54:44', '2021-12-02 21:54:44', '建议在使用 store 中的属性或操作时使用选择器。\r\n\r\n```javascript\r\nconst bears = useBearStore(state =&gt; state.bears)\r\n```\r\n\r\n但是，编写这些可能很乏味，但你可以自动生成它们\r\n\r\n## 创建以下函数: `createSelectors`\r\n\r\n```typescript\r\nimport create, { StateCreator, State, StoreApi, UseStore } from &#039;zustand&#039;\r\n\r\ninterface Selectors&lt;StoreType&gt; {\r\n  use: {\r\n    [key in keyof StoreType]: () =&gt; StoreType[key]\r\n  }\r\n}\r\n\r\nfunction createSelectors&lt;StoreType extends State&gt;(\r\n  store: UseStore&lt;StoreType&gt;,\r\n) {\r\n  ;(store as any).use = {}\r\n\r\n  Object.keys(store.getState()).forEach(key =&gt; {\r\n    const selector = (state: StoreType) =&gt; state[key as keyof StoreType]\r\n    ;(store as any).use[key] = () =&gt; store(selector)\r\n  })\r\n\r\n  return store as UseStore&lt;StoreType&gt; &amp; Selectors&lt;StoreType&gt;\r\n}\r\n```\r\n\r\n## 如果你有这样的store:\r\n\r\n```typescript\r\ninterface BearState {\r\n  bears: number;\r\n  increase: (by: number) =&gt; void;\r\n}\r\n\r\nconst useStoreBase = create&lt;BearState&gt;((set) =&gt; ({\r\n  bears: 0,\r\n  increase: (by) =&gt; set((state) =&gt; ({ bears: state.bears + by })),\r\n}));\r\n```\r\n\r\n## 在你的store中应用这个函数: \r\n\r\n```typescript\r\nconst useStore = createSelectors(useStoreBase);\r\n```\r\n\r\n## 现在选择器将自动生成:\r\n\r\n```typescript\r\n// get the property\r\nconst bears = useStore.use.bears();\r\n\r\n// get the action\r\nconst increase = useStore.use.increase();\r\n```\r\n\r\n## 库\r\n\r\n- 或者你可以 `npm i auto-zustand-selectors-hook`\r\n- [auto-zustand-selectors-hook](https://github.com/Albert-Gao/auto-zustand-selectors-hook)', 164, 'https://jikexingkong.com/?post_type=docs&#038;p=168', 1, 'docs', '', 0),
(169, 1, '2021-12-03 05:19:52', '2021-12-02 21:19:52', '<h1>zustand 和 valtio 和有什么区别？</h1>\n\n参考: <a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/pmndrs/zustand/issues/483\">https://github.com/pmndrs/zustand/issues/483</a>\n\n<h2>主要区别在于：zustand 是不可变状态模型，而 valtio 是可变状态模型。</h2>\n\n<pre><code class=\"language-js line-numbers\">import create from \'zustand\'\n\n// intentionally show non-hook deep usage\nconst store = create(() =&gt; ({ obj: { count: 0 } }))\nstore.setState((prev) =&gt; ({ obj: { count: prev.obj.count + 1 } })\n</code></pre>\n\n<pre><code class=\"language-js line-numbers\">import { proxy } from \'valtio\'\n\nimport state = proxy({ obj: { count: 0 } })\nstate.obj.count += 1\n</code></pre>\n\n<h2>另一个区别是渲染优化。</h2>\n\n<pre><code class=\"language-js line-numbers\">import create from \'zustand\'\n\nconst useStore = create(() =&gt; ({\n  count1: 0,\n  count2: 1,\n}))\n\nconst Component = () =&gt; {\n  const count1 = useStore((state) =&gt; state.count1) // manual render optimization with selector\n  // ...\n}\n</code></pre>\n\n<pre><code class=\"language-js line-numbers\">import { proxy, useSnapshot } from \'valtio\'\n\nconst state = proxy({\n  count1: 0,\n  count2: 0,\n})\n\nconst Component = () =&gt; {\n  const { count1 } = useSnapshot(state) // automatic render optimization with property access\n  // ...\n}\n</code></pre>', 'zustand和valtio的区别', '', 'publish', 'open', 'closed', '', 'difference-between-zustand-and-valtio', '', '', '2021-12-03 06:05:29', '2021-12-02 22:05:29', '# zustand 和 valtio 和有什么区别？\r\n\r\n参考: [https://github.com/pmndrs/zustand/issues/483](https://github.com/pmndrs/zustand/issues/483)\r\n\r\n## 主要区别在于：zustand 是不可变状态模型，而 valtio 是可变状态模型。\r\n\r\n```js\r\nimport create from &#039;zustand&#039;\r\n\r\n// intentionally show non-hook deep usage\r\nconst store = create(() =&gt; ({ obj: { count: 0 } }))\r\nstore.setState((prev) =&gt; ({ obj: { count: prev.obj.count + 1 } })\r\n```\r\n\r\n```js\r\nimport { proxy } from &#039;valtio&#039;\r\n\r\nimport state = proxy({ obj: { count: 0 } })\r\nstate.obj.count += 1\r\n```\r\n\r\n## 另一个区别是渲染优化。\r\n\r\n```js\r\nimport create from &#039;zustand&#039;\r\n\r\nconst useStore = create(() =&gt; ({\r\n  count1: 0,\r\n  count2: 1,\r\n}))\r\n\r\nconst Component = () =&gt; {\r\n  const count1 = useStore((state) =&gt; state.count1) // manual render optimization with selector\r\n  // ...\r\n}\r\n```\r\n\r\n```js\r\nimport { proxy, useSnapshot } from &#039;valtio&#039;\r\n\r\nconst state = proxy({\r\n  count1: 0,\r\n  count2: 0,\r\n})\r\n\r\nconst Component = () =&gt; {\r\n  const { count1 } = useSnapshot(state) // automatic render optimization with property access\r\n  // ...\r\n}\r\n```', 164, 'https://jikexingkong.com/?post_type=docs&#038;p=169', 2, 'docs', '', 0),
(170, 1, '2021-12-03 05:20:09', '2021-12-02 21:20:09', '尽管 zustand 是一个非集中式的库，但这里是推荐的用法之一。\n\n<pre><code class=\"language-js line-numbers\">const useStore = create((set) =&gt; ({\n  storeSliceA: ...,\n  storeSliceB: ...,\n  storeSliceC: ...,\n  dispatchX: () =&gt; set(...),\n  dispatchY: () =&gt; set(...),\n}))\n</code></pre>\n\n<ul>\n<li>创建一个单独的store</li>\n<li>仅使用<code>set</code>定义store</li>\n<li>在 store 的root级别定义 dispatch 函数来更新一个或多个 store切片</li>\n</ul>\n\n请参阅<a class=\"wp-editor-md-post-content-link\" href=\"/docs/pmndrs/zustand-cn/wiki/splitting-the-store-into-separate-slices\">将store拆分为单独的切片</a>以定义具有单独切片的store。', 'Flux的启发与实践', '', 'publish', 'open', 'closed', '', 'flux-inspired-practice', '', '', '2021-12-03 06:06:56', '2021-12-02 22:06:56', '尽管 zustand 是一个非集中式的库，但这里是推荐的用法之一。\r\n\r\n```js\r\nconst useStore = create((set) =&gt; ({\r\n  storeSliceA: ...,\r\n  storeSliceB: ...,\r\n  storeSliceC: ...,\r\n  dispatchX: () =&gt; set(...),\r\n  dispatchY: () =&gt; set(...),\r\n}))\r\n```\r\n\r\n- 创建一个单独的store\r\n- 仅使用`set`定义store\r\n- 在 store 的root级别定义 dispatch 函数来更新一个或多个 store切片\r\n\r\n请参阅[将store拆分为单独的切片](/docs/pmndrs/zustand-cn/wiki/splitting-the-store-into-separate-slices)以定义具有单独切片的store。', 164, 'https://jikexingkong.com/?post_type=docs&#038;p=170', 3, 'docs', '', 0),
(171, 1, '2021-12-03 05:20:25', '2021-12-02 21:20:25', '<h1>我的订阅没有被调用</h1>\n\n如果你使用的是 ImmerJS，请确保你确实遵循了 ImmerJS 的规则。\n例如，你必须添加<code>[immerable] = true</code> 才能使类对象工作。如果你不这样做，ImmerJS 仍然会改变对象，并不会变成代理，所以它也会更新基本状态。 Zustand 检查状态是否确实发生了变化，因此由于基本状态和下一个状态都相等（如果你没有正确执行），它将跳过调用订阅。', '陷阱', '', 'publish', 'open', 'closed', '', 'gotchas', '', '', '2021-12-03 05:55:46', '2021-12-02 21:55:46', '# 我的订阅没有被调用\r\n\r\n如果你使用的是 ImmerJS，请确保你确实遵循了 ImmerJS 的规则。\r\n例如，你必须添加` [immerable] = true` 才能使类对象工作。如果你不这样做，ImmerJS 仍然会改变对象，并不会变成代理，所以它也会更新基本状态。 Zustand 检查状态是否确实发生了变化，因此由于基本状态和下一个状态都相等（如果你没有正确执行），它将跳过调用订阅。', 164, 'https://jikexingkong.com/?post_type=docs&#038;p=171', 4, 'docs', '', 0),
(172, 1, '2021-12-03 05:20:50', '2021-12-02 21:20:50', '<h1>持久化中间件</h1>\n\n[scode type=\"yellow\"]译者注: 因为在状态管理中直接持久化太过耦合,不够灵活,所以个人建议最好外部使用单独的自定义或第三方组件来处理本地的数据持久化[/scode]\n\n持久中间件使你能够将 Zustand 状态存储在storage中（例如<code>localStorage</code>, <code>AsyncStorage</code>, <code>IndexedDB</code>等），从而持久化它的数据。\n请注意，此中间件确实支持同步存储（例如 <code>localStorage</code>）和异步存储（例如 <code>AsyncStorage</code>），但使用异步存储确实会带来成本。\n有关更多详细信息，请参阅 <a class=\"wp-editor-md-post-content-link\" href=\"#水合和异步存储\">水合作用和异步存储</a> 。\n\n快速示例:\n\n<pre><code class=\"language-ts line-numbers\">import create from \"zustand\"\nimport { persist } from \"zustand/middleware\"\n\nexport const useStore = create(persist(\n  (set, get) =&gt; ({\n    fishes: 0,\n    addAFish: () =&gt; set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // name of item in the storage (must be unique)\n    getStorage: () =&gt; sessionStorage, // (optional) by default the \'localStorage\' is used\n  }\n))\n</code></pre>\n\n请参阅<a class=\"wp-editor-md-post-content-link\" href=\"#选项\">选项</a>了解更多详情\n\n<h2>选项</h2>\n\n<h3><code>name</code></h3>\n\n这是唯一的必填选项选项。\n给定的名称将是用于在store中存储你的 Zustand 状态的键，因此它必须是唯一的。\n\n<h3><code>getStorage</code></h3>\n\n[scode type=\"lblue\"]值: <code>() =&gt; localStorage</code>[/scode]\n\n使你能够使用自己的storage。\n只需传递一个函数，该函数返回你要使用的store。\n\n示例:\n\n<pre><code class=\"language-ts line-numbers\">export const useStore = create(persist(\n  (set, get) =&gt; ({\n    // ...\n  }),\n  {\n    // ...\n    getStorage: () =&gt; AsyncStorage,\n  }\n))\n</code></pre>\n\n给定的storage必须匹配以下接口:\n\n<pre><code class=\"language-ts line-numbers\">interface Storage {\n  getItem: (name: string) =&gt; string | null | Promise&lt;string | null&gt;\n  setItem: (name: string, value: string) =&gt; void | Promise&lt;void&gt;\n  removeItem: (name: string) =&gt; void | Promise&lt;void&gt;\n}\n</code></pre>\n\n<h3><code>serialize</code></h3>\n\n[scode type=\"lblue\"]类型: <code>(state: Object) =&gt; string | Promise&lt;string&gt;</code>[/scode]\n\n[scode type=\"lblue\"]默认值: <code>(state) =&gt; JSON.stringify(state)</code>[/scode]\n\n由于将对象存储在storage中的唯一方法是通过字符串，你可以使用此选项提供自定义函数以将你的状态序列化为字符串。\n\n例如，如果你想将状态存储在 base64 中：\n\n<pre><code class=\"language-ts line-numbers\">export const useStore = create(persist(\n  (set, get) =&gt; ({\n    // ...\n  }),\n  {\n    // ...\n    serialize: (state) =&gt; btoa(JSON.stringify(state)),\n  }\n))\n</code></pre>\n\n请注意，你还需要一个自定义<code>deserialize</code> (反序列化)函数才能使其正常工作。见下文。\n\n<h3><code>deserialize</code></h3>\n\n[scode type=\"lblue\"]类型: <code>(str: string) =&gt; Object | Promise&lt;Object&gt;</code>[/scode]\n\n[scode type=\"lblue\"]默认值: <code>(str) =&gt; JSON.parse(str)</code>[/scode]\n\n如果你传递自定义序列化函数，则很可能还需要传递自定义反序列化函数。\n要继续上面的示例，你可以使用以下命令反序列化 base64 值：\n\n<pre><code class=\"language-ts line-numbers\">export const useStore = create(persist(\n  (set, get) =&gt; ({\n    // ...\n  }),\n  {\n    // ...\n    deserialize: (str) =&gt; JSON.parse(atob(str)),\n  }\n))\n</code></pre>\n\n<h3><code>partialize</code></h3>\n\n[scode type=\"lblue\"]类型: <code>(state: Object) =&gt; Object</code>[/scode]\n\n[scode type=\"lblue\"]默认值: <code>(state) =&gt; state</code>[/scode]\n\n使你能够排除一些要存储在storage中的状态字段。\n你可以使用以下方法排除多个字段：\n\n<pre><code class=\"language-ts line-numbers\">export const useStore = create(persist(\n  (set, get) =&gt; ({\n    foo: 0,\n    bar: 1,\n  }),\n  {\n    // ...\n    partialize: (state) =&gt;\n      Object.fromEntries(\n        Object.entries(state).filter(([key]) =&gt; ![\"foo\"].includes(key))\n      ),\n  }\n))\n</code></pre>\n\n或者你可以只允许使用如下的特定字段：\n\n<pre><code class=\"language-ts line-numbers\">export const useStore = create(persist(\n  (set, get) =&gt; ({\n    foo: 0,\n    bar: 1,\n  }),\n  {\n    // ...\n    partialize: (state) =&gt; ({ foo: state.foo })\n  }\n))\n</code></pre>\n\n<h3><code>onRehydrateStorage</code></h3>\n\n[scode type=\"lblue\"]类型: <code>(state: Object) =&gt; ((state?: Object, error?: Error) =&gt; void) | void</code>[/scode]\n\n此选项使你能够传递将在存储storage水合时调用的侦听器函数。\n\n示例：\n\n<pre><code class=\"language-ts line-numbers\">export const useStore = create(persist(\n  (set, get) =&gt; ({\n    // ...\n  }),\n  {\n    // ...\n    onRehydrateStorage: (state) =&gt; {\n      console.log(\"hydration starts\");\n\n      // optional\n      return (state, error) =&gt; {\n        if (error) {\n          console.log(\"an error happened during hydration\", error)\n        } else {\n          console.log(\"hydration finished\")\n        }\n      }\n    }\n  }\n))\n</code></pre>\n\n<h3><code>version</code></h3>\n\n[scode type=\"lblue\"]类型: <code>number</code>[/scode]\n\n[scode type=\"lblue\"]默认值: <code>0</code>[/scode]\n\n如果要在storage中引入重大更改（例如重命名字段），可以指定新版本号。\n默认情况下，如果storage中的版本与代码中的版本不匹配，则存储的值不会被使用。\n有关处理重大更改的更多详细信息，请参阅下面的<code>migrate</code>选项。\n\n<h3><code>migrate</code></h3>\n\n[scode type=\"lblue\"]类型: <code>(persistedState: Object, version: number) =&gt; Object | Promise&lt;Object&gt;</code>[/scode]\n\n[scode type=\"lblue\"]默认值: <code>(persistedState) =&gt; persistedState</code>[/scode]\n\n你可以使用此选项来处理版本迁移。\nmigrate 函数将持久化状态和版本号作为参数。它必须返回符合最新版本（代码中的版本）的状态。\n例如，如果要重命名字段，可以使用以下命令：\n\n<pre><code class=\"language-ts line-numbers\">export const useStore = create(persist(\n  (set, get) =&gt; ({\n    newField: 0, // let\'s say this field was named otherwise in version 0\n  }),\n  {\n    // ...\n    version: 1, // a migration will be triggered if the version in the storage mismatches this one\n    migrate: (persistedState, version) =&gt; {\n      if (version === 0) {\n        // if the stored value is in version 0, we rename the field to the new name\n        persistedState.newField = persistedState.oldField;\n        delete persistedState.oldField;\n      }\n\n      return persistedState;\n    },\n  }\n))\n</code></pre>\n\n<h3><code>merge</code></h3>\n\n[scode type=\"lblue\"]类型: <code>(persistedState: Object, currentState: Object) =&gt; Object</code>[/scode]\n\n[scode type=\"lblue\"]默认值: <code>(persistedState, currentState) =&gt; ({ ...currentState, ...persistedState })</code>[/scode]\n\n在某些情况下，你可能希望使用自定义合并函数将持久值与当前状态合并。\n默认情况下，中间件进行浅合并。\n如果你部分持久化了嵌套对象，那么浅层合并可能还不够。\n例如，如果storage包含以下内容：\n\n<pre><code class=\"language-ts line-numbers\">{\n  foo: {\n    bar: 0,\n  }\n}\n</code></pre>\n\n但是你的 Zustand store包含：\n\n<pre><code class=\"language-ts line-numbers\">{\n  foo: {\n    bar: 0,\n    baz: 1,\n  }\n}\n</code></pre>\n\n浅合并将从<code>foo</code>对象中删除 <code>baz</code>字段。\n解决此问题的一种方法是提供自定义深度合并功能：\n\n<pre><code class=\"language-ts line-numbers\">export const useStore = create(persist(\n  (set, get) =&gt; ({\n    foo: {\n      bar: 0,\n      baz: 1,\n    },\n  }),\n  {\n    // ...\n    merge: (persistedState, currentState) =&gt; deepMerge(currentState, persistedState),\n  }\n))\n</code></pre>\n\n<h2>API</h2>\n\n[scode type=\"share\"]Version: >=3.6.3[/scode]\n\n持久化api使你能够从 React 组件的内部或外部与持久中间件进行大量交互。\n\n<h3><code>setOptions</code></h3>\n\n[scode type=\"lblue\"]类型: <code>(newOptions: PersistOptions) =&gt; void</code>[/scode]\n\n此方法使你能够更改中间件选项。请注意，新选项将与当前选项合并。\n\n例如，这可用于更改storage名称：\n\n<pre><code class=\"language-ts line-numbers\">useStore.persist.setOptions({\n  name: \"new-name\"\n});\n</code></pre>\n\n甚至更改storage引擎：\n\n<pre><code class=\"language-ts line-numbers\">useStore.persist.setOptions({\n  getStorage: () =&gt; sessionStorage,\n});\n</code></pre>\n\n<h3><code>clearStorage</code></h3>\n\n[scode type=\"lblue\"]类型: <code>() =&gt; void</code>[/scode]\n\n这个方法用于完全清除storage中的持久值。\n\n<pre><code class=\"language-ts line-numbers\">useStore.persist.clearStorage();\n</code></pre>\n\n<h3><code>rehydrate</code></h3>\n\n[scode type=\"lblue\"]类型: <code>() =&gt; Promise&lt;void&gt;</code>[/scode]\n\n在某些情况下，你可能希望手动触发水合作用。\n这可以通过调用 <code>rehydrate</code>方法来完成。\n\n<pre><code class=\"language-ts line-numbers\">await useStore.persist.rehydrate();\n</code></pre>\n\n<h3><code>hasHydrated</code></h3>\n\n[scode type=\"lblue\"]类型: <code>() =&gt; boolean</code>[/scode]\n\n这是一个非响应式的 getter，用于了解storage是否已被水合（请注意，这在调用 <code>useStore.persist.rehydrate()</code> 时会更新）。\n\n<pre><code class=\"language-ts line-numbers\">useStore.persist.hasHydrated();\n</code></pre>\n\n<h3><code>onHydrate</code></h3>\n\n[scode type=\"lblue\"]类型: <code>(listener: (state) =&gt; void) =&gt; () =&gt; void</code>[/scode]\n\n水合过程开始时将调用给定的监听器。\n\n<pre><code class=\"language-ts line-numbers\">const unsub = useStore.persist.onHydrate((state) =&gt; {\n  console.log(\"hydration starts\");\n});\n\n// later on...\nunsub();\n</code></pre>\n\n<h3><code>onFinishHydration</code></h3>\n\n[scode type=\"lblue\"]类型: <code>(listener: (state) =&gt; void) =&gt; () =&gt; void</code>[/scode]\n\n当水合过程结束时，将调用给定的监听器。\n\n<pre><code class=\"language-ts line-numbers\">const unsub = useStore.persist.onFinishHydration((state) =&gt; {\n  console.log(\"hydration finished\");\n});\n\n// later on...\nunsub();\n</code></pre>\n\n<h2>水合和异步存储</h2>\n\n要解释异步存储的“成本”是什么，你需要了解什么是水合作用。\n简而言之，水合是从storage中检索持久状态并将其与当前状态合并的过程。\npersist 中间件执行两种 hydration：同步和异步。\n如果给定的storage是同步的（例如<code>localStorage</code>），则 hydration 将同步完成，如果给定的存储是异步的（例如 <code>AsyncStorage</code>），则 hydration 将异步完成......🥁。\n但问题是什么？\n好吧，在同步水合中，Zustand storage将在其创建时进行水合。\n在异步水合中，Zustand storage将在稍后的微任务中水合。\n为什么这有关系？\n异步水合可能会导致一些意外行为。\n例如，如果你在 React 应用程序中使用 Zustand，store将不会在初始渲染时加水。如果你的应用程序依赖于页面加载时的持久值，你可能希望等到store已被水合后再显示任何内容（例如，你的应用可能认为用户未登录，因为这是默认值，而实际上store还没有被水合）。\n如果你的应用确实依赖于页面加载时的持久状态，请参阅如何检查我的store是否已加水？在 Q/A 中。\n\n<h2>Q/A</h2>\n\n<h3>如何检查我的storage是否已加水?</h3>\n\n有几种不同的方法可以做到这一点。\n你可以使用 <code>onRehydrateStorage</code> 选项来更新store中的字段：\n\n<pre><code class=\"language-ts line-numbers\">const useStore = create(\n  persist(\n    (set, get) =&gt; ({\n      // ...\n      _hasHydrated: false\n    }),\n    {\n      // ...\n      onRehydrateStorage: () =&gt; () =&gt; {\n        useStore.setState({ _hasHydrated: true })\n      }\n    }\n  )\n);\n\nexport default function App() {\n  const hasHydrated = useStore(state =&gt; state._hasHydrated);\n\n  if (!hasHydrated) {\n    return &lt;p&gt;Loading...&lt;/p&gt;\n  }\n\n  return (\n    // ...\n  );\n}\n</code></pre>\n\n你还可以创建自定义使用 <code>Hydration</code> hook：\n\n<pre><code class=\"language-ts line-numbers\">const useStore = create(persist(...))\n\nconst useHydration = () =&gt; {\n  const [hydrated, setHydrated] = useState(useStore.persist.hasHydrated)\n\n  useEffect(() =&gt; {\n    const unsubHydrate = useStore.persist.onHydrate(() =&gt; setHydrated(false)) // Note: this is just in case you want to take into account manual rehydrations. You can remove this if you don\'t need it/don\'t want it.\n    const unsubFinishHydration = useStore.persist.onFinishHydration(() =&gt; setHydrated(true))\n\n    setHydrated(useStore.persist.hasHydrated())\n\n    return () =&gt; {\n      unsubHydrate()\n      unsubFinishHydration()\n    }\n  }, [])\n\n  return hydrated\n}\n</code></pre>\n\n<h3>如何使用自定义storage引擎</h3>\n\n如果你要使用的storage与预期的 API 不匹配，你可以创建自己的存储:\n\n<pre><code class=\"language-ts line-numbers\">import create from \"zustand\"\nimport { persist, StateStorage } from \"zustand/middleware\"\nimport { get, set, del } from \'idb-keyval\' // can use anything: IndexedDB, Ionic Storage, etc.\n\n// Custom storage object\nconst storage: StateStorage = {\n  getItem: async (name: string): Promise&lt;string | null&gt; =&gt; {\n    console.log(name, \"has been retrieved\");\n    return (await get(name)) || null\n  },\n  setItem: async (name: string, value: string): Promise&lt;void&gt; =&gt; {\n    console.log(name, \"with value\", value, \"has been saved\");\n    await set(name, value)\n  },\n  removeItem: async (name: string): Promise&lt;void&gt; =&gt; {\n    console.log(name, \"has been deleted\");\n    await del(name)\n  }\n}\n\nexport const useStore = create(persist(\n  (set, get) =&gt; ({\n    fishes: 0,\n    addAFish: () =&gt; set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () =&gt; storage,\n  }\n))\n</code></pre>', '持久化store的数据', '', 'publish', 'open', 'closed', '', 'persisting-the-stores-data', '', '', '2021-12-03 06:44:22', '2021-12-02 22:44:22', '# 持久化中间件\r\n\r\n[scode type=\"yellow\"]译者注: 因为在状态管理中直接持久化太过耦合,不够灵活,所以个人建议最好外部使用单独的自定义或第三方组件来处理本地的数据持久化[/scode]\r\n\r\n持久中间件使你能够将 Zustand 状态存储在storage中（例如`localStorage`, `AsyncStorage`, `IndexedDB`等），从而持久化它的数据。\r\n请注意，此中间件确实支持同步存储（例如 `localStorage`）和异步存储（例如 `AsyncStorage`），但使用异步存储确实会带来成本。\r\n有关更多详细信息，请参阅 [水合作用和异步存储](#水合和异步存储) 。\r\n\r\n快速示例:\r\n\r\n```ts\r\nimport create from &quot;zustand&quot;\r\nimport { persist } from &quot;zustand/middleware&quot;\r\n\r\nexport const useStore = create(persist(\r\n  (set, get) =&gt; ({\r\n    fishes: 0,\r\n    addAFish: () =&gt; set({ fishes: get().fishes + 1 })\r\n  }),\r\n  {\r\n    name: &quot;food-storage&quot;, // name of item in the storage (must be unique)\r\n    getStorage: () =&gt; sessionStorage, // (optional) by default the &#039;localStorage&#039; is used\r\n  }\r\n))\r\n```\r\n\r\n请参阅[选项](#选项)了解更多详情\r\n\r\n## 选项\r\n\r\n### `name`\r\n\r\n这是唯一的必填选项选项。\r\n给定的名称将是用于在store中存储你的 Zustand 状态的键，因此它必须是唯一的。\r\n\r\n### `getStorage`\r\n\r\n[scode type=\"lblue\"]值: `() => localStorage`[/scode]\r\n\r\n使你能够使用自己的storage。\r\n只需传递一个函数，该函数返回你要使用的store。\r\n\r\n示例:\r\n\r\n```ts\r\nexport const useStore = create(persist(\r\n  (set, get) =&gt; ({\r\n    // ...\r\n  }),\r\n  {\r\n    // ...\r\n    getStorage: () =&gt; AsyncStorage,\r\n  }\r\n))\r\n```\r\n\r\n给定的storage必须匹配以下接口:\r\n\r\n```ts\r\ninterface Storage {\r\n  getItem: (name: string) =&gt; string | null | Promise&lt;string | null&gt;\r\n  setItem: (name: string, value: string) =&gt; void | Promise&lt;void&gt;\r\n  removeItem: (name: string) =&gt; void | Promise&lt;void&gt;\r\n}\r\n```\r\n\r\n### `serialize`\r\n\r\n[scode type=\"lblue\"]类型: `(state: Object) => string | Promise<string>`[/scode]\r\n\r\n[scode type=\"lblue\"]默认值: `(state) => JSON.stringify(state)`[/scode]\r\n\r\n由于将对象存储在storage中的唯一方法是通过字符串，你可以使用此选项提供自定义函数以将你的状态序列化为字符串。\r\n\r\n例如，如果你想将状态存储在 base64 中：\r\n\r\n```ts\r\nexport const useStore = create(persist(\r\n  (set, get) =&gt; ({\r\n    // ...\r\n  }),\r\n  {\r\n    // ...\r\n    serialize: (state) =&gt; btoa(JSON.stringify(state)),\r\n  }\r\n))\r\n```\r\n\r\n请注意，你还需要一个自定义`deserialize` (反序列化)函数才能使其正常工作。见下文。\r\n\r\n### `deserialize`\r\n\r\n[scode type=\"lblue\"]类型: `(str: string) => Object | Promise<Object>`[/scode]\r\n\r\n[scode type=\"lblue\"]默认值: `(str) => JSON.parse(str)`[/scode]\r\n\r\n如果你传递自定义序列化函数，则很可能还需要传递自定义反序列化函数。\r\n要继续上面的示例，你可以使用以下命令反序列化 base64 值：\r\n\r\n```ts\r\nexport const useStore = create(persist(\r\n  (set, get) =&gt; ({\r\n    // ...\r\n  }),\r\n  {\r\n    // ...\r\n    deserialize: (str) =&gt; JSON.parse(atob(str)),\r\n  }\r\n))\r\n```\r\n\r\n### `partialize`\r\n\r\n[scode type=\"lblue\"]类型: `(state: Object) => Object`[/scode]\r\n\r\n[scode type=\"lblue\"]默认值: `(state) => state`[/scode]\r\n\r\n使你能够排除一些要存储在storage中的状态字段。\r\n你可以使用以下方法排除多个字段：\r\n\r\n```ts\r\nexport const useStore = create(persist(\r\n  (set, get) =&gt; ({\r\n    foo: 0,\r\n    bar: 1,\r\n  }),\r\n  {\r\n    // ...\r\n    partialize: (state) =&gt;\r\n      Object.fromEntries(\r\n        Object.entries(state).filter(([key]) =&gt; ![&quot;foo&quot;].includes(key))\r\n      ),\r\n  }\r\n))\r\n```\r\n\r\n或者你可以只允许使用如下的特定字段：\r\n\r\n```ts\r\nexport const useStore = create(persist(\r\n  (set, get) =&gt; ({\r\n    foo: 0,\r\n    bar: 1,\r\n  }),\r\n  {\r\n    // ...\r\n    partialize: (state) =&gt; ({ foo: state.foo })\r\n  }\r\n))\r\n```\r\n\r\n### `onRehydrateStorage`\r\n\r\n[scode type=\"lblue\"]类型: `(state: Object) => ((state?: Object, error?: Error) => void) | void`[/scode]\r\n\r\n此选项使你能够传递将在存储storage水合时调用的侦听器函数。\r\n\r\n示例：\r\n\r\n```ts\r\nexport const useStore = create(persist(\r\n  (set, get) =&gt; ({\r\n    // ...\r\n  }),\r\n  {\r\n    // ...\r\n    onRehydrateStorage: (state) =&gt; {\r\n      console.log(&quot;hydration starts&quot;);\r\n			\r\n      // optional\r\n      return (state, error) =&gt; {\r\n        if (error) {\r\n          console.log(&quot;an error happened during hydration&quot;, error)\r\n        } else {\r\n          console.log(&quot;hydration finished&quot;)\r\n        }\r\n      }\r\n    }\r\n  }\r\n))\r\n```\r\n\r\n### `version`\r\n\r\n[scode type=\"lblue\"]类型: `number`[/scode]\r\n\r\n[scode type=\"lblue\"]默认值: `0`[/scode]\r\n\r\n如果要在storage中引入重大更改（例如重命名字段），可以指定新版本号。\r\n默认情况下，如果storage中的版本与代码中的版本不匹配，则存储的值不会被使用。\r\n有关处理重大更改的更多详细信息，请参阅下面的`migrate`选项。\r\n\r\n### `migrate`\r\n\r\n[scode type=\"lblue\"]类型: `(persistedState: Object, version: number) => Object | Promise<Object>`[/scode]\r\n\r\n[scode type=\"lblue\"]默认值: `(persistedState) => persistedState`[/scode]\r\n\r\n你可以使用此选项来处理版本迁移。\r\nmigrate 函数将持久化状态和版本号作为参数。它必须返回符合最新版本（代码中的版本）的状态。\r\n例如，如果要重命名字段，可以使用以下命令：\r\n\r\n```ts\r\nexport const useStore = create(persist(\r\n  (set, get) =&gt; ({\r\n    newField: 0, // let&#039;s say this field was named otherwise in version 0\r\n  }),\r\n  {\r\n    // ...\r\n    version: 1, // a migration will be triggered if the version in the storage mismatches this one\r\n    migrate: (persistedState, version) =&gt; {\r\n      if (version === 0) {\r\n        // if the stored value is in version 0, we rename the field to the new name\r\n        persistedState.newField = persistedState.oldField;\r\n        delete persistedState.oldField;\r\n      }\r\n      \r\n      return persistedState;\r\n    },\r\n  }\r\n))\r\n```\r\n\r\n### `merge`\r\n\r\n[scode type=\"lblue\"]类型: `(persistedState: Object, currentState: Object) => Object`[/scode]\r\n\r\n[scode type=\"lblue\"]默认值: `(persistedState, currentState) => ({ ...currentState, ...persistedState })`[/scode]\r\n\r\n在某些情况下，你可能希望使用自定义合并函数将持久值与当前状态合并。\r\n默认情况下，中间件进行浅合并。\r\n如果你部分持久化了嵌套对象，那么浅层合并可能还不够。\r\n例如，如果storage包含以下内容：\r\n\r\n```ts\r\n{\r\n  foo: {\r\n    bar: 0,\r\n  }\r\n}\r\n```\r\n\r\n但是你的 Zustand store包含：\r\n\r\n```ts\r\n{\r\n  foo: {\r\n    bar: 0,\r\n    baz: 1,\r\n  }\r\n}\r\n```\r\n\r\n浅合并将从` foo `对象中删除 `baz `字段。\r\n解决此问题的一种方法是提供自定义深度合并功能：\r\n\r\n```ts\r\nexport const useStore = create(persist(\r\n  (set, get) =&gt; ({\r\n    foo: {\r\n      bar: 0,\r\n      baz: 1,\r\n    },\r\n  }),\r\n  {\r\n    // ...\r\n    merge: (persistedState, currentState) =&gt; deepMerge(currentState, persistedState),\r\n  }\r\n))\r\n```\r\n\r\n## API\r\n\r\n[scode type=\"share\"]Version: >=3.6.3[/scode]\r\n\r\n持久化api使你能够从 React 组件的内部或外部与持久中间件进行大量交互。\r\n\r\n### `setOptions`\r\n\r\n[scode type=\"lblue\"]类型: `(newOptions: PersistOptions) => void`[/scode]\r\n\r\n此方法使你能够更改中间件选项。请注意，新选项将与当前选项合并。\r\n\r\n例如，这可用于更改storage名称：\r\n\r\n```ts\r\nuseStore.persist.setOptions({\r\n  name: &quot;new-name&quot;\r\n});\r\n```\r\n\r\n甚至更改storage引擎：\r\n\r\n```ts\r\nuseStore.persist.setOptions({\r\n  getStorage: () =&gt; sessionStorage,\r\n});\r\n```\r\n\r\n### `clearStorage`\r\n\r\n[scode type=\"lblue\"]类型: `() => void`[/scode]\r\n\r\n这个方法用于完全清除storage中的持久值。\r\n\r\n```ts\r\nuseStore.persist.clearStorage();\r\n```\r\n\r\n### `rehydrate`\r\n\r\n[scode type=\"lblue\"]类型: `() => Promise<void>`[/scode]\r\n\r\n在某些情况下，你可能希望手动触发水合作用。\r\n这可以通过调用 `rehydrate `方法来完成。\r\n\r\n```ts\r\nawait useStore.persist.rehydrate();\r\n```\r\n\r\n### `hasHydrated`\r\n\r\n[scode type=\"lblue\"]类型: `() => boolean`[/scode]\r\n\r\n这是一个非响应式的 getter，用于了解storage是否已被水合（请注意，这在调用 `useStore.persist.rehydrate()` 时会更新）。\r\n\r\n```ts\r\nuseStore.persist.hasHydrated();\r\n```\r\n\r\n### `onHydrate`\r\n\r\n[scode type=\"lblue\"]类型: `(listener: (state) => void) => () => void`[/scode]\r\n\r\n水合过程开始时将调用给定的监听器。\r\n\r\n```ts\r\nconst unsub = useStore.persist.onHydrate((state) =&gt; {\r\n  console.log(&quot;hydration starts&quot;);\r\n});\r\n\r\n// later on...\r\nunsub();\r\n```\r\n\r\n### `onFinishHydration`\r\n\r\n[scode type=\"lblue\"]类型: `(listener: (state) => void) => () => void`[/scode]\r\n\r\n当水合过程结束时，将调用给定的监听器。\r\n\r\n```ts\r\nconst unsub = useStore.persist.onFinishHydration((state) =&gt; {\r\n  console.log(&quot;hydration finished&quot;);\r\n});\r\n\r\n// later on...\r\nunsub();\r\n```\r\n\r\n## 水合和异步存储\r\n\r\n要解释异步存储的“成本”是什么，你需要了解什么是水合作用。\r\n简而言之，水合是从storage中检索持久状态并将其与当前状态合并的过程。\r\npersist 中间件执行两种 hydration：同步和异步。\r\n如果给定的storage是同步的（例如`localStorage`），则 hydration 将同步完成，如果给定的存储是异步的（例如 `AsyncStorage`），则 hydration 将异步完成......🥁。\r\n但问题是什么？\r\n好吧，在同步水合中，Zustand storage将在其创建时进行水合。\r\n在异步水合中，Zustand storage将在稍后的微任务中水合。\r\n为什么这有关系？\r\n异步水合可能会导致一些意外行为。\r\n例如，如果你在 React 应用程序中使用 Zustand，store将不会在初始渲染时加水。如果你的应用程序依赖于页面加载时的持久值，你可能希望等到store已被水合后再显示任何内容（例如，你的应用可能认为用户未登录，因为这是默认值，而实际上store还没有被水合）。\r\n如果你的应用确实依赖于页面加载时的持久状态，请参阅如何检查我的store是否已加水？在 Q/A 中。\r\n\r\n## Q/A\r\n\r\n### 如何检查我的storage是否已加水?\r\n\r\n有几种不同的方法可以做到这一点。\r\n你可以使用 `onRehydrateStorage` 选项来更新store中的字段：\r\n\r\n```ts\r\nconst useStore = create(\r\n  persist(\r\n    (set, get) =&gt; ({\r\n      // ...\r\n      _hasHydrated: false\r\n    }),\r\n    {\r\n      // ...\r\n      onRehydrateStorage: () =&gt; () =&gt; {\r\n        useStore.setState({ _hasHydrated: true })\r\n      }\r\n    }\r\n  )\r\n);\r\n\r\nexport default function App() {\r\n  const hasHydrated = useStore(state =&gt; state._hasHydrated);\r\n\r\n  if (!hasHydrated) {\r\n    return &lt;p&gt;Loading...&lt;/p&gt;\r\n  }\r\n\r\n  return (\r\n    // ...\r\n  );\r\n}\r\n```\r\n\r\n你还可以创建自定义使用 `Hydration` hook：\r\n\r\n```ts\r\nconst useStore = create(persist(...))\r\n\r\nconst useHydration = () =&gt; {\r\n  const [hydrated, setHydrated] = useState(useStore.persist.hasHydrated)\r\n  \r\n  useEffect(() =&gt; {\r\n    const unsubHydrate = useStore.persist.onHydrate(() =&gt; setHydrated(false)) // Note: this is just in case you want to take into account manual rehydrations. You can remove this if you don&#039;t need it/don&#039;t want it.\r\n    const unsubFinishHydration = useStore.persist.onFinishHydration(() =&gt; setHydrated(true))\r\n    \r\n    setHydrated(useStore.persist.hasHydrated())\r\n    \r\n    return () =&gt; {\r\n      unsubHydrate()\r\n      unsubFinishHydration()\r\n    }\r\n  }, [])\r\n  \r\n  return hydrated\r\n}\r\n```\r\n\r\n### 如何使用自定义storage引擎\r\n\r\n如果你要使用的storage与预期的 API 不匹配，你可以创建自己的存储:\r\n\r\n```ts\r\nimport create from &quot;zustand&quot;\r\nimport { persist, StateStorage } from &quot;zustand/middleware&quot;\r\nimport { get, set, del } from &#039;idb-keyval&#039; // can use anything: IndexedDB, Ionic Storage, etc.\r\n\r\n// Custom storage object\r\nconst storage: StateStorage = {\r\n  getItem: async (name: string): Promise&lt;string | null&gt; =&gt; {\r\n    console.log(name, &quot;has been retrieved&quot;);\r\n    return (await get(name)) || null\r\n  },\r\n  setItem: async (name: string, value: string): Promise&lt;void&gt; =&gt; {\r\n    console.log(name, &quot;with value&quot;, value, &quot;has been saved&quot;);\r\n    await set(name, value)\r\n  },\r\n  removeItem: async (name: string): Promise&lt;void&gt; =&gt; {\r\n    console.log(name, &quot;has been deleted&quot;);\r\n    await del(name)\r\n  }\r\n}\r\n\r\nexport const useStore = create(persist(\r\n  (set, get) =&gt; ({\r\n    fishes: 0,\r\n    addAFish: () =&gt; set({ fishes: get().fishes + 1 })\r\n  }),\r\n  {\r\n    name: &quot;food-storage&quot;, // unique name\r\n    getStorage: () =&gt; storage,\r\n  }\r\n))\r\n```', 164, 'https://jikexingkong.com/?post_type=docs&#038;p=172', 5, 'docs', '', 0),
(173, 1, '2021-12-03 05:21:15', '2021-12-02 21:21:15', 'readme 中的用法是将actions放入store中\n\n<pre><code class=\"language-js line-numbers\">export const useStore = create((set) =&gt; ({\n  count: 0,\n  text: \'hello\',\n  inc: () =&gt; set((state) =&gt; ({ count: state.count + 1 })),\n  setText: (text) =&gt; set({ text }),\n})\n</code></pre>\n\n这将创建一个带有actions的自包含store\n\n<hr />\n\n另一种方法是在模块级别定义操作\n\n<pre><code class=\"language-js line-numbers\">export const useStore = create(() =&gt; ({\n  count: 0,\n  text: \'hello\',\n})\n\nexport const inc = () =&gt; useStore.setState((state) =&gt; ({ count: state.count + 1 }))\n\nexport const setText = (text) =&gt; useStore.setState({ text })\n</code></pre>\n\n这更有效，因为：\n\n<ul>\n<li>它不需要一个hook来获取一个action，并且</li>\n<li>代码拆分是可能的。</li>\n</ul>', '在没有store actions的情况下的实践', '', 'publish', 'open', 'closed', '', 'practice-with-no-store-actions', '', '', '2021-12-03 05:56:18', '2021-12-02 21:56:18', 'readme 中的用法是将actions放入store中\r\n\r\n```js\r\nexport const useStore = create((set) =&gt; ({\r\n  count: 0,\r\n  text: &#039;hello&#039;,\r\n  inc: () =&gt; set((state) =&gt; ({ count: state.count + 1 })),\r\n  setText: (text) =&gt; set({ text }),\r\n})\r\n```\r\n\r\n这将创建一个带有actions的自包含store\r\n\r\n---\r\n\r\n另一种方法是在模块级别定义操作\r\n\r\n```js\r\nexport const useStore = create(() =&gt; ({\r\n  count: 0,\r\n  text: &#039;hello&#039;,\r\n})\r\n\r\nexport const inc = () =&gt; useStore.setState((state) =&gt; ({ count: state.count + 1 }))\r\n\r\nexport const setText = (text) =&gt; useStore.setState({ text })\r\n```\r\n\r\n这更有效，因为：\r\n\r\n-   它不需要一个hook来获取一个action，并且\r\n-   代码拆分是可能的。', 164, 'https://jikexingkong.com/?post_type=docs&#038;p=173', 6, 'docs', '', 0),
(174, 1, '2021-12-03 05:21:30', '2021-12-02 21:21:30', '当你的项目随着各种形式的数据而增长，你可能希望保证文件比较小且易于管理。\n就像在 Redux 中的 <code>combineReducers</code> 一样，你可以将你的 store 拆分为能够相互访问的各种函数，从而跟踪全局状态。\n\n<pre><code class=\"language-jsx line-numbers\">import create from \'zustand\'\n\nconst createBearSlice = (set, get) =&gt; ({\n   eatFish: () =&gt; set((prev) =&gt; ({ fishes: prev.fishes &gt; 1 ? prev.fishes - 1 : 0}))\n})\n\nconst createFishSlice = (set, get) =&gt; ({\n   fishes: 10\n})\n\nconst useStore = create( (set, get) =&gt; ({\n    ...createBearSlice(set, get),\n    ...createFishSlice(set, get)\n}))\n\nfunction App() {\n\n  const fishes = useStore(state =&gt; state.fishes);\n  const eatFish = useStore(state =&gt; state.eatFish);\n\n  return (\n    &lt;div className=\"App\"&gt;\n\n      &lt;p&gt;Fishes : {fishes}&lt;/p&gt;\n      &lt;p&gt;&lt;button onClick={eatFish}&gt;Eat&lt;/button&gt;&lt;/p&gt;\n\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre>\n\n查看此代码在具有不同文件的结构中工作:\n\nhttps://codesandbox.io/s/new-dawn-vl03k?file=/src/App.js\n\n<hr />\n\n这是 TypeScript 用户的实践：\n\nhttps://github.com/pmndrs/zustand/issues/508#issue-951331506\n\nhttps://codesandbox.io/s/nostalgic-voice-3knvd?file=/src/App.js', '将store拆分为单独的切片', '', 'publish', 'open', 'closed', '', 'splitting-the-store-into-separate-slices', '', '', '2021-12-03 05:56:34', '2021-12-02 21:56:34', '当你的项目随着各种形式的数据而增长，你可能希望保证文件比较小且易于管理。\r\n就像在 Redux 中的 `combineReducers` 一样，你可以将你的 store 拆分为能够相互访问的各种函数，从而跟踪全局状态。\r\n\r\n```jsx\r\n\r\nimport create from &#039;zustand&#039;\r\n\r\nconst createBearSlice = (set, get) =&gt; ({\r\n   eatFish: () =&gt; set((prev) =&gt; ({ fishes: prev.fishes &gt; 1 ? prev.fishes - 1 : 0}))\r\n})\r\n\r\nconst createFishSlice = (set, get) =&gt; ({\r\n   fishes: 10\r\n})\r\n\r\nconst useStore = create( (set, get) =&gt; ({\r\n    ...createBearSlice(set, get),\r\n    ...createFishSlice(set, get)\r\n}))\r\n\r\nfunction App() {\r\n\r\n  const fishes = useStore(state =&gt; state.fishes);\r\n  const eatFish = useStore(state =&gt; state.eatFish);\r\n\r\n  return (\r\n    &lt;div className=&quot;App&quot;&gt;\r\n      \r\n      &lt;p&gt;Fishes : {fishes}&lt;/p&gt;\r\n      &lt;p&gt;&lt;button onClick={eatFish}&gt;Eat&lt;/button&gt;&lt;/p&gt;\r\n    \r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n查看此代码在具有不同文件的结构中工作:\r\n\r\nhttps://codesandbox.io/s/new-dawn-vl03k?file=/src/App.js\r\n\r\n______\r\n\r\n这是 TypeScript 用户的实践：\r\n\r\nhttps://github.com/pmndrs/zustand/issues/508#issue-951331506\r\n\r\nhttps://codesandbox.io/s/nostalgic-voice-3knvd?file=/src/App.js', 164, 'https://jikexingkong.com/?post_type=docs&#038;p=174', 7, 'docs', '', 0),
(175, 1, '2021-12-03 05:21:51', '2021-12-02 21:21:51', '<h2>在测试之间重置状态</h2>\n\n运行测试时，在每次测试运行之前不会自动重置stores。\n因此，在某些情况下，一个测试的状态可能会影响另一个测试。要确保所有测试都以原始store状态运行，你可以在测试期间模拟<code>zustand</code>，并将其替换为以下代码：\n\n<pre><code class=\"language-jsx line-numbers\">import actualCreate from \'zustand\';\nimport { act } from \'react-dom/test-utils\';\n\n// a variable to hold reset functions for all stores declared in the app\nconst storeResetFns = new Set();\n\n// when creating a store, we get its initial state, create a reset function and add it in the set\nconst create = createState =&gt; {\n  const store = actualCreate(createState);\n  const initialState = store.getState();\n  storeResetFns.add(() =&gt; store.setState(initialState, true));\n  return store;\n};\n\n// Reset all stores after each test run\nafterEach(() =&gt; {\n  act(() =&gt; storeResetFns.forEach((resetFn) =&gt; resetFn()));\n});\n\nexport default create;\n</code></pre>\n\n你可以mock一个依赖的方式取决于你的测试运行器。\n在 <a class=\"wp-editor-md-post-content-link\" href=\"https://jestjs.io/\">jest</a>中，你可以创建一个 <code>_ mocks _ /zustand.js</code>并将代码放在那里。如果你的应用使用 <code>zustand/vanilla</code> 而不是 <code>zustand</code>，那么你必须将上述代码放在 <code>_ mocks _ /zustand/vanilla.js</code>', '测试', '', 'publish', 'open', 'closed', '', 'testing', '', '', '2021-12-03 05:56:53', '2021-12-02 21:56:53', '## 在测试之间重置状态\r\n\r\n运行测试时，在每次测试运行之前不会自动重置stores。\r\n因此，在某些情况下，一个测试的状态可能会影响另一个测试。要确保所有测试都以原始store状态运行，你可以在测试期间模拟`zustand`，并将其替换为以下代码：\r\n\r\n```jsx\r\nimport actualCreate from &#039;zustand&#039;;\r\nimport { act } from &#039;react-dom/test-utils&#039;;\r\n\r\n// a variable to hold reset functions for all stores declared in the app\r\nconst storeResetFns = new Set();\r\n\r\n// when creating a store, we get its initial state, create a reset function and add it in the set\r\nconst create = createState =&gt; {\r\n  const store = actualCreate(createState);\r\n  const initialState = store.getState();\r\n  storeResetFns.add(() =&gt; store.setState(initialState, true));\r\n  return store;\r\n};\r\n\r\n// Reset all stores after each test run\r\nafterEach(() =&gt; {\r\n  act(() =&gt; storeResetFns.forEach((resetFn) =&gt; resetFn()));\r\n});\r\n\r\nexport default create;\r\n```\r\n\r\n你可以mock一个依赖的方式取决于你的测试运行器。\r\n在 [jest](https://jestjs.io/)中，你可以创建一个 `_ mocks _ /zustand.js `并将代码放在那里。如果你的应用使用 `zustand/vanilla` 而不是 `zustand`，那么你必须将上述代码放在 `_ mocks _ /zustand/vanilla.js`', 164, 'https://jikexingkong.com/?post_type=docs&#038;p=175', 8, 'docs', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(176, 1, '2021-12-03 05:57:12', '2021-12-02 21:57:12', '[scode type=\"yellow\"]译者注: 此篇文档是由印尼语编写,无法翻译,自行看代码即可[/scode]\n\nZustand是一个简明、快速和状态管理库,它是以hooks为基础的。\n安装Zustand或者在<a class=\"wp-editor-md-post-content-link\" href=\"https://codesandbox.io/s/dazzling-moon-itop4\">这里</a>尝试一下。\n\n<pre><code class=\"language-bash line-numbers\">npm install zustand\n</code></pre>\n\n<h3>Membuat store</h3>\n\nStore adalah <em>hook</em> yang dapat digunakan dalam bentuk: primitif, objek dan fungsi, dalam hal ini fungsi <code>set</code> digunakan untuk <em>mengubah</em> state.\n\n<pre><code class=\"language-jsx line-numbers\">import create from \'zustand\'\n\nconst useStore = create(set =&gt; ({\n  bears: 0,\n  increasePopulation: () =&gt; set(state =&gt; ({ bears: state.bears + 1 })),\n  removeAllBears: () =&gt; set({ bears: 0 })\n}))\n</code></pre>\n\n<h3>Gunakan langsung ke dalam Komponen</h3>\n\nGunakan <em>hook</em> di mana saja, tidak dibutuhkan <em>providers</em>.  Pilih state dan komponen akan dimuat ulang ketika ada perubahan.\n\n<pre><code class=\"language-jsx line-numbers\">function BearCounter() {\n  const bears = useStore(state =&gt; state.bears)\n  return &lt;h1&gt;{bears} around here ...&lt;/h1&gt;\n}\n\nfunction Controls() {\n  const increasePopulation = useStore(state =&gt; state.increasePopulation)\n  return &lt;button onClick={increasePopulation}&gt;one up&lt;/button&gt;\n}\n</code></pre>\n\n<h4>Perbedaan Zustand dengan react-redux?</h4>\n\n<ul>\n<li>Ringkas dan mudah</li>\n<li>Menjadikan <em>hooks</em> sebagai bagian yang utama ketika menggunakan <em>state</em></li>\n<li>Tidak membutuhkan konteks <em>providers</em> ketika membungkus sebuah aplikasi</li>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"#Updates-sementara-sering-digunakan-pada-perubahan-state\">Dapat mengirimkan informasi pada komponen (tanpa terjadi render)</a>)</li>\n</ul>\n\n<hr />\n\n<h1>Beberapa cara menggunakan Zustand</h1>\n\n<h2>Mengambil store</h2>\n\nCara di bawah dapat digunakan, namun perlu diingat, komponen akan diperbarui ketika <em>state</em> berubah.\n\n<pre><code class=\"language-jsx line-numbers\">const state = useStore()\n</code></pre>\n\n<h2>Memilih berbagai state</h2>\n\nCara berikut akan mendeteksi ketika ada perubahan secara <em>default</em> (sebelum <span class=\"text-highlighted-inline\" style=\"background-color: #fffd38;\">= sesudah), hal ini efisien untuk mengambil suatu bagian dari <em>state</em>.</span>\n\n<pre><code class=\"language-jsx line-numbers\">const nuts = useStore(state =&gt; state.nuts)\nconst honey = useStore(state =&gt; state.honey)\n</code></pre>\n\nJika ingin membuat objek tunggal dan di dalamnya menggunakan pengambilan berbagai <em>state</em>, seperti mapStateToProps yang terdapat pada <em>redux</em>, Zustand dapat melakukannya dengan menggunakan <em>shallow</em> sebagai pilihan.\n\n<pre><code class=\"language-jsx line-numbers\">import shallow from \'zustand/shallow\'\n\n// Mengambil Objek, komponen akan dimuat ulang ketika ada perubahan baik pada state.nuts atau state.honey\nconst { nuts, honey } = useStore(state =&gt; ({ nuts: state.nuts, honey: state.honey }), shallow)\n\n// Mengambil Array, komponen akan dimuat ulang ketika ada perubahan baik pada state.nuts atau state.honey change\nconst [nuts, honey] = useStore(state =&gt; [state.nuts, state.honey], shallow)\n\n// Mengambil hasil Map, komponen akan dimuat ulang ketika ada perubahan pada state.treats changes yang telah dimuat\nconst treats = useStore(state =&gt; Object.keys(state.treats), shallow)\n</code></pre>\n\n<h2>Mengambil dari berbagai store</h2>\n\nKarena store dapat dibuat secara bebas, hal ini dapat dibuat menggunakan fungsi yang bisa disesuaikan dengan maksud dan tujuannya.\n\n<pre><code class=\"language-jsx line-numbers\">const currentBear = useCredentialsStore(state =&gt; state.currentBear)\nconst bear = useBearStore(state =&gt; state.bears[currentBear])\n</code></pre>\n\n<h2>Mengingat selectors</h2>\n\nSebaiknya menggunakan useCallback untuk mengingat <em>selector</em>, hal ini untuk menghindari proses yang tidak diperlukan pada setiap <em>render</em> komponen, dan juga dapat meningkatkan pada mode <em>concurrent</em>.\n\n<pre><code class=\"language-jsx line-numbers\">const fruit = useStore(useCallback(state =&gt; state.fruits[id], [id]))\n</code></pre>\n\nSelector dapat dibuat di luar fungsi <em>render</em> untuk menghasilkan referensi tanpa menggunakan useCallback.\n\n<pre><code class=\"language-jsx line-numbers\">const selector = state =&gt; state.berries\n\nfunction Component() {\n  const berries = useStore(selector)\n</code></pre>\n\n<h2>Menulis kembali state</h2>\n\nFungsi <code>set</code> mempunyai argumen kedua, dengan kondisi <code>false</code> pada awalnya, contoh di bawah adalah model state.\n\n<pre><code class=\"language-jsx line-numbers\">import omit from \"lodash-es/omit\"\n\nconst useStore = create(set =&gt; ({\n  salmon: 1,\n  tuna: 2,\n  deleteEverything: () =&gt; set({ }, true), // clears the entire store, actions included\n  deleteTuna: () =&gt; set(state =&gt; omit(state, [\'tuna\']), true)\n}))\n</code></pre>\n\n<h2>Menggunakan Async</h2>\n\nGunakan langsung fungsi <code>set</code>, zustand tidak melakukan penelurusuran apakah sebuah aksi async atau tidak.\n\n<pre><code class=\"language-jsx line-numbers\">const useStore = create(set =&gt; ({\n  fishies: {},\n  fetch: async pond =&gt; {\n    const response = await fetch(pond)\n    set({ fishies: await response.json() })\n  }\n}))\n</code></pre>\n\n<h2>Membaca dari state di dalam sebuah Aksi</h2>\n\n<code>set</code> mengizinkan fungsi update <code>set(state =&gt; result)</code>, namun masih bisa untuk akses ke state di luar menggunakan <code>get</code>.\n\n<pre><code class=\"language-jsx line-numbers\">const useStore = create((set, get) =&gt; ({\n  sound: \"grunt\",\n  action: () =&gt; {\n    const sound = get().sound\n    // ...\n  }\n})\n</code></pre>\n\n<h2>Membaca/menulis dan melakukan sebuah tindakan untuk mengubah komponen di luar</h2>\n\nContoh di bawah adalah sebuah <em>hook</em> yang memiliki fungsi utilitas yang disematkan ke dalam prototypenya.\n\n<pre><code class=\"language-jsx line-numbers\">const useStore = create(() =&gt; ({ paw: true, snout: true, fur: true }))\n\n// Getting non-reactive fresh state\nconst paw = useStore.getState().paw\n// Listening to all changes, fires on every change\nconst unsub1 = useStore.subscribe(console.log)\n// Listening to selected changes, in this case when \"paw\" changes\nconst unsub2 = useStore.subscribe(console.log, state =&gt; state.paw)\n// Subscribe also supports an optional equality function\nconst unsub3 = useStore.subscribe(console.log, state =&gt; [state.paw, state.fur], shallow)\n// Subscribe also exposes the previous value\nconst unsub4 = useStore.subscribe((paw, previousPaw) =&gt; console.log(paw, previousPaw), state =&gt; state.paw)\n// Updating state, will trigger listeners\nuseStore.setState({ paw: false })\n// Unsubscribe listeners\nunsub1()\nunsub2()\nunsub3()\nunsub4()\n// Destroying the store (removing all listeners)\nuseStore.destroy()\n\n// You can of course use the hook as you always would\nfunction Component() {\n  const paw = useStore(state =&gt; state.paw)\n</code></pre>\n\n<h2>Menggunakan zustand tanpa React</h2>\n\nKode Zustands dapat dipanggil dan digunakan tanpa bergantung pada pustaka React, perbedaannya adalah fungsi yang dibuat tidak mengembalikan sebuah <em>hook</em>, namun utilitas <em>api</em>.\n\n<pre><code class=\"language-jsx line-numbers\">import create from \'zustand/vanilla\'\n\nconst store = create(() =&gt; ({ ... }))\nconst { getState, setState, subscribe, destroy } = store\n</code></pre>\n\nMenggunakan store dalam bentuk vanilla dengan React:\n\n<pre><code class=\"language-jsx line-numbers\">import create from \'zustand\'\nimport vanillaStore from \'./vanillaStore\'\n\nconst useStore = create(vanillaStore)\n</code></pre>\n\n<h2>Updates sementara (sering digunakan pada perubahan state)</h2>\n\nFungsi subscribe mengizinkan untuk mengikat suatu state tanpa memaksa memuat ulang pada suatu perubahan.\nLangkah terbaik gunakan kombinasi useEffect agar otomatis melepaskan pada saat unmount komponen. Sangat <a class=\"wp-editor-md-post-content-link\" href=\"https://codesandbox.io/s/peaceful-johnson-txtws\">drastis</a> pada performa ketika melakukan mutasi pada tampilan.\n\n<pre><code class=\"language-jsx line-numbers\">const useStore = create(set =&gt; ({ scratches: 0, ... }))\n\nfunction Component() {\n  // Fetch initial state\n  const scratchRef = useRef(useStore.getState().scratches)\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n  useEffect(() =&gt; useStore.subscribe(\n    scratches =&gt; (scratchRef.current = scratches), \n    state =&gt; state.scratches\n  ), [])\n</code></pre>\n\n<h2>Reducers dan melakukan perubahan pada state yang bercabang? Gunakan Immer!</h2>\n\nMengurangi percabangan struktur sangat melelahkan, apakah sudah mencoba <a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/mweststrate/immer\">immer</a>?\n\n<pre><code class=\"language-jsx line-numbers\">import produce from \'immer\'\n\nconst useStore = create(set =&gt; ({\n  lush: { forrest: { contains: { a: \"bear\" } } },\n  set: fn =&gt; set(produce(fn)),\n}))\n\nconst set = useStore(state =&gt; state.set)\nset(state =&gt; {\n  state.lush.forrest.contains = null\n})\n</code></pre>\n\n<h2>Middleware (potongan kode sebagai penghubung)</h2>\n\nMenyusun store sesuai yang diinginkan\n\n<pre><code class=\"language-jsx line-numbers\">// Log every time state is changed\nconst log = config =&gt; (set, get, api) =&gt; config(args =&gt; {\n  console.log(\"  applying\", args)\n  set(args)\n  console.log(\"  new state\", get())\n}, get, api)\n\n// Turn the set method into an immer proxy\nconst immer = config =&gt; (set, get, api) =&gt; config(fn =&gt; set(produce(fn)), get, api)\n\nconst useStore = create(\n  log(\n    immer((set) =&gt; ({\n      bees: false,\n      setBees: (input) =&gt; set((state) =&gt; void (state.bees = input)),\n    })),\n  ),\n)\n</code></pre>\n\n<overview>\n<summary>Cara menghubungkan middlewares</summary>\n\n<details>\n\n<pre><code class=\"language-js line-numbers\">import create from \"zustand\"\nimport produce from \"immer\"\nimport pipe from \"ramda/es/pipe\"\n\n/* log and immer functions from previous example */\n/* you can pipe as many middlewares as you want */\nconst createStore = pipe(log, immer, create)\n\nconst useStore = createStore(set =&gt; ({\n  bears: 1,\n  increasePopulation: () =&gt; set(state =&gt; ({ bears: state.bears + 1 }))\n}))\n\nexport default useStore\n</code></pre>\n\nFor a TS example see the following <a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/pmndrs/zustand/discussions/224#discussioncomment-118208\">discussion</a>\n</details>\n</overview>\n\n<overview>\n<summary>Cara menggunakan immer middleware dalam bentuk TypeScript</summary>\n\n<details>\n\n<pre><code class=\"language-ts line-numbers\">import { State, StateCreator } from \'zustand\'\nimport produce, { Draft } from \'immer\'\n\nconst immer = &lt;T extends State&gt;(\n  config: StateCreator&lt;T, (fn: (draft: Draft&lt;T&gt;) =&gt; void) =&gt; void&gt;\n): StateCreator&lt;T&gt; =&gt; (set, get, api) =&gt;\n  config((fn) =&gt; set(produce(fn) as (state: T) =&gt; T), get, api)\n</code></pre>\n\n</details>\n</overview>\n\n<h2>Menyimpan middleware</h2>\n\nPustaka middleware dapat menyimpan data store dengan menggunakan berbagai perangkat storage.\n\n<pre><code class=\"language-jsx line-numbers\">import create from \"zustand\"\nimport { persist } from \"zustand/middleware\"\n\nexport const useStore = create(persist(\n  (set, get) =&gt; ({\n    fish: 0,\n    addAFish: () =&gt; set({ fish: get().fish + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    storage: sessionStorage, // (optional) default is \'localStorage\'\n  }\n))\n</code></pre>\n\n<h2>Apabila terbiasa menggunakan redux, berikut hal serupa</h2>\n\n<pre><code class=\"language-jsx line-numbers\">const types = { increase: \"INCREASE\", decrease: \"DECREASE\" }\n\nconst reducer = (state, { type, by = 1 }) =&gt; {\n  switch (type) {\n    case types.increase: return { grumpiness: state.grumpiness + by }\n    case types.decrease: return { grumpiness: state.grumpiness - by }\n  }\n}\n\nconst useStore = create(set =&gt; ({\n  grumpiness: 0,\n  dispatch: args =&gt; set(state =&gt; reducer(state, args)),\n}))\n\nconst dispatch = useStore(state =&gt; state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n</code></pre>\n\nAtau, gunakan langusng redux-middleware yang dimiliki zustand, cara ini langsung menghubungkan reducer utama, membuat state awal, menambahkan fungsi dispatch ke dalam state dan <em>api</em> pada vanilla, kunjungi contoh berikut <a class=\"wp-editor-md-post-content-link\" href=\"https://codesandbox.io/s/amazing-kepler-swxol\">ini</a>.\n\n<pre><code class=\"language-jsx line-numbers\">import { redux } from \'zustand/middleware\'\n\nconst useStore = create(redux(reducer, initialState))\n</code></pre>\n\n<h2>Redux devtools</h2>\n\n<pre><code class=\"language-jsx line-numbers\">import { devtools } from \'zustand/middleware\'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst useStore = create(devtools(store))\n// Usage with a redux store, it will log full action types\nconst useStore = create(devtools(redux(reducer, initialState)))\n</code></pre>\n\nPerangkat devtools mengambil fungsi store sebagai argumen pertamanya, dan sebagai opsi lainnya pada argumen kedua: <code>devtools(store, \"MyStore\")</code>, yang digunakan untuk menjalankan aksi.\n\n<h2>TypeScript</h2>\n\n<pre><code class=\"language-tsx line-numbers\">type State = {\n  bears: number\n  increase: (by: number) =&gt; void\n}\n\nconst useStore = create&lt;State&gt;(set =&gt; ({\n  bears: 0,\n  increase: (by) =&gt; set(state =&gt; ({ bears: state.bears + by })),\n}))\n</code></pre>\n\nAtau, gunakan <code>combine</code> dan tsc yang akan memproses setiap types.\n\n<pre><code class=\"language-tsx line-numbers\">import { combine } from \'zustand/middleware\'\n\nconst useStore = create(\n  combine(\n    { bears: 0 }, \n    (set) =&gt; ({ increase: (by: number) =&gt; set((state) =&gt; ({ bears: state.bears + by })) })\n  ),\n)\n</code></pre>\n\n<h2>Kontribusi</h2>\n\nDokumen ini membutuhkan pembaharuan agar menjadi lebih baik untuk dipelajari, bergabung bersama kami untuk komunikasi lebih lanjut di Discord server:\n\n<ul>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"https://discord.gg/n2Pm2s7\">Pejuang Kode</a></li>\n<li>[Frontend Indonesia](</li>\n</ul>', 'Translation-ID', '', 'publish', 'open', 'closed', '', 'translation-id', '', '', '2021-12-03 06:46:43', '2021-12-02 22:46:43', '[scode type=\"yellow\"]译者注: 此篇文档是由印尼语编写,无法翻译,自行看代码即可[/scode]\r\n\r\nZustand是一个简明、快速和状态管理库,它是以hooks为基础的。\r\n安装Zustand或者在[这里](https://codesandbox.io/s/dazzling-moon-itop4)尝试一下。\r\n\r\n```bash\r\nnpm install zustand\r\n```\r\n\r\n### Membuat store\r\n\r\nStore adalah *hook* yang dapat digunakan dalam bentuk: primitif, objek dan fungsi, dalam hal ini fungsi `set` digunakan untuk *mengubah* state.\r\n\r\n```jsx\r\nimport create from &#039;zustand&#039;\r\n\r\nconst useStore = create(set =&gt; ({\r\n  bears: 0,\r\n  increasePopulation: () =&gt; set(state =&gt; ({ bears: state.bears + 1 })),\r\n  removeAllBears: () =&gt; set({ bears: 0 })\r\n}))\r\n```\r\n\r\n### Gunakan langsung ke dalam Komponen\r\n\r\nGunakan *hook* di mana saja, tidak dibutuhkan *providers*.  Pilih state dan komponen akan dimuat ulang ketika ada perubahan.\r\n\r\n```jsx\r\nfunction BearCounter() {\r\n  const bears = useStore(state =&gt; state.bears)\r\n  return &lt;h1&gt;{bears} around here ...&lt;/h1&gt;\r\n}\r\n\r\nfunction Controls() {\r\n  const increasePopulation = useStore(state =&gt; state.increasePopulation)\r\n  return &lt;button onClick={increasePopulation}&gt;one up&lt;/button&gt;\r\n}\r\n```\r\n\r\n#### Perbedaan Zustand dengan react-redux?\r\n\r\n* Ringkas dan mudah\r\n* Menjadikan *hooks* sebagai bagian yang utama ketika menggunakan *state*\r\n* Tidak membutuhkan konteks *providers* ketika membungkus sebuah aplikasi\r\n* [Dapat mengirimkan informasi pada komponen (tanpa terjadi render)](#Updates-sementara-sering-digunakan-pada-perubahan-state))\r\n\r\n---\r\n\r\n# Beberapa cara menggunakan Zustand\r\n\r\n## Mengambil store\r\n\r\nCara di bawah dapat digunakan, namun perlu diingat, komponen akan diperbarui ketika *state* berubah.\r\n\r\n```jsx\r\nconst state = useStore()\r\n```\r\n\r\n## Memilih berbagai state\r\n\r\nCara berikut akan mendeteksi ketika ada perubahan secara *default* (sebelum === sesudah), hal ini efisien untuk mengambil suatu bagian dari *state*.\r\n\r\n```jsx\r\nconst nuts = useStore(state =&gt; state.nuts)\r\nconst honey = useStore(state =&gt; state.honey)\r\n```\r\n\r\nJika ingin membuat objek tunggal dan di dalamnya menggunakan pengambilan berbagai *state*, seperti mapStateToProps yang terdapat pada *redux*, Zustand dapat melakukannya dengan menggunakan *shallow* sebagai pilihan.\r\n\r\n```jsx\r\nimport shallow from &#039;zustand/shallow&#039;\r\n\r\n// Mengambil Objek, komponen akan dimuat ulang ketika ada perubahan baik pada state.nuts atau state.honey\r\nconst { nuts, honey } = useStore(state =&gt; ({ nuts: state.nuts, honey: state.honey }), shallow)\r\n\r\n// Mengambil Array, komponen akan dimuat ulang ketika ada perubahan baik pada state.nuts atau state.honey change\r\nconst [nuts, honey] = useStore(state =&gt; [state.nuts, state.honey], shallow)\r\n\r\n// Mengambil hasil Map, komponen akan dimuat ulang ketika ada perubahan pada state.treats changes yang telah dimuat\r\nconst treats = useStore(state =&gt; Object.keys(state.treats), shallow)\r\n```\r\n\r\n## Mengambil dari berbagai store\r\n\r\nKarena store dapat dibuat secara bebas, hal ini dapat dibuat menggunakan fungsi yang bisa disesuaikan dengan maksud dan tujuannya.\r\n\r\n```jsx\r\nconst currentBear = useCredentialsStore(state =&gt; state.currentBear)\r\nconst bear = useBearStore(state =&gt; state.bears[currentBear])\r\n```\r\n\r\n## Mengingat selectors\r\n\r\nSebaiknya menggunakan useCallback untuk mengingat *selector*, hal ini untuk menghindari proses yang tidak diperlukan pada setiap *render* komponen, dan juga dapat meningkatkan pada mode *concurrent*.\r\n\r\n```jsx\r\nconst fruit = useStore(useCallback(state =&gt; state.fruits[id], [id]))\r\n```\r\n\r\nSelector dapat dibuat di luar fungsi *render* untuk menghasilkan referensi tanpa menggunakan useCallback.\r\n\r\n```jsx\r\nconst selector = state =&gt; state.berries\r\n\r\nfunction Component() {\r\n  const berries = useStore(selector)\r\n```\r\n\r\n## Menulis kembali state\r\n\r\nFungsi `set` mempunyai argumen kedua, dengan kondisi `false` pada awalnya, contoh di bawah adalah model state.\r\n\r\n```jsx\r\nimport omit from &quot;lodash-es/omit&quot;\r\n\r\nconst useStore = create(set =&gt; ({\r\n  salmon: 1,\r\n  tuna: 2,\r\n  deleteEverything: () =&gt; set({ }, true), // clears the entire store, actions included\r\n  deleteTuna: () =&gt; set(state =&gt; omit(state, [&#039;tuna&#039;]), true)\r\n}))\r\n```\r\n\r\n## Menggunakan Async\r\n\r\nGunakan langsung fungsi `set`, zustand tidak melakukan penelurusuran apakah sebuah aksi async atau tidak.\r\n\r\n```jsx\r\nconst useStore = create(set =&gt; ({\r\n  fishies: {},\r\n  fetch: async pond =&gt; {\r\n    const response = await fetch(pond)\r\n    set({ fishies: await response.json() })\r\n  }\r\n}))\r\n```\r\n\r\n## Membaca dari state di dalam sebuah Aksi\r\n\r\n`set` mengizinkan fungsi update `set(state => result)`, namun masih bisa untuk akses ke state di luar menggunakan `get`.\r\n\r\n```jsx\r\nconst useStore = create((set, get) =&gt; ({\r\n  sound: &quot;grunt&quot;,\r\n  action: () =&gt; {\r\n    const sound = get().sound\r\n    // ...\r\n  }\r\n})\r\n```\r\n\r\n## Membaca/menulis dan melakukan sebuah tindakan untuk mengubah komponen di luar\r\n\r\nContoh di bawah adalah sebuah *hook* yang memiliki fungsi utilitas yang disematkan ke dalam prototypenya.\r\n\r\n```jsx\r\nconst useStore = create(() =&gt; ({ paw: true, snout: true, fur: true }))\r\n\r\n// Getting non-reactive fresh state\r\nconst paw = useStore.getState().paw\r\n// Listening to all changes, fires on every change\r\nconst unsub1 = useStore.subscribe(console.log)\r\n// Listening to selected changes, in this case when &quot;paw&quot; changes\r\nconst unsub2 = useStore.subscribe(console.log, state =&gt; state.paw)\r\n// Subscribe also supports an optional equality function\r\nconst unsub3 = useStore.subscribe(console.log, state =&gt; [state.paw, state.fur], shallow)\r\n// Subscribe also exposes the previous value\r\nconst unsub4 = useStore.subscribe((paw, previousPaw) =&gt; console.log(paw, previousPaw), state =&gt; state.paw)\r\n// Updating state, will trigger listeners\r\nuseStore.setState({ paw: false })\r\n// Unsubscribe listeners\r\nunsub1()\r\nunsub2()\r\nunsub3()\r\nunsub4()\r\n// Destroying the store (removing all listeners)\r\nuseStore.destroy()\r\n\r\n// You can of course use the hook as you always would\r\nfunction Component() {\r\n  const paw = useStore(state =&gt; state.paw)\r\n```\r\n\r\n## Menggunakan zustand tanpa React\r\n\r\nKode Zustands dapat dipanggil dan digunakan tanpa bergantung pada pustaka React, perbedaannya adalah fungsi yang dibuat tidak mengembalikan sebuah *hook*, namun utilitas *api*.\r\n\r\n```jsx\r\nimport create from &#039;zustand/vanilla&#039;\r\n\r\nconst store = create(() =&gt; ({ ... }))\r\nconst { getState, setState, subscribe, destroy } = store\r\n```\r\n\r\nMenggunakan store dalam bentuk vanilla dengan React:\r\n\r\n```jsx\r\nimport create from &#039;zustand&#039;\r\nimport vanillaStore from &#039;./vanillaStore&#039;\r\n\r\nconst useStore = create(vanillaStore)\r\n```\r\n\r\n## Updates sementara (sering digunakan pada perubahan state)\r\n\r\nFungsi subscribe mengizinkan untuk mengikat suatu state tanpa memaksa memuat ulang pada suatu perubahan.\r\nLangkah terbaik gunakan kombinasi useEffect agar otomatis melepaskan pada saat unmount komponen. Sangat [drastis](https://codesandbox.io/s/peaceful-johnson-txtws) pada performa ketika melakukan mutasi pada tampilan.\r\n\r\n```jsx\r\nconst useStore = create(set =&gt; ({ scratches: 0, ... }))\r\n\r\nfunction Component() {\r\n  // Fetch initial state\r\n  const scratchRef = useRef(useStore.getState().scratches)\r\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\r\n  useEffect(() =&gt; useStore.subscribe(\r\n    scratches =&gt; (scratchRef.current = scratches), \r\n    state =&gt; state.scratches\r\n  ), [])\r\n```\r\n\r\n## Reducers dan melakukan perubahan pada state yang bercabang? Gunakan Immer!\r\n\r\nMengurangi percabangan struktur sangat melelahkan, apakah sudah mencoba [immer](https://github.com/mweststrate/immer)?\r\n\r\n```jsx\r\nimport produce from &#039;immer&#039;\r\n\r\nconst useStore = create(set =&gt; ({\r\n  lush: { forrest: { contains: { a: &quot;bear&quot; } } },\r\n  set: fn =&gt; set(produce(fn)),\r\n}))\r\n\r\nconst set = useStore(state =&gt; state.set)\r\nset(state =&gt; {\r\n  state.lush.forrest.contains = null\r\n})\r\n```\r\n\r\n## Middleware (potongan kode sebagai penghubung)\r\n\r\nMenyusun store sesuai yang diinginkan\r\n\r\n```jsx\r\n// Log every time state is changed\r\nconst log = config =&gt; (set, get, api) =&gt; config(args =&gt; {\r\n  console.log(&quot;  applying&quot;, args)\r\n  set(args)\r\n  console.log(&quot;  new state&quot;, get())\r\n}, get, api)\r\n\r\n// Turn the set method into an immer proxy\r\nconst immer = config =&gt; (set, get, api) =&gt; config(fn =&gt; set(produce(fn)), get, api)\r\n\r\nconst useStore = create(\r\n  log(\r\n    immer((set) =&gt; ({\r\n      bees: false,\r\n      setBees: (input) =&gt; set((state) =&gt; void (state.bees = input)),\r\n    })),\r\n  ),\r\n)\r\n```\r\n\r\n\r\n<overview>\r\n<summary>Cara menghubungkan middlewares</summary>\r\n\r\n<details>\r\n\r\n\r\n```js\r\nimport create from &quot;zustand&quot;\r\nimport produce from &quot;immer&quot;\r\nimport pipe from &quot;ramda/es/pipe&quot;\r\n\r\n/* log and immer functions from previous example */\r\n/* you can pipe as many middlewares as you want */\r\nconst createStore = pipe(log, immer, create)\r\n\r\nconst useStore = createStore(set =&gt; ({\r\n  bears: 1,\r\n  increasePopulation: () =&gt; set(state =&gt; ({ bears: state.bears + 1 }))\r\n}))\r\n\r\nexport default useStore\r\n```\r\n\r\nFor a TS example see the following [discussion](https://github.com/pmndrs/zustand/discussions/224#discussioncomment-118208)\r\n</details>\r\n</overview>\r\n\r\n<overview>\r\n<summary>Cara menggunakan immer middleware dalam bentuk TypeScript</summary>\r\n\r\n<details>\r\n\r\n\r\n```ts\r\nimport { State, StateCreator } from &#039;zustand&#039;\r\nimport produce, { Draft } from &#039;immer&#039;\r\n\r\nconst immer = &lt;T extends State&gt;(\r\n  config: StateCreator&lt;T, (fn: (draft: Draft&lt;T&gt;) =&gt; void) =&gt; void&gt;\r\n): StateCreator&lt;T&gt; =&gt; (set, get, api) =&gt;\r\n  config((fn) =&gt; set(produce(fn) as (state: T) =&gt; T), get, api)\r\n```\r\n\r\n</details>\r\n</overview>\r\n\r\n## Menyimpan middleware\r\n\r\nPustaka middleware dapat menyimpan data store dengan menggunakan berbagai perangkat storage.\r\n\r\n```jsx\r\nimport create from &quot;zustand&quot;\r\nimport { persist } from &quot;zustand/middleware&quot;\r\n\r\nexport const useStore = create(persist(\r\n  (set, get) =&gt; ({\r\n    fish: 0,\r\n    addAFish: () =&gt; set({ fish: get().fish + 1 })\r\n  }),\r\n  {\r\n    name: &quot;food-storage&quot;, // unique name\r\n    storage: sessionStorage, // (optional) default is &#039;localStorage&#039;\r\n  }\r\n))\r\n```\r\n\r\n## Apabila terbiasa menggunakan redux, berikut hal serupa\r\n\r\n```jsx\r\nconst types = { increase: &quot;INCREASE&quot;, decrease: &quot;DECREASE&quot; }\r\n\r\nconst reducer = (state, { type, by = 1 }) =&gt; {\r\n  switch (type) {\r\n    case types.increase: return { grumpiness: state.grumpiness + by }\r\n    case types.decrease: return { grumpiness: state.grumpiness - by }\r\n  }\r\n}\r\n\r\nconst useStore = create(set =&gt; ({\r\n  grumpiness: 0,\r\n  dispatch: args =&gt; set(state =&gt; reducer(state, args)),\r\n}))\r\n\r\nconst dispatch = useStore(state =&gt; state.dispatch)\r\ndispatch({ type: types.increase, by: 2 })\r\n```\r\n\r\nAtau, gunakan langusng redux-middleware yang dimiliki zustand, cara ini langsung menghubungkan reducer utama, membuat state awal, menambahkan fungsi dispatch ke dalam state dan *api* pada vanilla, kunjungi contoh berikut [ini](https://codesandbox.io/s/amazing-kepler-swxol).\r\n\r\n```jsx\r\nimport { redux } from &#039;zustand/middleware&#039;\r\n\r\nconst useStore = create(redux(reducer, initialState))\r\n```\r\n\r\n## Redux devtools\r\n\r\n```jsx\r\nimport { devtools } from &#039;zustand/middleware&#039;\r\n\r\n// Usage with a plain action store, it will log actions as &quot;setState&quot;\r\nconst useStore = create(devtools(store))\r\n// Usage with a redux store, it will log full action types\r\nconst useStore = create(devtools(redux(reducer, initialState)))\r\n```\r\n\r\nPerangkat devtools mengambil fungsi store sebagai argumen pertamanya, dan sebagai opsi lainnya pada argumen kedua: `devtools(store, \"MyStore\")`, yang digunakan untuk menjalankan aksi.\r\n\r\n## TypeScript\r\n\r\n```tsx\r\ntype State = {\r\n  bears: number\r\n  increase: (by: number) =&gt; void\r\n}\r\n\r\nconst useStore = create&lt;State&gt;(set =&gt; ({\r\n  bears: 0,\r\n  increase: (by) =&gt; set(state =&gt; ({ bears: state.bears + by })),\r\n}))\r\n```\r\n\r\nAtau, gunakan `combine` dan tsc yang akan memproses setiap types.\r\n\r\n```tsx\r\nimport { combine } from &#039;zustand/middleware&#039;\r\n\r\nconst useStore = create(\r\n  combine(\r\n    { bears: 0 }, \r\n    (set) =&gt; ({ increase: (by: number) =&gt; set((state) =&gt; ({ bears: state.bears + by })) })\r\n  ),\r\n)\r\n```\r\n\r\n## Kontribusi\r\n\r\nDokumen ini membutuhkan pembaharuan agar menjadi lebih baik untuk dipelajari, bergabung bersama kami untuk komunikasi lebih lanjut di Discord server:\r\n\r\n- [Pejuang Kode](https://discord.gg/n2Pm2s7)\r\n- [Frontend Indonesia](', 164, 'https://jikexingkong.com/?post_type=docs&#038;p=176', 9, 'docs', '', 0),
(177, 1, '2021-12-03 05:22:17', '2021-12-02 21:22:17', '<h2>深度嵌套对象</h2>\n\n如果你有一个像这样的深度状态对象:\n\n<pre><code class=\"language-ts line-numbers\">type State = {\n  deep: {\n    nested: {\n      obj: { count: number }\n    }\n  }\n }\n</code></pre>\n\n要保证数据不可变就需要一些努力.\n\n<h2>普通方式</h2>\n\n正常的方法是使用 <code>...</code>复制状态对象:\n\n<pre><code class=\"language-ts line-numbers\">  normalInc: () =&gt;\n    set((state) =&gt; ({\n      ...state,\n      deep: {\n        ...state.deep,\n        nested: {\n          ...state.deep.nested,\n          obj: {\n            ...state.deep.nested.obj,\n            count: state.deep.nested.obj.count + 1\n          }\n        }\n      }\n    })),\n</code></pre>\n\n这代码非常长!\n\n<h2>使用immer</h2>\n\n很多人使用 immer 来更新嵌套值:\n\n<pre><code class=\"language-ts line-numbers\">  immerInc: () =&gt;\n    set(produce((state: State) =&gt; { ++state.deep.nested.obj.count })),\n</code></pre>\n\n这会减少许多代码!\n\n<h2>使用optics-ts</h2>\n\n<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/akheron/optics-ts/\">optics-ts</a>是另外一种选择:\n\n<pre><code class=\"language-ts line-numbers\">  opticsInc: () =&gt;\n    set(O.modify(O.optic&lt;State&gt;().path(\"deep.nested.obj.count\"))((c) =&gt; c + 1)),\n</code></pre>\n\n与 immer 不同，optics-ts不使用代理也不使用mutation语法\n\n<h2>使用ramda</h2>\n\n你也可以使用 <a class=\"wp-editor-md-post-content-link\" href=\"https://ramdajs.com/\">ramda</a>:\n\n<pre><code class=\"language-ts line-numbers\">  ramdaInc: () =&gt;\n    set(R.over(R.lensPath([\"deep\", \"nested\", \"obj\", \"count\"]), (c) =&gt; c + 1)),\n</code></pre>\n\n这适用于类型以及optics-ts\n\n<h2>CodeSandbox 演示</h2>\n\nhttps://codesandbox.io/s/zustand-normal-immer-optics-ramda-updating-ynn3o?file=/src/App.tsx', '更新嵌套状态对象值', '', 'publish', 'open', 'closed', '', 'updating-nested-state-object-values', '', '', '2021-12-03 05:57:26', '2021-12-02 21:57:26', '## 深度嵌套对象\r\n\r\n如果你有一个像这样的深度状态对象:\r\n\r\n```ts\r\ntype State = {\r\n  deep: {\r\n    nested: {\r\n      obj: { count: number }\r\n    }\r\n  }\r\n }\r\n```\r\n\r\n要保证数据不可变就需要一些努力.\r\n\r\n## 普通方式\r\n\r\n正常的方法是使用 `...`复制状态对象:\r\n\r\n```ts\r\n  normalInc: () =&gt;\r\n    set((state) =&gt; ({\r\n      ...state,\r\n      deep: {\r\n        ...state.deep,\r\n        nested: {\r\n          ...state.deep.nested,\r\n          obj: {\r\n            ...state.deep.nested.obj,\r\n            count: state.deep.nested.obj.count + 1\r\n          }\r\n        }\r\n      }\r\n    })),\r\n```\r\n\r\n这代码非常长!\r\n\r\n## 使用immer\r\n\r\n很多人使用 immer 来更新嵌套值:\r\n\r\n```ts\r\n  immerInc: () =&gt;\r\n    set(produce((state: State) =&gt; { ++state.deep.nested.obj.count })),\r\n```\r\n\r\n这会减少许多代码!\r\n\r\n## 使用optics-ts\r\n\r\n[optics-ts](https://github.com/akheron/optics-ts/)是另外一种选择:\r\n\r\n```ts\r\n  opticsInc: () =&gt;\r\n    set(O.modify(O.optic&lt;State&gt;().path(&quot;deep.nested.obj.count&quot;))((c) =&gt; c + 1)),\r\n```\r\n\r\n与 immer 不同，optics-ts不使用代理也不使用mutation语法\r\n\r\n## 使用ramda\r\n\r\n你也可以使用 [ramda](https://ramdajs.com/):\r\n\r\n```ts\r\n  ramdaInc: () =&gt;\r\n    set(R.over(R.lensPath([&quot;deep&quot;, &quot;nested&quot;, &quot;obj&quot;, &quot;count&quot;]), (c) =&gt; c + 1)),\r\n```\r\n\r\n这适用于类型以及optics-ts\r\n\r\n## CodeSandbox 演示\r\n\r\nhttps://codesandbox.io/s/zustand-normal-immer-optics-ramda-updating-ynn3o?file=/src/App.tsx', 164, 'https://jikexingkong.com/?post_type=docs&#038;p=177', 10, 'docs', '', 0);
INSERT INTO `wp_posts` (`ID`, `post_author`, `post_date`, `post_date_gmt`, `post_content`, `post_title`, `post_excerpt`, `post_status`, `comment_status`, `ping_status`, `post_password`, `post_name`, `to_ping`, `pinged`, `post_modified`, `post_modified_gmt`, `post_content_filtered`, `post_parent`, `guid`, `menu_order`, `post_type`, `post_mime_type`, `comment_count`) VALUES
(179, 1, '2021-12-03 06:51:45', '2021-12-02 22:51:45', 'Zustand是一个使用简化的flux原理的小型、快速且可扩展的状态管理解决方案。有一个基于hooks的舒适 api，无需样板代码或自以为是的繁琐操作。\n\n不要因为它简单就无视它。它有相当多的利器，花费了大量的时间来处理常见的陷阱，比如可怕的<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md\">僵尸子问题</a>，<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md\">react并发性</a>，以及混合渲染时的<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/facebook/react/issues/13332\">context丢失</a>。它可能是 React 生态中可以正确地处理所有这些问题的一个状态管理库。\n\n你可以在<a class=\"wp-editor-md-post-content-link\" href=\"https://codesandbox.io/s/dazzling-moon-itop4\">此处</a>尝试现场演示。\n\n<pre><code class=\"language-bash line-numbers\">npm install zustand # or yarn add zustand\n</code></pre>\n\n<h2>首先创建一个store</h2>\n\n你的store是一个hook！你可以在里面放任何东西：数据、对象、函数。 <code>set</code> 函数用于合并状态。\n\n<pre><code class=\"language-jsx line-numbers\">import create from \'zustand\'\n\nconst useStore = create(set =&gt; ({\n  bears: 0,\n  increasePopulation: () =&gt; set(state =&gt; ({ bears: state.bears + 1 })),\n  removeAllBears: () =&gt; set({ bears: 0 })\n}))\n</code></pre>\n\n<h2>然后绑定你的组件,这就是所有一切了!</h2>\n\n在任何地方使用hook，不需要Provider。选择你的状态，组件将在更改时重新渲染。\n\n<pre><code class=\"language-jsx line-numbers\">function BearCounter() {\n  const bears = useStore(state =&gt; state.bears)\n  return &lt;h1&gt;{bears} around here ...&lt;/h1&gt;\n}\n\nfunction Controls() {\n  const increasePopulation = useStore(state =&gt; state.increasePopulation)\n  return &lt;button onClick={increasePopulation}&gt;one up&lt;/button&gt;\n}\n</code></pre>\n\n<h3>为什么zustand比redux好？</h3>\n\n<ul>\n<li>简单而不需要太多样板代码</li>\n<li>使hook成为消费状态的主要手段</li>\n<li>不将你的应用包装在context.Provider中</li>\n<li>[可以瞬时通知组件（不引起渲染）](#瞬态更新（对于经常发生的状态 - 变化）)</li>\n</ul>\n\n<h3>为什么zustand比context好？</h3>\n\n<ul>\n<li>更少的样板文件</li>\n<li>只在更改时渲染组件</li>\n<li>集中的，基于actions的状态管理</li>\n</ul>\n\n<h1>技术</h1>\n\n<h2>获取所有</h2>\n\n你可以，但请记住，它会导致在每次状态更改时更新组件！\n\n<pre><code class=\"language-jsx line-numbers\">const state = useStore()\n</code></pre>\n\n<h2>选择多个状态切片</h2>\n\n默认情况下，它使用严格相等<code>(old === new)</code>检测更改，这对于原子state picks(状态选择)很有效。\n\n<pre><code class=\"language-jsx line-numbers\">const nuts = useStore(state =&gt; state.nuts)\nconst honey = useStore(state =&gt; state.honey)\n</code></pre>\n\n如果你想构造一个内部具有多个 state-picks 的单个对象，类似于 redux 的 mapStateToProps,，你可以告诉 zustand 你希望通过传递 <code>shallow</code>相等函数来对对象进行浅比较。\n\n<pre><code class=\"language-jsx line-numbers\">import shallow from \'zustand/shallow\'\n\n// Object pick, re-renders the component when either state.nuts or state.honey change\nconst { nuts, honey } = useStore(state =&gt; ({ nuts: state.nuts, honey: state.honey }), shallow)\n\n// Array pick, re-renders the component when either state.nuts or state.honey change\nconst [nuts, honey] = useStore(state =&gt; [state.nuts, state.honey], shallow)\n\n// Mapped picks, re-renders the component when state.treats changes in order, count or keys\nconst treats = useStore(state =&gt; Object.keys(state.treats), shallow)\n</code></pre>\n\n为了更好地控制重新渲染，你可以提供任何自定义的相等比较函数。\n\n<pre><code class=\"language-jsx line-numbers\">const treats = useStore(\n  state =&gt; state.treats,\n  (oldTreats, newTreats) =&gt; compare(oldTreats, newTreats)\n)\n</code></pre>\n\n<h2>缓存选择器</h2>\n\n通常建议使用useCallback来缓存选择器。这将防止每次渲染时进行不必要的计算。它还允许 React 在并发模式下优化性能。\n\n<pre><code class=\"language-jsx line-numbers\">const fruit = useStore(useCallback(state =&gt; state.fruits[id], [id]))\n</code></pre>\n\n如果一个选择器不依赖于作用域，你可以在渲染函数之外定义它来获得一个固定的引用而不要使用useCallback。\n\n<pre><code class=\"language-jsx line-numbers\">const selector = state =&gt; state.berries\n\nfunction Component() {\n  const berries = useStore(selector)\n</code></pre>\n\n<h2>状态覆盖</h2>\n\nset 函数有第二个参数，默认为 false。它将替换状态模型，而不是去合并它。注意如无必要请不要去除你需要的部分，比如actions。\n\n<pre><code class=\"language-jsx line-numbers\">import { omit } from \"lodash-es/omit\"\n\nconst useStore = create(set =&gt; ({\n  salmon: 1,\n  tuna: 2,\n  deleteEverything: () =&gt; set({ }, true), // clears the entire store, actions included\n  deleteTuna: () =&gt; set(state =&gt; omit(state, [\'tuna\']), true)\n}))\n</code></pre>\n\n<h2>异步操作</h2>\n\n只需在你准备好时调用<code>set</code>，zustand并不关心你的操作是否是异步的。\n\n<pre><code class=\"language-jsx line-numbers\">const useStore = create(set =&gt; ({\n  fishies: {},\n  fetch: async pond =&gt; {\n    const response = await fetch(pond)\n    set({ fishies: await response.json() })\n  }\n}))\n</code></pre>\n\n<h2>在操作中读取状态</h2>\n\n<code>set</code> 允许使用函数<code>set(state =&gt; result)</code>更新状态，但你仍然可以通过 <code>get</code>访问它之外的状态。\n\n<pre><code class=\"language-jsx line-numbers\">const useStore = create((set, get) =&gt; ({\n  sound: \"grunt\",\n  action: () =&gt; {\n    const sound = get().sound\n    // ...\n  }\n})\n</code></pre>\n\n<h2>读/写状态并对组件外部的变化做出响应</h2>\n\n有时你需要以非响应式的方式访问状态或对store执行操作。对于这些情况，生成的hook拥有一套附加到其原型的实用函数。\n\n<pre><code class=\"language-jsx line-numbers\">const useStore = create(() =&gt; ({ paw: true, snout: true, fur: true }))\n\n// Getting non-reactive fresh state\nconst paw = useStore.getState().paw\n// Listening to all changes, fires synchronously on every change\nconst unsub1 = useStore.subscribe(console.log)\n// Updating state, will trigger listeners\nuseStore.setState({ paw: false })\n// Unsubscribe listeners\nunsub1()\n// Destroying the store (removing all listeners)\nuseStore.destroy()\n\n// You can of course use the hook as you always would\nfunction Component() {\n  const paw = useStore(state =&gt; state.paw)\n</code></pre>\n\n<h3>使用带有选择器的订阅</h3>\n\n如果你需要使用选择器订阅，<code>subscribe With Selector</code> 中间件会有所帮助。\n有了这个中间件，<code>subscribe</code> 接受一个额外的签名：\n\n<pre><code class=\"language-ts line-numbers\">subscribe(selector, callback, options?: { equalityFn, fireImmediately }): Unsubscribe\n</code></pre>\n\n<pre><code class=\"language-js line-numbers\">import { subscribeWithSelector } from \'zustand/middleware\'\nconst useStore = create(subscribeWithSelector(() =&gt; ({ paw: true, snout: true, fur: true })))\n\n// Listening to selected changes, in this case when \"paw\" changes\nconst unsub2 = useStore.subscribe(state =&gt; state.paw, console.log)\n// Subscribe also exposes the previous value\nconst unsub3 = useStore.subscribe(state =&gt; state.paw, (paw, previousPaw) =&gt; console.log(paw, previousPaw))\n// Subscribe also supports an optional equality function\nconst unsub4 = useStore.subscribe(state =&gt; [state.paw, state.fur], console.log, { equalityFn: shallow })\n// Subscribe and fire immediately\nconst unsub5 = useStore.subscribe(state =&gt; state.paw, console.log, { fireImmediately: true })\n</code></pre>\n\n如何在 TypeScript 中使用 <code>subscribe With Selector</code>\n\n<pre><code class=\"language-ts line-numbers\">import create, { GetState, SetState } from \'zustand\'\nimport { StoreApiWithSubscribeWithSelector } from \'zustand/middleware\'\n\ntype BearState = {\n  paw: boolean\n  snout: boolean\n  fur: boolean\n}\nconst useStore = create&lt;\n  BearState,\n  SetState&lt;BearState&gt;,\n  GetState&lt;BearState&gt;,\n  StoreApiWithSubscribeWithSelector&lt;BearState&gt;\n&gt;(subscribeWithSelector(() =&gt; ({ paw: true, snout: true, fur: true })))\n</code></pre>\n\n对于具有多个中间件的更复杂的类型，请参考 <a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/pmndrs/zustand/blob/main/tests/middlewareTypes.test.tsx\"><em>middlewareTypes.test.tsx</em></a>。\n\n<h2>在React之外使用zustand</h2>\n\nZustand核心可以在没有 React 依赖的情况下导入和使用。唯一的区别是 create 函数不返回hook，而是返回vanilla api。\n\n<pre><code class=\"language-jsx line-numbers\">import create from \'zustand/vanilla\'\n\nconst store = create(() =&gt; ({ ... }))\nconst { getState, setState, subscribe, destroy } = store\n</code></pre>\n\n你甚至可以使用 React 消费现有的vanilla store\n\n<pre><code class=\"language-jsx line-numbers\">import create from \'zustand\'\nimport vanillaStore from \'./vanillaStore\'\n\nconst useStore = create(vanillaStore)\n</code></pre>\n\n:warning: 请注意，修改 <code>set</code> 或 <code>get</code> 的中间件不适用于 <code>get State</code> 和 <code>set State</code>。\n\n<h2>瞬态更新（对于经常发生的状态 - 变化）</h2>\n\n订阅功能允许组件绑定到状态部分，而无需强制重新渲染更改。最好将它与 useEffect 结合使用，以便在卸载时自动取消订阅。当你被允许直接改变视图时，这可能会对性能产生 <a class=\"wp-editor-md-post-content-link\" href=\"https://codesandbox.io/s/peaceful-johnson-txtws\">剧烈</a> 影响。\n\n<pre><code class=\"language-jsx line-numbers\">const useStore = create(set =&gt; ({ scratches: 0, ... }))\n\nfunction Component() {\n  // Fetch initial state\n  const scratchRef = useRef(useStore.getState().scratches)\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\n  useEffect(() =&gt; useStore.subscribe(\n    state =&gt; (scratchRef.current = state.scratches)\n  ), [])\n</code></pre>\n\n<h2>厌倦了reducers和改变嵌套状态？使用immber！</h2>\n\nreduce中使用嵌套结构的样板代码比较烦。你试过 <a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/mweststrate/immer\">immer</a> 吗？\n\n<pre><code class=\"language-jsx line-numbers\">import produce from \'immer\'\n\nconst useStore = create(set =&gt; ({\n  lush: { forest: { contains: { a: \"bear\" } } },\n  clearForest: () =&gt; set(produce(state =&gt; {\n    state.lush.forest.contains = null\n  }))\n}))\n\nconst clearForest = useStore(state =&gt; state.clearForest)\nclearForest();\n</code></pre>\n\n<h2>中间件</h2>\n\n你可以按你喜欢的任何方式在功能上组合你的store。\n\n<pre><code class=\"language-jsx line-numbers\">// Log every time state is changed\nconst log = config =&gt; (set, get, api) =&gt; config(args =&gt; {\n  console.log(\"  applying\", args)\n  set(args)\n  console.log(\"  new state\", get())\n}, get, api)\n\n// Turn the set method into an immer proxy\nconst immer = config =&gt; (set, get, api) =&gt; config((partial, replace) =&gt; {\n  const nextState = typeof partial === \'function\'\n      ? produce(partial)\n      : partial\n  return set(nextState, replace)\n}, get, api)\n\nconst useStore = create(\n  log(\n    immer((set) =&gt; ({\n      bees: false,\n      setBees: (input) =&gt; set((state) =&gt; void (state.bees = input)),\n    })),\n  ),\n)\n</code></pre>\n\n如何对中间件进行管道化\n\n<pre><code class=\"language-js line-numbers\">import create from \"zustand\"\nimport produce from \"immer\"\nimport pipe from \"ramda/es/pipe\"\n\n/* log and immer functions from previous example */\n/* you can pipe as many middlewares as you want */\nconst createStore = pipe(log, immer, create)\n\nconst useStore = createStore(set =&gt; ({\n  bears: 1,\n  increasePopulation: () =&gt; set(state =&gt; ({ bears: state.bears + 1 }))\n}))\n\nexport default useStore\n</code></pre>\n\n有关TS示例，请参阅以下内容 <a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/pmndrs/zustand/discussions/224#discussioncomment-118208\">讨论</a>\n\n如何在 TypeScript 中类型化 immer 中间件<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/pmndrs/zustand/blob/main/tests/middlewareTypes.test.tsx\"><em>middlewareTypes.test.tsx</em></a> 中有一个参考实现，其中包含一些用例。\n你可以根据需要使用任何简化的变体。\n\n<h2>持久化中间件</h2>\n\n你可以使用任何类型的存储来持久化store的数据。\n\n<pre><code class=\"language-jsx line-numbers\">import create from \"zustand\"\nimport { persist } from \"zustand/middleware\"\n\nexport const useStore = create(persist(\n  (set, get) =&gt; ({\n    fishes: 0,\n    addAFish: () =&gt; set({ fishes: get().fishes + 1 })\n  }),\n  {\n    name: \"food-storage\", // unique name\n    getStorage: () =&gt; sessionStorage, // (optional) by default, \'localStorage\' is used\n  }\n))\n</code></pre>\n\n请参阅此中间件的<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/pmndrs/zustand/wiki/Persisting-the-store\'s-data\">完整文档</a>\n\n<h2>不能没有redux - 像 reducers 和 action 类型？</h2>\n\n<pre><code class=\"language-jsx line-numbers\">const types = { increase: \"INCREASE\", decrease: \"DECREASE\" }\n\nconst reducer = (state, { type, by = 1 }) =&gt; {\n  switch (type) {\n    case types.increase: return { grumpiness: state.grumpiness + by }\n    case types.decrease: return { grumpiness: state.grumpiness - by }\n  }\n}\n\nconst useStore = create(set =&gt; ({\n  grumpiness: 0,\n  dispatch: args =&gt; set(state =&gt; reducer(state, args)),\n}))\n\nconst dispatch = useStore(state =&gt; state.dispatch)\ndispatch({ type: types.increase, by: 2 })\n</code></pre>\n\n或者，直接使用我们的Redux中间件。它连接主reducer，设置初始状态，并向状态本身和vanilla AP添加调度函数。尝试<a class=\"wp-editor-md-post-content-link\" href=\"https://codesandbox.io/s/amazing-kepler-swxol\">这个</a>示例。\n\n<pre><code class=\"language-jsx line-numbers\">import { redux } from \'zustand/middleware\'\n\nconst useStore = create(redux(reducer, initialState))\n</code></pre>\n\n<h2>在 React 事件处理器之外调用操作</h2>\n\n因为如果在事件处理器之外调用<code>setState</code>,React会对它进行同步处理。在事件处理器之外更新状态将强制 react 同步更新组件，因此增加了遇到僵尸-子效应的风险。\n为了解决这个问题，这个action需要包含在 <code>unstable _batched Updates</code> 中\n\n<pre><code class=\"language-jsx line-numbers\">import { unstable_batchedUpdates } from \'react-dom\' // or \'react-native\'\n\nconst useStore = create((set) =&gt; ({\n  fishes: 0,\n  increaseFishes: () =&gt; set((prev) =&gt; ({ fishes: prev.fishes + 1 }))\n}))\n\nconst nonReactCallback = () =&gt; {\n  unstable_batchedUpdates(() =&gt; {\n    useStore.getState().increaseFishes()\n  })\n}\n</code></pre>\n\n更多详情: https://github.com/pmndrs/zustand/issues/302\n\n<h2>Redux devtools</h2>\n\n<pre><code class=\"language-jsx line-numbers\">import { devtools } from \'zustand/middleware\'\n\n// Usage with a plain action store, it will log actions as \"setState\"\nconst useStore = create(devtools(store))\n// Usage with a redux store, it will log full action types\nconst useStore = create(devtools(redux(reducer, initialState)))\n</code></pre>\n\nDevtools 将 store 函数作为它的第一个参数，你可以选择为 store 命名或配置带有第二个参数的<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md#serialize\">序列化</a>选项。\n\n命名store：<code>devtools(store, {name: \"My Store\"})</code>，这将作为你的操作的前缀。\nDevtools 将只记录来自每个单独store的操作，这与典型的<em>combined reducers</em> 的redux store不同。请查看合并store的方法\n<a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/pmndrs/zustand/issues/163\">https://github.com/pmndrs/zustand/issues/163</a>\n\n<h2>React context</h2>\n\n用 <code>create</code> 创建的sotre不需要context providers来包裹。在某些情况下，你可能希望使用contexts进行依赖注入，或者如果你想使用组件中的 props 初始化你的store。因为 store 是一个hook，把它作为一个普通的context值传递可能会违反hook的规则。为了避免误用，提供了一个特殊的<code>createContext</code>。\n\n<pre><code class=\"language-jsx line-numbers\">import create from \'zustand\'\nimport createContext from \'zustand/context\'\n\nconst { Provider, useStore } = createContext()\n\nconst createStore = () =&gt; create(...)\n\nconst App = () =&gt; (\n  &lt;Provider createStore={createStore}&gt;\n    ...\n  &lt;/Provider&gt;\n)\n\nconst Component = () =&gt; {\n  const state = useStore()\n  const slice = useStore(selector)\n  ...\n}\n</code></pre>\n\n在实际组件中createContext的用法\n\n<pre><code class=\"language-jsx line-numbers\">  import create from \"zustand\";\n  import createContext from \"zustand/context\";\n\n  // Best practice: You can move the below createContext() and createStore to a separate file(store.js) and import the Provider, useStore here/wherever you need.\n\n  const { Provider, useStore } = createContext();\n\n  const createStore = () =&gt;\n    create((set) =&gt; ({\n      bears: 0,\n      increasePopulation: () =&gt; set((state) =&gt; ({ bears: state.bears + 1 })),\n      removeAllBears: () =&gt; set({ bears: 0 })\n    }));\n\n  const Button = () =&gt; {\n    return (\n        {/** store() - This will create a store for each time using the Button component instead of using one store for all components **/}\n      &lt;Provider createStore={createStore}&gt; \n        &lt;ButtonChild /&gt;\n      &lt;/Provider&gt;\n    );\n  };\n\n  const ButtonChild = () =&gt; {\n    const state = useStore();\n    return (\n      &lt;div&gt;\n        {state.bears}\n        &lt;button\n          onClick={() =&gt; {\n            state.increasePopulation();\n          }}\n        &gt;\n          +\n        &lt;/button&gt;\n      &lt;/div&gt;\n    );\n  };\n\n  export default function App() {\n    return (\n      &lt;div className=\"App\"&gt;\n        &lt;Button /&gt;\n        &lt;Button /&gt;\n      &lt;/div&gt;\n    );\n  }\n</code></pre>\n\n使用 props 初始化createContext (在TypeScript中)\n\n<pre><code class=\"language-tsx line-numbers\">  import create from \"zustand\";\n  import createContext from \"zustand/context\";\n\n  type BearState = {\n    bears: number\n    increase: () =&gt; void\n  }\n\n  // pass the type to `createContext` rather than to `create`\n  const { Provider, useStore } = createContext&lt;BearState&gt;();\n\n  export default function App({ initialBears }: { initialBears: number }) {\n    return (\n      &lt;Provider\n        createStore={() =&gt;\n          create((set) =&gt; ({\n            bears: initialBears,\n            increase: () =&gt; set((state) =&gt; ({ bears: state.bears + 1 })),\n          }))\n        }\n      &gt;\n        &lt;Button /&gt;\n      &lt;/Provider&gt;\n  )\n}\n</code></pre>\n\n<h2>对store手动类型化以及使用<code>combine</code>(合并)中间件推断类型</h2>\n\n<pre><code class=\"language-tsx line-numbers\">// You can use `type`\ntype BearState = {\n  bears: number\n  increase: (by: number) =&gt; void\n}\n\n// Or `interface`\ninterface BearState {\n  bears: number\n  increase: (by: number) =&gt; void\n}\n\n// And it is going to work for both\nconst useStore = create&lt;BearState&gt;(set =&gt; ({\n  bears: 0,\n  increase: (by) =&gt; set(state =&gt; ({ bears: state.bears + by })),\n}))\n</code></pre>\n\n或者，使用 <code>combine</code> 并让 tsc 推断类型。这会将两个状态浅合并。\n\n<pre><code class=\"language-tsx line-numbers\">import { combine } from \'zustand/middleware\'\n\nconst useStore = create(\n  combine(\n    { bears: 0 },\n    (set) =&gt; ({ increase: (by: number) =&gt; set((state) =&gt; ({ bears: state.bears + by })) })\n  ),\n)\n</code></pre>\n\n使用多个中间件类型可能需要一些 TypeScript 知识。请参阅 <a class=\"wp-editor-md-post-content-link\" href=\"https://github.com/pmndrs/zustand/blob/main/tests/middlewareTypes.test.tsx\"><em>middlewareTypes.test.tsx</em></a> 中的一些工作示例。\n\n<h2>最佳实践</h2>\n\n<ul>\n<li>你可能想知道如何组织你的代码以便更好地维护：<a class=\"wp-editor-md-post-content-link\" href=\"/docs/pmndrs/zustand-cn/wiki/splitting-the-store-into-separate-slices\">将store拆分为单独的切片</a>。</li>\n<li>这个不受约束的库的推荐用法：<a class=\"wp-editor-md-post-content-link\" href=\"/docs/pmndrs/zustand-cn/wiki/flux-inspired-practice\">Flux的启发与实践</a>。</li>\n</ul>\n\n<h2>测试</h2>\n\n有关使用 Zustand 进行测试的信息，请访问这个<a class=\"wp-editor-md-post-content-link\" href=\"/docs/pmndrs/zustand-cn/wiki/testing\">Wiki 页面</a>\n\n<h2>第三方库</h2>\n\n一些用户可能想要扩展 Zustand 的功能集，这可以使用社区制作的 第三方方库来完成。有关 Zustand 的第三方库的信息，请访问专用的 <a class=\"wp-editor-md-post-content-link\" href=\"/docs/pmndrs/zustand-cn/wiki/3rd-party-libraries\">Wiki 页面</a>\n\n<h2>与其他库的比较</h2>\n\n<ul>\n<li><a class=\"wp-editor-md-post-content-link\" href=\"/docs/pmndrs/zustand-cn/wiki/difference-between-zustand-and-valtio\">zustand 和 valtio 的区别</a></li>\n</ul>', '使用', '', 'publish', 'open', 'closed', '', 'readme', '', '', '2021-12-03 06:52:01', '2021-12-02 22:52:01', 'Zustand是一个使用简化的flux原理的小型、快速且可扩展的状态管理解决方案。有一个基于hooks的舒适 api，无需样板代码或自以为是的繁琐操作。\r\n\r\n不要因为它简单就无视它。它有相当多的利器，花费了大量的时间来处理常见的陷阱，比如可怕的[僵尸子问题](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md)，[react并发性](https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md)，以及混合渲染时的[context丢失](https://github.com/facebook/react/issues/13332)。它可能是 React 生态中可以正确地处理所有这些问题的一个状态管理库。\r\n\r\n你可以在[此处](https://codesandbox.io/s/dazzling-moon-itop4)尝试现场演示。\r\n\r\n```bash\r\nnpm install zustand # or yarn add zustand\r\n```\r\n\r\n## 首先创建一个store\r\n\r\n你的store是一个hook！你可以在里面放任何东西：数据、对象、函数。 `set` 函数用于合并状态。\r\n\r\n```jsx\r\nimport create from &#039;zustand&#039;\r\n\r\nconst useStore = create(set =&gt; ({\r\n  bears: 0,\r\n  increasePopulation: () =&gt; set(state =&gt; ({ bears: state.bears + 1 })),\r\n  removeAllBears: () =&gt; set({ bears: 0 })\r\n}))\r\n```\r\n\r\n## 然后绑定你的组件,这就是所有一切了!\r\n\r\n在任何地方使用hook，不需要Provider。选择你的状态，组件将在更改时重新渲染。\r\n\r\n```jsx\r\nfunction BearCounter() {\r\n  const bears = useStore(state =&gt; state.bears)\r\n  return &lt;h1&gt;{bears} around here ...&lt;/h1&gt;\r\n}\r\n\r\nfunction Controls() {\r\n  const increasePopulation = useStore(state =&gt; state.increasePopulation)\r\n  return &lt;button onClick={increasePopulation}&gt;one up&lt;/button&gt;\r\n}\r\n```\r\n\r\n### 为什么zustand比redux好？\r\n\r\n-   简单而不需要太多样板代码\r\n-   使hook成为消费状态的主要手段\r\n-   不将你的应用包装在context.Provider中\r\n-   [可以瞬时通知组件（不引起渲染）](#瞬态更新（对于经常发生的状态 - 变化）)\r\n\r\n### 为什么zustand比context好？\r\n\r\n* 更少的样板文件\r\n* 只在更改时渲染组件\r\n* 集中的，基于actions的状态管理\r\n\r\n# 技术\r\n\r\n## 获取所有\r\n\r\n你可以，但请记住，它会导致在每次状态更改时更新组件！\r\n\r\n```jsx\r\nconst state = useStore()\r\n```\r\n\r\n## 选择多个状态切片\r\n\r\n默认情况下，它使用严格相等`(old === new)`检测更改，这对于原子state picks(状态选择)很有效。\r\n\r\n```jsx\r\nconst nuts = useStore(state =&gt; state.nuts)\r\nconst honey = useStore(state =&gt; state.honey)\r\n```\r\n\r\n如果你想构造一个内部具有多个 state-picks 的单个对象，类似于 redux 的 mapStateToProps,，你可以告诉 zustand 你希望通过传递 `shallow`相等函数来对对象进行浅比较。\r\n\r\n```jsx\r\nimport shallow from &#039;zustand/shallow&#039;\r\n\r\n// Object pick, re-renders the component when either state.nuts or state.honey change\r\nconst { nuts, honey } = useStore(state =&gt; ({ nuts: state.nuts, honey: state.honey }), shallow)\r\n\r\n// Array pick, re-renders the component when either state.nuts or state.honey change\r\nconst [nuts, honey] = useStore(state =&gt; [state.nuts, state.honey], shallow)\r\n\r\n// Mapped picks, re-renders the component when state.treats changes in order, count or keys\r\nconst treats = useStore(state =&gt; Object.keys(state.treats), shallow)\r\n```\r\n\r\n为了更好地控制重新渲染，你可以提供任何自定义的相等比较函数。\r\n\r\n```jsx\r\nconst treats = useStore(\r\n  state =&gt; state.treats,\r\n  (oldTreats, newTreats) =&gt; compare(oldTreats, newTreats)\r\n)\r\n```\r\n\r\n## 缓存选择器\r\n\r\n通常建议使用useCallback来缓存选择器。这将防止每次渲染时进行不必要的计算。它还允许 React 在并发模式下优化性能。\r\n\r\n```jsx\r\nconst fruit = useStore(useCallback(state =&gt; state.fruits[id], [id]))\r\n```\r\n\r\n如果一个选择器不依赖于作用域，你可以在渲染函数之外定义它来获得一个固定的引用而不要使用useCallback。\r\n\r\n```jsx\r\nconst selector = state =&gt; state.berries\r\n\r\nfunction Component() {\r\n  const berries = useStore(selector)\r\n```\r\n\r\n## 状态覆盖\r\n\r\nset 函数有第二个参数，默认为 false。它将替换状态模型，而不是去合并它。注意如无必要请不要去除你需要的部分，比如actions。\r\n\r\n```jsx\r\nimport { omit } from &quot;lodash-es/omit&quot;\r\n\r\nconst useStore = create(set =&gt; ({\r\n  salmon: 1,\r\n  tuna: 2,\r\n  deleteEverything: () =&gt; set({ }, true), // clears the entire store, actions included\r\n  deleteTuna: () =&gt; set(state =&gt; omit(state, [&#039;tuna&#039;]), true)\r\n}))\r\n```\r\n\r\n## 异步操作\r\n\r\n只需在你准备好时调用`set`，zustand并不关心你的操作是否是异步的。\r\n\r\n```jsx\r\nconst useStore = create(set =&gt; ({\r\n  fishies: {},\r\n  fetch: async pond =&gt; {\r\n    const response = await fetch(pond)\r\n    set({ fishies: await response.json() })\r\n  }\r\n}))\r\n```\r\n\r\n## 在操作中读取状态\r\n\r\n`set` 允许使用函数`set(state => result)`更新状态，但你仍然可以通过 `get `访问它之外的状态。\r\n\r\n```jsx\r\nconst useStore = create((set, get) =&gt; ({\r\n  sound: &quot;grunt&quot;,\r\n  action: () =&gt; {\r\n    const sound = get().sound\r\n    // ...\r\n  }\r\n})\r\n```\r\n\r\n## 读/写状态并对组件外部的变化做出响应\r\n\r\n有时你需要以非响应式的方式访问状态或对store执行操作。对于这些情况，生成的hook拥有一套附加到其原型的实用函数。\r\n\r\n```jsx\r\nconst useStore = create(() =&gt; ({ paw: true, snout: true, fur: true }))\r\n\r\n// Getting non-reactive fresh state\r\nconst paw = useStore.getState().paw\r\n// Listening to all changes, fires synchronously on every change\r\nconst unsub1 = useStore.subscribe(console.log)\r\n// Updating state, will trigger listeners\r\nuseStore.setState({ paw: false })\r\n// Unsubscribe listeners\r\nunsub1()\r\n// Destroying the store (removing all listeners)\r\nuseStore.destroy()\r\n\r\n// You can of course use the hook as you always would\r\nfunction Component() {\r\n  const paw = useStore(state =&gt; state.paw)\r\n```\r\n\r\n### 使用带有选择器的订阅\r\n如果你需要使用选择器订阅，`subscribe With Selector` 中间件会有所帮助。\r\n有了这个中间件，`subscribe` 接受一个额外的签名：\r\n\r\n```ts\r\nsubscribe(selector, callback, options?: { equalityFn, fireImmediately }): Unsubscribe\r\n```\r\n\r\n```js\r\nimport { subscribeWithSelector } from &#039;zustand/middleware&#039;\r\nconst useStore = create(subscribeWithSelector(() =&gt; ({ paw: true, snout: true, fur: true })))\r\n\r\n// Listening to selected changes, in this case when &quot;paw&quot; changes\r\nconst unsub2 = useStore.subscribe(state =&gt; state.paw, console.log)\r\n// Subscribe also exposes the previous value\r\nconst unsub3 = useStore.subscribe(state =&gt; state.paw, (paw, previousPaw) =&gt; console.log(paw, previousPaw))\r\n// Subscribe also supports an optional equality function\r\nconst unsub4 = useStore.subscribe(state =&gt; [state.paw, state.fur], console.log, { equalityFn: shallow })\r\n// Subscribe and fire immediately\r\nconst unsub5 = useStore.subscribe(state =&gt; state.paw, console.log, { fireImmediately: true })\r\n```\r\n如何在 TypeScript 中使用 `subscribe With Selector` \r\n```ts\r\nimport create, { GetState, SetState } from &#039;zustand&#039;\r\nimport { StoreApiWithSubscribeWithSelector } from &#039;zustand/middleware&#039;\r\n\r\ntype BearState = {\r\n  paw: boolean\r\n  snout: boolean\r\n  fur: boolean\r\n}\r\nconst useStore = create&lt;\r\n  BearState,\r\n  SetState&lt;BearState&gt;,\r\n  GetState&lt;BearState&gt;,\r\n  StoreApiWithSubscribeWithSelector&lt;BearState&gt;\r\n&gt;(subscribeWithSelector(() =&gt; ({ paw: true, snout: true, fur: true })))\r\n```\r\n\r\n对于具有多个中间件的更复杂的类型，请参考 [*middlewareTypes.test.tsx*](https://github.com/pmndrs/zustand/blob/main/tests/middlewareTypes.test.tsx)。\r\n\r\n## 在React之外使用zustand\r\n\r\nZustand核心可以在没有 React 依赖的情况下导入和使用。唯一的区别是 create 函数不返回hook，而是返回vanilla api。\r\n```jsx\r\nimport create from &#039;zustand/vanilla&#039;\r\n\r\nconst store = create(() =&gt; ({ ... }))\r\nconst { getState, setState, subscribe, destroy } = store\r\n```\r\n\r\n你甚至可以使用 React 消费现有的vanilla store\r\n```jsx\r\nimport create from &#039;zustand&#039;\r\nimport vanillaStore from &#039;./vanillaStore&#039;\r\n\r\nconst useStore = create(vanillaStore)\r\n```\r\n\r\n:warning: 请注意，修改 `set` 或 `get` 的中间件不适用于 `get State` 和 `set State`。\r\n\r\n## 瞬态更新（对于经常发生的状态 - 变化）\r\n\r\n订阅功能允许组件绑定到状态部分，而无需强制重新渲染更改。最好将它与 useEffect 结合使用，以便在卸载时自动取消订阅。当你被允许直接改变视图时，这可能会对性能产生 [剧烈](https://codesandbox.io/s/peaceful-johnson-txtws) 影响。\r\n```jsx\r\nconst useStore = create(set =&gt; ({ scratches: 0, ... }))\r\n\r\nfunction Component() {\r\n  // Fetch initial state\r\n  const scratchRef = useRef(useStore.getState().scratches)\r\n  // Connect to the store on mount, disconnect on unmount, catch state-changes in a reference\r\n  useEffect(() =&gt; useStore.subscribe(\r\n    state =&gt; (scratchRef.current = state.scratches)\r\n  ), [])\r\n```\r\n\r\n## 厌倦了reducers和改变嵌套状态？使用immber！\r\n\r\nreduce中使用嵌套结构的样板代码比较烦。你试过 [immer](https://github.com/mweststrate/immer) 吗？\r\n\r\n```jsx\r\nimport produce from &#039;immer&#039;\r\n\r\nconst useStore = create(set =&gt; ({\r\n  lush: { forest: { contains: { a: &quot;bear&quot; } } },\r\n  clearForest: () =&gt; set(produce(state =&gt; {\r\n    state.lush.forest.contains = null\r\n  }))\r\n}))\r\n\r\nconst clearForest = useStore(state =&gt; state.clearForest)\r\nclearForest();\r\n```\r\n\r\n## 中间件\r\n\r\n你可以按你喜欢的任何方式在功能上组合你的store。\r\n\r\n```jsx\r\n// Log every time state is changed\r\nconst log = config =&gt; (set, get, api) =&gt; config(args =&gt; {\r\n  console.log(&quot;  applying&quot;, args)\r\n  set(args)\r\n  console.log(&quot;  new state&quot;, get())\r\n}, get, api)\r\n\r\n// Turn the set method into an immer proxy\r\nconst immer = config =&gt; (set, get, api) =&gt; config((partial, replace) =&gt; {\r\n  const nextState = typeof partial === &#039;function&#039;\r\n      ? produce(partial)\r\n      : partial\r\n  return set(nextState, replace)\r\n}, get, api)\r\n\r\nconst useStore = create(\r\n  log(\r\n    immer((set) =&gt; ({\r\n      bees: false,\r\n      setBees: (input) =&gt; set((state) =&gt; void (state.bees = input)),\r\n    })),\r\n  ),\r\n)\r\n```\r\n如何对中间件进行管道化\r\n```js\r\nimport create from &quot;zustand&quot;\r\nimport produce from &quot;immer&quot;\r\nimport pipe from &quot;ramda/es/pipe&quot;\r\n\r\n/* log and immer functions from previous example */\r\n/* you can pipe as many middlewares as you want */\r\nconst createStore = pipe(log, immer, create)\r\n\r\nconst useStore = createStore(set =&gt; ({\r\n  bears: 1,\r\n  increasePopulation: () =&gt; set(state =&gt; ({ bears: state.bears + 1 }))\r\n}))\r\n\r\nexport default useStore\r\n```\r\n\r\n有关TS示例，请参阅以下内容 [讨论](https://github.com/pmndrs/zustand/discussions/224#discussioncomment-118208)\r\n\r\n如何在 TypeScript 中类型化 immer 中间件[*middlewareTypes.test.tsx*](https://github.com/pmndrs/zustand/blob/main/tests/middlewareTypes.test.tsx) 中有一个参考实现，其中包含一些用例。\r\n你可以根据需要使用任何简化的变体。\r\n\r\n## 持久化中间件\r\n\r\n你可以使用任何类型的存储来持久化store的数据。\r\n```jsx\r\nimport create from &quot;zustand&quot;\r\nimport { persist } from &quot;zustand/middleware&quot;\r\n\r\nexport const useStore = create(persist(\r\n  (set, get) =&gt; ({\r\n    fishes: 0,\r\n    addAFish: () =&gt; set({ fishes: get().fishes + 1 })\r\n  }),\r\n  {\r\n    name: &quot;food-storage&quot;, // unique name\r\n    getStorage: () =&gt; sessionStorage, // (optional) by default, &#039;localStorage&#039; is used\r\n  }\r\n))\r\n```\r\n\r\n请参阅此中间件的[完整文档](https://github.com/pmndrs/zustand/wiki/Persisting-the-store\'s-data)\r\n\r\n## 不能没有redux - 像 reducers 和 action 类型？\r\n\r\n```jsx\r\nconst types = { increase: &quot;INCREASE&quot;, decrease: &quot;DECREASE&quot; }\r\n\r\nconst reducer = (state, { type, by = 1 }) =&gt; {\r\n  switch (type) {\r\n    case types.increase: return { grumpiness: state.grumpiness + by }\r\n    case types.decrease: return { grumpiness: state.grumpiness - by }\r\n  }\r\n}\r\n\r\nconst useStore = create(set =&gt; ({\r\n  grumpiness: 0,\r\n  dispatch: args =&gt; set(state =&gt; reducer(state, args)),\r\n}))\r\n\r\nconst dispatch = useStore(state =&gt; state.dispatch)\r\ndispatch({ type: types.increase, by: 2 })\r\n```\r\n或者，直接使用我们的Redux中间件。它连接主reducer，设置初始状态，并向状态本身和vanilla AP添加调度函数。尝试[这个](https://codesandbox.io/s/amazing-kepler-swxol)示例。\r\n\r\n```jsx\r\nimport { redux } from &#039;zustand/middleware&#039;\r\n\r\nconst useStore = create(redux(reducer, initialState))\r\n```\r\n\r\n## 在 React 事件处理器之外调用操作\r\n因为如果在事件处理器之外调用`setState`,React会对它进行同步处理。在事件处理器之外更新状态将强制 react 同步更新组件，因此增加了遇到僵尸-子效应的风险。\r\n为了解决这个问题，这个action需要包含在 `unstable _batched Updates` 中\r\n\r\n```jsx\r\nimport { unstable_batchedUpdates } from &#039;react-dom&#039; // or &#039;react-native&#039;\r\n\r\nconst useStore = create((set) =&gt; ({\r\n  fishes: 0,\r\n  increaseFishes: () =&gt; set((prev) =&gt; ({ fishes: prev.fishes + 1 }))\r\n}))\r\n\r\nconst nonReactCallback = () =&gt; {\r\n  unstable_batchedUpdates(() =&gt; {\r\n    useStore.getState().increaseFishes()\r\n  })\r\n}\r\n```\r\n\r\n更多详情: https://github.com/pmndrs/zustand/issues/302\r\n\r\n## Redux devtools\r\n\r\n```jsx\r\nimport { devtools } from &#039;zustand/middleware&#039;\r\n\r\n// Usage with a plain action store, it will log actions as &quot;setState&quot;\r\nconst useStore = create(devtools(store))\r\n// Usage with a redux store, it will log full action types\r\nconst useStore = create(devtools(redux(reducer, initialState)))\r\n```\r\n\r\nDevtools 将 store 函数作为它的第一个参数，你可以选择为 store 命名或配置带有第二个参数的[序列化](https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md#serialize)选项。\r\n\r\n命名store：`devtools(store, {name: \"My Store\"})`，这将作为你的操作的前缀。\r\nDevtools 将只记录来自每个单独store的操作，这与典型的*combined reducers* 的redux store不同。请查看合并store的方法\r\n[https://github.com/pmndrs/zustand/issues/163](https://github.com/pmndrs/zustand/issues/163)\r\n\r\n## React context\r\n\r\n用 `create` 创建的sotre不需要context providers来包裹。在某些情况下，你可能希望使用contexts进行依赖注入，或者如果你想使用组件中的 props 初始化你的store。因为 store 是一个hook，把它作为一个普通的context值传递可能会违反hook的规则。为了避免误用，提供了一个特殊的`createContext`。\r\n\r\n```jsx\r\nimport create from &#039;zustand&#039;\r\nimport createContext from &#039;zustand/context&#039;\r\n\r\nconst { Provider, useStore } = createContext()\r\n\r\nconst createStore = () =&gt; create(...)\r\n\r\nconst App = () =&gt; (\r\n  &lt;Provider createStore={createStore}&gt;\r\n    ...\r\n  &lt;/Provider&gt;\r\n)\r\n\r\nconst Component = () =&gt; {\r\n  const state = useStore()\r\n  const slice = useStore(selector)\r\n  ...\r\n}\r\n```\r\n\r\n在实际组件中createContext的用法\r\n\r\n```jsx\r\n  import create from &quot;zustand&quot;;\r\n  import createContext from &quot;zustand/context&quot;;\r\n\r\n  // Best practice: You can move the below createContext() and createStore to a separate file(store.js) and import the Provider, useStore here/wherever you need.\r\n\r\n  const { Provider, useStore } = createContext();\r\n\r\n  const createStore = () =&gt;\r\n    create((set) =&gt; ({\r\n      bears: 0,\r\n      increasePopulation: () =&gt; set((state) =&gt; ({ bears: state.bears + 1 })),\r\n      removeAllBears: () =&gt; set({ bears: 0 })\r\n    }));\r\n\r\n  const Button = () =&gt; {\r\n    return (\r\n        {/** store() - This will create a store for each time using the Button component instead of using one store for all components **/}\r\n      &lt;Provider createStore={createStore}&gt; \r\n        &lt;ButtonChild /&gt;\r\n      &lt;/Provider&gt;\r\n    );\r\n  };\r\n\r\n  const ButtonChild = () =&gt; {\r\n    const state = useStore();\r\n    return (\r\n      &lt;div&gt;\r\n        {state.bears}\r\n        &lt;button\r\n          onClick={() =&gt; {\r\n            state.increasePopulation();\r\n          }}\r\n        &gt;\r\n          +\r\n        &lt;/button&gt;\r\n      &lt;/div&gt;\r\n    );\r\n  };\r\n\r\n  export default function App() {\r\n    return (\r\n      &lt;div className=&quot;App&quot;&gt;\r\n        &lt;Button /&gt;\r\n        &lt;Button /&gt;\r\n      &lt;/div&gt;\r\n    );\r\n  }\r\n```\r\n\r\n使用 props 初始化createContext (在TypeScript中)\r\n\r\n```tsx\r\n  import create from \"zustand\";\r\n  import createContext from \"zustand/context\";\r\n\r\n  type BearState = {\r\n    bears: number\r\n    increase: () => void\r\n  }\r\n\r\n  // pass the type to `createContext` rather than to `create`\r\n  const { Provider, useStore } = createContext<BearState>();\r\n\r\n  export default function App({ initialBears }: { initialBears: number }) {\r\n    return (\r\n      <Provider\r\n        createStore={() =>\r\n          create((set) => ({\r\n            bears: initialBears,\r\n            increase: () => set((state) => ({ bears: state.bears + 1 })),\r\n          }))\r\n        }\r\n      >\r\n        <Button />\r\n      </Provider>\r\n  )\r\n}\r\n```\r\n\r\n## 对store手动类型化以及使用`combine`(合并)中间件推断类型\r\n\r\n```tsx\r\n// You can use `type`\r\ntype BearState = {\r\n  bears: number\r\n  increase: (by: number) => void\r\n}\r\n\r\n// Or `interface`\r\ninterface BearState {\r\n  bears: number\r\n  increase: (by: number) => void\r\n}\r\n\r\n// And it is going to work for both\r\nconst useStore = create<BearState>(set => ({\r\n  bears: 0,\r\n  increase: (by) => set(state => ({ bears: state.bears + by })),\r\n}))\r\n```\r\n或者，使用 `combine` 并让 tsc 推断类型。这会将两个状态浅合并。\r\n\r\n```tsx\r\nimport { combine } from &#039;zustand/middleware&#039;\r\n\r\nconst useStore = create(\r\n  combine(\r\n    { bears: 0 },\r\n    (set) =&gt; ({ increase: (by: number) =&gt; set((state) =&gt; ({ bears: state.bears + by })) })\r\n  ),\r\n)\r\n```\r\n\r\n\r\n使用多个中间件类型可能需要一些 TypeScript 知识。请参阅 [*middlewareTypes.test.tsx*](https://github.com/pmndrs/zustand/blob/main/tests/middlewareTypes.test.tsx) 中的一些工作示例。\r\n\r\n## 最佳实践\r\n\r\n* 你可能想知道如何组织你的代码以便更好地维护：[将store拆分为单独的切片](/docs/pmndrs/zustand-cn/wiki/splitting-the-store-into-separate-slices)。\r\n* 这个不受约束的库的推荐用法：[Flux的启发与实践](/docs/pmndrs/zustand-cn/wiki/flux-inspired-practice)。\r\n\r\n\r\n## 测试\r\n\r\n有关使用 Zustand 进行测试的信息，请访问这个[Wiki 页面](/docs/pmndrs/zustand-cn/wiki/testing)\r\n\r\n## 第三方库\r\n\r\n一些用户可能想要扩展 Zustand 的功能集，这可以使用社区制作的 第三方方库来完成。有关 Zustand 的第三方库的信息，请访问专用的 [Wiki 页面](/docs/pmndrs/zustand-cn/wiki/3rd-party-libraries)\r\n\r\n## 与其他库的比较\r\n\r\n- [zustand 和 valtio 的区别](/docs/pmndrs/zustand-cn/wiki/difference-between-zustand-and-valtio)', 163, 'https://jikexingkong.com/docs/zustand-cn/%e4%bd%bf%e7%94%a8', 0, 'docs', '', 0),
(189, 1, '2022-06-05 12:16:41', '2022-06-05 04:16:41', '', '2022060504164130', '', 'inherit', 'open', 'closed', '', '2022060504164130', '', '', '2022-06-05 12:16:41', '2022-06-05 04:16:41', '', 19, 'https://jikexingkong.com/wp-content/uploads/2022/06/2022060504164130.png', 0, 'attachment', 'image/png', 0),
(195, 1, '2022-08-17 22:25:01', '2022-08-17 14:25:01', '', 'Java入门教程', '', 'publish', 'open', 'closed', '', 'java%e5%85%a5%e9%97%a8%e6%95%99%e7%a8%8b', '', '', '2022-08-17 22:40:03', '2022-08-17 14:40:03', '', 0, 'https://jikexingkong.com/docs/java%e5%85%a5%e9%97%a8%e6%95%99%e7%a8%8b', 0, 'docs', '', 0),
(196, 1, '2022-08-17 22:25:19', '2022-08-17 14:25:19', '', '1.Java基础', '', 'publish', 'open', 'closed', '', '1-java%e5%9f%ba%e7%a1%80', '', '', '2022-08-17 22:25:19', '2022-08-17 14:25:19', '', 195, 'https://jikexingkong.com/docs/java%e5%85%a5%e9%97%a8%e6%95%99%e7%a8%8b/1-java%e5%9f%ba%e7%a1%80', 0, 'docs', '', 0),
(197, 1, '2022-08-17 22:25:25', '2022-08-17 14:25:25', '', '2.Java初级', '', 'publish', 'open', 'closed', '', '2-java%e5%88%9d%e7%ba%a7', '', '', '2022-08-17 22:25:25', '2022-08-17 14:25:25', '', 195, 'https://jikexingkong.com/docs/java%e5%85%a5%e9%97%a8%e6%95%99%e7%a8%8b/2-java%e5%88%9d%e7%ba%a7', 1, 'docs', '', 0),
(198, 1, '2022-08-17 22:25:39', '0000-00-00 00:00:00', '', '1.Java是什么', '', 'draft', 'open', 'closed', '', '', '', '', '2022-08-17 22:25:39', '0000-00-00 00:00:00', '', 196, 'https://jikexingkong.com/?post_type=docs&p=198', 0, 'docs', '', 0),
(199, 1, '2022-08-17 22:31:36', '2022-08-17 14:31:36', 'QQ群', '完结了吗', '', 'publish', 'open', 'closed', '', '%e5%ae%8c%e7%bb%93%e4%ba%86%e5%90%97', '', '', '2022-08-17 22:31:36', '2022-08-17 14:31:36', 'QQ群', 153, 'https://jikexingkong.com/?post_type=docs&#038;p=199', 0, 'docs', '', 0),
(204, 1, '2022-10-27 20:49:59', '0000-00-00 00:00:00', '', '自动草稿', '', 'auto-draft', 'open', 'closed', '', '', '', '', '2022-10-27 20:49:59', '0000-00-00 00:00:00', '', 0, 'https://jikexingkong.com/?p=204', 0, 'post', '', 0);

-- --------------------------------------------------------

--
-- 表的结构 `wp_termmeta`
--

CREATE TABLE `wp_termmeta` (
  `meta_id` bigint(20) UNSIGNED NOT NULL,
  `term_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_520_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- 转存表中的数据 `wp_termmeta`
--

INSERT INTO `wp_termmeta` (`meta_id`, `term_id`, `meta_key`, `meta_value`) VALUES
(1, 6, 'enabled_top_image', '1'),
(2, 6, 'top_bar_image', ''),
(3, 6, 'bg-image', ''),
(4, 6, 'enabled_order_filter', '0'),
(5, 6, 'enabled_price_filter', '0'),
(6, 6, 'course_status_filter', '0'),
(7, 6, 'course_level_filter', '0'),
(8, 6, 'archive_item_style', 'grid'),
(9, 6, 'seo-title', ''),
(10, 6, 'seo-keywords', ''),
(11, 6, 'seo-description', ''),
(12, 7, 'enabled_top_image', '1'),
(13, 7, 'top_bar_image', ''),
(14, 7, 'bg-image', ''),
(15, 7, 'enabled_order_filter', '0'),
(16, 7, 'enabled_price_filter', '0'),
(17, 7, 'course_status_filter', '0'),
(18, 7, 'course_level_filter', '0'),
(19, 7, 'archive_item_style', 'grid'),
(20, 7, 'seo-title', ''),
(21, 7, 'seo-keywords', ''),
(22, 7, 'seo-description', ''),
(23, 8, 'enabled_top_image', '1'),
(24, 8, 'top_bar_image', ''),
(25, 8, 'bg-image', ''),
(26, 8, 'enabled_order_filter', '0'),
(27, 8, 'enabled_price_filter', '0'),
(28, 8, 'course_status_filter', '0'),
(29, 8, 'course_level_filter', '0'),
(30, 8, 'archive_item_style', 'grid'),
(31, 8, 'seo-title', ''),
(32, 8, 'seo-keywords', ''),
(33, 8, 'seo-description', ''),
(34, 9, 'enabled_top_image', '1'),
(35, 9, 'top_bar_image', ''),
(36, 9, 'bg-image', ''),
(37, 9, 'enabled_order_filter', '0'),
(38, 9, 'enabled_price_filter', '0'),
(39, 9, 'course_status_filter', '0'),
(40, 9, 'course_level_filter', '0'),
(41, 9, 'archive_item_style', 'grid'),
(42, 9, 'seo-title', ''),
(43, 9, 'seo-keywords', ''),
(44, 9, 'seo-description', ''),
(45, 10, 'enabled_top_image', '1'),
(46, 10, 'top_bar_image', ''),
(47, 10, 'bg-image', ''),
(48, 10, 'enabled_order_filter', '0'),
(49, 10, 'enabled_price_filter', '0'),
(50, 10, 'course_status_filter', '0'),
(51, 10, 'course_level_filter', '0'),
(52, 10, 'archive_item_style', 'grid'),
(53, 10, 'seo-title', ''),
(54, 10, 'seo-keywords', ''),
(55, 10, 'seo-description', ''),
(56, 11, 'enabled_top_image', '1'),
(57, 11, 'top_bar_image', ''),
(58, 11, 'bg-image', ''),
(59, 11, 'enabled_order_filter', '0'),
(60, 11, 'enabled_price_filter', '0'),
(61, 11, 'course_status_filter', '0'),
(62, 11, 'course_level_filter', '0'),
(63, 11, 'archive_item_style', 'grid'),
(64, 11, 'seo-title', ''),
(65, 11, 'seo-keywords', ''),
(66, 11, 'seo-description', ''),
(67, 13, 'enabled_top_image', '1'),
(68, 13, 'top_bar_image', ''),
(69, 13, 'bg-image', ''),
(70, 13, 'archive_single_style', 'right'),
(71, 13, 'enabled_order_filter', '0'),
(72, 13, 'enabled_price_filter', '0'),
(73, 13, 'seo-title', ''),
(74, 13, 'seo-keywords', ''),
(75, 13, 'seo-description', ''),
(76, 14, 'enabled_top_image', '1'),
(77, 14, 'top_bar_image', ''),
(78, 14, 'bg-image', ''),
(79, 14, 'archive_single_style', 'none'),
(80, 14, 'enabled_order_filter', '0'),
(81, 14, 'enabled_price_filter', '0'),
(82, 14, 'seo-title', ''),
(83, 14, 'seo-keywords', ''),
(84, 14, 'seo-description', ''),
(85, 15, 'enabled_top_image', '1'),
(86, 15, 'top_bar_image', ''),
(87, 15, 'bg-image', ''),
(88, 15, 'archive_single_style', 'none'),
(89, 15, 'enabled_order_filter', '0'),
(90, 15, 'enabled_price_filter', '0'),
(91, 15, 'seo-title', ''),
(92, 15, 'seo-keywords', ''),
(93, 15, 'seo-description', ''),
(94, 16, 'enabled_top_image', '1'),
(95, 16, 'top_bar_image', ''),
(96, 16, 'bg-image', ''),
(97, 16, 'archive_single_style', 'none'),
(98, 16, 'enabled_order_filter', '0'),
(99, 16, 'enabled_price_filter', '0'),
(100, 16, 'seo-title', ''),
(101, 16, 'seo-keywords', ''),
(102, 16, 'seo-description', ''),
(103, 17, 'enabled_top_image', '1'),
(104, 17, 'top_bar_image', ''),
(105, 17, 'bg-image', ''),
(106, 17, 'archive_single_style', 'none'),
(107, 17, 'enabled_order_filter', '0'),
(108, 17, 'enabled_price_filter', '0'),
(109, 17, 'seo-title', ''),
(110, 17, 'seo-keywords', ''),
(111, 17, 'seo-description', ''),
(112, 18, 'enabled_top_image', '1'),
(113, 18, 'top_bar_image', ''),
(114, 18, 'bg-image', ''),
(115, 18, 'archive_single_style', 'none'),
(116, 18, 'enabled_order_filter', '0'),
(117, 18, 'enabled_price_filter', '0'),
(118, 18, 'seo-title', ''),
(119, 18, 'seo-keywords', ''),
(120, 18, 'seo-description', ''),
(121, 19, 'enabled_top_image', '1'),
(122, 19, 'top_bar_image', ''),
(123, 19, 'bg-image', ''),
(124, 19, 'archive_single_style', 'none'),
(125, 19, 'enabled_order_filter', '0'),
(126, 19, 'enabled_price_filter', '0'),
(127, 19, 'seo-title', ''),
(128, 19, 'seo-keywords', ''),
(129, 19, 'seo-description', ''),
(130, 20, 'enabled_top_image', '1'),
(131, 20, 'top_bar_image', ''),
(132, 20, 'bg-image', ''),
(133, 20, 'archive_single_style', 'none'),
(134, 20, 'enabled_order_filter', '0'),
(135, 20, 'enabled_price_filter', '0'),
(136, 20, 'seo-title', ''),
(137, 20, 'seo-keywords', ''),
(138, 20, 'seo-description', ''),
(139, 21, 'enabled_top_image', '1'),
(140, 21, 'top_bar_image', ''),
(141, 21, 'bg-image', ''),
(142, 21, 'archive_single_style', 'none'),
(143, 21, 'enabled_order_filter', '0'),
(144, 21, 'enabled_price_filter', '0'),
(145, 21, 'seo-title', ''),
(146, 21, 'seo-keywords', ''),
(147, 21, 'seo-description', ''),
(148, 43, 'enabled_top_image', '1'),
(149, 43, 'top_bar_image', ''),
(150, 43, 'bg-image', ''),
(151, 43, 'archive_single_style', 'none'),
(152, 43, 'enabled_order_filter', '0'),
(153, 43, 'enabled_price_filter', '0'),
(154, 43, 'seo-title', ''),
(155, 43, 'seo-keywords', ''),
(156, 43, 'seo-description', ''),
(157, 44, 'enabled_top_image', '1'),
(158, 44, 'top_bar_image', ''),
(159, 44, 'bg-image', ''),
(160, 44, 'archive_single_style', 'none'),
(161, 44, 'enabled_order_filter', '0'),
(162, 44, 'enabled_price_filter', '0'),
(163, 44, 'seo-title', ''),
(164, 44, 'seo-keywords', ''),
(165, 44, 'seo-description', ''),
(166, 45, 'enabled_top_image', '1'),
(167, 45, 'top_bar_image', ''),
(168, 45, 'bg-image', ''),
(169, 45, 'archive_single_style', 'none'),
(170, 45, 'enabled_order_filter', '0'),
(171, 45, 'enabled_price_filter', '0'),
(172, 45, 'seo-title', ''),
(173, 45, 'seo-keywords', ''),
(174, 45, 'seo-description', ''),
(175, 46, 'enabled_top_image', '1'),
(176, 46, 'top_bar_image', ''),
(177, 46, 'bg-image', ''),
(178, 46, 'archive_single_style', 'none'),
(179, 46, 'enabled_order_filter', '0'),
(180, 46, 'enabled_price_filter', '0'),
(181, 46, 'seo-title', ''),
(182, 46, 'seo-keywords', ''),
(183, 46, 'seo-description', ''),
(184, 47, 'enabled_top_image', '1'),
(185, 47, 'top_bar_image', ''),
(186, 47, 'bg-image', ''),
(187, 47, 'archive_single_style', 'none'),
(188, 47, 'enabled_order_filter', '0'),
(189, 47, 'enabled_price_filter', '0'),
(190, 47, 'seo-title', ''),
(191, 47, 'seo-keywords', ''),
(192, 47, 'seo-description', ''),
(193, 48, 'enabled_top_image', '1'),
(194, 48, 'top_bar_image', ''),
(195, 48, 'bg-image', ''),
(196, 48, 'archive_single_style', 'none'),
(197, 48, 'enabled_order_filter', '0'),
(198, 48, 'enabled_price_filter', '0'),
(199, 48, 'seo-title', ''),
(200, 48, 'seo-keywords', ''),
(201, 48, 'seo-description', ''),
(202, 49, 'enabled_top_image', '1'),
(203, 49, 'top_bar_image', ''),
(204, 49, 'bg-image', ''),
(205, 49, 'archive_single_style', 'none'),
(206, 49, 'enabled_order_filter', '0'),
(207, 49, 'enabled_price_filter', '0'),
(208, 49, 'seo-title', ''),
(209, 49, 'seo-keywords', ''),
(210, 49, 'seo-description', ''),
(211, 50, 'enabled_top_image', '1'),
(212, 50, 'top_bar_image', ''),
(213, 50, 'bg-image', ''),
(214, 50, 'enabled_order_filter', '0'),
(215, 50, 'enabled_price_filter', '0'),
(216, 50, 'course_status_filter', '0'),
(217, 50, 'course_level_filter', '0'),
(218, 50, 'archive_item_style', 'grid'),
(219, 50, 'seo-title', ''),
(220, 50, 'seo-keywords', ''),
(221, 50, 'seo-description', ''),
(222, 51, 'enabled_top_image', '1'),
(223, 51, 'top_bar_image', ''),
(224, 51, 'bg-image', ''),
(225, 51, 'archive_single_style', 'none'),
(226, 51, 'enabled_order_filter', '0'),
(227, 51, 'enabled_price_filter', '0'),
(228, 51, 'seo-title', ''),
(229, 51, 'seo-keywords', ''),
(230, 51, 'seo-description', '');

-- --------------------------------------------------------

--
-- 表的结构 `wp_terms`
--

CREATE TABLE `wp_terms` (
  `term_id` bigint(20) UNSIGNED NOT NULL,
  `name` varchar(200) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `slug` varchar(200) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT 0,
  `term_order` int(11) DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- 转存表中的数据 `wp_terms`
--

INSERT INTO `wp_terms` (`term_id`, `name`, `slug`, `term_group`, `term_order`) VALUES
(1, '未分类', 'uncategorized', 0, 0),
(3, '视频教程', 'courses', 0, 0),
(4, '文档翻译', 'trans', 0, 0),
(5, '自写图书', 'books', 0, 0),
(6, 'Node.js', 'nodejs', 0, 0),
(7, '前端', 'frontend', 0, 0),
(8, 'Go语言', 'golang', 0, 0),
(9, 'PHP', 'php', 0, 0),
(10, '运维', 'server', 0, 0),
(11, '工具', 'tools', 0, 0),
(12, 'Menu 1', 'menu-1', 0, 0),
(13, '编码博文', 'aricles', 0, 0),
(14, '设计相关', 'design', 0, 0),
(15, '前端', 'frontend', 0, 0),
(16, '后端', 'backend', 0, 0),
(17, '移动', 'mobile', 0, 0),
(18, '部署相关', 'deploy', 0, 0),
(19, '开发工具', 'tools', 0, 0),
(20, '中间件', 'middleware', 0, 0),
(21, '开源推荐', 'oss', 0, 0),
(22, '入门中文资料', 'getting-started', 0, 0),
(23, 'TS/JS工具库', 'common-repo', 0, 1),
(24, '前端与React', 'fontend-react', 0, 2),
(25, '桌面与移动', 'mobile', 0, 5),
(26, 'Node后端', 'node', 0, 3),
(27, 'Golang', 'golang', 0, 4),
(28, '包管理', 'repo-manage', 0, 6),
(29, '打包编译', 'pack-compile', 0, 7),
(30, 'Linux/Macos', 'linux-macos', 0, 8),
(31, '运维', 'server', 0, 9),
(32, '博客社区', 'sites', 0, 10),
(33, '课程问题', 'courses', 0, 0),
(34, 'Nestjs最佳实践', 'nestplus', 0, 0),
(35, 'React+TS实战', 'reactplus', 0, 1),
(36, '精通go语言', 'learn-go', 0, 2),
(37, '咨询与建议', 'suggestion', 0, 0),
(38, '生态导航', 'links', 0, 0),
(39, '文档栏目', 'docs', 0, 1),
(40, '编码博文', 'articles', 0, 2),
(41, '其它', 'others', 0, 3),
(42, 'test', 'test', 0, 0),
(43, 'nodejs', 'nodejs', 0, 0),
(44, '开源', 'oss', 0, 0),
(45, '前端', 'frontend', 0, 0),
(46, '打包工具', 'package-tools', 0, 0),
(47, 'go语言', 'golang', 0, 0),
(48, '管理面板', 'manage-panel', 0, 0),
(49, '中后台系统', 'mange-system', 0, 0),
(50, 'Nodejs大师系列', 'nodejs-master', 0, 0),
(51, '安卓', 'android', 0, 0);

-- --------------------------------------------------------

--
-- 表的结构 `wp_term_relationships`
--

CREATE TABLE `wp_term_relationships` (
  `object_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `term_taxonomy_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `term_order` int(11) NOT NULL DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- 转存表中的数据 `wp_term_relationships`
--

INSERT INTO `wp_term_relationships` (`object_id`, `term_taxonomy_id`, `term_order`) VALUES
(1, 22, 0),
(2, 22, 0),
(3, 22, 0),
(4, 22, 0),
(5, 29, 7),
(6, 29, 7),
(7, 24, 2),
(8, 24, 2),
(9, 24, 2),
(10, 24, 2),
(12, 29, 7),
(14, 24, 2),
(15, 24, 2),
(16, 24, 2),
(17, 24, 2),
(18, 24, 2),
(19, 24, 2),
(20, 24, 2),
(21, 24, 2),
(22, 24, 2),
(23, 24, 2),
(24, 24, 2),
(25, 23, 1),
(26, 24, 2),
(27, 24, 2),
(28, 24, 2),
(29, 23, 1),
(30, 23, 1),
(31, 26, 3),
(32, 26, 3),
(33, 26, 3),
(34, 23, 1),
(35, 26, 3),
(36, 26, 3),
(37, 26, 3),
(38, 23, 1),
(39, 4, 0),
(39, 23, 1),
(40, 5, 0),
(40, 26, 3),
(41, 26, 3),
(42, 26, 3),
(43, 26, 3),
(44, 23, 1),
(45, 26, 3),
(46, 26, 3),
(47, 3, 0),
(47, 26, 3),
(48, 3, 0),
(48, 26, 3),
(49, 26, 3),
(50, 26, 3),
(51, 26, 3),
(52, 26, 3),
(53, 26, 3),
(54, 26, 3),
(55, 28, 6),
(56, 28, 6),
(58, 23, 1),
(59, 29, 7),
(60, 29, 7),
(61, 29, 7),
(62, 29, 7),
(64, 6, 0),
(64, 22, 0),
(64, 50, 0),
(65, 27, 4),
(66, 27, 4),
(67, 27, 4),
(68, 27, 4),
(69, 26, 3),
(70, 27, 4),
(71, 27, 4),
(72, 26, 3),
(73, 27, 4),
(74, 27, 4),
(75, 27, 4),
(76, 31, 9),
(77, 31, 9),
(78, 31, 9),
(79, 31, 9),
(80, 31, 9),
(81, 31, 9),
(82, 29, 7),
(83, 29, 7),
(84, 22, 0),
(85, 22, 0),
(86, 32, 10),
(87, 32, 10),
(88, 32, 10),
(89, 32, 10),
(90, 32, 10),
(91, 22, 0),
(92, 12, 0),
(92, 22, 0),
(93, 12, 0),
(93, 22, 0),
(95, 12, 0),
(96, 12, 0),
(97, 12, 0),
(99, 12, 0),
(100, 15, 0),
(101, 15, 0),
(102, 15, 0),
(103, 15, 0),
(104, 15, 0),
(105, 21, 0),
(105, 44, 0),
(105, 47, 0),
(105, 49, 0),
(106, 21, 0),
(106, 44, 0),
(106, 45, 0),
(106, 48, 0),
(107, 33, 0),
(107, 42, 0),
(112, 12, 0),
(132, 4, 0),
(158, 4, 0),
(163, 4, 0),
(195, 4, 0);

-- --------------------------------------------------------

--
-- 表的结构 `wp_term_taxonomy`
--

CREATE TABLE `wp_term_taxonomy` (
  `term_taxonomy_id` bigint(20) UNSIGNED NOT NULL,
  `term_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `taxonomy` varchar(32) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `description` longtext COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `parent` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `count` bigint(20) NOT NULL DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- 转存表中的数据 `wp_term_taxonomy`
--

INSERT INTO `wp_term_taxonomy` (`term_taxonomy_id`, `term_id`, `taxonomy`, `description`, `parent`, `count`) VALUES
(1, 1, 'category', '', 0, 0),
(3, 3, 'docs_category', '', 0, 2),
(4, 4, 'docs_category', '', 0, 5),
(5, 5, 'docs_category', '', 0, 1),
(6, 6, 'course_category', '', 0, 1),
(7, 7, 'course_category', '', 0, 0),
(8, 8, 'course_category', '', 0, 0),
(9, 9, 'course_category', '', 0, 0),
(10, 10, 'course_category', '', 0, 0),
(11, 11, 'course_category', '', 0, 0),
(12, 12, 'nav_menu', '', 0, 7),
(13, 13, 'category', '', 0, 0),
(14, 14, 'category', '', 13, 0),
(15, 15, 'category', '', 13, 5),
(16, 16, 'category', '', 13, 0),
(17, 17, 'category', '', 13, 0),
(18, 18, 'category', '', 13, 0),
(19, 19, 'category', '', 13, 0),
(20, 20, 'category', '', 13, 0),
(21, 21, 'category', '', 13, 2),
(22, 22, 'link_category', '', 0, 10),
(23, 23, 'link_category', '', 0, 8),
(24, 24, 'link_category', '', 0, 18),
(25, 25, 'link_category', '', 0, 0),
(26, 26, 'link_category', '', 0, 22),
(27, 27, 'link_category', '', 0, 9),
(28, 28, 'link_category', '', 0, 2),
(29, 29, 'link_category', '', 0, 9),
(30, 30, 'link_category', '', 0, 0),
(31, 31, 'link_category', '', 0, 6),
(32, 32, 'link_category', '', 0, 5),
(33, 33, 'question_category', '', 0, 1),
(34, 34, 'question_category', '《Nestjs最佳实践》教程问答专区', 33, 0),
(35, 35, 'question_category', '《React+TS实战》教程问答专区', 33, 0),
(36, 36, 'question_category', '《精通go语言》教程问答专区', 33, 0),
(37, 37, 'question_category', '欢迎对本站提出宝贵的意见和建议,比如建议站长上线xx课程,翻译xx文档等', 0, 0),
(38, 38, 'question_category', '如果你有新的生态库推荐或者某个生态库的导航失效,请到此分类下提交,站长会考虑在生态导航中添加或修改', 37, 0),
(39, 39, 'question_category', '文档中有翻译错误或者有新的文件需要翻译,在这里提出哦', 37, 0),
(40, 40, 'question_category', '在阅读博文栏目时遇到什么问题或错误请在此处提问', 37, 0),
(41, 41, 'question_category', '其它建议或咨询', 37, 0),
(42, 42, 'question_tag', '', 0, 1),
(43, 43, 'post_tag', '', 0, 0),
(44, 44, 'post_tag', '', 0, 2),
(45, 45, 'post_tag', '', 0, 1),
(46, 46, 'post_tag', '', 0, 0),
(47, 47, 'post_tag', '', 0, 1),
(48, 48, 'post_tag', '', 0, 1),
(49, 49, 'post_tag', '', 0, 1),
(50, 50, 'course_series', '', 0, 1),
(51, 51, 'category', '', 17, 0);

-- --------------------------------------------------------

--
-- 表的结构 `wp_usermeta`
--

CREATE TABLE `wp_usermeta` (
  `umeta_id` bigint(20) UNSIGNED NOT NULL,
  `user_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_520_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- 转存表中的数据 `wp_usermeta`
--

INSERT INTO `wp_usermeta` (`umeta_id`, `user_id`, `meta_key`, `meta_value`) VALUES
(1, 1, 'nickname', 'pincman'),
(2, 1, 'first_name', ''),
(3, 1, 'last_name', ''),
(4, 1, 'description', '我是个程序员'),
(5, 1, 'rich_editing', 'true'),
(6, 1, 'syntax_highlighting', 'true'),
(7, 1, 'comment_shortcuts', 'false'),
(8, 1, 'admin_color', 'fresh'),
(9, 1, 'use_ssl', '0'),
(10, 1, 'show_admin_bar_front', 'true'),
(11, 1, 'locale', ''),
(12, 1, 'wp_capabilities', 'a:1:{s:13:\"administrator\";b:1;}'),
(13, 1, 'wp_user_level', '10'),
(15, 1, 'show_welcome_panel', '1'),
(17, 1, 'wp_user-settings', 'libraryContent=browse&ampampampampampampampampampwidgets_access=off&ampampampampampampampampampposts_list_mode=list&ampampampampampampampampampeditor=tinymce&ampampampampampampampampampeditor_expand=on&ampampampampampampampampampadvImgDetails=show&ampampampampampampampposts_list_mode=list&ampampampampampampposts_list_mode=list&ampampampampampmfold=o&ampampampampampposts_list_mode=list&ampampampampposts_list_mode=list'),
(18, 1, 'wp_user-settings-time', '1666875129'),
(19, 1, 'wp_dashboard_quick_press_last_post_id', '204'),
(20, 1, 'community-events-location', 'a:1:{s:2:\"ip\";s:12:\"124.91.139.0\";}'),
(21, 1, '_ap_temp_media', '0'),
(23, 1, 'managenav-menuscolumnshidden', 'a:5:{i:0;s:11:\"link-target\";i:1;s:11:\"css-classes\";i:2;s:3:\"xfn\";i:3;s:11:\"description\";i:4;s:15:\"title-attribute\";}'),
(24, 1, 'metaboxhidden_nav-menus', 'a:8:{i:0;s:18:\"add-post-type-docs\";i:1;s:20:\"add-post-type-course\";i:2;s:12:\"add-post_tag\";i:3;s:15:\"add-post_format\";i:4;s:21:\"add-question_category\";i:5;s:19:\"add-course_category\";i:6;s:17:\"add-course_series\";i:7;s:10:\"add-series\";}'),
(25, 1, 'last_login_time', '2022-10-27 20:49:55'),
(26, 1, 'last_login_ip', '124.91.139.240'),
(27, 1, 'nav_menu_recently_edited', '12'),
(28, 1, 'mycoin', '0'),
(29, 1, 'aff_from_id', '0'),
(30, 1, 'vip_type', '3600'),
(31, 1, 'vip_time', '32481835635'),
(32, 1, 'user_avatar_type', 'custom'),
(33, 1, 'custom_avatar', 'https://jikexingkong.com/wp-content/themes/rizhuti-v2/assets/img/avatar.png'),
(34, 1, 'is_fuck', ''),
(35, 1, 'is_fuck_desc', '本站检测到您存在恶意刷单，下载，采集，恶意攻击，评论，赠予封号！'),
(36, 1, 'ap_reputations', '2'),
(37, 2, 'nickname', '匿名用户'),
(38, 2, 'first_name', ''),
(39, 2, 'last_name', ''),
(40, 2, 'description', ''),
(41, 2, 'rich_editing', 'true'),
(42, 2, 'syntax_highlighting', 'true'),
(43, 2, 'comment_shortcuts', 'false'),
(44, 2, 'admin_color', 'fresh'),
(45, 2, 'use_ssl', '0'),
(46, 2, 'show_admin_bar_front', 'true'),
(47, 2, 'locale', ''),
(48, 2, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(49, 2, 'wp_user_level', '0'),
(50, 2, 'ap_reputations', '15'),
(51, 2, 'aff_from_id', '0'),
(52, 2, 'register_ip', '124.91.208.118'),
(53, 2, 'dismissed_wp_pointers', ''),
(54, 2, 'session_tokens', 'a:2:{s:64:\"0cda0e053dfbb9cb576eb8d450f10390954fb8004d956bd0cf59b6cb4bdca751\";a:4:{s:10:\"expiration\";i:1637177658;s:2:\"ip\";s:14:\"124.91.208.118\";s:2:\"ua\";s:114:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.54 Safari/537.36\";s:5:\"login\";i:1635968058;}s:64:\"cd489f372a3213e855b55b9a5c12c2d72b67819a4f87ea3188d0bcb326e1ac59\";a:4:{s:10:\"expiration\";i:1638281072;s:2:\"ip\";s:15:\"111.251.135.208\";s:2:\"ua\";s:137:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36 Edg/95.0.1020.53\";s:5:\"login\";i:1637071472;}}'),
(55, 2, 'last_login_time', '2021-11-16 22:04:32'),
(56, 2, 'last_login_ip', '111.251.135.208'),
(57, 1, 'qq', '406879210'),
(58, 1, 'user_custom_avatar', '/2021/10/130328-890750.png'),
(59, 3, 'nickname', '匿名用户'),
(60, 3, 'first_name', ''),
(61, 3, 'last_name', ''),
(62, 3, 'description', ''),
(63, 3, 'rich_editing', 'true'),
(64, 3, 'syntax_highlighting', 'true'),
(65, 3, 'comment_shortcuts', 'false'),
(66, 3, 'admin_color', 'fresh'),
(67, 3, 'use_ssl', '0'),
(68, 3, 'show_admin_bar_front', 'true'),
(69, 3, 'locale', ''),
(70, 3, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(71, 3, 'wp_user_level', '0'),
(72, 3, 'ap_reputations', '10'),
(73, 3, 'aff_from_id', '0'),
(74, 3, 'register_ip', '221.221.156.35'),
(75, 3, 'dismissed_wp_pointers', ''),
(76, 3, 'session_tokens', 'a:1:{s:64:\"4d4eff5d92c7a3d7e08c03b324d94a415595732e23f7accda3a78995d50f8547\";a:4:{s:10:\"expiration\";i:1636953720;s:2:\"ip\";s:14:\"221.221.156.35\";s:2:\"ua\";s:131:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36 Edg/95.0.1020.40\";s:5:\"login\";i:1635744120;}}'),
(77, 3, 'last_login_time', '2021-11-01 13:22:00'),
(78, 3, 'last_login_ip', '221.221.156.35'),
(79, 1, 'fav_post', 'a:2:{i:0;i:0;i:1;i:100;}'),
(80, 1, 'blog', 'https://pincman.cn'),
(81, 1, 'top_image', NULL),
(83, 1, 'wpjam_weixin_user', 'a:26:{s:6:\"openid\";s:28:\"ogP3AjvWXrW3CS-IlCzZmSeJtoZU\";s:8:\"nickname\";s:7:\"lichnow\";s:9:\"subscribe\";s:1:\"1\";s:14:\"subscribe_time\";s:10:\"1530045419\";s:16:\"unsubscribe_time\";s:1:\"0\";s:3:\"sex\";s:1:\"0\";s:4:\"city\";s:0:\"\";s:7:\"country\";s:0:\"\";s:8:\"province\";s:0:\"\";s:8:\"language\";s:5:\"zh_CN\";s:10:\"headimgurl\";s:134:\"http://thirdwx.qlogo.cn/mmopen/SJovoVJYHXkuic5az4alKU7IOodRQGO8tpvyQXL6Z6q8dDtez9uMXiaq6dZEhjyvB151v442RRjsbOkic5qbFkWId1oNcOsrI6j/132\";s:10:\"tagid_list\";a:0:{}s:9:\"privilege\";s:0:\"\";s:7:\"unionid\";s:0:\"\";s:6:\"remark\";s:0:\"\";s:15:\"subscribe_scene\";s:17:\"ADD_SCENE_QR_CODE\";s:8:\"qr_scene\";s:10:\"2045398301\";s:12:\"qr_scene_str\";s:0:\"\";s:6:\"credit\";s:1:\"0\";s:3:\"exp\";s:1:\"0\";s:17:\"continue_checkins\";s:1:\"0\";s:11:\"last_update\";i:1666874998;s:7:\"user_id\";s:1:\"0\";s:10:\"account_id\";s:1:\"0\";s:5:\"appid\";s:18:\"wx6576d00acf57217b\";s:7:\"blog_id\";i:26;}'),
(84, 4, 'nickname', '匿名用户'),
(85, 4, 'first_name', ''),
(86, 4, 'last_name', ''),
(87, 4, 'description', ''),
(88, 4, 'rich_editing', 'true'),
(89, 4, 'syntax_highlighting', 'true'),
(90, 4, 'comment_shortcuts', 'false'),
(91, 4, 'admin_color', 'fresh'),
(92, 4, 'use_ssl', '0'),
(93, 4, 'show_admin_bar_front', 'true'),
(94, 4, 'locale', ''),
(95, 4, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(96, 4, 'wp_user_level', '0'),
(97, 4, 'ap_reputations', '10'),
(98, 4, 'aff_from_id', '0'),
(99, 4, 'register_ip', '117.176.205.130'),
(100, 4, 'dismissed_wp_pointers', ''),
(101, 4, 'session_tokens', 'a:2:{s:64:\"aac852f41e53d9a3ff0bdc830fb9748c1e67f46c4338e4c9c9e0324b55a2b627\";a:4:{s:10:\"expiration\";i:1665005935;s:2:\"ip\";s:14:\"209.141.49.253\";s:2:\"ua\";s:120:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.143 Safari/537.36\";s:5:\"login\";i:1663796335;}s:64:\"6e3a12c75b1fa8139594b0217f9137a7edff52ef970478befa9b51547367f26f\";a:4:{s:10:\"expiration\";i:1665524021;s:2:\"ip\";s:14:\"209.141.37.194\";s:2:\"ua\";s:109:\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.114 Safari/537.36\";s:5:\"login\";i:1664314421;}}'),
(102, 4, 'last_login_time', '2022-09-28 05:33:41'),
(103, 4, 'last_login_ip', '209.141.37.194'),
(104, 4, 'top_image', NULL),
(105, 5, 'nickname', '匿名用户'),
(106, 5, 'first_name', ''),
(107, 5, 'last_name', ''),
(108, 5, 'description', ''),
(109, 5, 'rich_editing', 'true'),
(110, 5, 'syntax_highlighting', 'true'),
(111, 5, 'comment_shortcuts', 'false'),
(112, 5, 'admin_color', 'fresh'),
(113, 5, 'use_ssl', '0'),
(114, 5, 'show_admin_bar_front', 'true'),
(115, 5, 'locale', ''),
(116, 5, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(117, 5, 'wp_user_level', '0'),
(118, 5, 'ap_reputations', '10'),
(119, 5, 'aff_from_id', '0'),
(120, 5, 'register_ip', '120.238.248.50'),
(121, 5, 'dismissed_wp_pointers', ''),
(122, 5, 'session_tokens', 'a:1:{s:64:\"d085e8eef82aec6295a9d1631d8c14bfc4b3ddcf8b6cf9448391852c8a2f23f5\";a:4:{s:10:\"expiration\";i:1639047070;s:2:\"ip\";s:14:\"120.238.248.50\";s:2:\"ua\";s:108:\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4662.6 Safari/537.36\";s:5:\"login\";i:1637837470;}}'),
(123, 5, 'last_login_time', '2021-11-25 18:51:10'),
(124, 5, 'last_login_ip', '120.238.248.50'),
(125, 5, 'top_image', NULL),
(126, 6, 'nickname', '匿名用户'),
(127, 6, 'first_name', ''),
(128, 6, 'last_name', ''),
(129, 6, 'description', ''),
(130, 6, 'rich_editing', 'true'),
(131, 6, 'syntax_highlighting', 'true'),
(132, 6, 'comment_shortcuts', 'false'),
(133, 6, 'admin_color', 'fresh'),
(134, 6, 'use_ssl', '0'),
(135, 6, 'show_admin_bar_front', 'true'),
(136, 6, 'locale', ''),
(137, 6, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(138, 6, 'wp_user_level', '0'),
(139, 6, 'ap_reputations', '10'),
(140, 6, 'aff_from_id', '0'),
(141, 6, 'register_ip', '175.152.51.109'),
(142, 6, 'dismissed_wp_pointers', ''),
(143, 6, 'session_tokens', 'a:1:{s:64:\"408e80a549990232e188faec8ecee09dd6b282aa43f1b908c441495745216a4f\";a:4:{s:10:\"expiration\";i:1641455271;s:2:\"ip\";s:14:\"175.152.51.109\";s:2:\"ua\";s:115:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36\";s:5:\"login\";i:1640245671;}}'),
(144, 6, 'last_login_time', '2021-12-23 15:47:51'),
(145, 6, 'last_login_ip', '175.152.51.109'),
(146, 7, 'nickname', '匿名用户'),
(147, 7, 'first_name', ''),
(148, 7, 'last_name', ''),
(149, 7, 'description', ''),
(150, 7, 'rich_editing', 'true'),
(151, 7, 'syntax_highlighting', 'true'),
(152, 7, 'comment_shortcuts', 'false'),
(153, 7, 'admin_color', 'fresh'),
(154, 7, 'use_ssl', '0'),
(155, 7, 'show_admin_bar_front', 'true'),
(156, 7, 'locale', ''),
(157, 7, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(158, 7, 'wp_user_level', '0'),
(159, 7, 'ap_reputations', '10'),
(160, 7, 'aff_from_id', '0'),
(161, 7, 'register_ip', '171.107.60.159'),
(162, 7, 'dismissed_wp_pointers', ''),
(163, 7, 'session_tokens', 'a:1:{s:64:\"ca29a7bf93bcd444fb1c0a0d9c1e638d1b3fa6056b2a81215917e939036c3cf5\";a:4:{s:10:\"expiration\";i:1641610651;s:2:\"ip\";s:14:\"171.107.60.159\";s:2:\"ua\";s:120:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36\";s:5:\"login\";i:1640401051;}}'),
(164, 7, 'last_login_time', '2021-12-25 10:57:31'),
(165, 7, 'last_login_ip', '171.107.60.159'),
(166, 8, 'nickname', '匿名用户'),
(167, 8, 'first_name', ''),
(168, 8, 'last_name', ''),
(169, 8, 'description', ''),
(170, 8, 'rich_editing', 'true'),
(171, 8, 'syntax_highlighting', 'true'),
(172, 8, 'comment_shortcuts', 'false'),
(173, 8, 'admin_color', 'fresh'),
(174, 8, 'use_ssl', '0'),
(175, 8, 'show_admin_bar_front', 'true'),
(176, 8, 'locale', ''),
(177, 8, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(178, 8, 'wp_user_level', '0'),
(179, 8, 'ap_reputations', '10'),
(180, 8, 'aff_from_id', '0'),
(181, 8, 'register_ip', '59.109.217.30'),
(182, 8, 'dismissed_wp_pointers', ''),
(183, 8, 'session_tokens', 'a:1:{s:64:\"81a3c73638298754d9cbe86c88ee27d47dde2a0db3b715598893e15516dd4dcd\";a:4:{s:10:\"expiration\";i:1643637417;s:2:\"ip\";s:13:\"59.109.217.30\";s:2:\"ua\";s:114:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\";s:5:\"login\";i:1642427817;}}'),
(184, 8, 'last_login_time', '2022-01-17 21:56:57'),
(185, 8, 'last_login_ip', '59.109.217.30'),
(186, 9, 'nickname', '匿名用户'),
(187, 9, 'first_name', ''),
(188, 9, 'last_name', ''),
(189, 9, 'description', ''),
(190, 9, 'rich_editing', 'true'),
(191, 9, 'syntax_highlighting', 'true'),
(192, 9, 'comment_shortcuts', 'false'),
(193, 9, 'admin_color', 'fresh'),
(194, 9, 'use_ssl', '0'),
(195, 9, 'show_admin_bar_front', 'true'),
(196, 9, 'locale', ''),
(197, 9, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(198, 9, 'wp_user_level', '0'),
(199, 9, 'ap_reputations', '10'),
(200, 9, 'aff_from_id', '0'),
(201, 9, 'register_ip', '39.182.49.94'),
(202, 9, 'dismissed_wp_pointers', ''),
(203, 9, 'session_tokens', 'a:1:{s:64:\"85e50f0e18ea2c43a64dd5d40f7442b7b5955727b22803751cfc482e02c6439e\";a:4:{s:10:\"expiration\";i:1644069300;s:2:\"ip\";s:12:\"39.182.49.94\";s:2:\"ua\";s:120:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\";s:5:\"login\";i:1642859700;}}'),
(204, 9, 'last_login_time', '2022-01-22 21:55:00'),
(205, 9, 'last_login_ip', '39.182.49.94'),
(206, 10, 'nickname', '匿名用户'),
(207, 10, 'first_name', ''),
(208, 10, 'last_name', ''),
(209, 10, 'description', ''),
(210, 10, 'rich_editing', 'true'),
(211, 10, 'syntax_highlighting', 'true'),
(212, 10, 'comment_shortcuts', 'false'),
(213, 10, 'admin_color', 'fresh'),
(214, 10, 'use_ssl', '0'),
(215, 10, 'show_admin_bar_front', 'true'),
(216, 10, 'locale', ''),
(217, 10, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(218, 10, 'wp_user_level', '0'),
(219, 10, 'ap_reputations', '10'),
(220, 10, 'aff_from_id', '0'),
(221, 10, 'register_ip', '60.169.230.79'),
(222, 10, 'dismissed_wp_pointers', ''),
(223, 10, 'session_tokens', 'a:1:{s:64:\"97cf88f62cfa0a9e3f4b8665cac4c4392d36a5995f413a8f6a66fd9f72fa2d90\";a:4:{s:10:\"expiration\";i:1644139530;s:2:\"ip\";s:13:\"60.169.230.79\";s:2:\"ua\";s:114:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.99 Safari/537.36\";s:5:\"login\";i:1642929930;}}'),
(224, 10, 'last_login_time', '2022-01-23 17:25:30'),
(225, 10, 'last_login_ip', '60.169.230.79'),
(226, 11, 'nickname', '匿名用户'),
(227, 11, 'first_name', ''),
(228, 11, 'last_name', ''),
(229, 11, 'description', ''),
(230, 11, 'rich_editing', 'true'),
(231, 11, 'syntax_highlighting', 'true'),
(232, 11, 'comment_shortcuts', 'false'),
(233, 11, 'admin_color', 'fresh'),
(234, 11, 'use_ssl', '0'),
(235, 11, 'show_admin_bar_front', 'true'),
(236, 11, 'locale', ''),
(237, 11, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(238, 11, 'wp_user_level', '0'),
(239, 11, 'ap_reputations', '10'),
(240, 11, 'aff_from_id', '0'),
(241, 11, 'register_ip', '49.7.47.134'),
(242, 11, 'dismissed_wp_pointers', ''),
(243, 11, 'session_tokens', 'a:1:{s:64:\"38492b2b8a54ac0237bfdd717174ec23a3144daead793f2b89873043a5334c9c\";a:4:{s:10:\"expiration\";i:1644638454;s:2:\"ip\";s:11:\"49.7.47.134\";s:2:\"ua\";s:120:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36\";s:5:\"login\";i:1643428854;}}'),
(244, 11, 'last_login_time', '2022-01-29 12:00:54'),
(245, 11, 'last_login_ip', '49.7.47.134'),
(246, 12, 'nickname', 'Mr.Lin'),
(247, 12, 'first_name', ''),
(248, 12, 'last_name', ''),
(249, 12, 'description', ''),
(250, 12, 'rich_editing', 'true'),
(251, 12, 'syntax_highlighting', 'true'),
(252, 12, 'comment_shortcuts', 'false'),
(253, 12, 'admin_color', 'fresh'),
(254, 12, 'use_ssl', '0'),
(255, 12, 'show_admin_bar_front', 'true'),
(256, 12, 'locale', ''),
(257, 12, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(258, 12, 'wp_user_level', '0'),
(259, 12, 'ap_reputations', '10'),
(260, 12, 'aff_from_id', '0'),
(261, 12, 'register_ip', '112.14.95.134'),
(262, 12, 'dismissed_wp_pointers', ''),
(263, 12, 'session_tokens', 'a:1:{s:64:\"3c46979c08021c9dd6764640e8e510bdeab42354a127311ac34990c49c30143a\";a:4:{s:10:\"expiration\";i:1645702959;s:2:\"ip\";s:13:\"112.14.95.134\";s:2:\"ua\";s:131:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.80 Safari/537.36 Edg/98.0.1108.43\";s:5:\"login\";i:1644493359;}}'),
(264, 12, 'last_login_time', '2022-02-10 19:42:39'),
(265, 12, 'last_login_ip', '112.14.95.134'),
(266, 12, 'top_image', NULL),
(267, 12, 'user_custom_avatar', '/2022/02/120308-606142.jpg'),
(268, 12, 'user_avatar_type', 'custom'),
(269, 13, 'nickname', '匿名用户'),
(270, 13, 'first_name', ''),
(271, 13, 'last_name', ''),
(272, 13, 'description', ''),
(273, 13, 'rich_editing', 'true'),
(274, 13, 'syntax_highlighting', 'true'),
(275, 13, 'comment_shortcuts', 'false'),
(276, 13, 'admin_color', 'fresh'),
(277, 13, 'use_ssl', '0'),
(278, 13, 'show_admin_bar_front', 'true'),
(279, 13, 'locale', ''),
(280, 13, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(281, 13, 'wp_user_level', '0'),
(282, 13, 'ap_reputations', '10'),
(283, 13, 'aff_from_id', '0'),
(284, 13, 'register_ip', '103.97.175.50'),
(285, 13, 'dismissed_wp_pointers', ''),
(286, 13, 'session_tokens', 'a:1:{s:64:\"399a3dd567c42d5b8bcfeaa90b054c1dade7cd1940bd01679ac8fab0dde69f9c\";a:4:{s:10:\"expiration\";i:1645974824;s:2:\"ip\";s:13:\"103.97.175.50\";s:2:\"ua\";s:78:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:97.0) Gecko/20100101 Firefox/97.0\";s:5:\"login\";i:1644765224;}}'),
(287, 13, 'last_login_time', '2022-02-13 23:13:44'),
(288, 13, 'last_login_ip', '103.97.175.50'),
(289, 14, 'nickname', '雪落香杉树'),
(290, 14, 'first_name', ''),
(291, 14, 'last_name', ''),
(292, 14, 'description', ''),
(293, 14, 'rich_editing', 'true'),
(294, 14, 'syntax_highlighting', 'true'),
(295, 14, 'comment_shortcuts', 'false'),
(296, 14, 'admin_color', 'fresh'),
(297, 14, 'use_ssl', '0'),
(298, 14, 'show_admin_bar_front', 'true'),
(299, 14, 'locale', ''),
(300, 14, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(301, 14, 'wp_user_level', '0'),
(302, 14, 'ap_reputations', '10'),
(303, 14, 'aff_from_id', '0'),
(304, 14, 'register_ip', '115.236.119.140'),
(305, 14, 'dismissed_wp_pointers', ''),
(306, 14, 'session_tokens', 'a:2:{s:64:\"42ed58468375856f082b6a6edf5bb8cc8fec19a5b5bdfcad83ca0d67fec91c0b\";a:4:{s:10:\"expiration\";i:1648437027;s:2:\"ip\";s:15:\"115.236.119.140\";s:2:\"ua\";s:114:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36\";s:5:\"login\";i:1647227427;}s:64:\"2549eac454dae157a8961d985110e2dfd3c68e9c6eaeef2d848695df0f8689a1\";a:4:{s:10:\"expiration\";i:1648437027;s:2:\"ip\";s:15:\"115.236.119.140\";s:2:\"ua\";s:114:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36\";s:5:\"login\";i:1647227427;}}'),
(307, 14, 'last_login_time', '2022-03-14 11:10:27'),
(308, 14, 'last_login_ip', '115.236.119.140'),
(309, 14, 'top_image', NULL),
(310, 14, 'user_custom_avatar', '/2022/02/052435-511606.png'),
(311, 14, 'user_avatar_type', 'custom'),
(312, 15, 'nickname', '匿名用户'),
(313, 15, 'first_name', ''),
(314, 15, 'last_name', ''),
(315, 15, 'description', ''),
(316, 15, 'rich_editing', 'true'),
(317, 15, 'syntax_highlighting', 'true'),
(318, 15, 'comment_shortcuts', 'false'),
(319, 15, 'admin_color', 'fresh'),
(320, 15, 'use_ssl', '0'),
(321, 15, 'show_admin_bar_front', 'true'),
(322, 15, 'locale', ''),
(323, 15, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(324, 15, 'wp_user_level', '0'),
(325, 15, 'ap_reputations', '10'),
(326, 15, 'aff_from_id', '0'),
(327, 15, 'register_ip', '27.38.192.103'),
(328, 15, 'dismissed_wp_pointers', ''),
(329, 15, 'session_tokens', 'a:1:{s:64:\"75ad4e738aeae33dd6ae67da03853b83e10e49789a006aa1d222d81901410f09\";a:4:{s:10:\"expiration\";i:1648802708;s:2:\"ip\";s:13:\"27.38.192.103\";s:2:\"ua\";s:120:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36\";s:5:\"login\";i:1647593108;}}'),
(330, 15, 'last_login_time', '2022-03-18 16:45:08'),
(331, 15, 'last_login_ip', '27.38.192.103'),
(332, 16, 'nickname', '匿名用户'),
(333, 16, 'first_name', ''),
(334, 16, 'last_name', ''),
(335, 16, 'description', ''),
(336, 16, 'rich_editing', 'true'),
(337, 16, 'syntax_highlighting', 'true'),
(338, 16, 'comment_shortcuts', 'false'),
(339, 16, 'admin_color', 'fresh'),
(340, 16, 'use_ssl', '0'),
(341, 16, 'show_admin_bar_front', 'true'),
(342, 16, 'locale', ''),
(343, 16, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(344, 16, 'wp_user_level', '0'),
(345, 16, 'ap_reputations', '10'),
(346, 16, 'aff_from_id', '0'),
(347, 16, 'register_ip', '208.99.48.214'),
(348, 16, 'dismissed_wp_pointers', ''),
(349, 16, 'session_tokens', 'a:1:{s:64:\"aa60b22c261d8868d0004c7d1ed75afb01be888f8d987c273b32b5fa90b5ed5d\";a:4:{s:10:\"expiration\";i:1649518417;s:2:\"ip\";s:13:\"208.99.48.214\";s:2:\"ua\";s:120:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36\";s:5:\"login\";i:1648308817;}}'),
(350, 16, 'last_login_time', '2022-03-26 23:33:37'),
(351, 16, 'last_login_ip', '208.99.48.214'),
(352, 17, 'nickname', '匿名用户'),
(353, 17, 'first_name', ''),
(354, 17, 'last_name', ''),
(355, 17, 'description', ''),
(356, 17, 'rich_editing', 'true'),
(357, 17, 'syntax_highlighting', 'true'),
(358, 17, 'comment_shortcuts', 'false'),
(359, 17, 'admin_color', 'fresh'),
(360, 17, 'use_ssl', '0'),
(361, 17, 'show_admin_bar_front', 'true'),
(362, 17, 'locale', ''),
(363, 17, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(364, 17, 'wp_user_level', '0'),
(365, 17, 'ap_reputations', '10'),
(366, 17, 'aff_from_id', '0'),
(367, 17, 'register_ip', '94.177.118.59'),
(368, 17, 'dismissed_wp_pointers', ''),
(369, 17, 'session_tokens', 'a:1:{s:64:\"60d8dbffd76bc3cd9f91edd662babfe671f8ec96c7679ff2190c5f759877bc29\";a:4:{s:10:\"expiration\";i:1649865557;s:2:\"ip\";s:13:\"94.177.118.59\";s:2:\"ua\";s:120:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36\";s:5:\"login\";i:1648655957;}}'),
(370, 17, 'last_login_time', '2022-03-30 23:59:17'),
(371, 17, 'last_login_ip', '94.177.118.59'),
(372, 18, 'nickname', '匿名用户'),
(373, 18, 'first_name', ''),
(374, 18, 'last_name', ''),
(375, 18, 'description', ''),
(376, 18, 'rich_editing', 'true'),
(377, 18, 'syntax_highlighting', 'true'),
(378, 18, 'comment_shortcuts', 'false'),
(379, 18, 'admin_color', 'fresh'),
(380, 18, 'use_ssl', '0'),
(381, 18, 'show_admin_bar_front', 'true'),
(382, 18, 'locale', ''),
(383, 18, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(384, 18, 'wp_user_level', '0'),
(385, 18, 'ap_reputations', '10'),
(386, 18, 'aff_from_id', '0'),
(387, 18, 'register_ip', '117.152.79.45'),
(388, 18, 'dismissed_wp_pointers', ''),
(389, 18, 'session_tokens', 'a:1:{s:64:\"654b2f3ee3f5bcc83d8b8e7ff1c7355ba3b2704483f70eeb86e434528b18d852\";a:4:{s:10:\"expiration\";i:1649866444;s:2:\"ip\";s:13:\"117.152.79.45\";s:2:\"ua\";s:120:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36\";s:5:\"login\";i:1648656844;}}'),
(390, 18, 'last_login_time', '2022-03-31 00:14:04'),
(391, 18, 'last_login_ip', '117.152.79.45'),
(392, 19, 'nickname', '匿名用户'),
(393, 19, 'first_name', ''),
(394, 19, 'last_name', ''),
(395, 19, 'description', ''),
(396, 19, 'rich_editing', 'true'),
(397, 19, 'syntax_highlighting', 'true'),
(398, 19, 'comment_shortcuts', 'false'),
(399, 19, 'admin_color', 'fresh'),
(400, 19, 'use_ssl', '0'),
(401, 19, 'show_admin_bar_front', 'true'),
(402, 19, 'locale', ''),
(403, 19, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(404, 19, 'wp_user_level', '0'),
(405, 19, 'ap_reputations', '10'),
(406, 19, 'aff_from_id', '0'),
(407, 19, 'register_ip', '111.201.130.192'),
(408, 19, 'dismissed_wp_pointers', ''),
(409, 19, 'session_tokens', 'a:1:{s:64:\"5a7d3d0fb2e95b48ad9b3a28a210be0f4680166c746567713061f484fa64b85c\";a:4:{s:10:\"expiration\";i:1652516960;s:2:\"ip\";s:15:\"111.201.130.192\";s:2:\"ua\";s:115:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.88 Safari/537.36\";s:5:\"login\";i:1651307360;}}'),
(410, 19, 'last_login_time', '2022-04-30 16:29:20'),
(411, 19, 'last_login_ip', '111.201.130.192'),
(412, 20, 'nickname', '匿名用户'),
(413, 20, 'first_name', ''),
(414, 20, 'last_name', ''),
(415, 20, 'description', ''),
(416, 20, 'rich_editing', 'true'),
(417, 20, 'syntax_highlighting', 'true'),
(418, 20, 'comment_shortcuts', 'false'),
(419, 20, 'admin_color', 'fresh'),
(420, 20, 'use_ssl', '0'),
(421, 20, 'show_admin_bar_front', 'true'),
(422, 20, 'locale', ''),
(423, 20, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(424, 20, 'wp_user_level', '0'),
(425, 20, 'ap_reputations', '10'),
(426, 20, 'aff_from_id', '0'),
(427, 20, 'register_ip', '220.197.183.249'),
(428, 20, 'dismissed_wp_pointers', ''),
(429, 20, 'session_tokens', 'a:1:{s:64:\"aff8f7b786e8dca426ccaacae67c23bcd3f847a615e9bdc190868a2d9dbc7080\";a:4:{s:10:\"expiration\";i:1653133927;s:2:\"ip\";s:15:\"220.197.183.249\";s:2:\"ua\";s:110:\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36\";s:5:\"login\";i:1651924327;}}'),
(430, 20, 'last_login_time', '2022-05-07 19:52:07'),
(431, 20, 'last_login_ip', '220.197.183.249'),
(432, 20, 'top_image', NULL),
(433, 21, 'nickname', '匿名用户'),
(434, 21, 'first_name', ''),
(435, 21, 'last_name', ''),
(436, 21, 'description', ''),
(437, 21, 'rich_editing', 'true'),
(438, 21, 'syntax_highlighting', 'true'),
(439, 21, 'comment_shortcuts', 'false'),
(440, 21, 'admin_color', 'fresh'),
(441, 21, 'use_ssl', '0'),
(442, 21, 'show_admin_bar_front', 'true'),
(443, 21, 'locale', ''),
(444, 21, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(445, 21, 'wp_user_level', '0'),
(446, 21, 'ap_reputations', '10'),
(447, 21, 'aff_from_id', '0'),
(448, 21, 'register_ip', '183.226.73.227'),
(449, 21, 'dismissed_wp_pointers', ''),
(450, 21, 'session_tokens', 'a:1:{s:64:\"bd0a2d99c703c31ff2bb2048eae2fa1b7f99fc2522f3038d19bde88c2d76ff0f\";a:4:{s:10:\"expiration\";i:1653209171;s:2:\"ip\";s:14:\"183.226.73.227\";s:2:\"ua\";s:121:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36\";s:5:\"login\";i:1651999571;}}'),
(451, 21, 'last_login_time', '2022-05-08 16:46:11'),
(452, 21, 'last_login_ip', '183.226.73.227'),
(454, 22, 'nickname', '匿名用户'),
(455, 22, 'first_name', ''),
(456, 22, 'last_name', ''),
(457, 22, 'description', ''),
(458, 22, 'rich_editing', 'true'),
(459, 22, 'syntax_highlighting', 'true'),
(460, 22, 'comment_shortcuts', 'false'),
(461, 22, 'admin_color', 'fresh'),
(462, 22, 'use_ssl', '0'),
(463, 22, 'show_admin_bar_front', 'true'),
(464, 22, 'locale', ''),
(465, 22, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(466, 22, 'wp_user_level', '0'),
(467, 22, 'ap_reputations', '10'),
(468, 22, 'aff_from_id', '0'),
(469, 22, 'register_ip', '183.230.102.103'),
(470, 22, 'dismissed_wp_pointers', ''),
(471, 22, 'session_tokens', 'a:2:{s:64:\"37165b5e849c6d4f750c4736d492c7a836b693fb9922b130cebbffb2e00ab308\";a:4:{s:10:\"expiration\";i:1656402409;s:2:\"ip\";s:15:\"183.230.102.103\";s:2:\"ua\";s:115:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36\";s:5:\"login\";i:1655192809;}s:64:\"9f26e8d93bd0e29290d5d94e231b339de82d7aeeca437055286547e517dd98b7\";a:4:{s:10:\"expiration\";i:1656402409;s:2:\"ip\";s:15:\"183.230.102.103\";s:2:\"ua\";s:115:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36\";s:5:\"login\";i:1655192809;}}'),
(472, 22, 'last_login_time', '2022-06-14 15:46:49'),
(473, 22, 'last_login_ip', '183.230.102.103'),
(474, 22, 'fav_post', 'a:2:{i:0;i:0;i:1;i:102;}'),
(475, 23, 'nickname', '匿名用户'),
(476, 23, 'first_name', ''),
(477, 23, 'last_name', ''),
(478, 23, 'description', ''),
(479, 23, 'rich_editing', 'true'),
(480, 23, 'syntax_highlighting', 'true'),
(481, 23, 'comment_shortcuts', 'false'),
(482, 23, 'admin_color', 'fresh'),
(483, 23, 'use_ssl', '0'),
(484, 23, 'show_admin_bar_front', 'true'),
(485, 23, 'locale', ''),
(486, 23, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(487, 23, 'wp_user_level', '0'),
(488, 23, 'ap_reputations', '10'),
(489, 23, 'aff_from_id', '0'),
(490, 23, 'register_ip', '82.121.83.24'),
(491, 23, 'dismissed_wp_pointers', ''),
(492, 23, 'session_tokens', 'a:1:{s:64:\"4535782bacc7fe8427be12e575a60a36cf759ef60b71977b769b76379e86ac59\";a:4:{s:10:\"expiration\";i:1656793466;s:2:\"ip\";s:12:\"82.121.83.24\";s:2:\"ua\";s:134:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.124 Safari/537.36 Edg/102.0.1245.41\";s:5:\"login\";i:1655583866;}}'),
(493, 23, 'last_login_time', '2022-06-19 04:24:26'),
(494, 23, 'last_login_ip', '82.121.83.24'),
(495, 1, 'meta-box-order_dashboard', 'a:4:{s:6:\"normal\";s:41:\"dashboard_site_health,dashboard_right_now\";s:4:\"side\";s:21:\"dashboard_quick_press\";s:7:\"column3\";s:12:\"wpjam_update\";s:7:\"column4\";s:18:\"dashboard_activity\";}'),
(496, 24, 'nickname', '匿名用户'),
(497, 24, 'first_name', ''),
(498, 24, 'last_name', ''),
(499, 24, 'description', ''),
(500, 24, 'rich_editing', 'true'),
(501, 24, 'syntax_highlighting', 'true'),
(502, 24, 'comment_shortcuts', 'false'),
(503, 24, 'admin_color', 'fresh'),
(504, 24, 'use_ssl', '0'),
(505, 24, 'show_admin_bar_front', 'true'),
(506, 24, 'locale', ''),
(507, 24, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(508, 24, 'wp_user_level', '0'),
(509, 24, 'ap_reputations', '10'),
(510, 24, 'aff_from_id', '0'),
(511, 24, 'register_ip', '113.110.222.59'),
(512, 24, 'dismissed_wp_pointers', ''),
(513, 24, 'session_tokens', 'a:1:{s:64:\"07603d06aa839fc4b7620fb36d5c31fa0933147cd3708e8e9ae78e147caf4ec1\";a:4:{s:10:\"expiration\";i:1657894841;s:2:\"ip\";s:14:\"113.110.222.59\";s:2:\"ua\";s:121:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.61 Safari/537.36\";s:5:\"login\";i:1656685241;}}'),
(514, 24, 'last_login_time', '2022-07-01 22:20:41'),
(515, 24, 'last_login_ip', '113.110.222.59'),
(516, 25, 'nickname', '匿名用户'),
(517, 25, 'first_name', ''),
(518, 25, 'last_name', ''),
(519, 25, 'description', ''),
(520, 25, 'rich_editing', 'true'),
(521, 25, 'syntax_highlighting', 'true'),
(522, 25, 'comment_shortcuts', 'false'),
(523, 25, 'admin_color', 'fresh'),
(524, 25, 'use_ssl', '0'),
(525, 25, 'show_admin_bar_front', 'true'),
(526, 25, 'locale', ''),
(527, 25, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(528, 25, 'wp_user_level', '0'),
(529, 25, 'ap_reputations', '10'),
(530, 25, 'aff_from_id', '0'),
(531, 25, 'register_ip', '220.246.240.125'),
(532, 25, 'dismissed_wp_pointers', ''),
(533, 25, 'session_tokens', 'a:1:{s:64:\"1edacbc628b59b76edc4dd15e827076c4c572811be5284b886b7dfd49422129c\";a:4:{s:10:\"expiration\";i:1658166756;s:2:\"ip\";s:15:\"220.246.240.125\";s:2:\"ua\";s:78:\"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:101.0) Gecko/20100101 Firefox/101.0\";s:5:\"login\";i:1656957156;}}'),
(534, 25, 'last_login_time', '2022-07-05 01:52:36'),
(535, 25, 'last_login_ip', '220.246.240.125'),
(536, 26, 'nickname', '匿名用户'),
(537, 26, 'first_name', ''),
(538, 26, 'last_name', ''),
(539, 26, 'description', ''),
(540, 26, 'rich_editing', 'true'),
(541, 26, 'syntax_highlighting', 'true'),
(542, 26, 'comment_shortcuts', 'false'),
(543, 26, 'admin_color', 'fresh'),
(544, 26, 'use_ssl', '0'),
(545, 26, 'show_admin_bar_front', 'true'),
(546, 26, 'locale', ''),
(547, 26, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(548, 26, 'wp_user_level', '0'),
(549, 26, 'ap_reputations', '10'),
(550, 26, 'aff_from_id', '0'),
(551, 26, 'register_ip', '117.61.242.80'),
(552, 26, 'dismissed_wp_pointers', ''),
(553, 26, 'session_tokens', 'a:1:{s:64:\"9da6376337f712ec5dc321be23e2ab8a74201d19203ef829af210d979a497fc6\";a:4:{s:10:\"expiration\";i:1658933858;s:2:\"ip\";s:13:\"117.61.242.80\";s:2:\"ua\";s:111:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36\";s:5:\"login\";i:1657724258;}}'),
(554, 26, 'last_login_time', '2022-07-13 22:57:38'),
(555, 26, 'last_login_ip', '117.61.242.80'),
(556, 27, 'nickname', 'GeekMai'),
(557, 27, 'first_name', ''),
(558, 27, 'last_name', ''),
(559, 27, 'description', ''),
(560, 27, 'rich_editing', 'true'),
(561, 27, 'syntax_highlighting', 'true'),
(562, 27, 'comment_shortcuts', 'false'),
(563, 27, 'admin_color', 'fresh'),
(564, 27, 'use_ssl', '0'),
(565, 27, 'show_admin_bar_front', 'true'),
(566, 27, 'locale', ''),
(567, 27, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(568, 27, 'wp_user_level', '0'),
(569, 27, 'ap_reputations', '10'),
(570, 27, 'aff_from_id', '0'),
(571, 27, 'register_ip', '122.139.233.72'),
(572, 27, 'dismissed_wp_pointers', ''),
(573, 27, 'session_tokens', 'a:1:{s:64:\"56bdb7d7c913db1582ab43253507406f62129f85373a195562e6c3192bb92e23\";a:4:{s:10:\"expiration\";i:1661071245;s:2:\"ip\";s:14:\"122.139.233.72\";s:2:\"ua\";s:139:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/102.0.1245.39\";s:5:\"login\";i:1659861645;}}'),
(574, 27, 'last_login_time', '2022-08-07 16:40:45'),
(575, 27, 'last_login_ip', '122.139.233.72'),
(576, 27, 'top_image', NULL),
(577, 1, 'session_tokens', 'a:3:{s:64:\"471ac1c88bb4ac6133eaad9a94568e1e55a37b00e1efece25c2cbb9d4c8a1333\";a:4:{s:10:\"expiration\";i:1668084595;s:2:\"ip\";s:14:\"124.91.139.240\";s:2:\"ua\";s:111:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36\";s:5:\"login\";i:1666874995;}s:64:\"1956fbdd9163f0a2d8b8aa79692d824f37dac70cf1ba3aa3f6d8355e75d9a907\";a:4:{s:10:\"expiration\";i:1668084595;s:2:\"ip\";s:14:\"124.91.139.240\";s:2:\"ua\";s:111:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36\";s:5:\"login\";i:1666874995;}s:64:\"dd04a2ee865182b704dc4306bab98d9d866af4ecf4b68fc7474bae6e07f4e4cd\";a:4:{s:10:\"expiration\";i:1668084733;s:2:\"ip\";s:14:\"124.91.139.240\";s:2:\"ua\";s:111:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36\";s:5:\"login\";i:1666875133;}}'),
(578, 1, 'dismissed_wp_pointers', 'editormd'),
(579, 28, 'nickname', '匿名用户'),
(580, 28, 'first_name', ''),
(581, 28, 'last_name', ''),
(582, 28, 'description', ''),
(583, 28, 'rich_editing', 'true'),
(584, 28, 'syntax_highlighting', 'true'),
(585, 28, 'comment_shortcuts', 'false'),
(586, 28, 'admin_color', 'fresh'),
(587, 28, 'use_ssl', '0'),
(588, 28, 'show_admin_bar_front', 'true'),
(589, 28, 'locale', ''),
(590, 28, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(591, 28, 'wp_user_level', '0'),
(592, 28, 'ap_reputations', '10'),
(593, 28, 'aff_from_id', '0'),
(594, 28, 'register_ip', '117.22.184.98'),
(595, 28, 'dismissed_wp_pointers', ''),
(596, 28, 'session_tokens', 'a:1:{s:64:\"5f878d601eb49163784f187a000aa871b37b7e7c4a1354cbb15337ce4702ae1e\";a:4:{s:10:\"expiration\";i:1663315221;s:2:\"ip\";s:13:\"117.22.184.98\";s:2:\"ua\";s:140:\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.102 Safari/537.36 Edg/104.0.1293.70\";s:5:\"login\";i:1662105621;}}'),
(597, 28, 'last_login_time', '2022-09-02 16:00:21'),
(598, 28, 'last_login_ip', '117.22.184.98'),
(599, 29, 'nickname', '匿名用户'),
(600, 29, 'first_name', ''),
(601, 29, 'last_name', ''),
(602, 29, 'description', ''),
(603, 29, 'rich_editing', 'true'),
(604, 29, 'syntax_highlighting', 'true'),
(605, 29, 'comment_shortcuts', 'false'),
(606, 29, 'admin_color', 'fresh'),
(607, 29, 'use_ssl', '0'),
(608, 29, 'show_admin_bar_front', 'true'),
(609, 29, 'locale', ''),
(610, 29, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(611, 29, 'wp_user_level', '0'),
(612, 29, 'ap_reputations', '10'),
(613, 29, 'aff_from_id', '0'),
(614, 29, 'register_ip', '36.157.153.209'),
(615, 29, 'dismissed_wp_pointers', ''),
(616, 29, 'session_tokens', 'a:1:{s:64:\"a1004fab345760457bb76db0c31341717004dd9f0ccf97690f61533f6b62f517\";a:4:{s:10:\"expiration\";i:1664939186;s:2:\"ip\";s:14:\"36.157.153.209\";s:2:\"ua\";s:111:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36\";s:5:\"login\";i:1663729586;}}'),
(617, 29, 'last_login_time', '2022-09-21 11:06:26'),
(618, 29, 'last_login_ip', '36.157.153.209'),
(619, 30, 'nickname', '匿名用户'),
(620, 30, 'first_name', ''),
(621, 30, 'last_name', ''),
(622, 30, 'description', ''),
(623, 30, 'rich_editing', 'true'),
(624, 30, 'syntax_highlighting', 'true'),
(625, 30, 'comment_shortcuts', 'false'),
(626, 30, 'admin_color', 'fresh'),
(627, 30, 'use_ssl', '0'),
(628, 30, 'show_admin_bar_front', 'true'),
(629, 30, 'locale', ''),
(630, 30, 'wp_capabilities', 'a:1:{s:10:\"subscriber\";b:1;}'),
(631, 30, 'wp_user_level', '0'),
(632, 30, 'ap_reputations', '10'),
(633, 30, 'aff_from_id', '0'),
(634, 30, 'register_ip', '58.240.244.130'),
(635, 30, 'dismissed_wp_pointers', ''),
(636, 30, 'session_tokens', 'a:1:{s:64:\"7dda23fd1b33775ab6e0f83376f14ca8bbbbd55311a1fdb68ad7a44d0e73f264\";a:4:{s:10:\"expiration\";i:1665630774;s:2:\"ip\";s:14:\"58.240.244.130\";s:2:\"ua\";s:111:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\";s:5:\"login\";i:1664421174;}}'),
(637, 30, 'last_login_time', '2022-09-29 11:12:54'),
(638, 30, 'last_login_ip', '58.240.244.130');

-- --------------------------------------------------------

--
-- 表的结构 `wp_users`
--

CREATE TABLE `wp_users` (
  `ID` bigint(20) UNSIGNED NOT NULL,
  `user_login` varchar(60) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_pass` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_nicename` varchar(50) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_email` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_url` varchar(100) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(255) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT 0,
  `display_name` varchar(250) COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT ''
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- 转存表中的数据 `wp_users`
--

INSERT INTO `wp_users` (`ID`, `user_login`, `user_pass`, `user_nicename`, `user_email`, `user_url`, `user_registered`, `user_activation_key`, `user_status`, `display_name`) VALUES
(1, 'pincman', '$P$BkmIEWgmIXzUnRnyC1w2Vut10rtvXb.', 'pincman', 'support@jikexingkong.com', 'https://jikexingkong.com', '2021-10-28 11:11:33', '', 0, 'pincman'),
(2, 'mail_16202445', '$P$BUi.LfpC8C32K2Ply203.DpTTEGl86/', 'mail_16202445', 'lichnow@qq.com', '', '2021-10-31 05:06:59', '', 0, '匿名用户'),
(3, 'mail_54177474', '$P$BlI9FGTL.kaXapNY01l6cXwhjVdYtc1', 'mail_54177474', '2454951249@qq.com', '', '2021-11-01 05:22:00', '', 0, '匿名用户'),
(4, 'mail_76266771', '$P$BsarJuFZ8D7.0woiPysLxBiPNfDc9Y.', 'mail_76266771', '2120084903@qq.com', '', '2021-11-23 14:35:02', '', 0, '匿名用户'),
(5, 'mail_42793369', '$P$B/Q1Z/2pSPRh2REVsdLn.T3hZbNymr/', 'mail_42793369', '1647231392@qq.com', '', '2021-11-25 10:51:10', '', 0, '匿名用户'),
(6, 'mail_56486680', '$P$BhtX.KkHc2KzJEeDFwiSdLsQxvgqJg1', 'mail_56486680', '1843306093@qq.com', '', '2021-12-23 07:47:50', '', 0, '匿名用户'),
(7, 'mail_80689721', '$P$BtJsNzXAnCYrUBb3xk7lEz29GEZAro0', 'mail_80689721', 'courek@163.com', '', '2021-12-25 02:57:31', '', 0, '匿名用户'),
(8, 'mail_69247971', '$P$Bi0Ql6gEKB78rSJKiY2qyIjwmh/l7g1', 'mail_69247971', 'pai_an@eyou.com', '', '2022-01-17 13:56:56', '', 0, '匿名用户'),
(9, 'mail_71443143', '$P$BxrZTeM/byAdq61aS28iDjAu7YBbHB0', 'mail_71443143', '1218229723@qq.com', '', '2022-01-22 13:55:00', '', 0, '匿名用户'),
(10, 'mail_37557684', '$P$Bx.uuaLYLEWg/6865UunNJCt3rHdJx0', 'mail_37557684', 'pwkzyy@163.com', '', '2022-01-23 09:25:30', '', 0, '匿名用户'),
(11, 'mail_63683732', '$P$BwYsyzGxNyX51Y0uGZKzQqA/ObZmOQ0', 'mail_63683732', '879969355@qq.com', '', '2022-01-29 04:00:54', '', 0, '匿名用户'),
(12, 'mail_66235241', '$P$B56baxM2Wyuc0a7XJqEDGuWtATbBt21', 'mail_66235241', '1979044994@qq.com', '', '2022-02-10 11:42:38', '', 0, 'Mr.Lin'),
(13, 'mail_26379743', '$P$B5sVF8D4gteOPcu1qrkCxq1vxleZGd1', 'mail_26379743', '382967255@qq.com', '', '2022-02-13 15:13:44', '', 0, '匿名用户'),
(14, 'mail_70261035', '$P$BNtlXHzbwhZ57iU947GLXncbA/yFzd1', 'mail_70261035', '843349466@qq.com', '', '2022-02-15 05:24:00', '', 0, '雪落香杉树'),
(15, 'mail_60393409', '$P$BtXsQl9mhzR6QxAny7QtmnUgmP4TnM1', 'mail_60393409', '330729121@qq.com', '', '2022-03-18 08:45:08', '', 0, '匿名用户'),
(16, 'mail_89566875', '$P$Bbl5ecEAtXFgvesDDHPMelAN8dBzKr/', 'mail_89566875', '13141130347@qq.com', '', '2022-03-26 15:33:37', '', 0, '匿名用户'),
(17, 'mail_88269057', '$P$BJGW7QIK5xwW70faFMB1ONFXLn6QRA0', 'mail_88269057', '448532169@qq.com', '', '2022-03-30 15:59:17', '', 0, '匿名用户'),
(18, 'mail_16164667', '$P$BwEgt1S0tX3YP/gRLAkqLkfxn6aW2S1', 'mail_16164667', '123@qq.com', '', '2022-03-30 16:14:04', '', 0, '匿名用户'),
(19, 'mail_95401641', '$P$BCzso6npO/D9pptNafYCeTJ5x4F8.5/', 'mail_95401641', 'parrhomvettalij@gmail.com', '', '2022-04-30 08:29:20', '', 0, '匿名用户'),
(20, 'mail_77899765', '$P$BCdftQZW1FLmhC7t0aXSYq3khMIPVa.', 'mail_77899765', '995496580@qq.com', '', '2022-05-07 11:52:07', '', 0, '匿名用户'),
(21, 'mail_61577252', '$P$BOpdgOlw46U2jdbGtihFqtJUYut02X/', 'mail_61577252', 'mengfei0619@126.com', '', '2022-05-08 08:46:11', '', 0, '匿名用户'),
(22, 'mail_33793949', '$P$BTQTqt2KDn29fxpp/9fNRkgJpGyl8C.', 'mail_33793949', '806454399@qq.com', '', '2022-05-24 07:38:28', '', 0, '匿名用户'),
(23, 'mail_78783589', '$P$B04nc8gIrcPIpWUgigkVDXY8m1uYSv.', 'mail_78783589', 'ouvrard.l@outlook.com', '', '2022-06-18 20:24:26', '', 0, '匿名用户'),
(24, 'mail_92997030', '$P$B2OFvs16Cu0bXKiBu8ff//Uq/RSycb/', 'mail_92997030', 'ali15377490000@aliyun.com', '', '2022-07-01 14:20:40', '', 0, '匿名用户'),
(25, 'mail_44059241', '$P$BALAiPW.PPBhP1/nldh7iwrYp/3zVH.', 'mail_44059241', 'kenso34911047@gmail.com', '', '2022-07-04 17:52:36', '', 0, '匿名用户'),
(26, 'mail_69091110', '$P$BSiZq07KC9AxP4GGB84wkAETESgejX/', 'mail_69091110', '1587688408@qq.com', '', '2022-07-13 14:57:38', '', 0, '匿名用户'),
(27, 'mail_93609412', '$P$BQlh/NnlDA.DUd1e9muGWOR3CkAmel1', 'mail_93609412', '798587704@qq.com', '', '2022-08-07 08:40:45', '', 0, 'GeekMai'),
(28, 'mail_23857905', '$P$BbBZIgZcTyRS3xa1otUlcpSnUSjAAN.', 'mail_23857905', 'zxsxzt@foxmail.com', '', '2022-09-02 08:00:21', '', 0, '匿名用户'),
(29, 'mail_70657029', '$P$BR.rdnI61RHiiDV0GH/bz1j20a5LKe/', 'mail_70657029', '200688523@qq.com', '', '2022-09-21 03:06:26', '', 0, '匿名用户'),
(30, 'mail_37943792', '$P$BG3NEx/K8hqgcAdCyHS3nC0b5Uy5fk1', 'mail_37943792', '858851768@qq.com', '', '2022-09-29 03:12:54', '', 0, '匿名用户');

-- --------------------------------------------------------

--
-- 表的结构 `wp_wppay_cdk`
--

CREATE TABLE `wp_wppay_cdk` (
  `id` int(11) NOT NULL,
  `code` varchar(50) DEFAULT NULL COMMENT '卡密优惠码',
  `code_type` tinyint(4) NOT NULL DEFAULT 0 COMMENT '0 无 1卡密 2优惠券',
  `create_time` int(11) NOT NULL DEFAULT 0 COMMENT '创建时间',
  `end_time` int(11) DEFAULT 0 COMMENT '到期时间',
  `apply_time` int(11) DEFAULT 0 COMMENT '使用时间',
  `money` double(10,2) DEFAULT 0.00 COMMENT '面值金额',
  `status` tinyint(4) NOT NULL DEFAULT 0 COMMENT '状态：0未使用 1已使用 -1软删除'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 表的结构 `wp_wppay_down_log`
--

CREATE TABLE `wp_wppay_down_log` (
  `id` int(11) NOT NULL,
  `user_id` int(11) DEFAULT NULL COMMENT '用户id',
  `post_id` int(11) DEFAULT NULL COMMENT '下载文章ID',
  `ip` varchar(255) DEFAULT NULL COMMENT 'IP地址',
  `create_time` int(11) DEFAULT 0 COMMENT '下载时间'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- 转存表中的数据 `wp_wppay_down_log`
--

INSERT INTO `wp_wppay_down_log` (`id`, `user_id`, `post_id`, `ip`, `create_time`) VALUES
(1, 1, 64, '124.91.208.118', 1635967803),
(2, 1, 64, '124.91.208.118', 1635967808),
(3, 1, 64, '124.91.208.118', 1635967813),
(4, 1, 64, '124.91.208.118', 1635967818),
(5, 1, 64, '124.91.208.118', 1635967819),
(6, 1, 64, '124.91.208.118', 1635967819),
(7, 1, 64, '124.91.208.118', 1635967819),
(8, 1, 64, '124.91.208.118', 1635967819),
(9, 1, 64, '124.91.208.118', 1635967819),
(10, 2, 64, '124.91.208.118', 1635967857),
(11, 0, 64, '124.91.208.118', 1635967867),
(12, 0, 64, '124.91.208.118', 1635967871),
(13, 0, 64, '119.167.234.96', 1635967873),
(14, 0, 64, '119.167.234.96', 1635967875),
(15, 0, 64, '119.167.234.96', 1635967875),
(16, 0, 64, '119.167.234.96', 1635967876),
(17, 0, 64, '119.167.234.96', 1635967876),
(18, 0, 64, '119.167.234.96', 1635967877),
(19, 0, 64, '124.91.208.118', 1635968249);

-- --------------------------------------------------------

--
-- 表的结构 `wp_wppay_mpwx_log`
--

CREATE TABLE `wp_wppay_mpwx_log` (
  `id` int(11) NOT NULL,
  `scene_id` int(11) DEFAULT 0 COMMENT 'scene_id',
  `create_time` int(11) DEFAULT 0 COMMENT '创建时间',
  `openid` varchar(255) DEFAULT NULL COMMENT 'OPENID'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 表的结构 `wp_wppay_msg_log`
--

CREATE TABLE `wp_wppay_msg_log` (
  `id` int(11) NOT NULL,
  `uid` int(11) DEFAULT NULL COMMENT '发送人',
  `msg` text NOT NULL COMMENT '消息内容',
  `time` int(11) DEFAULT NULL COMMENT '创建时间',
  `to_uid` int(11) DEFAULT NULL COMMENT '发送给',
  `to_msg` text NOT NULL COMMENT '回复内容',
  `to_time` int(11) DEFAULT NULL COMMENT '已读/回复时间',
  `to_status` int(11) DEFAULT 0 COMMENT '回复状态：0 未读，1已读， 2已回复',
  `type` int(11) DEFAULT 0 COMMENT '消息类型：0 系统通知，1工单， 2私信'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- 表的结构 `wp_wppay_order`
--

CREATE TABLE `wp_wppay_order` (
  `id` int(11) NOT NULL,
  `user_id` int(11) DEFAULT NULL COMMENT '用户id',
  `post_id` int(11) DEFAULT NULL COMMENT '关联文章id',
  `order_num` varchar(50) DEFAULT NULL COMMENT '本地订单号',
  `order_price` double(10,2) DEFAULT NULL COMMENT '订单价格',
  `order_type` tinyint(4) DEFAULT 0 COMMENT '订单类型；0为止；1文章；2会员',
  `pay_type` tinyint(4) DEFAULT 0 COMMENT '支付类型；0无；1支付宝；2微信',
  `create_time` int(11) DEFAULT NULL COMMENT '创建时间',
  `pay_time` int(11) DEFAULT NULL COMMENT '支付时间',
  `pay_num` varchar(50) DEFAULT NULL COMMENT '支付订单号',
  `status` tinyint(4) DEFAULT 0 COMMENT '状态；0 未支付；1已支付；2失效',
  `aff_uid` int(11) DEFAULT 0 COMMENT '推荐人',
  `aff_ratio` double(10,2) DEFAULT NULL COMMENT '佣金比例',
  `aff_time` int(11) DEFAULT NULL COMMENT '提现操作时间',
  `aff_status` int(11) DEFAULT 0 COMMENT '推荐状态'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- 转存表中的数据 `wp_wppay_order`
--

INSERT INTO `wp_wppay_order` (`id`, `user_id`, `post_id`, `order_num`, `order_price`, `order_type`, `pay_type`, `create_time`, `pay_time`, `pay_num`, `status`, `aff_uid`, `aff_ratio`, `aff_time`, `aff_status`) VALUES
(1, 2, 64, '211102073347937321366', 899.00, 1, 1, 1635838427, NULL, NULL, 0, 0, 0.05, NULL, 0),
(2, 13, 0, '220213031908679595678', 199.00, 4, 99, 1644765548, NULL, NULL, 0, 0, 0.05, NULL, 0),
(3, 13, 0, '220213031913428496841', 199.00, 4, 1, 1644765553, NULL, NULL, 0, 0, 0.05, NULL, 0),
(4, 13, 0, '220213031919281527957', 199.00, 4, 1, 1644765559, NULL, NULL, 0, 0, 0.05, NULL, 0),
(5, 14, 64, '220215060740701895768', 899.00, 1, 1, 1644905260, NULL, NULL, 0, 0, 0.05, NULL, 0),
(6, 14, 64, '220215060746499275249', 899.00, 1, 99, 1644905266, NULL, NULL, 0, 0, 0.05, NULL, 0),
(7, 21, 64, '220508084658527591782', 899.00, 1, 1, 1651999618, NULL, NULL, 0, 0, 0.05, NULL, 0),
(8, 22, 0, '220527024225204241115', 99.00, 3, 1, 1653619345, NULL, NULL, 0, 0, 0.05, NULL, 0),
(9, 22, 64, '220527024308943100784', 899.00, 1, 1, 1653619388, NULL, NULL, 0, 0, 0.05, NULL, 0),
(10, 22, 64, '220530060458627842856', 899.00, 1, 1, 1653890698, NULL, NULL, 0, 0, 0.05, NULL, 0),
(11, 22, 0, '220530060901826400251', 99.00, 3, 1, 1653890941, NULL, NULL, 0, 0, 0.05, NULL, 0),
(12, 22, 64, '220531082009937998385', 899.00, 1, 1, 1653985209, NULL, NULL, 0, 0, 0.05, NULL, 0),
(13, 22, 64, '220614074657723663120', 899.00, 1, 1, 1655192817, NULL, NULL, 0, 0, 0.05, NULL, 0),
(14, 22, 0, '220614074731540886953', 99.00, 3, 1, 1655192851, NULL, NULL, 0, 0, 0.05, NULL, 0),
(15, 22, 0, '220614074736281573560', 99.00, 3, 99, 1655192856, NULL, NULL, 0, 0, 0.05, NULL, 0),
(16, 22, 0, '220614075150829610880', 99.00, 3, 99, 1655193110, NULL, NULL, 0, 0, 0.05, NULL, 0),
(17, 22, 64, '220622080311666900394', 899.00, 1, 1, 1655884991, NULL, NULL, 0, 0, 0.05, NULL, 0),
(18, 22, 0, '220622080437137624843', 99.00, 3, 1, 1655885077, NULL, NULL, 0, 0, 0.05, NULL, 0),
(19, 22, 64, '220624085458719695318', 899.00, 1, 1, 1656060898, NULL, NULL, 0, 0, 0.05, NULL, 0),
(20, 22, 64, '220627025854185726808', 899.00, 1, 1, 1656298734, NULL, NULL, 0, 0, 0.05, NULL, 0),
(21, 1, 100, '220817051056735583755', 0.10, 1, 1, 1660756256, NULL, NULL, 0, 0, 0.20, NULL, 0),
(22, 1, 100, '220817054051400969649', 0.10, 1, 1, 1660758051, NULL, NULL, 0, 0, 0.20, NULL, 0);

--
-- 转储表的索引
--

--
-- 表的索引 `wp_ap_activity`
--
ALTER TABLE `wp_ap_activity`
  ADD PRIMARY KEY (`activity_id`),
  ADD KEY `activity_q_id` (`activity_q_id`),
  ADD KEY `activity_a_id` (`activity_a_id`),
  ADD KEY `activity_user_id` (`activity_user_id`);

--
-- 表的索引 `wp_ap_notifications`
--
ALTER TABLE `wp_ap_notifications`
  ADD PRIMARY KEY (`noti_id`);

--
-- 表的索引 `wp_ap_qameta`
--
ALTER TABLE `wp_ap_qameta`
  ADD PRIMARY KEY (`post_id`);

--
-- 表的索引 `wp_ap_reputations`
--
ALTER TABLE `wp_ap_reputations`
  ADD PRIMARY KEY (`rep_id`),
  ADD KEY `rep_user_id` (`rep_user_id`),
  ADD KEY `rep_ref_id` (`rep_ref_id`);

--
-- 表的索引 `wp_ap_reputation_events`
--
ALTER TABLE `wp_ap_reputation_events`
  ADD PRIMARY KEY (`rep_events_id`),
  ADD UNIQUE KEY `slug` (`slug`),
  ADD KEY `slug_key` (`slug`),
  ADD KEY `points_key` (`points`),
  ADD KEY `parent_key` (`parent`);

--
-- 表的索引 `wp_ap_subscribers`
--
ALTER TABLE `wp_ap_subscribers`
  ADD PRIMARY KEY (`subs_id`),
  ADD KEY `subs_user_id` (`subs_user_id`),
  ADD KEY `subs_ref_id` (`subs_ref_id`);

--
-- 表的索引 `wp_ap_views`
--
ALTER TABLE `wp_ap_views`
  ADD PRIMARY KEY (`view_id`),
  ADD KEY `view_user_id` (`view_user_id`);

--
-- 表的索引 `wp_ap_votes`
--
ALTER TABLE `wp_ap_votes`
  ADD PRIMARY KEY (`vote_id`),
  ADD KEY `vote_post_id` (`vote_post_id`);

--
-- 表的索引 `wp_commentmeta`
--
ALTER TABLE `wp_commentmeta`
  ADD PRIMARY KEY (`meta_id`),
  ADD KEY `comment_id` (`comment_id`),
  ADD KEY `meta_key` (`meta_key`(191));

--
-- 表的索引 `wp_comments`
--
ALTER TABLE `wp_comments`
  ADD PRIMARY KEY (`comment_ID`),
  ADD KEY `comment_post_ID` (`comment_post_ID`),
  ADD KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  ADD KEY `comment_date_gmt` (`comment_date_gmt`),
  ADD KEY `comment_parent` (`comment_parent`),
  ADD KEY `comment_author_email` (`comment_author_email`(10));

--
-- 表的索引 `wp_links`
--
ALTER TABLE `wp_links`
  ADD PRIMARY KEY (`link_id`),
  ADD KEY `link_visible` (`link_visible`);

--
-- 表的索引 `wp_options`
--
ALTER TABLE `wp_options`
  ADD PRIMARY KEY (`option_id`),
  ADD UNIQUE KEY `option_name` (`option_name`),
  ADD KEY `autoload` (`autoload`);

--
-- 表的索引 `wp_pmr_status`
--
ALTER TABLE `wp_pmr_status`
  ADD PRIMARY KEY (`id`);

--
-- 表的索引 `wp_postmeta`
--
ALTER TABLE `wp_postmeta`
  ADD PRIMARY KEY (`meta_id`),
  ADD KEY `post_id` (`post_id`),
  ADD KEY `meta_key` (`meta_key`(191));

--
-- 表的索引 `wp_posts`
--
ALTER TABLE `wp_posts`
  ADD PRIMARY KEY (`ID`),
  ADD KEY `post_name` (`post_name`(191)),
  ADD KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  ADD KEY `post_parent` (`post_parent`),
  ADD KEY `post_author` (`post_author`);

--
-- 表的索引 `wp_termmeta`
--
ALTER TABLE `wp_termmeta`
  ADD PRIMARY KEY (`meta_id`),
  ADD KEY `term_id` (`term_id`),
  ADD KEY `meta_key` (`meta_key`(191));

--
-- 表的索引 `wp_terms`
--
ALTER TABLE `wp_terms`
  ADD PRIMARY KEY (`term_id`),
  ADD KEY `slug` (`slug`(191)),
  ADD KEY `name` (`name`(191));

--
-- 表的索引 `wp_term_relationships`
--
ALTER TABLE `wp_term_relationships`
  ADD PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  ADD KEY `term_taxonomy_id` (`term_taxonomy_id`);

--
-- 表的索引 `wp_term_taxonomy`
--
ALTER TABLE `wp_term_taxonomy`
  ADD PRIMARY KEY (`term_taxonomy_id`),
  ADD UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  ADD KEY `taxonomy` (`taxonomy`);

--
-- 表的索引 `wp_usermeta`
--
ALTER TABLE `wp_usermeta`
  ADD PRIMARY KEY (`umeta_id`),
  ADD KEY `user_id` (`user_id`),
  ADD KEY `meta_key` (`meta_key`(191));

--
-- 表的索引 `wp_users`
--
ALTER TABLE `wp_users`
  ADD PRIMARY KEY (`ID`),
  ADD KEY `user_login_key` (`user_login`),
  ADD KEY `user_nicename` (`user_nicename`),
  ADD KEY `user_email` (`user_email`);

--
-- 表的索引 `wp_wppay_cdk`
--
ALTER TABLE `wp_wppay_cdk`
  ADD PRIMARY KEY (`id`),
  ADD KEY `code_index` (`code`) COMMENT '优惠码索引';

--
-- 表的索引 `wp_wppay_down_log`
--
ALTER TABLE `wp_wppay_down_log`
  ADD PRIMARY KEY (`id`);

--
-- 表的索引 `wp_wppay_mpwx_log`
--
ALTER TABLE `wp_wppay_mpwx_log`
  ADD PRIMARY KEY (`id`);

--
-- 表的索引 `wp_wppay_msg_log`
--
ALTER TABLE `wp_wppay_msg_log`
  ADD PRIMARY KEY (`id`);

--
-- 表的索引 `wp_wppay_order`
--
ALTER TABLE `wp_wppay_order`
  ADD PRIMARY KEY (`id`);

--
-- 在导出的表使用AUTO_INCREMENT
--

--
-- 使用表AUTO_INCREMENT `wp_ap_activity`
--
ALTER TABLE `wp_ap_activity`
  MODIFY `activity_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;

--
-- 使用表AUTO_INCREMENT `wp_ap_notifications`
--
ALTER TABLE `wp_ap_notifications`
  MODIFY `noti_id` bigint(20) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;

--
-- 使用表AUTO_INCREMENT `wp_ap_reputations`
--
ALTER TABLE `wp_ap_reputations`
  MODIFY `rep_id` bigint(20) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=36;

--
-- 使用表AUTO_INCREMENT `wp_ap_reputation_events`
--
ALTER TABLE `wp_ap_reputation_events`
  MODIFY `rep_events_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;

--
-- 使用表AUTO_INCREMENT `wp_ap_subscribers`
--
ALTER TABLE `wp_ap_subscribers`
  MODIFY `subs_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=6;

--
-- 使用表AUTO_INCREMENT `wp_ap_views`
--
ALTER TABLE `wp_ap_views`
  MODIFY `view_id` bigint(20) NOT NULL AUTO_INCREMENT;

--
-- 使用表AUTO_INCREMENT `wp_ap_votes`
--
ALTER TABLE `wp_ap_votes`
  MODIFY `vote_id` bigint(20) NOT NULL AUTO_INCREMENT;

--
-- 使用表AUTO_INCREMENT `wp_commentmeta`
--
ALTER TABLE `wp_commentmeta`
  MODIFY `meta_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT;

--
-- 使用表AUTO_INCREMENT `wp_comments`
--
ALTER TABLE `wp_comments`
  MODIFY `comment_ID` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=125;

--
-- 使用表AUTO_INCREMENT `wp_links`
--
ALTER TABLE `wp_links`
  MODIFY `link_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=94;

--
-- 使用表AUTO_INCREMENT `wp_options`
--
ALTER TABLE `wp_options`
  MODIFY `option_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=247798;

--
-- 使用表AUTO_INCREMENT `wp_pmr_status`
--
ALTER TABLE `wp_pmr_status`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- 使用表AUTO_INCREMENT `wp_postmeta`
--
ALTER TABLE `wp_postmeta`
  MODIFY `meta_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1622;

--
-- 使用表AUTO_INCREMENT `wp_posts`
--
ALTER TABLE `wp_posts`
  MODIFY `ID` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=205;

--
-- 使用表AUTO_INCREMENT `wp_termmeta`
--
ALTER TABLE `wp_termmeta`
  MODIFY `meta_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=249;

--
-- 使用表AUTO_INCREMENT `wp_terms`
--
ALTER TABLE `wp_terms`
  MODIFY `term_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=54;

--
-- 使用表AUTO_INCREMENT `wp_term_taxonomy`
--
ALTER TABLE `wp_term_taxonomy`
  MODIFY `term_taxonomy_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=54;

--
-- 使用表AUTO_INCREMENT `wp_usermeta`
--
ALTER TABLE `wp_usermeta`
  MODIFY `umeta_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=639;

--
-- 使用表AUTO_INCREMENT `wp_users`
--
ALTER TABLE `wp_users`
  MODIFY `ID` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=31;

--
-- 使用表AUTO_INCREMENT `wp_wppay_cdk`
--
ALTER TABLE `wp_wppay_cdk`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- 使用表AUTO_INCREMENT `wp_wppay_down_log`
--
ALTER TABLE `wp_wppay_down_log`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=20;

--
-- 使用表AUTO_INCREMENT `wp_wppay_mpwx_log`
--
ALTER TABLE `wp_wppay_mpwx_log`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- 使用表AUTO_INCREMENT `wp_wppay_msg_log`
--
ALTER TABLE `wp_wppay_msg_log`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- 使用表AUTO_INCREMENT `wp_wppay_order`
--
ALTER TABLE `wp_wppay_order`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=23;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
